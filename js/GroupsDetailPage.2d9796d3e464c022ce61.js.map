{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/Routes/Canaries/Canaries.js","webpack://insights-frontend-starter-app/./src/components/DeviceDetail.js","webpack://insights-frontend-starter-app/./src/store/deviceDetail.js","webpack://insights-frontend-starter-app/./src/Routes/DeviceDetail/DeviceDetail.js","webpack://insights-frontend-starter-app/./src/Routes/Devices/Devices.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetailInfo.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/addDeviceSchema.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetail.js"],"names":["GeneralInformation","lazy","writePermissions","useSelector","permissionsReducer","Suspense","fallback","store","useStore","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","title","name","component","GeneralInformationTab","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","register","systemProfileStore","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","className","InventoryDetailHead","hideBack","hideInvDrawer","Main","Grid","gutter","GridItem","span","AppInfo","inventory","useRef","history","useHistory","dispatch","useDispatch","cleanEntities","Fragment","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","onRowClick","_e","id","push","mergeWithEntities","GroupsInfo","isDevicesInfoLoading","groupDevicesInfoReducer","isLoading","devicesInfo","loadGroupDevicesInfo","hasGutter","Card","CardHeader","Title","headingLevel","CardBody","TextContent","TextList","TextListVariants","TextListItem","T","TextListItemVariants","Text","TextVariants","total","newDevices","offlineDevices","deliveringDevices","Bullseye","propTypes","PropTypes","fields","INVENTORY_TABLE","InventoryForm","defaultFilters","label","value","version","status","useState","isAddDeviceOpen","setIsAddDeviceOpen","getEntities","setGetEntities","unregister","setUnregister","activeFilters","setActiveFilters","items","devices","map","shallowEqual","registered","loadGroupsDetail","routes","Stack","StackItem","GroupsDetailInfo","isFilled","InventoryTable","page","hideFilters","all","_items","config","groupsDetail","results","hasItems","data","system","find","filterConfig","filterValues","key","onChange","event","type","statusMapper","item","charAt","toUpperCase","slice","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","onDelete","itemsToRemove","isAll","onDeleteFilter","INVENTORY_ACTION_TYPES","api","systemsList","Button","onClick","selectedSystems","schema","isOpened","onAction","isSubmit","values","updateGroup","systemIDs","selected"],"mappings":"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","file":"js/GroupsDetailPage.2d9796d3e464c022ce61.js","sourcesContent":["import React from 'react';\n\nconst Canaries = () => <div>Canaries page</div>;\n\nexport default Canaries;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  AppInfo,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={uuid ? `/groups` : '/devices'}>\n              {uuid ? 'Groups' : 'Devices'}\n            </Link>\n          </BreadcrumbItem>\n          {uuid && (\n            <BreadcrumbItem>\n              {groupName ? (\n                <Link to={`/groups/${uuid}`}>{groupName}</Link>\n              ) : (\n                <Skeleton size={SkeletonSize.xs} />\n              )}\n            </BreadcrumbItem>\n          )}\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead fallback=\"\" hideBack showTags hideInvDrawer />\n      </PageHeader>\n      <Main>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <AppInfo showTags fallback=\"\" />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React, { Fragment, useRef, useEffect, useContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useHistory } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\n\nconst Devices = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    return () => dispatch(cleanEntities());\n  }, []);\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Available devices\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n          }}\n          onRowClick={(_e, id) => history.push(`/devices/${id}`)}\n          onLoad={({ mergeWithEntities }) => {\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Title,\n  Bullseye,\n  TextContent,\n  Text,\n  TextVariants,\n  TextListItem,\n  Skeleton,\n  TextListItemVariants,\n  TextList,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadGroupDevicesInfo } from '../../store/actions';\n\nconst GroupsInfo = ({ uuid }) => {\n  const dispatch = useDispatch();\n  const isDevicesInfoLoading = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.devicesInfo\n  );\n  useEffect(() => {\n    dispatch(loadGroupDevicesInfo());\n  }, []);\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      {devicesInfo?.total}\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  <Text component={TextVariants.h3}>Total devices</Text>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.newDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  New devices added\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.offlineDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices offline\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.deliveringDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={6}>\n        <Card className=\"edge-groups--detail__complex\">\n          <CardHeader>\n            <Grid>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Canary parameters</Title>\n              </GridItem>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Last Canaries</Title>\n              </GridItem>\n            </Grid>\n          </CardHeader>\n          <CardBody>\n            <Grid hasGutter>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">\n                  <Bullseye>\n                    <TextContent>\n                      <Text component={TextVariants.h1}>\n                        <Bullseye>10% (89)</Bullseye>\n                      </Text>\n                      <Text component={TextVariants.h4}>\n                        <Bullseye>Of systems tested</Bullseye>\n                      </Text>\n                    </TextContent>\n                  </Bullseye>\n                </Title>\n              </GridItem>\n              <GridItem span={6}></GridItem>\n            </Grid>\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nGroupsInfo.propTypes = {\n  uuid: PropTypes.string,\n};\n\nexport default GroupsInfo;\n","import { INVENTORY_TABLE } from '../../components/form';\n\nexport default {\n  fields: [\n    {\n      component: INVENTORY_TABLE,\n      name: 'select-system',\n    },\n  ],\n};\n","import React, {\n  Fragment,\n  useEffect,\n  useRef,\n  Suspense,\n  lazy,\n  useState,\n  useContext,\n} from 'react';\nimport { useParams, Link, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Skeleton,\n  Stack,\n  StackItem,\n  Button,\n} from '@patternfly/react-core';\nimport { routes } from '../../../package.json';\nimport { loadGroupsDetail, cleanEntities } from '../../store/actions';\nimport {\n  groupsDetailReducer,\n  groupDevicesInfoReducer,\n} from '../../store/reducers';\nimport GroupsDetailInfo from './GroupsDetailInfo';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { systemsList } from '../../store/groupsDetail';\nconst InventoryForm = lazy(() => import('../../components/InventoryForm'));\nimport schema from './addDeviceSchema';\nimport { groupsDetail, updateGroup } from '../../api';\nimport {\n  statusMapper,\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { RegistryContext } from '../../store';\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    value: '',\n  },\n  version: {\n    label: 'Version',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    value: [],\n  },\n};\n\nconst GroupsDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isAddDeviceOpen, setIsAddDeviceOpen] = useState(false);\n  const [getEntities, setGetEntities] = useState();\n  const [unregister, setUnregister] = useState();\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const history = useHistory();\n  const inventory = useRef(null);\n  const { uuid } = useParams();\n  const dispatch = useDispatch();\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name || ''\n  );\n  const isLoading = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.isLoading\n  );\n\n  const items = useSelector(\n    ({ groupsDetailReducer }) =>\n      groupsDetailReducer?.devices?.map(({ uuid, ...rest }) => ({\n        id: uuid,\n        ...rest,\n      })),\n    shallowEqual\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      groupsDetailReducer,\n      groupDevicesInfoReducer,\n    });\n    dispatch(loadGroupsDetail(uuid));\n    return () => {\n      registered?.();\n      unregister?.();\n      dispatch(cleanEntities());\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={routes.groups}>Groups</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            {isLoading === false ? groupName : <Skeleton />}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      </PageHeader>\n      <Main className=\"edge-groups--detail\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups--detail__info\">\n            <GroupsDetailInfo uuid={uuid} />\n          </StackItem>\n          <StackItem isFilled>\n            <InventoryTable\n              ref={inventory}\n              page={1}\n              tableProps={{\n                canSelectAll: false,\n              }}\n              hideFilters={{ all: true }}\n              getEntities={async (_items, config) => {\n                const { results } = await groupsDetail(uuid, {});\n                const data = await getEntities?.(\n                  (results || []).map(({ uuid }) => uuid),\n                  {\n                    ...config,\n                    hasItems: true,\n                  },\n                  false\n                );\n                return {\n                  ...data,\n                  results: data.results.map((system) => ({\n                    ...system,\n                    ...results.find(({ uuid }) => uuid === system.id),\n                  })),\n                };\n              }}\n              filterConfig={{\n                items: [\n                  {\n                    label: activeFilters?.name?.label,\n                    filterValues: {\n                      key: 'text-filter',\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...activeFilters,\n                          name: {\n                            ...(activeFilters?.name || {}),\n                            value,\n                          },\n                        })),\n                      value: activeFilters?.name?.value || '',\n                    },\n                  },\n                  {\n                    label: activeFilters?.version?.label,\n                    type: 'checkbox',\n                    filterValues: {\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...(activeFilters || {}),\n                          version: {\n                            ...(activeFilters?.version || {}),\n                            value,\n                          },\n                        })),\n                      value: activeFilters?.version?.value || [],\n                      items: [\n                        {\n                          label: 'All versions',\n                          value: 'all',\n                        },\n                      ],\n                    },\n                  },\n                  {\n                    label: activeFilters?.status?.label,\n                    type: 'checkbox',\n                    filterValues: {\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...(activeFilters || {}),\n                          status: {\n                            ...(activeFilters?.status || {}),\n                            value,\n                          },\n                        })),\n                      items: statusMapper.map((item) => ({\n                        value: item,\n                        label: `${item.charAt(0).toUpperCase()}${item.slice(\n                          1\n                        )}`,\n                      })),\n                      value: activeFilters?.status?.value || [],\n                    },\n                  },\n                ],\n              }}\n              activeFiltersConfig={{\n                ...(isEmptyFilters(activeFilters) && {\n                  filters: constructActiveFilters(activeFilters),\n                }),\n                onDelete: (event, itemsToRemove, isAll) => {\n                  if (isAll) {\n                    setActiveFilters(defaultFilters);\n                  } else {\n                    setActiveFilters(() =>\n                      onDeleteFilter(activeFilters, itemsToRemove)\n                    );\n                  }\n                },\n              }}\n              onRowClick={(_e, id) => history.push(`/groups/${uuid}/${id}`)}\n              onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                setGetEntities(() => api?.getEntities);\n                setUnregister(() =>\n                  getRegistry().register({\n                    ...mergeWithEntities(systemsList(INVENTORY_ACTION_TYPES)),\n                  })\n                );\n              }}\n            >\n              <Button onClick={() => setIsAddDeviceOpen(true)}>\n                Add device\n              </Button>\n            </InventoryTable>\n          </StackItem>\n        </Stack>\n      </Main>\n      {isAddDeviceOpen && (\n        <Suspense fallback=\"\">\n          <InventoryForm\n            selectedSystems={items}\n            schema={schema}\n            isOpened={isAddDeviceOpen}\n            title=\"Add new device\"\n            onAction={(isSubmit, values) => {\n              if (isSubmit) {\n                (async () => {\n                  await updateGroup({\n                    uuid,\n                    systemIDs: values.selected,\n                  });\n                  dispatch(loadGroupsDetail(uuid));\n                  inventory.current.onRefreshData();\n                })();\n              }\n              setIsAddDeviceOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default GroupsDetail;\n"],"sourceRoot":""}