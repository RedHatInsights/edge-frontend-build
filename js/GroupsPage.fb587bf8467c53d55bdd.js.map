{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/store/action-types.js","webpack://insights-frontend-starter-app/./src/constants.js","webpack://insights-frontend-starter-app/./src/api/index.js","webpack://insights-frontend-starter-app/./src/store/groups.js","webpack://insights-frontend-starter-app/./src/store/threshold.js","webpack://insights-frontend-starter-app/./src/store/devicesInfo.js","webpack://insights-frontend-starter-app/./src/store/canariesInfo.js","webpack://insights-frontend-starter-app/./src/components/StatusIcon.js","webpack://insights-frontend-starter-app/./src/components/SecureIcon.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsInfo.js","webpack://insights-frontend-starter-app/./src/store/actions.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsTable.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/Groups.js"],"names":["LOAD_GROUPS","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","asyncActions","flatMap","a","keyBy","k","statusMapper","statusToIcon","done","icon","CheckCircleIcon","color","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","randomNumber","min","max","Math","round","random","randomString","toString","substr","randomDate","offset","Date","floor","randomStatus","length","rowCreator","uuid","replace","c","r","name","sensors","is_secure","Boolean","last_seen","status","fetchGroups","perPage","currPage","page","currPerPage","insights","chrome","auth","getUser","then","results","Array","map","meta","count","limit","applyReducerHash","state","groups","isLoading","payload","threshold","devicesInfo","canariesInfo","StatusIcon","props","Icon","propTypes","PropTypes","SecureIcon","isSecure","LockIcon","LockOpenIcon","defaultProps","dispatch","useDispatch","useSelector","thresholdReducer","isThresholdLoading","isDevicesInfoLoading","devicesInfoReducer","canariesInfoReducer","isCanariesInfoLoading","useEffect","sections","rest","getRegistry","register","type","Promise","resolve","currPercent","requiredApproval","orphaned","delivering","time","scanners","kiosks","antenna","Grid","hasGutter","GridItem","span","Card","CardHeader","Title","headingLevel","CardBody","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","legendOrientation","legendPosition","height","width","data","item","x","Object","keys","y","values","legendData","padding","bottom","left","right","top","labels","datum","themeColor","ChartThemeColor","Bullseye","Spinner","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","Link","to","Skeleton","Level","LevelItem","DateFormat","date","columns","title","transforms","sortable","cellWidth","useState","sortBy","setSortBy","groupsReducer","Table","aria-label","actions","onClick","console","log","cells","onSort","_e","index","direction","rows","group","TableHeader","TableBody","activeFilters","setActiveFilters","loadGroups","Fragment","PageHeader","className","Main","Stack","StackItem","isFilled","PrimaryToolbar","pagination","itemCount","Number","isCompact","dedicatedAction","Button","isDisabled","filterConfig","items","label","filterValues","key","onChange","event","value","placeholder","security","charAt","toUpperCase","slice","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","dropDirection"],"mappings":"wRAGaA,EAAc,cAEdC,EAAgB,gBAChBC,EAAoB,oBACpBC,EAAqB,qBAE5BC,E,MAAeC,GACnB,CACEL,EAP6B,oBAS7BC,EACAC,EACAC,IAEF,SAACG,GAAD,MAAO,CAACA,EAAD,UAAOA,EAAP,sBAAuBA,EAAvB,wBAAyCA,EAAzC,iB,GAEmBC,IAAMH,GAAc,SAACI,GAAD,OAAOA,K,yICJ1CC,EAAe,CAC1B,OACA,QACA,UACA,UACA,WACA,UACA,gBAGWC,EAAe,CAC1BC,KAAM,CAAEC,KAAMC,UAAiBC,MAAOC,WACtCC,MAAO,CAAEJ,KAAMK,UAAuBH,MAAOI,WAC7CC,QAAS,CAAEP,KAAMQ,MACjBC,SAAU,CAAET,KAAMU,MAClBC,QAAS,CAAEX,KAAMY,MACjBC,QAAS,CAAEb,KAAMc,UAAyBZ,MAAOa,WACjDC,aAAc,CAAEhB,KAAMiB,UAAUf,MAAOgB,YC9BnCC,EAAe,SAACC,EAAKC,GAAN,OACnBC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,IACrCK,EAAe,kBAAMH,KAAKE,SAASE,SAAS,IAAIC,OAAO,EAAG,KAE1DC,EAAa,eAACC,EAAD,uDAAU,KAAV,OACjB,IAAIC,MAAM,IAAIA,KAASR,KAAKS,MAAMT,KAAKE,SAAWK,KAQ9CG,EAAe,kBAAMnC,EAAasB,EAAa,EAAGtB,EAAaoC,UAE/DC,EAAa,iBAAO,CACxBC,KARA,uCAAuCC,QAAQ,SAAS,SAACC,GACvD,IAAMC,EAAqB,GAAhBhB,KAAKE,SAAiB,EACjC,OAAa,KAALa,EAAWC,EAAS,EAAJA,EAAW,GAAKZ,SAAS,OAOnDa,KAAMd,IACNe,QAASrB,EAAa,EAAG,KACzBsB,UAhBuBC,QAAQpB,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAiBhEmB,UAAWf,IACXgB,OAAQZ,MAGGa,EAAc,SAAC,GAAsB,IAApBC,EAAoB,EAApBA,QACtBC,EAD0C,EAAXC,MACZ,EACnBC,EAAcH,GAAW,GAC/B,OAAOI,SAASC,OAAOC,KAAKC,UAAUC,MAAK,iBAAO,CAChDC,QAAS,IAAI,IAAIC,MAAMV,IAAUW,IAAIvB,GACrCwB,KAAM,CACJC,MAAO,IACPC,MAAOX,EAAcF,EACrBlB,OAAQoB,GAAeF,EAAW,S,ulBCjBxC,SAAec,SAAgB,qBAEvBzE,EAFuB,aAZL,SAAC0E,GAAD,cACrBA,GADqB,IAExBC,OAAQ,GACRC,WAAW,OASkB,gBAGvB5E,EAHuB,eAPH,SAAC0E,EAAD,OAAUG,EAAV,EAAUA,QAAV,cACvBH,GADuB,IAE1BE,WAAW,EACXD,QAAQE,aAAA,EAAAA,EAASV,UAAW,GAC5BG,MAAMO,aAAA,EAAAA,EAASP,OAAQ,QAGM,GAdV,I,ukBCarB,SAAeG,SAAgB,SAAC,YAExBxE,EAFuB,aAXF,SAACyE,GAAD,SAAC,KACzBA,GADwB,IAE3BI,UAAW,GACXF,WAAW,OAQkB,IAAC,YAGxB3E,EAHuB,eANA,SAACyE,EAAD,OAAUG,EAAV,EAAUA,QAAV,SAAC,KAC3BH,GAD0B,IAE7BI,UAAWD,aAAF,EAAEA,EAASV,QACpBS,WAAW,OAGkB,GAbV,I,ukBCarB,SAAeH,SAAgB,SAAC,YAExBvE,EAFuB,aAXA,SAACwE,GAAD,SAAC,KAC3BA,GAD0B,IAE7BK,YAAa,GACbH,WAAW,OAQkB,IAAC,YAGxB1E,EAHuB,eANE,SAACwE,EAAD,OAAUG,EAAV,EAAUA,QAAV,SAAC,KAC7BH,GAD4B,IAE/BK,YAAaF,aAAF,EAAEA,EAASV,QACtBS,WAAW,OAGkB,GAbV,I,2kBCarB,UAAeH,SAAgB,SAAC,YAExBtE,EAFuB,aAXC,SAACuE,GAAD,UAAC,MAC5BA,GAD2B,IAE9BM,aAAc,GACdJ,WAAW,OAQkB,IAAC,YAGxBzE,EAHuB,eANG,SAACuE,EAAD,OAAUG,EAAV,EAAUA,QAAV,UAAC,MAC9BH,GAD6B,IAEhCM,aAAcH,aAAF,EAAEA,EAASV,QACvBS,WAAW,OAGkB,GAbV,I,6XCEfK,GAAa,SAAC,GAAyB,QAAvBzB,EAAuB,EAAvBA,OAAW0B,EAAY,mBACrCC,GAAOzE,SAAA,UAAAA,EAAe8C,UAAf,eAAwB5C,OAAQY,KAC7C,OAAO,kBAAC2D,EAAD,QAAUD,EAAV,CAAiBpE,MAAOJ,SAAF,UAAEA,EAAe8C,UAAjB,aAAE,EAAwB1C,UAGzDmE,GAAWG,UAAY,CACrB5B,OAAQ6B,WAAgB5E,IAG1B,Y,4BCVM6E,GAAa,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,SAAaL,EAAY,qBACvCC,EAAOI,EAAWC,MAAWC,MACnC,OAAO,kBAACN,EAASD,IAGnBI,GAAWF,UAAY,CACrBG,SAAUF,WAGZC,GAAWI,aAAe,CACxBH,UAAU,GAGZ,Y,4BCsOA,SAjNmB,WAAM,oBACjBI,GAAWC,mBACXd,GAAYe,kBAChB,gBAAGC,EAAH,EAAGA,iBAAH,OAA0BA,aAAA,EAAAA,EAAkBhB,YAAa,MAErDiB,GAAqBF,kBACzB,gBAAGC,EAAH,EAAGA,iBAAH,OAA0BA,aAA1B,EAA0BA,EAAkBlB,aAExCoB,GAAuBH,kBAC3B,gBAAGI,EAAH,EAAGA,mBAAH,OAA4BA,aAA5B,EAA4BA,EAAoBrB,aAE5CG,GAAcc,kBAClB,gBAAGI,EAAH,EAAGA,mBAAH,OAA4BA,aAAA,EAAAA,EAAoBlB,cAAe,MAE3DC,GAAea,kBACnB,gBAAGK,EAAH,EAAGA,oBAAH,OAA6BA,aAAA,EAAAA,EAAqBlB,eAAgB,MAE9DmB,GAAwBN,kBAC5B,gBAAGK,EAAH,EAAGA,oBAAH,OAA6BA,aAA7B,EAA6BA,EAAqBtB,aAcpD,OAZAwB,gBAAU,WC7CiB,IR2BrBC,EACFC,GOkBiBC,UAAcC,SAAS,CACxCV,mBACAG,qBACAC,yBAEFP,ECnDgC,CAClCc,KAAMxG,EACN4E,SRyBMwB,EAAWtE,EAAa,EAAG,GAC7BuE,EAAO,IACJI,QAAQC,QAAQ,CACrBxC,QAAS,IAAI,IAAIC,MAAMiC,IAAWhC,KAAI,WACpC,IAAMuC,EAAc7E,EAAa,EAAGuE,GAEpC,OADAA,GAAcM,EACd,OACGvE,IAAiBuE,WOkBtBjB,EC/CkC,CACpCc,KAAMvG,EACN2E,QRkCO6B,QAAQC,QAAQ,CACrBxC,QAAS,CACP0C,iBAAkB9E,EAAa,EAAG,KAClC+E,SAAU/E,EAAa,EAAG,KAC1BgF,WAAYhF,EAAa,EAAG,UOQ9B4D,EC3CmC,CACrCc,KAAMtG,EACN0E,QRuCO6B,QAAQC,QAAQ,CACrBxC,QAAS,CACPf,QAAS,CACP4D,KAAMxE,IACNgB,OAAQZ,KAEVqE,SAAU,CACRD,KAAMxE,IACNgB,OAAQZ,KAEVsE,OAAQ,CACNF,KAAMxE,IACNgB,OAAQZ,KAEVuE,QAAS,CACPH,KAAMxE,IACNgB,OAAQZ,YOZX,IAGD,kBAACwE,GAAA,EAAD,CAAMC,WAAS,GACb,kBAACC,GAAA,EAAD,CAAUC,KAAM,GACd,kBAACC,QAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,SAAD,CAAOC,aAAa,MAApB,qBAEF,kBAACC,YAAD,MAC0B,IAAvB7B,EACC,kBAAC8B,GAAA,GAAD,CACEC,SAAS,mBACTC,UAAU,mBACVC,wBAAwB,EACxBC,kBAAkB,WAClBC,eAAe,QACfC,OAAQ,IACRC,MAAO,IACPC,KAAMvD,EAAUT,KAAI,SAACiE,GAAD,cAAW,CAC7BC,EAAC,UAAEC,OAAOC,KAAKH,UAAd,aAAE,EAAoB,GACvBI,EAAC,UAAEF,OAAOG,OAAOL,UAAhB,aAAE,EAAsB,OAE3BM,WAAY9D,EAAUT,KAAI,SAACiE,GAAD,cAAW,CACnCnF,KAAM,GAAF,iBAAKqF,OAAOC,KAAKH,UAAjB,aAAK,EAAoB,GAAzB,uBACFE,OAAOG,OAAOL,UADZ,aACF,EAAsB,QAG1BO,QAAS,CACPC,OAAQ,GACRC,KAAM,GACNC,MAAO,IACPC,IAAK,IAEPC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,gBAAkBA,EAAMZ,EAAxB,aAA8BY,EAAMT,IAC5CU,WAAYC,qBAGd,kBAACC,GAAA,EAAD,KACE,kBAACC,WAAD,UAMV,kBAACjC,GAAA,EAAD,CAAUC,KAAM,GACd,kBAACC,QAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,SAAD,CAAOC,aAAa,MAApB,iBAEF,kBAACC,YAAD,KACE,kBAAC4B,eAAD,KACE,kBAACC,GAAA,GAAD,CAAUC,UAAWC,UACnB,kBAACC,GAAA,GAAD,CAAcF,UAAWG,WACG,IAAzB7D,EACC,kBAAC8D,QAAD,CAAMJ,UAAWK,oBACf,kBAAC,GAAAC,KAAD,CAAMC,GAAG,WAAWlF,aAApB,EAAoBA,EAAa8B,mBAGnC,kBAACqD,GAAA,EAAD,OAGJ,kBAACN,GAAA,GAAD,CAAcF,UAAWG,UAAzB,sBAGA,kBAACD,GAAA,GAAD,CAAcF,UAAWG,WACG,IAAzB7D,EACC,kBAAC8D,QAAD,CAAMJ,UAAWK,oBACf,kBAAC,GAAAC,KAAD,CAAMC,GAAG,WAAWlF,aAApB,EAAoBA,EAAa+B,WAGnC,kBAACoD,GAAA,EAAD,OAGJ,kBAACN,GAAA,GAAD,CAAcF,UAAWG,UAAzB,oBAGA,kBAACD,GAAA,GAAD,CAAcF,UAAWG,WACG,IAAzB7D,EACC,kBAAC8D,QAAD,CAAMJ,UAAWK,oBACf,kBAAC,GAAAC,KAAD,CAAMC,GAAG,WAAWlF,aAApB,EAAoBA,EAAagC,aAGnC,kBAACmD,GAAA,EAAD,OAGJ,kBAACN,GAAA,GAAD,CAAcF,UAAWG,UAAzB,2BAQV,kBAACvC,GAAA,EAAD,CAAUC,KAAM,GACd,kBAACC,QAAD,KACE,kBAACC,GAAA,EAAD,KACE,kBAACC,SAAD,CAAOC,aAAa,MAApB,kBAEF,kBAACC,YAAD,KACE,kBAAC4B,eAAD,KACE,kBAACC,GAAA,GAAD,CAAUC,UAAWC,UACnB,kBAACC,GAAA,GAAD,CAAcF,UAAWG,UACvB,kBAAC,GAAAG,KAAD,CAAMC,GAAG,WAAT,YAEF,kBAACL,GAAA,GAAD,CAAcF,UAAWG,WACI,IAA1B1D,EACC,kBAACgE,SAAD,KACE,kBAACC,aAAD,KACE,kBAACC,GAAA,EAAD,CAAYC,KAAMtF,SAAF,UAAEA,EAAc5B,eAAhB,aAAE,EAAuB4D,QAE3C,kBAACoD,aAAD,KACE,kBAAC,GAAD,CAAY5G,OAAQwB,SAAF,UAAEA,EAAc5B,eAAhB,aAAE,EAAuBI,WAI/C,kBAAC0G,GAAA,EAAD,OAGJ,kBAACN,GAAA,GAAD,CAAcF,UAAWG,UACvB,kBAAC,GAAAG,KAAD,CAAMC,GAAG,WAAT,aAEF,kBAACL,GAAA,GAAD,CAAcF,UAAWG,WACI,IAA1B1D,EACC,kBAACgE,SAAD,KACE,kBAACC,aAAD,KACE,kBAACC,GAAA,EAAD,CAAYC,KAAMtF,SAAF,UAAEA,EAAciC,gBAAhB,aAAE,EAAwBD,QAE5C,kBAACoD,aAAD,KACE,kBAAC,GAAD,CAAY5G,OAAQwB,SAAF,UAAEA,EAAciC,gBAAhB,aAAE,EAAwBzD,WAIhD,kBAAC0G,GAAA,EAAD,OAGJ,kBAACN,GAAA,GAAD,CAAcF,UAAWG,UACvB,kBAAC,GAAAG,KAAD,CAAMC,GAAG,WAAT,WAEF,kBAACL,GAAA,GAAD,CAAcF,UAAWG,WACI,IAA1B1D,EACC,kBAACgE,SAAD,KACE,kBAACC,aAAD,KACE,kBAACC,GAAA,EAAD,CAAYC,KAAMtF,SAAF,UAAEA,EAAckC,cAAhB,aAAE,EAAsBF,QAE1C,kBAACoD,aAAD,KACE,kBAAC,GAAD,CAAY5G,OAAQwB,SAAF,UAAEA,EAAckC,cAAhB,aAAE,EAAsB1D,WAI9C,kBAAC0G,GAAA,EAAD,OAGJ,kBAACN,GAAA,GAAD,CAAcF,UAAWG,UACvB,kBAAC,GAAAG,KAAD,CAAMC,GAAG,WAAT,YAEF,kBAACL,GAAA,GAAD,CAAcF,UAAWG,WACI,IAA1B1D,EACC,kBAACgE,SAAD,KACE,kBAACC,aAAD,KACE,kBAACC,GAAA,EAAD,CAAYC,KAAMtF,SAAF,UAAEA,EAAcmC,eAAhB,aAAE,EAAuBH,QAE3C,kBAACoD,aAAD,KACE,kBAAC,GAAD,CAAY5G,OAAQwB,SAAF,UAAEA,EAAcmC,eAAhB,aAAE,EAAuB3D,WAI/C,kBAAC0G,GAAA,EAAD,c,gBE9NdK,GAAU,CACd,CACEC,MAAO,gBACPC,WAAY,CAACC,aAAUC,gBAAU,SAEnC,CACEH,MAAO,oBACPC,WAAY,CAACC,cAEf,CACEF,MAAO,SACPC,WAAY,CAACC,aAAUC,gBAAU,MAEnC,CACEH,MAAO,YACPC,WAAY,CAACC,aAAUC,gBAAU,MAEnC,CACEH,MAAO,SACPC,WAAY,CAACC,aAAUC,gBAAU,OAoDrC,SAhDoB,WAAM,OACIC,cAAS,IADb,WACjBC,EADiB,KACTC,EADS,KAElBnG,GAASkB,kBAAY,gBAAGkF,EAAH,EAAGA,cAAH,OAAuBA,aAAvB,EAAuBA,EAAepG,UACjE,OACE,kBAAC,GAAAqG,MAAD,CACEC,aAAW,eACXC,QAAS,CACP,CACEV,MAAO,QACPW,QAASC,QAAQC,KAEnB,CACEb,MAAO,SACPW,QAASC,QAAQC,MAGrBC,MAAOf,GACPM,OAAQA,EACRU,OAAQ,SAACC,EAAIC,EAAOC,GAAZ,OACNZ,GAAU,iBAAO,CACfW,QACAC,iBAGJC,KAAMhH,EAAON,KAAI,SAACuH,GAAD,MAAY,CAC3BN,MAAO,CACL,CACEd,MAAO,kBAAC,GAAAR,KAAD,CAAMC,GAAE,kBAAa2B,aAAb,EAAaA,EAAO7I,OAAS6I,aAArC,EAAqCA,EAAOzI,OAErDyI,aAJK,EAILA,EAAOxI,QACP,CACEoH,MAAO,kBAAC,GAAD,CAAYjF,SAAUqG,aAAF,EAAEA,EAAOvI,aAEtC,CACEmH,MAAO,kBAACH,GAAA,EAAD,CAAYC,KAAMsB,aAAF,EAAEA,EAAOrI,aAElC,CACEiH,MAAO,kBAAC,GAAD,CAAYhH,OAAQoI,aAAF,EAAEA,EAAOpI,gBAKxC,kBAAC,GAAAqI,YAAD,MACA,kBAAC,GAAAC,UAAD,Q,qkBCgFN,SArIe,WAAM,OACuBlB,cAAS,IADhC,WACZmB,EADY,KACGC,EADH,KAEbrG,GAAWC,mBACXhB,GAAYiB,kBAChB,gBAAGkF,EAAH,EAAGA,cAAH,OAAuBA,aAAvB,EAAuBA,EAAenG,aAElCN,GAAOuB,kBACX,gBAAGkF,EAAH,EAAGA,cAAH,OACEA,aAAA,EAAAA,EAAezG,OAAQ,CACrBV,KAAM,MASZ,OANAwC,gBAAU,YACWG,UAAcC,SAAS,CAAEuE,kBAC5CpF,EFhCsB,iBAA6B,CACrDc,KAAMzG,EACN6E,QAASpB,EAAY,CAAEC,QAFC,uDAAW,GAEHE,KAFR,uDAAsB,KEgCnCqI,MAER,IAGD,kBAAC,EAAAC,SAAD,KACE,kBAACC,GAAA,GAAD,CAAYC,UAAU,cACpB,kBAACD,GAAA,GAAD,CAAiB3B,MAAM,sBAEzB,kBAAC6B,GAAA,EAAD,CAAMD,UAAU,eACd,kBAACE,GAAA,EAAD,CAAOjF,WAAS,GACd,kBAACkF,GAAA,EAAD,CAAWH,UAAU,qBACnB,kBAAC,GAAD,OAEF,kBAACG,GAAA,EAAD,CAAWC,UAAQ,GACjB,kBAACC,GAAA,GACoB,IAAd7H,EACD,CACE8H,WAAY,CACVC,UAAWrI,aAAF,EAAEA,EAAMC,MACjBX,MAAMU,aAAA,EAAAA,EAAM7B,SAAS6B,aAAf,EAAeA,EAAME,OAAQ,EACnCd,QAASkJ,OAAOtI,aAAD,EAACA,EAAME,OACtBqI,WAAW,GAEbC,gBACE,kBAACC,UAAD,CACE5B,QAAS,kBAAMC,QAAQC,IAAI,OAC3B2B,YAA0B,IAAdpI,GAFd,aAOFqI,aAAc,CACZC,MAAO,CACL,CACEC,MAAO,OACP1G,KAAM,OACN2G,aAAc,CACZC,IAAK,cACLC,SAAU,SAACC,EAAOC,GAAR,OACRxB,EAAiB,SACXD,GAAiB,IADP,IAEd5I,KAAMqK,MAEVA,OAAOzB,aAAA,EAAAA,EAAe5I,OAAQ,GAC9BsK,YAAa,mBAGjB,CACEN,MAAO,WACP1G,KAAM,WACN2G,aAAc,CACZC,IAAK,cACLC,SAAU,SAACC,EAAOC,GAAR,OACRxB,EAAiB,SACXD,GAAiB,IADP,IAEd5I,KAAMqK,MAEVN,MAAO,CACL,CACEM,MAAO,WACPL,MAAO,UAET,CACEK,MAAO,YACPL,MAAO,eAGXK,OAAOzB,aAAA,EAAAA,EAAe2B,WAAY,KAGtC,CACEP,MAAO,SACP1G,KAAM,WACN2G,aAAc,CACZC,IAAK,cACLC,SAAU,SAACC,EAAOC,GAAR,OACRxB,EAAiB,SACXD,GAAiB,IADP,IAEd5I,KAAMqK,MAEVN,MAAOzM,EAAa4D,KAAI,SAACiE,GAAD,MAAW,CACjCkF,MAAOlF,EACP6E,MAAO,GAAF,OAAK7E,EACPqF,OAAO,GACPC,eAFE,OAEctF,EAAKuF,MAAM,QAEhCL,OAAOzB,aAAA,EAAAA,EAAevI,SAAU,QAM1C,CACEkJ,WAAY,kBAACxC,GAAA,EAAD,SAGL,IAAdtF,EACC,kBAAC,GAAD,MAEA,kBAACkJ,GAAA,EAAD,CAAeC,QAAS,EAAGC,QAAS,KAEtC,kBAACC,GAAA,EAAD,CAAcC,UAAQ,IACL,IAAdtJ,GACC,kBAACuJ,cAAD,CACExB,UAAWrI,aAAF,EAAEA,EAAMC,MACjBX,MAAMU,aAAA,EAAAA,EAAM7B,SAAS6B,aAAf,EAAeA,EAAME,OAAQ,EACnCd,QAASkJ,OAAOtI,aAAD,EAACA,EAAME,OACtB4J,cAAc","file":"js/GroupsPage.fb587bf8467c53d55bdd.js","sourcesContent":["import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: { icon: CheckCircleIcon, color: successColor.value },\n  error: { icon: ExclamationCircleIcon, color: dangerColor.value },\n  pending: { icon: PauseCircleIcon },\n  updating: { icon: CircleNotchIcon },\n  unknown: { icon: UnknownIcon },\n  warning: { icon: ExclamationTriangleIcon, color: warningColor.value },\n  notification: { icon: BellIcon, color: infoColor.value },\n};\n","import { statusMapper } from '../constants';\n\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\nconst randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomwUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () => statusMapper[randomNumber(0, statusMapper.length)];\n\nconst rowCreator = () => ({\n  uuid: randomwUUID(),\n  name: randomString(),\n  sensors: randomNumber(0, 5000),\n  is_secure: randomBool(),\n  last_seen: randomDate(),\n  status: randomStatus(),\n});\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: [...new Array(perPage)].map(rowCreator),\n    meta: {\n      count: 200,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = () => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: randomNumber(0, 100),\n      orphaned: randomNumber(0, 100),\n      delivering: randomNumber(0, 100),\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  return Promise.resolve({\n    results: {\n      sensors: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      scanners: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      kiosks: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      antenna: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n    },\n  });\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: {},\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return <Icon {...props} color={statusToIcon?.[status]?.color} />;\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Bullseye,\n  Spinner,\n  Title,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Skeleton,\n  Text,\n  TextVariants,\n  Level,\n  LevelItem,\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  loadThreshold,\n  loadDevicesInfo,\n  loadCanariesInfo,\n} from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport {\n  thresholdReducer,\n  devicesInfoReducer,\n  canariesInfoReducer,\n} from '../../store/reducers';\nimport { StatusIcon } from '../../components';\nimport { ChartPie, ChartThemeColor } from '@patternfly/react-charts';\n\nconst GroupsInfo = () => {\n  const dispatch = useDispatch();\n  const threshold = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.threshold || {}\n  );\n  const isThresholdLoading = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.isLoading\n  );\n  const isDevicesInfoLoading = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.devicesInfo || {}\n  );\n  const canariesInfo = useSelector(\n    ({ canariesInfoReducer }) => canariesInfoReducer?.canariesInfo || {}\n  );\n  const isCanariesInfoLoading = useSelector(\n    ({ canariesInfoReducer }) => canariesInfoReducer?.isLoading\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      thresholdReducer,\n      devicesInfoReducer,\n      canariesInfoReducer,\n    });\n    dispatch(loadThreshold());\n    dispatch(loadDevicesInfo());\n    dispatch(loadCanariesInfo());\n    () => registered();\n  }, []);\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody>\n            {isThresholdLoading === false ? (\n              <ChartPie\n                ariaDesc=\"Health threshold\"\n                ariaTitle=\"Health threshold\"\n                constrainToVisibleArea={true}\n                legendOrientation=\"vertical\"\n                legendPosition=\"right\"\n                height={230}\n                width={450}\n                data={threshold.map((item) => ({\n                  x: Object.keys(item)?.[0],\n                  y: Object.values(item)?.[0],\n                }))}\n                legendData={threshold.map((item) => ({\n                  name: `${Object.keys(item)?.[0]}: ${\n                    Object.values(item)?.[0]\n                  }`,\n                }))}\n                padding={{\n                  bottom: 20,\n                  left: 20,\n                  right: 140, // Adjusted to accommodate legend\n                  top: 20,\n                }}\n                labels={({ datum }) => `${datum.x}: ${datum.y}`}\n                themeColor={ChartThemeColor.multiOrdered}\n              />\n            ) : (\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            )}\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.requiredApproval}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Required approvals\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.orphaned}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Orphaned devices\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.delivering}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Last Canaries</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Sensors</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.sensors?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.sensors?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Scanners</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.scanners?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.scanners?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Kiosks</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.kiosks?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.kiosks?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Antenna</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.antenna?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.antenna?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default GroupsInfo;\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n} from './action-types';\nimport { fetchGroups, threshold, devicesInfo, canariesInfo } from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { StatusIcon, SecureIcon } from '../../components';\nimport { Link } from 'react-router-dom';\n\nconst columns = [\n  {\n    title: 'Name of group',\n    transforms: [sortable, cellWidth('max')],\n  },\n  {\n    title: 'Number of devices',\n    transforms: [sortable],\n  },\n  {\n    title: 'Secure',\n    transforms: [sortable, cellWidth(10)],\n  },\n  {\n    title: 'Last seen',\n    transforms: [sortable, cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    transforms: [sortable, cellWidth(10)],\n  },\n];\n\nconst GroupsTable = () => {\n  const [sortBy, setSortBy] = useState({});\n  const groups = useSelector(({ groupsReducer }) => groupsReducer?.groups);\n  return (\n    <Table\n      aria-label=\"Groups table\"\n      actions={[\n        {\n          title: 'Adopt',\n          onClick: console.log,\n        },\n        {\n          title: 'Reject',\n          onClick: console.log,\n        },\n      ]}\n      cells={columns}\n      sortBy={sortBy}\n      onSort={(_e, index, direction) =>\n        setSortBy(() => ({\n          index,\n          direction,\n        }))\n      }\n      rows={groups.map((group) => ({\n        cells: [\n          {\n            title: <Link to={`/groups/${group?.uuid}`}>{group?.name}</Link>,\n          },\n          group?.sensors,\n          {\n            title: <SecureIcon isSecure={group?.is_secure} />,\n          },\n          {\n            title: <DateFormat date={group?.last_seen} />,\n          },\n          {\n            title: <StatusIcon status={group?.status} />,\n          },\n        ],\n      }))}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default GroupsTable;\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadGroups } from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { groupsReducer } from '../../store/reducers';\nimport { statusMapper } from '../../constants';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n  Main,\n} from '@redhat-cloud-services/frontend-components';\nimport {\n  Stack,\n  StackItem,\n  Pagination,\n  Skeleton,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  PrimaryToolbar,\n  TableToolbar,\n  SkeletonTable,\n} from '@redhat-cloud-services/frontend-components';\nimport GroupsInfo from './GroupsInfo';\nimport GroupsTable from './GroupsTable';\n\nconst Groups = () => {\n  const [activeFilters, setActiveFilters] = useState({});\n  const dispatch = useDispatch();\n  const isLoading = useSelector(\n    ({ groupsReducer }) => groupsReducer?.isLoading\n  );\n  const meta = useSelector(\n    ({ groupsReducer }) =>\n      groupsReducer?.meta || {\n        page: 1,\n      }\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({ groupsReducer });\n    dispatch(loadGroups());\n    () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Available groups\" />\n      </PageHeader>\n      <Main className=\"edge-groups\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups__info\">\n            <GroupsInfo />\n          </StackItem>\n          <StackItem isFilled>\n            <PrimaryToolbar\n              {...(isLoading === false\n                ? {\n                    pagination: {\n                      itemCount: meta?.count,\n                      page: meta?.offset / meta?.limit + 1,\n                      perPage: Number(meta?.limit),\n                      isCompact: true,\n                    },\n                    dedicatedAction: (\n                      <Button\n                        onClick={() => console.log('ff')}\n                        isDisabled={isLoading !== false}\n                      >\n                        Add group\n                      </Button>\n                    ),\n                    filterConfig: {\n                      items: [\n                        {\n                          label: 'Name',\n                          type: 'text',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            value: activeFilters?.name || '',\n                            placeholder: 'Filter by name',\n                          },\n                        },\n                        {\n                          label: 'Security',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: [\n                              {\n                                value: 'isSecure',\n                                label: 'Secure',\n                              },\n                              {\n                                value: 'nonSecure',\n                                label: 'Not secure',\n                              },\n                            ],\n                            value: activeFilters?.security || [],\n                          },\n                        },\n                        {\n                          label: 'Status',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: statusMapper.map((item) => ({\n                              value: item,\n                              label: `${item\n                                .charAt(0)\n                                .toUpperCase()}${item.slice(1)}`,\n                            })),\n                            value: activeFilters?.status || [],\n                          },\n                        },\n                      ],\n                    },\n                  }\n                : {\n                    pagination: <Skeleton />,\n                  })}\n            />\n            {isLoading === false ? (\n              <GroupsTable />\n            ) : (\n              <SkeletonTable colSize={5} rowSize={15} />\n            )}\n            <TableToolbar isFooter>\n              {isLoading === false && (\n                <Pagination\n                  itemCount={meta?.count}\n                  page={meta?.offset / meta?.limit + 1}\n                  perPage={Number(meta?.limit)}\n                  dropDirection=\"up\"\n                />\n              )}\n            </TableToolbar>\n          </StackItem>\n        </Stack>\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default Groups;\n"],"sourceRoot":""}