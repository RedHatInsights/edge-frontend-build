{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsInfo.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsTable.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/Groups.js"],"names":["dispatch","useDispatch","threshold","useSelector","thresholdReducer","isThresholdLoading","isLoading","isDevicesInfoLoading","devicesInfoReducer","devicesInfo","canariesInfo","canariesInfoReducer","isCanariesInfoLoading","useEffect","getRegistry","register","loadThreshold","loadDevicesInfo","loadCanariesInfo","Grid","hasGutter","GridItem","span","Card","CardHeader","Title","headingLevel","CardBody","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","legendOrientation","legendPosition","height","width","data","map","item","x","Object","keys","y","values","legendData","name","padding","bottom","left","right","top","labels","datum","themeColor","ChartThemeColor","Bullseye","Spinner","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","Link","to","requiredApproval","Skeleton","orphaned","delivering","Level","LevelItem","DateFormat","date","sensors","time","status","scanners","kiosks","antenna","CardFooter","Split","SplitItem","isFilled","columns","title","transforms","sortable","cellWidth","useState","sortBy","setSortBy","groups","groupsReducer","Table","aria-label","actions","onClick","console","log","cells","onSort","_e","index","direction","rows","group","uuid","isSecure","is_secure","last_seen","TableHeader","TableBody","activeFilters","setActiveFilters","meta","page","loadGroups","Fragment","PageHeader","className","Main","Stack","StackItem","PrimaryToolbar","pagination","itemCount","count","offset","limit","perPage","Number","isCompact","dedicatedAction","Button","isDisabled","filterConfig","items","label","type","filterValues","key","onChange","event","value","placeholder","security","statusMapper","charAt","toUpperCase","slice","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","dropDirection"],"mappings":"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","file":"js/GroupsPage.dd03e6970cfc18d74354.js","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Bullseye,\n  Spinner,\n  Title,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Skeleton,\n  Text,\n  TextVariants,\n  Level,\n  LevelItem,\n  CardFooter,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  loadThreshold,\n  loadDevicesInfo,\n  loadCanariesInfo,\n} from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport {\n  thresholdReducer,\n  devicesInfoReducer,\n  canariesInfoReducer,\n} from '../../store/reducers';\nimport { StatusIcon } from '../../components';\nimport { ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\n\nconst GroupsInfo = () => {\n  const dispatch = useDispatch();\n  const threshold = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.threshold || {}\n  );\n  const isThresholdLoading = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.isLoading\n  );\n  const isDevicesInfoLoading = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.devicesInfo || {}\n  );\n  const canariesInfo = useSelector(\n    ({ canariesInfoReducer }) => canariesInfoReducer?.canariesInfo || {}\n  );\n  const isCanariesInfoLoading = useSelector(\n    ({ canariesInfoReducer }) => canariesInfoReducer?.isLoading\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      thresholdReducer,\n      devicesInfoReducer,\n      canariesInfoReducer,\n    });\n    dispatch(loadThreshold());\n    dispatch(loadDevicesInfo());\n    dispatch(loadCanariesInfo());\n    () => registered();\n  }, []);\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody>\n            {isThresholdLoading === false ? (\n              <ChartPie\n                ariaDesc=\"Health threshold\"\n                ariaTitle=\"Health threshold\"\n                constrainToVisibleArea={true}\n                legendOrientation=\"vertical\"\n                legendPosition=\"right\"\n                height={230}\n                width={450}\n                data={threshold.map((item) => ({\n                  x: Object.keys(item)?.[0],\n                  y: Object.values(item)?.[0],\n                }))}\n                legendData={threshold.map((item) => ({\n                  name: `${Object.keys(item)?.[0]}: ${\n                    Object.values(item)?.[0]\n                  }`,\n                }))}\n                padding={{\n                  bottom: 20,\n                  left: 20,\n                  right: 140, // Adjusted to accommodate legend\n                  top: 20,\n                }}\n                labels={({ datum }) => `${datum.x}: ${datum.y}`}\n                themeColor={ChartThemeColor.multiOrdered}\n              />\n            ) : (\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            )}\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.requiredApproval}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Required approvals\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.orphaned}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Orphaned devices\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.delivering}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Last Canaries</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Sensors</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.sensors?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.sensors?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Scanners</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.scanners?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.scanners?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Kiosks</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.kiosks?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.kiosks?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Antenna</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.antenna?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.antenna?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n          <CardFooter>\n            <Split>\n              <SplitItem isFilled />\n              <SplitItem>\n                <Link to=\"/groups\">\n                  See canaries <ArrowRightIcon />\n                </Link>\n              </SplitItem>\n            </Split>\n          </CardFooter>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default GroupsInfo;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { StatusIcon, SecureIcon } from '../../components';\nimport { Link } from 'react-router-dom';\n\nconst columns = [\n  {\n    title: 'Name of group',\n    transforms: [sortable, cellWidth('max')],\n  },\n  {\n    title: 'Number of devices',\n    transforms: [sortable],\n  },\n  {\n    title: 'Secure',\n    transforms: [sortable, cellWidth(10)],\n  },\n  {\n    title: 'Last seen',\n    transforms: [sortable, cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    transforms: [sortable, cellWidth(10)],\n  },\n];\n\nconst GroupsTable = () => {\n  const [sortBy, setSortBy] = useState({});\n  const groups = useSelector(({ groupsReducer }) => groupsReducer?.groups);\n  return (\n    <Table\n      aria-label=\"Groups table\"\n      actions={[\n        {\n          title: 'Adopt',\n          onClick: console.log,\n        },\n        {\n          title: 'Reject',\n          onClick: console.log,\n        },\n      ]}\n      cells={columns}\n      sortBy={sortBy}\n      onSort={(_e, index, direction) =>\n        setSortBy(() => ({\n          index,\n          direction,\n        }))\n      }\n      rows={groups.map((group) => ({\n        cells: [\n          {\n            title: <Link to={`/groups/${group?.uuid}`}>{group?.name}</Link>,\n          },\n          group?.sensors,\n          {\n            title: <SecureIcon isSecure={group?.is_secure} />,\n          },\n          {\n            title: <DateFormat date={group?.last_seen} />,\n          },\n          {\n            title: <StatusIcon status={group?.status} />,\n          },\n        ],\n      }))}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default GroupsTable;\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadGroups } from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { groupsReducer } from '../../store/reducers';\nimport { statusMapper } from '../../constants';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n  Main,\n} from '@redhat-cloud-services/frontend-components';\nimport {\n  Stack,\n  StackItem,\n  Pagination,\n  Skeleton,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  PrimaryToolbar,\n  TableToolbar,\n  SkeletonTable,\n} from '@redhat-cloud-services/frontend-components';\nimport GroupsInfo from './GroupsInfo';\nimport GroupsTable from './GroupsTable';\n\nconst Groups = () => {\n  const [activeFilters, setActiveFilters] = useState({});\n  const dispatch = useDispatch();\n  const isLoading = useSelector(\n    ({ groupsReducer }) => groupsReducer?.isLoading\n  );\n  const meta = useSelector(\n    ({ groupsReducer }) =>\n      groupsReducer?.meta || {\n        page: 1,\n      }\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({ groupsReducer });\n    dispatch(loadGroups());\n    () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Available groups\" />\n      </PageHeader>\n      <Main className=\"edge-groups\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups__info\">\n            <GroupsInfo />\n          </StackItem>\n          <StackItem isFilled>\n            <PrimaryToolbar\n              {...(isLoading === false\n                ? {\n                    pagination: {\n                      itemCount: meta?.count,\n                      page: meta?.offset / meta?.limit + 1,\n                      perPage: Number(meta?.limit),\n                      isCompact: true,\n                    },\n                    dedicatedAction: (\n                      <Button\n                        onClick={() => console.log('ff')}\n                        isDisabled={isLoading !== false}\n                      >\n                        Add group\n                      </Button>\n                    ),\n                    filterConfig: {\n                      items: [\n                        {\n                          label: 'Name',\n                          type: 'text',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            value: activeFilters?.name || '',\n                            placeholder: 'Filter by name',\n                          },\n                        },\n                        {\n                          label: 'Security',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: [\n                              {\n                                value: 'isSecure',\n                                label: 'Secure',\n                              },\n                              {\n                                value: 'nonSecure',\n                                label: 'Not secure',\n                              },\n                            ],\n                            value: activeFilters?.security || [],\n                          },\n                        },\n                        {\n                          label: 'Status',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: statusMapper.map((item) => ({\n                              value: item,\n                              label: `${item\n                                .charAt(0)\n                                .toUpperCase()}${item.slice(1)}`,\n                            })),\n                            value: activeFilters?.status || [],\n                          },\n                        },\n                      ],\n                    },\n                  }\n                : {\n                    pagination: <Skeleton />,\n                  })}\n            />\n            {isLoading === false ? (\n              <GroupsTable />\n            ) : (\n              <SkeletonTable colSize={5} rowSize={15} />\n            )}\n            <TableToolbar isFooter>\n              {isLoading === false && (\n                <Pagination\n                  itemCount={meta?.count}\n                  page={meta?.offset / meta?.limit + 1}\n                  perPage={Number(meta?.limit)}\n                  dropDirection=\"up\"\n                />\n              )}\n            </TableToolbar>\n          </StackItem>\n        </Stack>\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default Groups;\n"],"sourceRoot":""}