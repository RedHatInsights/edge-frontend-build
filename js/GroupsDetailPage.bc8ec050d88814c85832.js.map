{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetailInfo.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/addDeviceSchema.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetail.js"],"names":["GroupsInfo","uuid","dispatch","useDispatch","isDevicesInfoLoading","useSelector","groupDevicesInfoReducer","isLoading","devicesInfo","useEffect","loadGroupDevicesInfo","Grid","hasGutter","GridItem","span","Card","CardHeader","Title","headingLevel","CardBody","TextContent","TextList","component","TextListVariants","TextListItem","T","TextListItemVariants","Text","TextVariants","total","Skeleton","Link","to","newDevices","offlineDevices","deliveringDevices","className","Bullseye","propTypes","PropTypes","fields","INVENTORY_TABLE","name","InventoryForm","lazy","defaultFilters","label","value","version","status","useState","isAddDeviceOpen","setIsAddDeviceOpen","activeFilters","setActiveFilters","inventory","useRef","useParams","groupName","groupsDetailReducer","items","devices","map","id","shallowEqual","getRegistry","register","loadGroupsDetail","Fragment","PageHeader","Breadcrumb","BreadcrumbItem","routes","isActive","Main","Stack","StackItem","GroupsDetailInfo","isFilled","Inventory","ref","length","page","tableProps","canSelectAll","isLoaded","onRefresh","options","callback","current","onRefreshData","filterConfig","filterValues","key","onChange","event","type","statusMapper","item","charAt","toUpperCase","slice","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","onDelete","itemsToRemove","isAll","onDeleteFilter","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","systemsList","Button","onClick","Suspense","fallback","selectedSystems","schema","isOpened","title","onAction","isSubmit","values","updateGroup","systemIDs","selected"],"mappings":"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","file":"js/GroupsDetailPage.bc8ec050d88814c85832.js","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Title,\n  Bullseye,\n  TextContent,\n  Text,\n  TextVariants,\n  TextListItem,\n  Skeleton,\n  TextListItemVariants,\n  TextList,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadGroupDevicesInfo } from '../../store/actions';\n\nconst GroupsInfo = ({ uuid }) => {\n  const dispatch = useDispatch();\n  const isDevicesInfoLoading = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.devicesInfo\n  );\n  useEffect(() => {\n    dispatch(loadGroupDevicesInfo());\n  }, []);\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      {devicesInfo?.total}\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  <Text component={TextVariants.h3}>Total devices</Text>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.newDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  New devices added\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.offlineDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices offline\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.deliveringDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={6}>\n        <Card className=\"edge-groups--detail__complex\">\n          <CardHeader>\n            <Grid>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Canary parameters</Title>\n              </GridItem>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Last Canaries</Title>\n              </GridItem>\n            </Grid>\n          </CardHeader>\n          <CardBody>\n            <Grid hasGutter>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">\n                  <Bullseye>\n                    <TextContent>\n                      <Text component={TextVariants.h1}>\n                        <Bullseye>10% (89)</Bullseye>\n                      </Text>\n                      <Text component={TextVariants.h4}>\n                        <Bullseye>Of systems tested</Bullseye>\n                      </Text>\n                    </TextContent>\n                  </Bullseye>\n                </Title>\n              </GridItem>\n              <GridItem span={6}></GridItem>\n            </Grid>\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nGroupsInfo.propTypes = {\n  uuid: PropTypes.string,\n};\n\nexport default GroupsInfo;\n","import { INVENTORY_TABLE } from '../../components/form';\n\nexport default {\n  fields: [\n    {\n      component: INVENTORY_TABLE,\n      name: 'select-system',\n    },\n  ],\n};\n","import React, {\n  Fragment,\n  useEffect,\n  useRef,\n  Suspense,\n  lazy,\n  useState,\n} from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { PageHeader, Main } from '@redhat-cloud-services/frontend-components';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Skeleton,\n  Stack,\n  StackItem,\n  Button,\n} from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { routes } from '../../../package.json';\nimport { loadGroupsDetail } from '../../store/actions';\nimport {\n  groupsDetailReducer,\n  groupDevicesInfoReducer,\n} from '../../store/reducers';\nimport GroupsDetailInfo from './GroupsDetailInfo';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/esm/Inventory';\nimport { systemsList } from '../../store/groupsDetail';\nconst InventoryForm = lazy(() => import('../../components/InventoryForm'));\nimport schema from './addDeviceSchema';\nimport { updateGroup } from '../../api';\nimport {\n  statusMapper,\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    value: '',\n  },\n  version: {\n    label: 'Version',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    value: [],\n  },\n};\n\nconst GroupsDetail = () => {\n  const [isAddDeviceOpen, setIsAddDeviceOpen] = useState(false);\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const inventory = useRef(null);\n  const { uuid } = useParams();\n  const dispatch = useDispatch();\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name || ''\n  );\n  const isLoading = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.isLoading\n  );\n\n  const items = useSelector(\n    ({ groupsDetailReducer }) =>\n      groupsDetailReducer?.devices?.map(({ uuid, ...rest }) => ({\n        id: uuid,\n        ...rest,\n      })),\n    shallowEqual\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      groupsDetailReducer,\n      groupDevicesInfoReducer,\n    });\n    dispatch(loadGroupsDetail(uuid));\n    () => registered();\n  }, []);\n\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  return (\n    <Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={routes.groups}>Groups</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            {isLoading === false ? groupName : <Skeleton />}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      </PageHeader>\n      <Main className=\"edge-groups--detail\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups--detail__info\">\n            <GroupsDetailInfo uuid={uuid} />\n          </StackItem>\n          <StackItem isFilled>\n            <InventoryTable\n              ref={inventory}\n              items={items || []}\n              total={items?.length || 0}\n              page={1}\n              tableProps={{\n                canSelectAll: false,\n              }}\n              isLoaded={!isLoading}\n              onRefresh={onRefresh}\n              filterConfig={{\n                items: [\n                  {\n                    label: activeFilters?.name?.label,\n                    filterValues: {\n                      key: 'text-filter',\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...activeFilters,\n                          name: {\n                            ...(activeFilters?.name || {}),\n                            value,\n                          },\n                        })),\n                      value: activeFilters?.name?.value || '',\n                    },\n                  },\n                  {\n                    label: activeFilters?.version?.label,\n                    type: 'checkbox',\n                    filterValues: {\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...(activeFilters || {}),\n                          version: {\n                            ...(activeFilters?.version || {}),\n                            value,\n                          },\n                        })),\n                      value: activeFilters?.version?.value || [],\n                      items: [\n                        {\n                          label: 'All versions',\n                          value: 'all',\n                        },\n                      ],\n                    },\n                  },\n                  {\n                    label: activeFilters?.status?.label,\n                    type: 'checkbox',\n                    filterValues: {\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...(activeFilters || {}),\n                          status: {\n                            ...(activeFilters?.status || {}),\n                            value,\n                          },\n                        })),\n                      items: statusMapper.map((item) => ({\n                        value: item,\n                        label: `${item.charAt(0).toUpperCase()}${item.slice(\n                          1\n                        )}`,\n                      })),\n                      value: activeFilters?.status?.value || [],\n                    },\n                  },\n                ],\n              }}\n              activeFiltersConfig={{\n                ...(isEmptyFilters(activeFilters) && {\n                  filters: constructActiveFilters(activeFilters),\n                }),\n                onDelete: (event, itemsToRemove, isAll) => {\n                  if (isAll) {\n                    setActiveFilters(defaultFilters);\n                  } else {\n                    setActiveFilters(() =>\n                      onDeleteFilter(activeFilters, itemsToRemove)\n                    );\n                  }\n                },\n              }}\n              onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES }) => {\n                getRegistry().register({\n                  ...mergeWithEntities(systemsList(INVENTORY_ACTION_TYPES)),\n                });\n              }}\n            >\n              <Button onClick={() => setIsAddDeviceOpen(true)}>\n                Add device\n              </Button>\n            </InventoryTable>\n          </StackItem>\n        </Stack>\n      </Main>\n      {isAddDeviceOpen && (\n        <Suspense fallback=\"\">\n          <InventoryForm\n            selectedSystems={items}\n            schema={schema}\n            isOpened={isAddDeviceOpen}\n            title=\"Add new device\"\n            onAction={(isSubmit, values) => {\n              if (isSubmit) {\n                (async () => {\n                  await updateGroup({\n                    uuid,\n                    systemIDs: values.selected,\n                  });\n                  dispatch(loadGroupsDetail(uuid));\n                })();\n              }\n              setIsAddDeviceOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default GroupsDetail;\n"],"sourceRoot":""}