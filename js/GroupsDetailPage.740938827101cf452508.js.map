{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/Routes/Canaries/Canaries.js","webpack://insights-frontend-starter-app/./src/components/DeviceDetail.js","webpack://insights-frontend-starter-app/./src/store/deviceDetail.js","webpack://insights-frontend-starter-app/./src/Routes/DeviceDetail/DeviceDetail.js","webpack://insights-frontend-starter-app/./src/Routes/Devices/Devices.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetailInfo.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/addDeviceSchema.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetail.js"],"names":["GeneralInformation","lazy","SystemCard","OperatingSystemCard","CollectionCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","runningVersion","systemProfile","running_rpm_os_tree_version","stagedVersion","staged_rpm_os_tree_version","nonActiveVersion","non_active_rpm_os_tree_version","heathCheck","health_check","rhcHealth","rhc_health","Suspense","fallback","store","useStore","ConfigurationCardWrapper","SystemCardWrapper","props","hasSAP","OperatingSystemCardWrapper","hasKernelModules","extra","title","value","length","plural","singular","onClick","_e","handleClick","generalMapper","statusHelper","toUpperCase","Tooltip","content","className","CollectionCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","hideBack","hideInvDrawer","Main","Grid","gutter","GridItem","span","AppInfo","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","useState","getEntities","setGetEntities","activeFilters","setActiveFilters","inventory","useRef","history","useHistory","dispatch","useDispatch","cleanEntities","Fragment","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","_i","config","undefined","data","console","log","hideFilters","registeredWith","filterConfig","items","type","filterValues","onChange","event","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onDelete","itemsToRemove","isAll","onDeleteFilter","onRowClick","id","push","mergeWithEntities","api","GroupsInfo","isDevicesInfoLoading","groupDevicesInfoReducer","isLoading","devicesInfo","loadGroupDevicesInfo","hasGutter","Card","CardHeader","Title","headingLevel","CardBody","TextContent","TextList","TextListVariants","TextListItem","T","TextListItemVariants","Text","TextVariants","total","newDevices","offlineDevices","deliveringDevices","Bullseye","propTypes","PropTypes","fields","INVENTORY_TABLE","InventoryForm","version","status","isAddDeviceOpen","setIsAddDeviceOpen","unregister","setUnregister","devices","map","shallowEqual","registered","loadGroupsDetail","routes","Stack","StackItem","GroupsDetailInfo","isFilled","InventoryTable","page","all","_items","groupsDetail","results","hasItems","system","key","statusMapper","charAt","slice","INVENTORY_ACTION_TYPES","systemsList","Button","selectedSystems","schema","isOpened","onAction","isSubmit","values","updateGroup","systemIDs","selected"],"mappings":"mMAIA,QAFiB,kBAAM,gD,+RCGjBA,GAAqBC,WAAK,kBAC9B,qFAKIC,GAAaD,WAAK,kBACtB,qFAIIE,GAAsBF,WAAK,kBAC/B,kCAKIG,GAAiBH,WAAK,kBAC1B,kCAoGF,QA1F8B,WAC5B,IAAMI,GAAmBC,kBACvB,gBAAGC,EAAH,EAAGA,mBAAH,OAA4BA,aAA5B,EAA4BA,EAAoBF,oBAFhB,GAW9BC,kBAAY,0BAAGE,EAAH,EAAGA,mBAAH,MAA6B,CAC3CC,eACED,SADY,UACZA,EAAoBE,qBADR,aACZ,EAAmCC,4BACrCC,cACEJ,SADW,UACXA,EAAoBE,qBADT,aACX,EAAmCG,2BACrCC,kBACEN,SAAA,UAAAA,EAAoBE,qBAApB,eAAmCK,iCAAkC,GACvEC,WAAYR,SAAF,UAAEA,EAAoBE,qBAAtB,aAAE,EAAmCO,aAC/CC,UAAWV,SAAF,UAAEA,EAAoBE,qBAAtB,aAAE,EAAmCS,eAb9CV,EANgC,EAMhCA,eACAG,EAPgC,EAOhCA,cACAE,EARgC,EAQhCA,iBACAE,EATgC,EAShCA,WACAE,EAVgC,EAUhCA,UAYF,OACE,kBAAC,EAAAE,SAAD,CAAUC,SAAS,IACjB,kBAACrB,EAAD,CACEsB,OAAOC,gBACPlB,iBAAkBA,EAClBmB,0BAA0B,EAC1BC,kBAAmB,SAACC,GAAD,OACjB,kBAAC,EAAAN,SAAD,CAAUC,SAAS,IACjB,kBAACnB,EAAD,OAAgBwB,EAAhB,CAAuBC,QAAQ,OAGnCC,2BAA4B,SAACF,GAAD,OAC1B,kBAAC,EAAAN,SAAD,CAAUC,SAAS,IACjB,kBAAClB,EAAD,OACMuB,EADN,CAEEG,kBAAkB,EAClBC,MAAO,CACL,CAAEC,MAAO,6BAA8BC,MAAOvB,GAC9C,CACEsB,MAAO,4BACPC,MAAOpB,GAET,CACEmB,MAAO,6CACPC,MAAOlB,aAAF,EAAEA,EAAkBmB,OACzBC,OAAQ,WACRC,SAAU,UACVC,QAAS,SAACC,EAAIC,GAAL,OACPA,EACE,8CACAC,QAAczB,GAAoB,GAAI,WACtC,WAGN,CACEiB,MAAO,sBACPC,MAAOQ,KAAaxB,aAAD,EAACA,EAAYyB,gBAC9B,kBAACC,EAAA,EAAD,CAASC,QAAQ,0BACf,kBAAC,KAAD,CAA4BC,UAAU,6CAQpDC,sBAAuB,SAACnB,GAAD,OACrB,kBAAC,EAAAN,SAAD,CAAUC,SAAS,IACjB,kBAACjB,EAAD,OACMsB,EADN,CAEEI,MAAO,CACL,CACEC,MAAO,kCACPC,MAAOQ,KAAatB,aAAD,EAACA,EAAWuB,gBAC7B,kBAACC,EAAA,EAAD,CAASC,QAAQ,0BACf,kBAAC,KAAD,CAA4BC,UAAU,iD,ikBC3G5D,IAcaE,GAAeC,E,SAAAA,IAAiB,CAC3CC,sBAfmB,SAACC,GACpB,cACKA,GADL,IAEEC,QAAQ,EACRC,WAAY,CACV,CACEpB,MAAO,sBACPqB,KAAM,sBACNC,UAAWC,S,oPC2EnB,QAjEqB,WAAM,IACjBC,GAAgBC,gBAAWC,KAA3BF,YADiB,GAEKG,iBAAtBC,EAFiB,EAEjBA,YAAaC,EAFI,EAEJA,KACfC,GAAcvD,kBAClB,kBAAGwD,EAAH,EAAGA,cAAH,OAAuBA,SAAvB,UAAuBA,EAAeC,cAAtC,aAAuB,EAAuBC,gBAE1CC,GAAY3D,kBAChB,gBAAG4D,EAAH,EAAGA,oBAAH,OAA6BA,aAA7B,EAA6BA,EAAqBd,QAYpD,OATAe,gBAAU,WAAM,QACd,UAAAC,SAASC,cAAT,mBAAiBC,wBAAjB,iBAAoC,GACpCF,SAASC,OAAOE,UAAU,mBACzB,KAEHJ,gBAAU,WAAM,UACN,QAAR,EAAAC,gBAAA,mBAAUC,cAAV,mBAAkBG,mBAAlB,gBAAgCb,KAC/B,CAACA,IAGF,kBAACc,EAAA,EAAD,CACEC,aAAW,EACXC,UAAQ,EACRC,OAAQ,YAAyB,IAAtBC,EAAsB,EAAtBA,gBACTtB,IAAcuB,S,iWAAd,EACEtE,yBACGqE,EAAgB/B,OAIvB,kBAACiC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,OAAO,gBACjB,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,GAAIxB,EAAO,UAAY,YAC1BA,EAAO,SAAW,YAGtBA,GACC,kBAACsB,EAAA,EAAD,KACGjB,EACC,kBAAC,EAAAkB,KAAD,CAAMC,GAAE,kBAAaxB,IAASK,GAE9B,kBAACoB,EAAA,EAAD,CAAUC,KAAMC,UAItB,kBAACL,EAAA,EAAD,CAAgBM,UAAQ,GACtB,yBAAK5C,UAAU,4CACZiB,GAAe,kBAACwB,EAAA,EAAD,CAAUC,KAAMC,YAItC,kBAACE,EAAA,EAAD,CAAqBpE,SAAS,GAAGqE,UAAQ,EAACf,UAAQ,EAACgB,eAAa,KAElE,kBAACC,EAAA,EAAD,CAAMhD,UAAU,yBACd,kBAACiD,EAAA,EAAD,CAAMC,OAAO,MACX,kBAACC,EAAA,EAAD,CAAUC,KAAM,IACd,kBAACC,EAAA,EAAD,CAAStB,UAAQ,EAACtD,SAAS,W,o0BCvDvC,IAAM6E,EAAiB,CACrBC,aAAc,CACZC,MAAO,gBACPpE,MAAO,GACPqE,OAAQ,KAINC,EAAqB,CACzB,CACEtE,MAAO,WACPoE,MAAO,qBAET,CACEpE,MAAO,UACPoE,MAAO,YAET,CACEpE,MAAO,aACPoE,MAAO,eA8FX,QA1FgB,WAAM,WACkBG,gBADlB,WACbC,EADa,KACAC,EADA,QAEsBF,cAASL,GAF/B,WAEbQ,EAFa,KAEEC,EAFF,KAGZpD,GAAgBC,gBAAWC,KAA3BF,YACFqD,GAAYC,YAAO,MACnBC,GAAUC,kBACVC,GAAWC,mBAYjB,OAHA9C,gBAAU,WACR,OAAO,kBAAM6C,GAASE,cACrB,IAED,kBAAC,EAAAC,SAAD,KACE,kBAAC,IAAD,CAAYvE,UAAU,cACpB,kBAAC,IAAD,CAAiBb,MAAM,uBAEzB,kBAAC,IAAD,CAAMa,UAAU,gBACd,kBAAC,IAAD,CACEwE,IAAKR,EACLS,UAnBU,SAACC,EAASC,IACrBA,GAAYX,GAAaA,EAAUY,QACtCZ,EAAUY,QAAQC,cAAcH,GACvBC,GACTA,EAASD,IAgBLI,WAAY,CACVC,cAAc,GAEhBnB,YAAW,+BAAE,WAAOoB,EAAIC,GAAX,uFACQrB,OAAYsB,EAAWD,GAD/B,cACLE,EADK,OAEXC,QAAQC,IAAIF,EAAMrB,EAAe,iBAFtB,kBAGJqB,GAHI,2CAAF,wDAKXG,YAAa,CAAEC,gBAAgB,GAC/BC,aAAc,CACZC,MAAO,CACL,CACEjC,MAAOM,SAAF,UAAEA,EAAeP,oBAAjB,aAAE,EAA6BC,MACpCkC,KAAM,WACNC,aAAc,CACZC,SAAU,SAACC,EAAOzG,GAChB2E,GAAiB,yBACXD,GAAiB,IADN,IAEfP,aAAc,EAAF,MACNO,aAAA,EAAAA,EAAeP,eAAgB,IADzB,IAEVnE,eAGJ4E,EAAUY,QAAQC,iBAEpBY,MAAO/B,EACPtE,OAAO0E,SAAA,UAAAA,EAAeP,oBAAf,eAA6BnE,QAAS,OAKrD0G,oBAAmB,QACbC,QAAejC,IAAkB,CACnCkC,SAASC,OACPnC,GACA,SAAC1E,GAAD,uBACEsE,EAAmBwC,MAAK,SAACC,GAAD,OAAUA,EAAK/G,QAAUA,YADnD,aACE,EAAyDoE,WAL9C,IAQjB4C,SAAU,SAACP,EAAOQ,EAAeC,GAE7BvC,EADEuC,EACehD,EAEA,kBACfiD,QAAezC,EAAeuC,KAGlCrC,EAAUY,QAAQC,mBAGtB2B,WAAY,SAAC/G,EAAIgH,GAAL,OAAYvC,EAAQwC,KAAR,mBAAyBD,KACjDzE,OAAQ,YAAgC,QAA7B2E,EAA6B,EAA7BA,kBAAmBC,EAAU,EAAVA,IAC5B/C,GAAe,kBAAM+C,aAAN,EAAMA,EAAKhD,eACf,QAAX,EAAAjD,WAAA,mBAAeuB,gBAAf,qBACKyE,a,ucCxGXE,EAAa,SAAC,GAAa,IAAX7F,EAAW,EAAXA,KACdoD,GAAWC,mBACXyC,GAAuBpJ,kBAC3B,gBAAGqJ,EAAH,EAAGA,wBAAH,OAAiCA,aAAjC,EAAiCA,EAAyBC,aAEtDC,GAAcvJ,kBAClB,gBAAGqJ,EAAH,EAAGA,wBAAH,OAAiCA,aAAjC,EAAiCA,EAAyBE,eAK5D,OAHA1F,gBAAU,WACR6C,GAAS8C,aACR,IAED,kBAACjE,EAAA,EAAD,CAAMkE,WAAS,GACb,kBAAChE,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACgE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,aAAa,MAApB,qBAEF,kBAACC,EAAA,EAAD,QAGJ,kBAACrE,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACgE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,aAAa,MAApB,iBAEF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUjH,UAAWkH,QACnB,kBAACC,EAAAC,EAAD,CAAcpH,UAAWqH,SACG,IAAzBhB,EACC,kBAACiB,EAAA,EAAD,CAAMtH,UAAWuH,QACdf,aADH,EACGA,EAAagB,OAGhB,kBAACxF,EAAA,EAAD,OAGJ,kBAACmF,EAAAC,EAAD,CAAcpH,UAAWqH,QACvB,kBAACC,EAAA,EAAD,CAAMtH,UAAWuH,QAAjB,kBAEF,kBAACJ,EAAAC,EAAD,CAAcpH,UAAWqH,SACG,IAAzBhB,EACC,kBAACiB,EAAA,EAAD,CAAMtH,UAAWuH,QACf,kBAAC,EAAAzF,KAAD,CAAMC,GAAE,kBAAaxB,IAClBiG,aADH,EACGA,EAAaiB,aAIlB,kBAACzF,EAAA,EAAD,OAGJ,kBAACmF,EAAAC,EAAD,CAAcpH,UAAWqH,QAAzB,qBAGA,kBAACF,EAAAC,EAAD,CAAcpH,UAAWqH,SACG,IAAzBhB,EACC,kBAACiB,EAAA,EAAD,CAAMtH,UAAWuH,QACf,kBAAC,EAAAzF,KAAD,CAAMC,GAAE,kBAAaxB,IAClBiG,aADH,EACGA,EAAakB,iBAIlB,kBAAC1F,EAAA,EAAD,OAGJ,kBAACmF,EAAAC,EAAD,CAAcpH,UAAWqH,QAAzB,mBAGA,kBAACF,EAAAC,EAAD,CAAcpH,UAAWqH,SACG,IAAzBhB,EACC,kBAACiB,EAAA,EAAD,CAAMtH,UAAWuH,QACf,kBAAC,EAAAzF,KAAD,CAAMC,GAAE,kBAAaxB,IAClBiG,aADH,EACGA,EAAamB,oBAIlB,kBAAC3F,EAAA,EAAD,OAGJ,kBAACmF,EAAAC,EAAD,CAAcpH,UAAWqH,QAAzB,2BAQV,kBAAC3E,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACgE,EAAA,EAAD,CAAMpH,UAAU,gCACd,kBAACqH,EAAA,EAAD,KACE,kBAACpE,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACkE,EAAA,EAAD,CAAOC,aAAa,MAApB,sBAEF,kBAACpE,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACkE,EAAA,EAAD,CAAOC,aAAa,MAApB,oBAIN,kBAACC,EAAA,EAAD,KACE,kBAACvE,EAAA,EAAD,CAAMkE,WAAS,GACb,kBAAChE,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACkE,EAAA,EAAD,CAAOC,aAAa,MAClB,kBAACc,EAAA,EAAD,KACE,kBAACZ,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,CAAMtH,UAAWuH,QACf,kBAACK,EAAA,EAAD,kBAEF,kBAACN,EAAA,EAAD,CAAMtH,UAAWuH,QACf,kBAACK,EAAA,EAAD,+BAMV,kBAAClF,EAAA,EAAD,CAAUC,KAAM,UAS9ByD,EAAWyB,UAAY,CACrBtH,K,MAAMuH,WAGR,U,0BCtJA,SACEC,OAAQ,CACN,CACE/H,U,SAAWgI,EACXjI,KAAM,mB,qmBCyBZ,IAAMkI,GAAgBrL,WAAK,kBAAM,mFAW3BiG,EAAiB,CACrB9C,KAAM,CACJgD,MAAO,OACPpE,MAAO,IAETuJ,QAAS,CACPnF,MAAO,UACPpE,MAAO,IAETwJ,OAAQ,CACNpF,MAAO,SACPpE,MAAO,KA4MX,QAxMqB,WAAM,gBACjBuB,GAAgBC,gBAAWC,KAA3BF,YADiB,GAEqBgD,eAAS,GAF9B,WAElBkF,EAFkB,KAEDC,EAFC,QAGanF,gBAHb,WAGlBC,EAHkB,KAGLC,EAHK,QAIWF,gBAJX,WAIlBoF,EAJkB,KAINC,EAJM,QAKiBrF,cAASL,GAL1B,WAKlBQ,EALkB,KAKHC,EALG,KAMnBG,GAAUC,kBACVH,GAAYC,YAAO,MACjBjD,IAASF,iBAATE,KACFoD,IAAWC,mBACXhD,IAAY3D,kBAChB,gBAAG4D,EAAH,EAAGA,oBAAH,OAA6BA,aAAA,EAAAA,EAAqBd,OAAQ,MAEtDwG,IAAYtJ,kBAChB,gBAAG4D,EAAH,EAAGA,oBAAH,OAA6BA,aAA7B,EAA6BA,EAAqB0F,aAG9CvB,IAAQ/H,kBACZ,kBAAG4D,EAAH,EAAGA,oBAAH,OACEA,SADF,UACEA,EAAqB2H,eADvB,aACE,EAA8BC,KAAI,sBAChCzC,GADgC,EAAGzF,MAAH,sBAIpCmI,gBAeF,OAbA5H,gBAAU,WACR,IAAM6H,EAAazI,IAAcuB,SAAS,CACxCZ,yBACAyF,+BAGF,OADA3C,IAASiF,QAAiBrI,KACnB,WACLoI,aACAL,aACA3E,IAASE,cAEV,IAGD,kBAAC,EAAAC,SAAD,KACE,kBAACpC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,GAAI8G,SAAV,WAEF,kBAAChH,EAAA,EAAD,CAAgBM,UAAQ,IACP,IAAdoE,GAAsB3F,GAAY,kBAACoB,EAAA,EAAD,SAIzC,kBAACO,EAAA,EAAD,CAAMhD,UAAU,uBACd,kBAACuJ,EAAA,EAAD,CAAOpC,WAAS,GACd,kBAACqC,EAAA,EAAD,CAAWxJ,UAAU,6BACnB,kBAACyJ,EAAD,CAAkBzI,KAAMA,MAE1B,kBAACwI,EAAA,EAAD,CAAWE,UAAQ,GACjB,kBAACC,EAAA,EAAD,CACEnF,IAAKR,EACL4F,KAAM,EACN9E,WAAY,CACVC,cAAc,GAEhBO,YAAa,CAAEuE,KAAK,GACpBjG,YAAW,+BAAE,WAAOkG,EAAQ7E,GAAf,4FACe8E,QAAa/I,GAAM,IADlC,uBACHgJ,EADG,EACHA,QADG,SAEQpG,aAFR,EAEQA,GAChBoG,GAAW,IAAId,KAAI,qBAAGlI,QADK,OAGvBiE,GAHuB,IAI1BgF,UAAU,KAEZ,GARS,cAEL9E,EAFK,gCAWNA,GAXM,IAYT6E,QAAS7E,EAAK6E,QAAQd,KAAI,SAACgB,GAAD,cACrBA,GACAF,EAAQ9D,MAAK,qBAAGlF,OAAoBkJ,EAAOzD,aAdvC,2CAAF,wDAkBXjB,aAAc,CACZC,MAAO,CACL,CACEjC,MAAOM,SAAF,UAAEA,EAAetD,YAAjB,aAAE,EAAqBgD,MAC5BmC,aAAc,CACZwE,IAAK,cACLvE,SAAU,SAACC,EAAOzG,GAAR,OACR2E,GAAiB,yBACZD,GADY,IAEftD,KAAM,EAAF,MACEsD,aAAA,EAAAA,EAAetD,OAAQ,IADzB,IAEFpB,gBAGNA,OAAO0E,SAAA,UAAAA,EAAetD,YAAf,eAAqBpB,QAAS,KAGzC,CACEoE,MAAOM,SAAF,UAAEA,EAAe6E,eAAjB,aAAE,EAAwBnF,MAC/BkC,KAAM,WACNC,aAAc,CACZC,SAAU,SAACC,EAAOzG,GAAR,OACR2E,GAAiB,yBACXD,GAAiB,IADN,IAEf6E,QAAS,EAAF,MACD7E,aAAA,EAAAA,EAAe6E,UAAW,IADzB,IAELvJ,gBAGNA,OAAO0E,SAAA,UAAAA,EAAe6E,eAAf,eAAwBvJ,QAAS,GACxCqG,MAAO,CACL,CACEjC,MAAO,eACPpE,MAAO,UAKf,CACEoE,MAAOM,SAAF,UAAEA,EAAe8E,cAAjB,aAAE,EAAuBpF,MAC9BkC,KAAM,WACNC,aAAc,CACZC,SAAU,SAACC,EAAOzG,GAAR,OACR2E,GAAiB,yBACXD,GAAiB,IADN,IAEf8E,OAAQ,EAAF,MACA9E,aAAA,EAAAA,EAAe8E,SAAU,IADzB,IAEJxJ,gBAGNqG,MAAO2E,UAAiB,SAACjE,GAAD,MAAW,CACjC/G,MAAO+G,EACP3C,MAAO,GAAF,OAAK2C,EAAKkE,OAAO,GAAGxK,eAApB,OAAoCsG,EAAKmE,MAC5C,QAGJlL,OAAO0E,SAAA,UAAAA,EAAe8E,cAAf,eAAuBxJ,QAAS,OAK/C0G,oBAAmB,QACbC,QAAejC,IAAkB,CACnCkC,SAASC,OAAuBnC,KAFjB,IAIjBsC,SAAU,SAACP,EAAOQ,EAAeC,GAE7BvC,EADEuC,EACehD,EAEA,kBACfiD,QAAezC,EAAeuC,QAKtCG,WAAY,SAAC/G,EAAIgH,GAAL,OAAYvC,EAAQwC,KAAR,kBAAwB1F,GAAxB,YAAgCyF,KACxDzE,OAAQ,YAAwD,IAArD2E,EAAqD,EAArDA,kBAAmB4D,EAAkC,EAAlCA,uBAAwB3D,EAAU,EAAVA,IACpD/C,GAAe,kBAAM+C,aAAN,EAAMA,EAAKhD,eAC1BoF,GAAc,kBACZrI,IAAcuB,SAAd,KACKyE,GAAkB6D,OAAYD,WAKvC,kBAACE,EAAA,GAAD,CAAQjL,QAAS,kBAAMsJ,GAAmB,KAA1C,kBAOPD,GACC,kBAAC,EAAArK,SAAD,CAAUC,SAAS,IACjB,kBAACiK,EAAD,CACEgC,gBAAiBjF,GACjBkF,OAAQA,EACRC,SAAU/B,EACV1J,MAAM,iBACN0L,SAAU,SAACC,EAAUC,GACfD,GACF,cAAC,+FACOE,QAAY,CAChBhK,QACAiK,UAAWF,EAAOG,WAHrB,OAKC9G,IAASiF,QAAiBrI,KAC1BgD,EAAUY,QAAQC,gBANnB,0CAAD,GASFiE,GAAmB","file":"js/GroupsDetailPage.740938827101cf452508.js","sourcesContent":["import React from 'react';\n\nconst Canaries = () => <div>Canaries page</div>;\n\nexport default Canaries;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nimport {\n  generalMapper,\n  statusHelper,\n} from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const {\n    runningVersion,\n    stagedVersion,\n    nonActiveVersion,\n    heathCheck,\n    rhcHealth,\n  } = useSelector(({ systemProfileStore }) => ({\n    runningVersion:\n      systemProfileStore?.systemProfile?.running_rpm_os_tree_version,\n    stagedVersion:\n      systemProfileStore?.systemProfile?.staged_rpm_os_tree_version,\n    nonActiveVersion:\n      systemProfileStore?.systemProfile?.non_active_rpm_os_tree_version || [],\n    heathCheck: systemProfileStore?.systemProfile?.health_check,\n    rhcHealth: systemProfileStore?.systemProfile?.rhc_health,\n  }));\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        ConfigurationCardWrapper={false}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard {...props} hasSAP={false} />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard\n              {...props}\n              hasKernelModules={false}\n              extra={[\n                { title: 'Running rpm-ostree version', value: runningVersion },\n                {\n                  title: 'Staged rpm-ostree version',\n                  value: stagedVersion,\n                },\n                {\n                  title: 'Non-active (available rollback version(s))',\n                  value: nonActiveVersion?.length,\n                  plural: 'versions',\n                  singular: 'version',\n                  onClick: (_e, handleClick) =>\n                    handleClick(\n                      'Non-active (available rollback version(s))',\n                      generalMapper(nonActiveVersion || [], 'Version'),\n                      'small'\n                    ),\n                },\n                {\n                  title: 'Health check status',\n                  value: statusHelper[heathCheck?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  AppInfo,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={uuid ? `/groups` : '/devices'}>\n              {uuid ? 'Groups' : 'Devices'}\n            </Link>\n          </BreadcrumbItem>\n          {uuid && (\n            <BreadcrumbItem>\n              {groupName ? (\n                <Link to={`/groups/${uuid}`}>{groupName}</Link>\n              ) : (\n                <Skeleton size={SkeletonSize.xs} />\n              )}\n            </BreadcrumbItem>\n          )}\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead fallback=\"\" hideBack showTags hideInvDrawer />\n      </PageHeader>\n      <Main className=\"edge-c-device--detail\">\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <AppInfo showTags fallback=\"\" />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useHistory } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [getEntities, setGetEntities] = useState();\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    return () => dispatch(cleanEntities());\n  }, []);\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Available devices\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n          }}\n          getEntities={async (_i, config) => {\n            const data = await getEntities(undefined, config);\n            console.log(data, activeFilters, 'This is data!');\n            return data;\n          }}\n          hideFilters={{ registeredWith: true }}\n          filterConfig={{\n            items: [\n              {\n                label: activeFilters?.deviceStatus?.label,\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value) => {\n                    setActiveFilters(() => ({\n                      ...(activeFilters || {}),\n                      deviceStatus: {\n                        ...(activeFilters?.deviceStatus || {}),\n                        value,\n                      },\n                    }));\n                    inventory.current.onRefreshData();\n                  },\n                  items: deviceStatusMapper,\n                  value: activeFilters?.deviceStatus?.value || [],\n                },\n              },\n            ],\n          }}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            onDelete: (event, itemsToRemove, isAll) => {\n              if (isAll) {\n                setActiveFilters(defaultFilters);\n              } else {\n                setActiveFilters(() =>\n                  onDeleteFilter(activeFilters, itemsToRemove)\n                );\n              }\n              inventory.current.onRefreshData();\n            },\n          }}\n          onRowClick={(_e, id) => history.push(`/devices/${id}`)}\n          onLoad={({ mergeWithEntities, api }) => {\n            setGetEntities(() => api?.getEntities);\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Title,\n  Bullseye,\n  TextContent,\n  Text,\n  TextVariants,\n  TextListItem,\n  Skeleton,\n  TextListItemVariants,\n  TextList,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadGroupDevicesInfo } from '../../store/actions';\n\nconst GroupsInfo = ({ uuid }) => {\n  const dispatch = useDispatch();\n  const isDevicesInfoLoading = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.devicesInfo\n  );\n  useEffect(() => {\n    dispatch(loadGroupDevicesInfo());\n  }, []);\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      {devicesInfo?.total}\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  <Text component={TextVariants.h3}>Total devices</Text>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.newDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  New devices added\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.offlineDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices offline\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.deliveringDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={6}>\n        <Card className=\"edge-groups--detail__complex\">\n          <CardHeader>\n            <Grid>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Canary parameters</Title>\n              </GridItem>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Last Canaries</Title>\n              </GridItem>\n            </Grid>\n          </CardHeader>\n          <CardBody>\n            <Grid hasGutter>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">\n                  <Bullseye>\n                    <TextContent>\n                      <Text component={TextVariants.h1}>\n                        <Bullseye>10% (89)</Bullseye>\n                      </Text>\n                      <Text component={TextVariants.h4}>\n                        <Bullseye>Of systems tested</Bullseye>\n                      </Text>\n                    </TextContent>\n                  </Bullseye>\n                </Title>\n              </GridItem>\n              <GridItem span={6}></GridItem>\n            </Grid>\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nGroupsInfo.propTypes = {\n  uuid: PropTypes.string,\n};\n\nexport default GroupsInfo;\n","import { INVENTORY_TABLE } from '../../components/form';\n\nexport default {\n  fields: [\n    {\n      component: INVENTORY_TABLE,\n      name: 'select-system',\n    },\n  ],\n};\n","import React, {\n  Fragment,\n  useEffect,\n  useRef,\n  Suspense,\n  lazy,\n  useState,\n  useContext,\n} from 'react';\nimport { useParams, Link, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Skeleton,\n  Stack,\n  StackItem,\n  Button,\n} from '@patternfly/react-core';\nimport { routes } from '../../../package.json';\nimport { loadGroupsDetail, cleanEntities } from '../../store/actions';\nimport {\n  groupsDetailReducer,\n  groupDevicesInfoReducer,\n} from '../../store/reducers';\nimport GroupsDetailInfo from './GroupsDetailInfo';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { systemsList } from '../../store/groupsDetail';\nconst InventoryForm = lazy(() => import('../../components/InventoryForm'));\nimport schema from './addDeviceSchema';\nimport { groupsDetail, updateGroup } from '../../api';\nimport {\n  statusMapper,\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { RegistryContext } from '../../store';\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    value: '',\n  },\n  version: {\n    label: 'Version',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    value: [],\n  },\n};\n\nconst GroupsDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isAddDeviceOpen, setIsAddDeviceOpen] = useState(false);\n  const [getEntities, setGetEntities] = useState();\n  const [unregister, setUnregister] = useState();\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const history = useHistory();\n  const inventory = useRef(null);\n  const { uuid } = useParams();\n  const dispatch = useDispatch();\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name || ''\n  );\n  const isLoading = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.isLoading\n  );\n\n  const items = useSelector(\n    ({ groupsDetailReducer }) =>\n      groupsDetailReducer?.devices?.map(({ uuid, ...rest }) => ({\n        id: uuid,\n        ...rest,\n      })),\n    shallowEqual\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      groupsDetailReducer,\n      groupDevicesInfoReducer,\n    });\n    dispatch(loadGroupsDetail(uuid));\n    return () => {\n      registered?.();\n      unregister?.();\n      dispatch(cleanEntities());\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={routes.groups}>Groups</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            {isLoading === false ? groupName : <Skeleton />}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      </PageHeader>\n      <Main className=\"edge-groups--detail\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups--detail__info\">\n            <GroupsDetailInfo uuid={uuid} />\n          </StackItem>\n          <StackItem isFilled>\n            <InventoryTable\n              ref={inventory}\n              page={1}\n              tableProps={{\n                canSelectAll: false,\n              }}\n              hideFilters={{ all: true }}\n              getEntities={async (_items, config) => {\n                const { results } = await groupsDetail(uuid, {});\n                const data = await getEntities?.(\n                  (results || []).map(({ uuid }) => uuid),\n                  {\n                    ...config,\n                    hasItems: true,\n                  },\n                  false\n                );\n                return {\n                  ...data,\n                  results: data.results.map((system) => ({\n                    ...system,\n                    ...results.find(({ uuid }) => uuid === system.id),\n                  })),\n                };\n              }}\n              filterConfig={{\n                items: [\n                  {\n                    label: activeFilters?.name?.label,\n                    filterValues: {\n                      key: 'text-filter',\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...activeFilters,\n                          name: {\n                            ...(activeFilters?.name || {}),\n                            value,\n                          },\n                        })),\n                      value: activeFilters?.name?.value || '',\n                    },\n                  },\n                  {\n                    label: activeFilters?.version?.label,\n                    type: 'checkbox',\n                    filterValues: {\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...(activeFilters || {}),\n                          version: {\n                            ...(activeFilters?.version || {}),\n                            value,\n                          },\n                        })),\n                      value: activeFilters?.version?.value || [],\n                      items: [\n                        {\n                          label: 'All versions',\n                          value: 'all',\n                        },\n                      ],\n                    },\n                  },\n                  {\n                    label: activeFilters?.status?.label,\n                    type: 'checkbox',\n                    filterValues: {\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...(activeFilters || {}),\n                          status: {\n                            ...(activeFilters?.status || {}),\n                            value,\n                          },\n                        })),\n                      items: statusMapper.map((item) => ({\n                        value: item,\n                        label: `${item.charAt(0).toUpperCase()}${item.slice(\n                          1\n                        )}`,\n                      })),\n                      value: activeFilters?.status?.value || [],\n                    },\n                  },\n                ],\n              }}\n              activeFiltersConfig={{\n                ...(isEmptyFilters(activeFilters) && {\n                  filters: constructActiveFilters(activeFilters),\n                }),\n                onDelete: (event, itemsToRemove, isAll) => {\n                  if (isAll) {\n                    setActiveFilters(defaultFilters);\n                  } else {\n                    setActiveFilters(() =>\n                      onDeleteFilter(activeFilters, itemsToRemove)\n                    );\n                  }\n                },\n              }}\n              onRowClick={(_e, id) => history.push(`/groups/${uuid}/${id}`)}\n              onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                setGetEntities(() => api?.getEntities);\n                setUnregister(() =>\n                  getRegistry().register({\n                    ...mergeWithEntities(systemsList(INVENTORY_ACTION_TYPES)),\n                  })\n                );\n              }}\n            >\n              <Button onClick={() => setIsAddDeviceOpen(true)}>\n                Add device\n              </Button>\n            </InventoryTable>\n          </StackItem>\n        </Stack>\n      </Main>\n      {isAddDeviceOpen && (\n        <Suspense fallback=\"\">\n          <InventoryForm\n            selectedSystems={items}\n            schema={schema}\n            isOpened={isAddDeviceOpen}\n            title=\"Add new device\"\n            onAction={(isSubmit, values) => {\n              if (isSubmit) {\n                (async () => {\n                  await updateGroup({\n                    uuid,\n                    systemIDs: values.selected,\n                  });\n                  dispatch(loadGroupsDetail(uuid));\n                  inventory.current.onRefreshData();\n                })();\n              }\n              setIsAddDeviceOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default GroupsDetail;\n"],"sourceRoot":""}