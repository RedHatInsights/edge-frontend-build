{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetailInfo.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetail.js"],"names":["GroupsInfo","uuid","dispatch","useDispatch","isDevicesInfoLoading","useSelector","groupDevicesInfoReducer","isLoading","devicesInfo","useEffect","loadGroupDevicesInfo","Grid","hasGutter","GridItem","span","Card","CardHeader","Title","headingLevel","CardBody","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","total","Skeleton","Link","to","newDevices","offlineDevices","deliveringDevices","className","Bullseye","propTypes","PropTypes","inventory","useRef","useParams","groupName","groupsDetailReducer","name","getRegistry","register","loadGroupsDetail","Fragment","PageHeader","Breadcrumb","BreadcrumbItem","routes","isActive","Main","Stack","StackItem","GroupsDetailInfo","isFilled","Inventory","ref","onRefresh","options","callback","current","onRefreshData","onLoad","mergeWithEntities"],"mappings":"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","file":"js/GroupsDetailPage.a14128e2ceed4f9e4881.js","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Title,\n  Bullseye,\n  TextContent,\n  Text,\n  TextVariants,\n  TextListItem,\n  Skeleton,\n  TextListItemVariants,\n  TextList,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadGroupDevicesInfo } from '../../store/actions';\n\nconst GroupsInfo = ({ uuid }) => {\n  const dispatch = useDispatch();\n  const isDevicesInfoLoading = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.devicesInfo\n  );\n  useEffect(() => {\n    dispatch(loadGroupDevicesInfo());\n  }, []);\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      {devicesInfo?.total}\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  <Text component={TextVariants.h3}>Total devices</Text>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.newDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  New devices added\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.offlineDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices offline\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.deliveringDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={6}>\n        <Card className=\"edge-groups--detail__complex\">\n          <CardHeader>\n            <Grid>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Canary parameters</Title>\n              </GridItem>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Last Canaries</Title>\n              </GridItem>\n            </Grid>\n          </CardHeader>\n          <CardBody>\n            <Grid hasGutter>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">\n                  <Bullseye>\n                    <TextContent>\n                      <Text component={TextVariants.h1}>\n                        <Bullseye>10% (89)</Bullseye>\n                      </Text>\n                      <Text component={TextVariants.h4}>\n                        <Bullseye>Of systems tested</Bullseye>\n                      </Text>\n                    </TextContent>\n                  </Bullseye>\n                </Title>\n              </GridItem>\n              <GridItem span={6}></GridItem>\n            </Grid>\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nGroupsInfo.propTypes = {\n  uuid: PropTypes.string,\n};\n\nexport default GroupsInfo;\n","import React, { Fragment, useEffect, useRef } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PageHeader, Main } from '@redhat-cloud-services/frontend-components';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Skeleton,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { routes } from '../../../package.json';\nimport { loadGroupsDetail } from '../../store/actions';\nimport {\n  groupsDetailReducer,\n  groupDevicesInfoReducer,\n} from '../../store/reducers';\nimport GroupsDetailInfo from './GroupsDetailInfo';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/esm/Inventory';\n\nconst GroupsDetail = () => {\n  const inventory = useRef(null);\n  const { uuid } = useParams();\n  const dispatch = useDispatch();\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name || ''\n  );\n  const isLoading = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.isLoading\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      groupsDetailReducer,\n      groupDevicesInfoReducer,\n    });\n    dispatch(loadGroupsDetail(uuid));\n    () => registered();\n  }, []);\n\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n  return (\n    <Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={routes.groups}>Groups</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            {isLoading === false ? groupName : <Skeleton />}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      </PageHeader>\n      <Main className=\"edge-groups--detail\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups--detail__info\">\n            <GroupsDetailInfo uuid={uuid} />\n          </StackItem>\n          <StackItem isFilled>\n            <InventoryTable\n              ref={inventory}\n              onRefresh={onRefresh}\n              onLoad={({ mergeWithEntities }) => {\n                getRegistry().register({\n                  ...mergeWithEntities(),\n                });\n              }}\n            />\n          </StackItem>\n        </Stack>\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default GroupsDetail;\n"],"sourceRoot":""}