{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/components/form/constants.js","webpack://insights-frontend-starter-app/./src/store/inventory-table.js","webpack://insights-frontend-starter-app/./src/components/form/FormInventory.js","webpack://insights-frontend-starter-app/./src/components/form/componentTypes.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/newGroupSchema.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/NewGroup.js"],"names":["InventoryContext","React","entitySelected","state","payload","selected","Map","id","rows","forEach","row","set","selectedRow","find","clear","FormInventoryTable","name","FieldProvider","validate","FormSpyProvider","formOptions","component","rest","inventory","useRef","onRefresh","options","callback","current","onRefreshData","Consumer","registry","Provider","store","getStore","Inventory","ref","tableProps","canSelectAll","onLoad","mergeWithEntities","register","applyReducerHash","SELECT_ENTITY","Fragment","propTypes","PropTypes","size","INVENTORY_TABLE","fields","componentTypes","inModal","title","nextStep","type","label","isRequired","FormTemplate","props","showFormControls","NewGroup","onAction","useState","setRegistry","useEffect","ReducerRegistry","promiseMiddleware","value","schema","componentMapper","onSubmit","values","entities","getState","Array","from","keys","onCancel","args","isOpened","defaultProps"],"mappings":"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","file":"js/310.5643e0ae002f71669b0a.js","sourcesContent":["import React from 'react';\n\nexport const InventoryContext = React.createContext({});\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { SELECT_ENTITY } from './action-types';\n\nconst entitySelected = (state, { payload }) => {\n  const selected = state.selected || new Map();\n  if (payload.selected) {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.set(row.id, row));\n    } else {\n      const selectedRow =\n        state.rows && state.rows.find(({ id }) => id === payload.id);\n      selected.set(payload.id, { ...(selectedRow || {}), id: payload.id });\n    }\n  } else {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.delete(row.id));\n    } else if (payload.id === -1) {\n      selected.clear();\n    } else {\n      selected.delete(payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected: new Map(selected),\n  };\n};\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    [SELECT_ENTITY]: entitySelected,\n  });\n","import React, { Fragment, useRef } from 'react';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/esm/Inventory';\nimport PropTypes from 'prop-types';\nimport { InventoryContext } from './constants';\nimport { Provider } from 'react-redux';\nimport { entitiesReducer } from '../../store/inventory-table';\n\nconst FormInventoryTable = ({\n  name,\n  FieldProvider,\n  validate,\n  FormSpyProvider,\n  formOptions,\n  component,\n  ...rest\n}) => {\n  const inventory = useRef(null);\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  return (\n    <InventoryContext.Consumer>\n      {({ registry }) => {\n        return registry ? (\n          <Provider store={registry.getStore()}>\n            <InventoryTable\n              {...rest}\n              ref={inventory}\n              onRefresh={onRefresh}\n              tableProps={{\n                canSelectAll: false,\n              }}\n              onLoad={({ mergeWithEntities }) => {\n                registry?.register?.(mergeWithEntities(entitiesReducer()));\n              }}\n            />\n          </Provider>\n        ) : (\n          <Fragment />\n        );\n      }}\n    </InventoryContext.Consumer>\n  );\n};\n\nFormInventoryTable.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n  validate: PropTypes.any,\n  name: PropTypes.string,\n  size: PropTypes.string,\n  component: PropTypes.any,\n};\n\nexport default FormInventoryTable;\n","export const INVENTORY_TABLE = 'inventoryTable';\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport { INVENTORY_TABLE } from '../../components/form';\n\nexport default {\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'wizzard',\n      inModal: true,\n      title: 'Create new group',\n      fields: [\n        {\n          title: 'General information',\n          name: 'step-1',\n          nextStep: 'choos-systems',\n          fields: [\n            {\n              component: componentTypes.TEXT_FIELD,\n              name: 'group-name',\n              type: 'text',\n              label: 'Group name',\n              isRequired: true,\n              validate: [\n                {\n                  type: 'required',\n                },\n              ],\n            },\n            {\n              component: componentTypes.SWITCH,\n              name: 'is-secure',\n              label: 'Is secure',\n            },\n          ],\n        },\n        {\n          title: 'Choose systems',\n          name: 'choos-systems',\n          fields: [\n            {\n              component: INVENTORY_TABLE,\n              name: 'select-system',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/esm/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/esm/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/esm/component-mapper';\nimport schema from './newGroupSchema';\nimport { FormInventoryTable, INVENTORY_TABLE } from '../../components/form';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { InventoryContext } from '../../components/form/constants';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nconst FormTemplate = (props) => (\n  <Pf4FormTemplate {...props} showFormControls={false} />\n);\n\nconst NewGroup = ({ onAction }) => {\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(new ReducerRegistry({}, [promiseMiddleware]));\n  }, []);\n\n  return (\n    <InventoryContext.Provider value={{ registry }}>\n      <FormRenderer\n        schema={schema}\n        FormTemplate={FormTemplate}\n        componentMapper={{\n          ...componentMapper,\n          [INVENTORY_TABLE]: FormInventoryTable,\n        }}\n        onSubmit={(values) => {\n          const { entities } = registry.store.getState();\n          onAction(true, {\n            ...values,\n            selected: Array.from(entities?.selected?.keys() || []),\n          });\n        }}\n        onCancel={(...args) => onAction(false, ...args)}\n      />\n    </InventoryContext.Provider>\n  );\n};\n\nNewGroup.propTypes = {\n  isOpened: PropTypes.bool,\n  onAction: PropTypes.func,\n};\n\nNewGroup.defaultProps = {\n  onAction: () => {},\n};\n\nexport default NewGroup;\n"],"sourceRoot":""}