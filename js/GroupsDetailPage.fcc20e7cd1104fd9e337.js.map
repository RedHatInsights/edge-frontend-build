{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/Routes/DeviceDetail/DeviceDetail.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetailInfo.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/addDeviceSchema.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetail.js"],"names":["useParams","inventoryId","uuid","displayName","useSelector","entityDetails","entity","display_name","groupName","groupsDetailReducer","name","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","hideInvLink","showTags","onLoad","mergeWithDetail","getRegistry","register","ouiaId","Link","to","size","SkeletonSize","isActive","className","fallback","hideBack","hideInvDrawer","gutter","span","GroupsInfo","dispatch","useDispatch","isDevicesInfoLoading","groupDevicesInfoReducer","isLoading","devicesInfo","loadGroupDevicesInfo","Grid","hasGutter","GridItem","Card","CardHeader","Title","headingLevel","CardBody","TextContent","TextList","component","TextListVariants","TextListItem","T","TextListItemVariants","Text","TextVariants","total","Skeleton","newDevices","offlineDevices","deliveringDevices","Bullseye","propTypes","PropTypes","fields","INVENTORY_TABLE","InventoryForm","lazy","defaultFilters","label","value","version","status","useState","isAddDeviceOpen","setIsAddDeviceOpen","getEntities","setGetEntities","unregister","setUnregister","activeFilters","setActiveFilters","history","useHistory","inventory","useRef","items","devices","map","id","shallowEqual","registered","loadGroupsDetail","console","log","cleanEntities","Fragment","PageHeader","Breadcrumb","BreadcrumbItem","routes","Main","Stack","StackItem","GroupsDetailInfo","isFilled","InventoryTable","ref","page","tableProps","canSelectAll","hideFilters","all","_items","config","groupsDetail","results","hasItems","data","system","find","filterConfig","filterValues","key","onChange","event","type","statusMapper","item","charAt","toUpperCase","slice","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","onDelete","itemsToRemove","isAll","onDeleteFilter","onRowClick","_e","push","mergeWithEntities","INVENTORY_ACTION_TYPES","api","systemsList","Button","onClick","Suspense","selectedSystems","schema","isOpened","title","onAction","isSubmit","values","updateGroup","systemIDs","selected","current","onRefreshData"],"mappings":"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","file":"js/GroupsDetailPage.fcc20e7cd1104fd9e337.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  AppInfo,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nconst DeviceDetail = () => {\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register(mergeWithDetail());\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={`/groups`}>Groups</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            {groupName ? (\n              <Link to={`/groups/${uuid}`}>{groupName}</Link>\n            ) : (\n              <Skeleton size={SkeletonSize.xs} />\n            )}\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead\n          fallback=\"\"\n          hideBack\n          showTags\n          hideInvLink\n          hideInvDrawer\n        />\n      </PageHeader>\n      <Main>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <AppInfo showTags fallback=\"\" />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Title,\n  Bullseye,\n  TextContent,\n  Text,\n  TextVariants,\n  TextListItem,\n  Skeleton,\n  TextListItemVariants,\n  TextList,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadGroupDevicesInfo } from '../../store/actions';\n\nconst GroupsInfo = ({ uuid }) => {\n  const dispatch = useDispatch();\n  const isDevicesInfoLoading = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ groupDevicesInfoReducer }) => groupDevicesInfoReducer?.devicesInfo\n  );\n  useEffect(() => {\n    dispatch(loadGroupDevicesInfo());\n  }, []);\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      {devicesInfo?.total}\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  <Text component={TextVariants.h3}>Total devices</Text>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.newDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  New devices added\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.offlineDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices offline\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to={`/groups/${uuid}`}>\n                        {devicesInfo?.deliveringDevices}\n                      </Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={6}>\n        <Card className=\"edge-groups--detail__complex\">\n          <CardHeader>\n            <Grid>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Canary parameters</Title>\n              </GridItem>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Last Canaries</Title>\n              </GridItem>\n            </Grid>\n          </CardHeader>\n          <CardBody>\n            <Grid hasGutter>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">\n                  <Bullseye>\n                    <TextContent>\n                      <Text component={TextVariants.h1}>\n                        <Bullseye>10% (89)</Bullseye>\n                      </Text>\n                      <Text component={TextVariants.h4}>\n                        <Bullseye>Of systems tested</Bullseye>\n                      </Text>\n                    </TextContent>\n                  </Bullseye>\n                </Title>\n              </GridItem>\n              <GridItem span={6}></GridItem>\n            </Grid>\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nGroupsInfo.propTypes = {\n  uuid: PropTypes.string,\n};\n\nexport default GroupsInfo;\n","import { INVENTORY_TABLE } from '../../components/form';\n\nexport default {\n  fields: [\n    {\n      component: INVENTORY_TABLE,\n      name: 'select-system',\n    },\n  ],\n};\n","import React, {\n  Fragment,\n  useEffect,\n  useRef,\n  Suspense,\n  lazy,\n  useState,\n} from 'react';\nimport { useParams, Link, useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Skeleton,\n  Stack,\n  StackItem,\n  Button,\n} from '@patternfly/react-core';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport { routes } from '../../../package.json';\nimport { loadGroupsDetail, cleanEntities } from '../../store/actions';\nimport {\n  groupsDetailReducer,\n  groupDevicesInfoReducer,\n} from '../../store/reducers';\nimport GroupsDetailInfo from './GroupsDetailInfo';\n\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { systemsList } from '../../store/groupsDetail';\nconst InventoryForm = lazy(() => import('../../components/InventoryForm'));\nimport schema from './addDeviceSchema';\nimport { groupsDetail, updateGroup } from '../../api';\nimport {\n  statusMapper,\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    value: '',\n  },\n  version: {\n    label: 'Version',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    value: [],\n  },\n};\n\nconst GroupsDetail = () => {\n  const [isAddDeviceOpen, setIsAddDeviceOpen] = useState(false);\n  const [getEntities, setGetEntities] = useState();\n  const [unregister, setUnregister] = useState();\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const history = useHistory();\n  const inventory = useRef(null);\n  const { uuid } = useParams();\n  const dispatch = useDispatch();\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name || ''\n  );\n  const isLoading = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.isLoading\n  );\n\n  const items = useSelector(\n    ({ groupsDetailReducer }) =>\n      groupsDetailReducer?.devices?.map(({ uuid, ...rest }) => ({\n        id: uuid,\n        ...rest,\n      })),\n    shallowEqual\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      groupsDetailReducer,\n      groupDevicesInfoReducer,\n    });\n    dispatch(loadGroupsDetail(uuid));\n    return () => {\n      console.log(registered, unregister, 'cleaned up');\n      registered?.();\n      unregister?.();\n      dispatch(cleanEntities());\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={routes.groups}>Groups</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            {isLoading === false ? groupName : <Skeleton />}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      </PageHeader>\n      <Main className=\"edge-groups--detail\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups--detail__info\">\n            <GroupsDetailInfo uuid={uuid} />\n          </StackItem>\n          <StackItem isFilled>\n            <InventoryTable\n              ref={inventory}\n              page={1}\n              tableProps={{\n                canSelectAll: false,\n              }}\n              hideFilters={{ all: true }}\n              getEntities={async (_items, config) => {\n                const { results } = await groupsDetail(uuid, {});\n                const data = await getEntities?.(\n                  (results || []).map(({ uuid }) => uuid),\n                  {\n                    ...config,\n                    hasItems: true,\n                  },\n                  false\n                );\n                return {\n                  ...data,\n                  results: data.results.map((system) => ({\n                    ...system,\n                    ...results.find(({ uuid }) => uuid === system.id),\n                  })),\n                };\n              }}\n              filterConfig={{\n                items: [\n                  {\n                    label: activeFilters?.name?.label,\n                    filterValues: {\n                      key: 'text-filter',\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...activeFilters,\n                          name: {\n                            ...(activeFilters?.name || {}),\n                            value,\n                          },\n                        })),\n                      value: activeFilters?.name?.value || '',\n                    },\n                  },\n                  {\n                    label: activeFilters?.version?.label,\n                    type: 'checkbox',\n                    filterValues: {\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...(activeFilters || {}),\n                          version: {\n                            ...(activeFilters?.version || {}),\n                            value,\n                          },\n                        })),\n                      value: activeFilters?.version?.value || [],\n                      items: [\n                        {\n                          label: 'All versions',\n                          value: 'all',\n                        },\n                      ],\n                    },\n                  },\n                  {\n                    label: activeFilters?.status?.label,\n                    type: 'checkbox',\n                    filterValues: {\n                      onChange: (event, value) =>\n                        setActiveFilters(() => ({\n                          ...(activeFilters || {}),\n                          status: {\n                            ...(activeFilters?.status || {}),\n                            value,\n                          },\n                        })),\n                      items: statusMapper.map((item) => ({\n                        value: item,\n                        label: `${item.charAt(0).toUpperCase()}${item.slice(\n                          1\n                        )}`,\n                      })),\n                      value: activeFilters?.status?.value || [],\n                    },\n                  },\n                ],\n              }}\n              activeFiltersConfig={{\n                ...(isEmptyFilters(activeFilters) && {\n                  filters: constructActiveFilters(activeFilters),\n                }),\n                onDelete: (event, itemsToRemove, isAll) => {\n                  if (isAll) {\n                    setActiveFilters(defaultFilters);\n                  } else {\n                    setActiveFilters(() =>\n                      onDeleteFilter(activeFilters, itemsToRemove)\n                    );\n                  }\n                },\n              }}\n              onRowClick={(_e, id) => history.push(`/groups/${uuid}/${id}`)}\n              onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                setGetEntities(() => api?.getEntities);\n                setUnregister(() =>\n                  getRegistry().register({\n                    ...mergeWithEntities(systemsList(INVENTORY_ACTION_TYPES)),\n                  })\n                );\n              }}\n            >\n              <Button onClick={() => setIsAddDeviceOpen(true)}>\n                Add device\n              </Button>\n            </InventoryTable>\n          </StackItem>\n        </Stack>\n      </Main>\n      {isAddDeviceOpen && (\n        <Suspense fallback=\"\">\n          <InventoryForm\n            selectedSystems={items}\n            schema={schema}\n            isOpened={isAddDeviceOpen}\n            title=\"Add new device\"\n            onAction={(isSubmit, values) => {\n              if (isSubmit) {\n                (async () => {\n                  await updateGroup({\n                    uuid,\n                    systemIDs: values.selected,\n                  });\n                  dispatch(loadGroupsDetail(uuid));\n                  inventory.current.onRefreshData();\n                })();\n              }\n              setIsAddDeviceOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default GroupsDetail;\n"],"sourceRoot":""}