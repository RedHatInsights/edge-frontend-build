{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/api/index.js","webpack://insights-frontend-starter-app/./src/constants.js","webpack://insights-frontend-starter-app/./src/store/action-types.js","webpack://insights-frontend-starter-app/./src/store/actions.js","webpack://insights-frontend-starter-app/./src/store/groups.js","webpack://insights-frontend-starter-app/./src/store/threshold.js","webpack://insights-frontend-starter-app/./src/store/devicesInfo.js","webpack://insights-frontend-starter-app/./src/store/canariesInfo.js","webpack://insights-frontend-starter-app/./src/store/groupsDetail.js","webpack://insights-frontend-starter-app/./src/store/groupDevicesInfo.js"],"names":["randomNumber","min","max","Math","round","random","randomString","toString","substr","randomDate","offset","Date","floor","randomUUID","replace","c","r","randomStatus","statusMapper","groups","fetchGroups","perPage","currPage","page","currPerPage","insights","chrome","auth","getUser","then","results","meta","count","length","limit","threshold","sections","rest","Promise","resolve","Array","map","currPercent","devicesInfo","requiredApproval","orphaned","delivering","canariesInfo","sensors","time","status","scanners","kiosks","antenna","groupsDetail","uuid","name","version","last_seen","is_secure","Boolean","rowGroupDetailCreator","groupDevicesInfo","total","newDevices","offlineDevices","deliveringDevices","createNewGroup","groupName","isSecure","systemIDs","push","lastSeen","rowGroupCreator","statusToIcon","done","icon","CheckCircleIcon","color","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","asyncActions","flatMap","a","SELECT_ENTITY","keyBy","k","loadGroups","type","payload","loadThreshold","loadDevicesInfo","loadCanariesInfo","loadGroupsDetail","loadGroupDevicesInfo","selectEntity","id","selected","applyReducerHash","state","isLoading","devices"],"mappings":"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","file":"js/977.35da1ea14a200dde0353.js","sourcesContent":["import { statusMapper } from '../constants';\n\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\nconst randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () => statusMapper[randomNumber(0, statusMapper.length)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (status) => {\n  return {\n    uuid: randomUUID(),\n    name: randomString(),\n    version: `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n    last_seen: randomDate(),\n    is_secure: randomBool(),\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = () => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: randomNumber(0, 100),\n      orphaned: randomNumber(0, 100),\n      delivering: randomNumber(0, 100),\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  return Promise.resolve({\n    results: {\n      sensors: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      scanners: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      kiosks: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      antenna: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n    },\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  return Promise.resolve({\n    uuid,\n    name: randomString(),\n    results: [...new Array(currPerPage)].map(() =>\n      rowGroupDetailCreator(status)\n    ),\n    meta: {\n      count: 200,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID, groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: { icon: CheckCircleIcon, color: successColor.value },\n  error: { icon: ExclamationCircleIcon, color: dangerColor.value },\n  pending: { icon: PauseCircleIcon },\n  updating: { icon: CircleNotchIcon },\n  unknown: { icon: UnknownIcon },\n  warning: { icon: ExclamationTriangleIcon, color: warningColor.value },\n  notification: { icon: BellIcon, color: infoColor.value },\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: {},\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  devices: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name,\n  uuid: payload?.uuid,\n  devices: payload?.results,\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n"],"sourceRoot":""}