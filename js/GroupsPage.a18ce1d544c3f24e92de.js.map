{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/store/action-types.js","webpack://insights-frontend-starter-app/./src/api/index.js","webpack://insights-frontend-starter-app/./src/store/groups.js","webpack://insights-frontend-starter-app/./src/store/threshold.js","webpack://insights-frontend-starter-app/./src/store/devicesInfo.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsInfo.js","webpack://insights-frontend-starter-app/./src/store/actions.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsTable.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/Groups.js"],"names":["LOAD_GROUPS","LOAD_TRESHOLD","LOAD_DEVICES_INFO","asyncActions","flatMap","a","keyBy","k","statusMapper","randomNumber","min","max","Math","round","random","randomString","toString","substr","randomDate","offset","Date","floor","rowCreator","uuid","replace","c","r","name","sensors","is_secure","Boolean","last_seen","status","length","fetchGroups","perPage","currPage","page","currPerPage","insights","chrome","auth","getUser","then","results","Array","map","meta","count","limit","applyReducerHash","state","groups","isLoading","payload","threshold","devicesInfo","dispatch","useDispatch","useSelector","thresholdReducer","isThresholdLoading","isDevicesInfoLoading","devicesInfoReducer","useEffect","sections","rest","getRegistry","register","type","Promise","resolve","currPercent","requiredApproval","orphaned","delivering","Grid","hasGutter","GridItem","span","Card","CardHeader","Title","headingLevel","CardBody","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","legendOrientation","legendPosition","height","width","data","item","x","Object","keys","y","values","legendData","padding","bottom","left","right","top","labels","datum","themeColor","ChartThemeColor","Bullseye","Spinner","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","Link","to","Skeleton","columns","title","transforms","sortable","useState","sortBy","setSortBy","groupsReducer","Table","aria-label","cells","onSort","_e","index","direction","rows","group","toDateString","TableHeader","TableBody","activeFilters","setActiveFilters","loadGroups","Fragment","PageHeader","className","Main","Stack","StackItem","isFilled","PrimaryToolbar","pagination","itemCount","Number","isCompact","dedicatedAction","Button","onClick","console","log","isDisabled","filterConfig","items","label","filterValues","key","onChange","event","value","placeholder","security","charAt","toUpperCase","slice","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","dropDirection"],"mappings":"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","file":"js/GroupsPage.a18ce1d544c3f24e92de.js","sourcesContent":["import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\n\nconst asyncActions = flatMap(\n  [LOAD_GROUPS, LOAD_GROUP_DETAIL, LOAD_TRESHOLD, LOAD_DEVICES_INFO],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n","export const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'warning',\n  'notification',\n];\n\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\nconst randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomwUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () => statusMapper[randomNumber(0, statusMapper.length)];\n\nconst rowCreator = () => ({\n  uuid: randomwUUID(),\n  name: randomString(),\n  sensors: randomNumber(0, 5000),\n  is_secure: randomBool(),\n  last_seen: randomDate(),\n  status: randomStatus(),\n});\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: [...new Array(perPage)].map(rowCreator),\n    meta: {\n      count: 200,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = () => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: randomNumber(0, 100),\n      orphaned: randomNumber(0, 100),\n      delivering: randomNumber(0, 100),\n    },\n  });\n};\n\nexport const canariesInfo = () => {};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Bullseye,\n  Spinner,\n  Title,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Skeleton,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadThreshold, loadDevicesInfo } from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { thresholdReducer, devicesInfoReducer } from '../../store/reducers';\nimport { ChartPie, ChartThemeColor } from '@patternfly/react-charts';\n\nconst GroupsInfo = () => {\n  const dispatch = useDispatch();\n  const threshold = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.threshold || {}\n  );\n  const isThresholdLoading = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.isLoading\n  );\n  const isDevicesInfoLoading = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.devicesInfo || {}\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      thresholdReducer,\n      devicesInfoReducer,\n    });\n    dispatch(loadThreshold());\n    dispatch(loadDevicesInfo());\n    () => registered();\n  }, []);\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody>\n            {isThresholdLoading === false ? (\n              <ChartPie\n                ariaDesc=\"Health threshold\"\n                ariaTitle=\"Health threshold\"\n                constrainToVisibleArea={true}\n                legendOrientation=\"vertical\"\n                legendPosition=\"right\"\n                height={230}\n                width={450}\n                data={threshold.map((item) => ({\n                  x: Object.keys(item)?.[0],\n                  y: Object.values(item)?.[0],\n                }))}\n                legendData={threshold.map((item) => ({\n                  name: `${Object.keys(item)?.[0]}: ${\n                    Object.values(item)?.[0]\n                  }`,\n                }))}\n                padding={{\n                  bottom: 20,\n                  left: 20,\n                  right: 140, // Adjusted to accommodate legend\n                  top: 20,\n                }}\n                labels={({ datum }) => `${datum.x}: ${datum.y}`}\n                themeColor={ChartThemeColor.multiOrdered}\n              />\n            ) : (\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            )}\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.requiredApproval}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Required approvals\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.orphaned}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Orphaned devices\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.delivering}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>Last Canaries</CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default GroupsInfo;\n","import { LOAD_GROUPS, LOAD_TRESHOLD, LOAD_DEVICES_INFO } from './action-types';\nimport { fetchGroups, threshold, devicesInfo } from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(),\n});\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\n\nconst columns = [\n  {\n    title: 'Name of group',\n    transforms: [sortable],\n  },\n  {\n    title: 'Number of devices',\n    transforms: [sortable],\n  },\n  {\n    title: 'Secure',\n    transforms: [sortable],\n  },\n  {\n    title: 'Last seen',\n    transforms: [sortable],\n  },\n  {\n    title: 'Status',\n    transforms: [sortable],\n  },\n];\n\nconst GroupsTable = () => {\n  const [sortBy, setSortBy] = useState({});\n  const groups = useSelector(({ groupsReducer }) => groupsReducer?.groups);\n  return (\n    <Table\n      aria-label=\"Groups table\"\n      cells={columns}\n      sortBy={sortBy}\n      onSort={(_e, index, direction) =>\n        setSortBy(() => ({\n          index,\n          direction,\n        }))\n      }\n      rows={groups.map((group) => ({\n        cells: [\n          {\n            title: <Link to={`/groups/${group?.uuid}`}>{group?.name}</Link>,\n          },\n          group?.sensors,\n          {\n            title: group?.is_secure ? 'secure' : 'non secure',\n          },\n          {\n            title: new Date(group?.last_seen).toDateString(),\n          },\n          group?.status,\n        ],\n      }))}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default GroupsTable;\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadGroups } from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { groupsReducer } from '../../store/reducers';\nimport { statusMapper } from '../../api';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n  Main,\n} from '@redhat-cloud-services/frontend-components';\nimport {\n  Stack,\n  StackItem,\n  Pagination,\n  Skeleton,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  PrimaryToolbar,\n  TableToolbar,\n  SkeletonTable,\n} from '@redhat-cloud-services/frontend-components';\nimport GroupsInfo from './GroupsInfo';\nimport GroupsTable from './GroupsTable';\n\nconst Groups = () => {\n  const [activeFilters, setActiveFilters] = useState({});\n  const dispatch = useDispatch();\n  const isLoading = useSelector(\n    ({ groupsReducer }) => groupsReducer?.isLoading\n  );\n  const meta = useSelector(\n    ({ groupsReducer }) =>\n      groupsReducer?.meta || {\n        page: 1,\n      }\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({ groupsReducer });\n    dispatch(loadGroups());\n    () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Available groups\" />\n      </PageHeader>\n      <Main className=\"edge-groups\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups__info\">\n            <GroupsInfo />\n          </StackItem>\n          <StackItem isFilled>\n            <PrimaryToolbar\n              {...(isLoading === false\n                ? {\n                    pagination: {\n                      itemCount: meta?.count,\n                      page: meta?.offset / meta?.limit + 1,\n                      perPage: Number(meta?.limit),\n                      isCompact: true,\n                    },\n                    dedicatedAction: (\n                      <Button\n                        onClick={() => console.log('ff')}\n                        isDisabled={isLoading !== false}\n                      >\n                        Add group\n                      </Button>\n                    ),\n                    filterConfig: {\n                      items: [\n                        {\n                          label: 'Name',\n                          type: 'text',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            value: activeFilters?.name || '',\n                            placeholder: 'Filter by name',\n                          },\n                        },\n                        {\n                          label: 'Security',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: [\n                              {\n                                value: 'isSecure',\n                                label: 'Secure',\n                              },\n                              {\n                                value: 'nonSecure',\n                                label: 'Not secure',\n                              },\n                            ],\n                            value: activeFilters?.security || [],\n                          },\n                        },\n                        {\n                          label: 'Status',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: statusMapper.map((item) => ({\n                              value: item,\n                              label: `${item\n                                .charAt(0)\n                                .toUpperCase()}${item.slice(1)}`,\n                            })),\n                            value: activeFilters?.status || [],\n                          },\n                        },\n                      ],\n                    },\n                  }\n                : {\n                    pagination: <Skeleton />,\n                  })}\n            />\n            {isLoading === false ? (\n              <GroupsTable />\n            ) : (\n              <SkeletonTable colSize={5} rowSize={15} />\n            )}\n            <TableToolbar isFooter>\n              {isLoading === false && (\n                <Pagination\n                  itemCount={meta?.count}\n                  page={meta?.offset / meta?.limit + 1}\n                  perPage={Number(meta?.limit)}\n                  dropDirection=\"up\"\n                />\n              )}\n            </TableToolbar>\n          </StackItem>\n        </Stack>\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default Groups;\n"],"sourceRoot":""}