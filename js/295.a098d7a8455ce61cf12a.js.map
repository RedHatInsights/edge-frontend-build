{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/components/StatusIcon.js","webpack://insights-frontend-starter-app/./src/components/SecureIcon.js","webpack://insights-frontend-starter-app/./src/constants.js","webpack://insights-frontend-starter-app/./src/store/action-types.js","webpack://insights-frontend-starter-app/./src/api/index.js","webpack://insights-frontend-starter-app/./src/store/actions.js","webpack://insights-frontend-starter-app/./src/store/groups.js","webpack://insights-frontend-starter-app/./src/store/threshold.js","webpack://insights-frontend-starter-app/./src/store/devicesInfo.js","webpack://insights-frontend-starter-app/./src/store/canariesInfo.js","webpack://insights-frontend-starter-app/./src/store/groupsDetail.js","webpack://insights-frontend-starter-app/./src/store/groupDevicesInfo.js"],"names":["StatusIcon","status","props","Icon","statusToIcon","icon","UnknownIcon","color","propTypes","PropTypes","statusMapper","SecureIcon","isSecure","LockIcon","LockOpenIcon","defaultProps","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","asyncActions","flatMap","a","keyBy","k","randomNumber","min","max","Math","round","random","randomString","toString","substr","randomDate","offset","Date","floor","randomwUUID","replace","c","r","randomStatus","rowGroupCreator","uuid","name","sensors","is_secure","Boolean","last_seen","fetchGroups","perPage","currPage","page","currPerPage","insights","chrome","auth","getUser","then","results","Array","map","meta","count","limit","groupsDetail","Promise","resolve","version","rowGroupDetailCreator","groupDevicesInfo","total","newDevices","offlineDevices","deliveringDevices","loadGroups","type","payload","loadThreshold","sections","rest","currPercent","loadDevicesInfo","requiredApproval","orphaned","delivering","loadCanariesInfo","time","scanners","kiosks","antenna","loadGroupsDetail","loadGroupDevicesInfo","applyReducerHash","state","groups","isLoading","threshold","devicesInfo","canariesInfo","devices"],"mappings":"8QAKMA,EAAa,SAAC,GAAyB,QAAvBC,EAAuB,EAAvBA,OAAWC,EAAY,kBACrCC,GAAmB,OAAZC,UAAY,IAAZA,KAAA,UAAAA,IAAeH,UAAf,eAAwBI,OAAQC,KAC7C,OAAO,kBAACH,EAAD,OAAUD,EAAV,CAAiBK,MAAK,OAAEH,UAAF,IAAEA,KAAF,UAAEA,IAAeH,UAAjB,aAAE,EAAwBM,UAGzDP,EAAWQ,UAAY,CACrBP,OAAQQ,UAAgBC,MAG1B,U,0BCVMC,EAAa,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,SAAaV,EAAY,oBACvCC,EAAOS,EAAWC,KAAWC,KACnC,OAAO,kBAACX,EAASD,IAGnBS,EAAWH,UAAY,CACrBI,SAAUH,UAGZE,EAAWI,aAAe,CACxBH,UAAU,GAGZ,W,iLCFaF,EAAe,CAC1B,OACA,QACA,UACA,UACA,WACA,UACA,gBAGWN,EAAe,CAC1BY,KAAM,CAAEX,KAAMY,UAAiBV,MAAOW,WACtCC,MAAO,CAAEd,KAAMe,UAAuBb,MAAOc,WAC7CC,QAAS,CAAEjB,KAAMkB,MACjBC,SAAU,CAAEnB,KAAMoB,MAClBC,QAAS,CAAErB,KAAMC,MACjBqB,QAAS,CAAEtB,KAAMuB,UAAyBrB,MAAOsB,WACjDC,aAAc,CAAEzB,KAAM0B,UAAUxB,MAAOyB,a,+HC7B5BC,EAAc,cACdC,EAAoB,oBACpBC,EAAgB,gBAChBC,EAAoB,oBACpBC,EAAqB,qBACrBC,EAA0B,0BAEjCC,E,MAAeC,GACnB,CACEP,EACAC,EACAC,EACAC,EACAC,IAEF,SAACI,GAAD,MAAO,CAACA,EAAD,UAAOA,EAAP,sBAAuBA,EAAvB,wBAAyCA,EAAzC,iBAEmBC,IAAMH,GAAc,SAACI,GAAD,OAAOA,M,2JClBjDC,EAAe,SAACC,EAAKC,GAAN,OACnBC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,GAAOA,IACrCK,EAAe,kBAAMH,KAAKE,SAASE,SAAS,IAAIC,OAAO,EAAG,KAE1DC,EAAa,eAACC,EAAD,uDAAU,KAAV,OACjB,IAAIC,MAAM,IAAIA,KAASR,KAAKS,MAAMT,KAAKE,SAAWK,KAE9CG,EAAc,iBAClB,uCAAuCC,QAAQ,SAAS,SAACC,GACvD,IAAMC,EAAqB,GAAhBb,KAAKE,SAAiB,EACjC,OAAa,KAALU,EAAWC,EAAS,EAAJA,EAAW,GAAKT,SAAS,QAG/CU,EAAe,kBAAMnD,IAAakC,EAAa,EAAGlC,cAElDoD,EAAkB,iBAAO,CAC7BC,KAAMN,IACNO,KAAMd,IACNe,QAASrB,EAAa,EAAG,KACzBsB,UAhBuBC,QAAQpB,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAiBhEmB,UAAWf,IACXpD,OAAQ4D,MAaGQ,EAAc,SAAC,GAAsB,IAApBC,EAAoB,EAApBA,QACtBC,EAD0C,EAAXC,MACZ,EACnBC,EAAcH,GAAW,GAC/B,OAAOI,SAASC,OAAOC,KAAKC,UAAUC,MAAK,iBAAO,CAChDC,QAAS,IAAI,IAAIC,MAAMP,IAAcQ,IAAInB,GACzCoB,KAAM,CACJC,MAAO,IACPC,MAAOX,EAAcF,EACrBjB,OAAQmB,GAAeF,EAAW,SAoD3Bc,EAAe,SAACtB,EAAD,GAA6B,IACjDQ,EADiD,EAApBC,MACV,EACnBC,EAFiD,EAAdH,SAEV,GACzBrE,EAAS4D,IACf,OAAOyB,QAAQC,QAAQ,CACrBxB,OACAC,KAAMd,IACN6B,QAAS,IAAI,IAAIC,MAAMP,IAAcQ,KAAI,kBA7Ef,SAAChF,GAC7B,MAAO,CACL8D,KAAMN,IACNO,KAAMd,IACNsC,QAAS,GAAF,OAAK5C,EAAa,EAAG,IAArB,YAA4BA,EAAa,EAAG,KACnDwB,UAAWf,IACXpD,UAwEEwF,CAAsBxF,MAExBiF,KAAM,CACJC,MAAO,IACPC,MAAOX,EAAcF,EACrBjB,OAAQmB,GAAeF,EAAW,OAK3BmB,EAAmB,SAAC3B,GAC/B,OAAOuB,QAAQC,QAAQ,CACrBxB,OACA4B,MAAO,IACPC,WAAYhD,EAAa,EAAG,IAC5BiD,eAAgBjD,EAAa,EAAG,IAChCkD,kBAAmBlD,EAAa,EAAG,OCvG1BmD,EAAa,eAACzB,EAAD,uDAAW,GAAIE,EAAf,uDAAsB,EAAtB,MAA6B,CACrDwB,KAAM/D,KACNgE,QAAS5B,EAAY,CAAEC,UAASE,WAGrB0B,EAAgB,iBAAO,CAClCF,KAAM7D,KACN8D,SD0BME,EAAWvD,EAAa,EAAG,GAC7BwD,EAAO,IACJd,QAAQC,QAAQ,CACrBR,QAAS,IAAI,IAAIC,MAAMmB,IAAWlB,KAAI,WACpC,IAAMoB,EAAczD,EAAa,EAAGwD,GAEpC,OADAA,GAAcC,EACd,OACGnD,IAAiBmD,UARD,IACjBF,EACFC,GCxBOE,EAAkB,iBAAO,CACpCN,KAAM5D,KACN6D,QDmCOX,QAAQC,QAAQ,CACrBR,QAAS,CACPwB,iBAAkB3D,EAAa,EAAG,KAClC4D,SAAU5D,EAAa,EAAG,KAC1B6D,WAAY7D,EAAa,EAAG,UCpCrB8D,EAAmB,iBAAO,CACrCV,KAAM3D,KACN4D,QDwCOX,QAAQC,QAAQ,CACrBR,QAAS,CACPd,QAAS,CACP0C,KAAMtD,IACNpD,OAAQ4D,KAEV+C,SAAU,CACRD,KAAMtD,IACNpD,OAAQ4D,KAEVgD,OAAQ,CACNF,KAAMtD,IACNpD,OAAQ4D,KAEViD,QAAS,CACPH,KAAMtD,IACNpD,OAAQ4D,UCrDHkD,EAAmB,SAAChD,EAAMS,EAAMF,GAAb,MAA0B,CACxD0B,KAAM9D,KACN+D,QAASZ,EAAatB,EAAM,CAAES,OAAMF,cAGzB0C,EAAuB,SAACjD,GAAD,MAAW,CAC7CiC,KAAM1D,KACN2D,QAASP,EAAiB3B,M,6sBC3B5B,SAAekD,SAAgB,qBAEvBhF,KAFuB,aAZL,SAACiF,GAAD,cACrBA,GADqB,IAExBC,OAAQ,GACRC,WAAW,OASkB,gBAGvBnF,KAHuB,eAPH,SAACiF,EAAD,OAAUjB,EAAV,EAAUA,QAAV,cACvBiB,GADuB,IAE1BE,WAAW,EACXD,QAAQlB,aAAA,EAAAA,EAASlB,UAAW,GAC5BG,MAAMe,aAAA,EAAAA,EAASf,OAAQ,QAGM,GAdV,I,ukBCarB,SAAe+B,SAAgB,SAAC,YAExB9E,KAFuB,aAXF,SAAC+E,GAAD,SAAC,KACzBA,GADwB,IAE3BG,UAAW,GACXD,WAAW,OAQkB,IAAC,YAGxBjF,KAHuB,eANA,SAAC+E,EAAD,OAAUjB,EAAV,EAAUA,QAAV,SAAC,KAC3BiB,GAD0B,IAE7BG,UAAWpB,aAAF,EAAEA,EAASlB,QACpBqC,WAAW,OAGkB,GAbV,I,ukBCarB,SAAeH,SAAgB,SAAC,YAExB7E,KAFuB,aAXA,SAAC8E,GAAD,SAAC,KAC3BA,GAD0B,IAE7BI,YAAa,GACbF,WAAW,OAQkB,IAAC,YAGxBhF,KAHuB,eANE,SAAC8E,EAAD,OAAUjB,EAAV,EAAUA,QAAV,SAAC,KAC7BiB,GAD4B,IAE/BI,YAAarB,aAAF,EAAEA,EAASlB,QACtBqC,WAAW,OAGkB,GAbV,I,ukBCarB,SAAeH,SAAgB,SAAC,YAExB5E,KAFuB,aAXC,SAAC6E,GAAD,SAAC,KAC5BA,GAD2B,IAE9BK,aAAc,GACdH,WAAW,OAQkB,IAAC,YAGxB/E,KAHuB,eANG,SAAC6E,EAAD,OAAUjB,EAAV,EAAUA,QAAV,SAAC,KAC9BiB,GAD6B,IAEhCK,aAActB,aAAF,EAAEA,EAASlB,QACvBqC,WAAW,OAGkB,GAbV,I,ukBCgBrB,SAAeH,SAAgB,SAAC,YAExB/E,KAFuB,aAdL,SAACgF,GAAD,SAAC,KACtBA,GADqB,IAExBM,QAAS,GACTJ,WAAW,OAWkB,IAAC,YAGxBlF,KAHuB,eATH,SAACgF,EAAD,OAAUjB,EAAV,EAAUA,QAAV,SAAC,KACxBiB,GADuB,IAE1BE,WAAW,EACXpD,KAAMiC,aAAF,EAAEA,EAASjC,KACfD,KAAMkC,aAAF,EAAEA,EAASlC,KACfyD,QAASvB,aAAF,EAAEA,EAASlB,QAClBG,MAAMe,aAAA,EAAAA,EAASf,OAAQ,QAGM,GAhBV,I,ukBCarB,SAAe+B,SAAgB,SAAC,YAExB3E,KAFuB,aAXK,SAAC4E,GAAD,SAAC,KAChCA,GAD+B,IAElCI,YAAa,GACbF,WAAW,OAQkB,IAAC,YAGxB9E,KAHuB,eANO,SAAC4E,EAAD,OAAUjB,EAAV,EAAUA,QAAV,SAAC,KAClCiB,GADiC,IAEpCI,YAAarB,aAAF,EAAEA,EAASlB,QACtBqC,WAAW,OAGkB,GAbV","file":"js/295.a098d7a8455ce61cf12a.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return <Icon {...props} color={statusToIcon?.[status]?.color} />;\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: { icon: CheckCircleIcon, color: successColor.value },\n  error: { icon: ExclamationCircleIcon, color: dangerColor.value },\n  pending: { icon: PauseCircleIcon },\n  updating: { icon: CircleNotchIcon },\n  unknown: { icon: UnknownIcon },\n  warning: { icon: ExclamationTriangleIcon, color: warningColor.value },\n  notification: { icon: BellIcon, color: infoColor.value },\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n","import { statusMapper } from '../constants';\n\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\nconst randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomwUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () => statusMapper[randomNumber(0, statusMapper.length)];\n\nconst rowGroupCreator = () => ({\n  uuid: randomwUUID(),\n  name: randomString(),\n  sensors: randomNumber(0, 5000),\n  is_secure: randomBool(),\n  last_seen: randomDate(),\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (status) => {\n  return {\n    uuid: randomwUUID(),\n    name: randomString(),\n    version: `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n    last_seen: randomDate(),\n    status,\n  };\n};\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: [...new Array(currPerPage)].map(rowGroupCreator),\n    meta: {\n      count: 200,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = () => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: randomNumber(0, 100),\n      orphaned: randomNumber(0, 100),\n      delivering: randomNumber(0, 100),\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  return Promise.resolve({\n    results: {\n      sensors: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      scanners: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      kiosks: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      antenna: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n    },\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  return Promise.resolve({\n    uuid,\n    name: randomString(),\n    results: [...new Array(currPerPage)].map(() =>\n      rowGroupDetailCreator(status)\n    ),\n    meta: {\n      count: 200,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: {},\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  devices: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name,\n  uuid: payload?.uuid,\n  devices: payload?.results,\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n"],"sourceRoot":""}