{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/components/StatusIcon.js","webpack://insights-frontend-starter-app/./src/components/SecureIcon.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsInfo.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsTable.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/Groups.js"],"names":["StatusIcon","status","props","Icon","statusToIcon","icon","UnknownIcon","color","propTypes","PropTypes","statusMapper","SecureIcon","isSecure","LockIcon","LockOpenIcon","defaultProps","dispatch","useDispatch","threshold","useSelector","thresholdReducer","isThresholdLoading","isLoading","isDevicesInfoLoading","devicesInfoReducer","devicesInfo","canariesInfo","canariesInfoReducer","isCanariesInfoLoading","useEffect","loadThreshold","loadDevicesInfo","loadCanariesInfo","Grid","hasGutter","GridItem","span","Card","CardHeader","Title","headingLevel","CardBody","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","legendOrientation","legendPosition","height","width","data","map","item","x","Object","keys","y","values","legendData","name","padding","bottom","left","right","top","labels","datum","themeColor","ChartThemeColor","Bullseye","Spinner","TextContent","TextList","component","TextListVariants","TextListItem","TextListItemVariants","Text","TextVariants","Link","to","requiredApproval","Skeleton","orphaned","delivering","Level","LevelItem","DateFormat","date","sensors","time","scanners","kiosks","antenna","CardFooter","Split","SplitItem","isFilled","columns","title","transforms","sortable","cellWidth","GroupsTable","onAddNewGroup","useState","sortBy","setSortBy","groups","groupsReducer","Table","aria-label","length","actions","onClick","console","log","cells","onSort","_e","index","direction","rows","group","uuid","is_secure","last_seen","EmptyState","variant","EmptyStateVariant","size","EmptyStateBody","Button","colSpan","TableHeader","TableBody","NewGroup","lazy","activeFilters","setActiveFilters","isNewGroupOpen","setIsNewGroupOpen","meta","page","getRegistry","register","loadGroups","Fragment","PageHeader","className","Main","Stack","StackItem","PrimaryToolbar","pagination","itemCount","count","offset","limit","perPage","Number","isCompact","dedicatedAction","isDisabled","filterConfig","items","label","type","filterValues","key","onChange","event","value","placeholder","security","charAt","toUpperCase","slice","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","dropDirection","Suspense","fallback","isOpened","onAction","isSubmit","createNewGroup","groupName","systemIDs","selected"],"mappings":"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","file":"js/GroupsPage.ebe1195ff396dd26d46e.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return <Icon {...props} color={statusToIcon?.[status]?.color} />;\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Bullseye,\n  Spinner,\n  Title,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Skeleton,\n  Text,\n  TextVariants,\n  Level,\n  LevelItem,\n  CardFooter,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  loadThreshold,\n  loadDevicesInfo,\n  loadCanariesInfo,\n} from '../../store/actions';\nimport { StatusIcon } from '../../components';\nimport { ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\n\nconst GroupsInfo = () => {\n  const dispatch = useDispatch();\n  const threshold = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.threshold || {}\n  );\n  const isThresholdLoading = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.isLoading\n  );\n  const isDevicesInfoLoading = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.devicesInfo || {}\n  );\n  const canariesInfo = useSelector(\n    ({ canariesInfoReducer }) => canariesInfoReducer?.canariesInfo || {}\n  );\n  const isCanariesInfoLoading = useSelector(\n    ({ canariesInfoReducer }) => canariesInfoReducer?.isLoading\n  );\n  useEffect(() => {\n    dispatch(loadThreshold());\n    dispatch(loadDevicesInfo());\n    dispatch(loadCanariesInfo());\n  }, []);\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody>\n            {isThresholdLoading === false ? (\n              <ChartPie\n                ariaDesc=\"Health threshold\"\n                ariaTitle=\"Health threshold\"\n                constrainToVisibleArea={true}\n                legendOrientation=\"vertical\"\n                legendPosition=\"right\"\n                height={230}\n                width={450}\n                data={threshold.map((item) => ({\n                  x: Object.keys(item)?.[0],\n                  y: Object.values(item)?.[0],\n                }))}\n                legendData={threshold.map((item) => ({\n                  name: `${Object.keys(item)?.[0]}: ${\n                    Object.values(item)?.[0]\n                  }`,\n                }))}\n                padding={{\n                  bottom: 20,\n                  left: 20,\n                  right: 140, // Adjusted to accommodate legend\n                  top: 20,\n                }}\n                labels={({ datum }) => `${datum.x}: ${datum.y}`}\n                themeColor={ChartThemeColor.multiOrdered}\n              />\n            ) : (\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            )}\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.requiredApproval}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Required approvals\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.orphaned}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Orphaned devices\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.delivering}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Last Canaries</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Sensors</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.sensors?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.sensors?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Scanners</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.scanners?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.scanners?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Kiosks</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.kiosks?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.kiosks?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Antenna</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.antenna?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.antenna?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n          <CardFooter>\n            <Split>\n              <SplitItem isFilled />\n              <SplitItem>\n                <Link to=\"/groups\">\n                  See canaries <ArrowRightIcon />\n                </Link>\n              </SplitItem>\n            </Split>\n          </CardFooter>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default GroupsInfo;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateVariant,\n  Title,\n  EmptyStateBody,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { StatusIcon, SecureIcon } from '../../components';\nimport { Link } from 'react-router-dom';\n\nconst columns = [\n  {\n    title: 'Name of group',\n    transforms: [sortable, cellWidth('max')],\n  },\n  {\n    title: 'Number of devices',\n    transforms: [sortable],\n  },\n  {\n    title: 'Secure',\n    transforms: [sortable, cellWidth(10)],\n  },\n  {\n    title: 'Last seen',\n    transforms: [sortable, cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    transforms: [sortable, cellWidth(10)],\n  },\n];\n\nconst GroupsTable = ({ onAddNewGroup }) => {\n  const [sortBy, setSortBy] = useState({});\n  const groups = useSelector(({ groupsReducer }) => groupsReducer?.groups);\n  return (\n    <Table\n      aria-label=\"Groups table\"\n      {...(groups.length > 0 && {\n        actions: [\n          {\n            title: 'Adopt',\n            onClick: console.log,\n          },\n          {\n            title: 'Reject',\n            onClick: console.log,\n          },\n        ],\n      })}\n      cells={columns}\n      sortBy={sortBy}\n      onSort={(_e, index, direction) =>\n        setSortBy(() => ({\n          index,\n          direction,\n        }))\n      }\n      rows={\n        groups.length > 0\n          ? groups.map((group) => ({\n              cells: [\n                {\n                  title: (\n                    <Link to={`/groups/${group?.uuid}`}>{group?.name}</Link>\n                  ),\n                },\n                group?.sensors?.length,\n                {\n                  title: <SecureIcon isSecure={group?.is_secure} />,\n                },\n                {\n                  title: <DateFormat date={group?.last_seen} />,\n                },\n                {\n                  title: <StatusIcon status={group?.status} />,\n                },\n              ],\n            }))\n          : [\n              {\n                cells: [\n                  {\n                    title: (\n                      <Bullseye>\n                        <EmptyState variant={EmptyStateVariant.full}>\n                          <Title headingLevel=\"h5\" size=\"lg\">\n                            No matching groups found\n                          </Title>\n                          <EmptyStateBody>\n                            This filter criteria matches no groups. <br /> Try\n                            changing your filter settings. Or adding new group.\n                          </EmptyStateBody>\n                          <Button variant=\"primary\" onClick={onAddNewGroup}>\n                            Add group\n                          </Button>\n                        </EmptyState>\n                      </Bullseye>\n                    ),\n                    props: {\n                      colSpan: columns.length + 1,\n                    },\n                  },\n                ],\n              },\n            ]\n      }\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nGroupsTable.propTypes = {\n  onAddNewGroup: PropTypes.func,\n};\n\nexport default GroupsTable;\n","import React, { useEffect, Fragment, useState, lazy, Suspense } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNewGroup } from '../../api/';\nimport { loadGroups } from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport {\n  groupsReducer,\n  thresholdReducer,\n  devicesInfoReducer,\n  canariesInfoReducer,\n} from '../../store/reducers';\nimport { statusMapper } from '../../constants';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n  Main,\n} from '@redhat-cloud-services/frontend-components';\nimport {\n  Stack,\n  StackItem,\n  Pagination,\n  Skeleton,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  PrimaryToolbar,\n  TableToolbar,\n  SkeletonTable,\n} from '@redhat-cloud-services/frontend-components';\nimport GroupsInfo from './GroupsInfo';\nimport GroupsTable from './GroupsTable';\nconst NewGroup = lazy(() => import('./NewGroup'));\n\nconst Groups = () => {\n  const [activeFilters, setActiveFilters] = useState({});\n  const [isNewGroupOpen, setIsNewGroupOpen] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(\n    ({ groupsReducer }) => groupsReducer?.isLoading\n  );\n  const meta = useSelector(\n    ({ groupsReducer }) =>\n      groupsReducer?.meta || {\n        page: 1,\n      }\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      groupsReducer,\n      thresholdReducer,\n      devicesInfoReducer,\n      canariesInfoReducer,\n    });\n    dispatch(loadGroups());\n    () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Available groups\" />\n      </PageHeader>\n      <Main className=\"edge-groups\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups__info\">\n            <GroupsInfo />\n          </StackItem>\n          <StackItem isFilled>\n            <PrimaryToolbar\n              {...(isLoading === false\n                ? {\n                    pagination: {\n                      itemCount: meta?.count,\n                      page: meta?.offset / meta?.limit + 1,\n                      perPage: Number(meta?.limit),\n                      isCompact: true,\n                    },\n                    dedicatedAction: (\n                      <Button\n                        onClick={() => setIsNewGroupOpen(true)}\n                        isDisabled={isLoading !== false}\n                      >\n                        Add group\n                      </Button>\n                    ),\n                    filterConfig: {\n                      items: [\n                        {\n                          label: 'Name',\n                          type: 'text',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            value: activeFilters?.name || '',\n                            placeholder: 'Filter by name',\n                          },\n                        },\n                        {\n                          label: 'Security',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: [\n                              {\n                                value: 'isSecure',\n                                label: 'Secure',\n                              },\n                              {\n                                value: 'nonSecure',\n                                label: 'Not secure',\n                              },\n                            ],\n                            value: activeFilters?.security || [],\n                          },\n                        },\n                        {\n                          label: 'Status',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: statusMapper.map((item) => ({\n                              value: item,\n                              label: `${item\n                                .charAt(0)\n                                .toUpperCase()}${item.slice(1)}`,\n                            })),\n                            value: activeFilters?.status || [],\n                          },\n                        },\n                      ],\n                    },\n                  }\n                : {\n                    pagination: <Skeleton />,\n                  })}\n            />\n            {isLoading === false ? (\n              <GroupsTable onAddNewGroup={() => setIsNewGroupOpen(true)} />\n            ) : (\n              <SkeletonTable colSize={5} rowSize={15} />\n            )}\n            <TableToolbar isFooter>\n              {isLoading === false && (\n                <Pagination\n                  itemCount={meta?.count}\n                  page={meta?.offset / meta?.limit + 1}\n                  perPage={Number(meta?.limit)}\n                  dropDirection=\"up\"\n                />\n              )}\n            </TableToolbar>\n          </StackItem>\n        </Stack>\n      </Main>\n      {isNewGroupOpen && (\n        <Suspense fallback=\"\">\n          <NewGroup\n            isOpened={isNewGroupOpen}\n            onAction={(isSubmit, values) => {\n              if (isSubmit) {\n                (async () => {\n                  await createNewGroup({\n                    groupName: values['group-name'],\n                    isSecure: values['is-secure'],\n                    systemIDs: values.selected,\n                  });\n                  dispatch(loadGroups());\n                })();\n              }\n              setIsNewGroupOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Groups;\n"],"sourceRoot":""}