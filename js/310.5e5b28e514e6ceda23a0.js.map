{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/components/form/constants.js","webpack://insights-frontend-starter-app/./src/store/inventory-table.js","webpack://insights-frontend-starter-app/./src/components/form/FormInventory.js","webpack://insights-frontend-starter-app/./src/components/form/componentTypes.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/newGroupSchema.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/NewGroup.js"],"names":["InventoryContext","React","entitySelected","state","payload","selected","Map","id","rows","forEach","row","set","selectedRow","find","clear","calculateChecked","every","has","length","some","FormInventoryTable","name","FieldProvider","validate","FormSpyProvider","formOptions","component","registry","rest","dispatch","useDispatch","inventory","useRef","useSelector","entities","loaded","Inventory","bulkSelect","count","size","items","title","onClick","selectEntity","checked","onSelect","value","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","onLoad","mergeWithEntities","register","applyReducerHash","SELECT_ENTITY","WrappedFormInventoryTable","props","Consumer","Provider","store","Fragment","propTypes","PropTypes","INVENTORY_TABLE","fields","componentTypes","inModal","nextStep","type","label","isRequired","FormTemplate","showFormControls","NewGroup","onAction","useState","setRegistry","useEffect","ReducerRegistry","promiseMiddleware","schema","componentMapper","onSubmit","values","getState","Array","from","keys","onCancel","args","isOpened","defaultProps"],"mappings":"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","file":"js/310.5e5b28e514e6ceda23a0.js","sourcesContent":["import React from 'react';\n\nexport const InventoryContext = React.createContext({});\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { SELECT_ENTITY } from './action-types';\n\nconst entitySelected = (state, { payload }) => {\n  const selected = state.selected || new Map();\n  if (payload.selected) {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.set(row.id, row));\n    } else {\n      const selectedRow =\n        state.rows && state.rows.find(({ id }) => id === payload.id);\n      selected.set(payload.id, { ...(selectedRow || {}), id: payload.id });\n    }\n  } else {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.delete(row.id));\n    } else if (payload.id === -1) {\n      selected.clear();\n    } else {\n      selected.delete(payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected: new Map(selected),\n  };\n};\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    [SELECT_ENTITY]: entitySelected,\n  });\n","import React, { Fragment, useRef } from 'react';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/esm/Inventory';\nimport PropTypes from 'prop-types';\nimport { InventoryContext } from './constants';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { entitiesReducer } from '../../store/inventory-table';\nimport { selectEntity } from '../../store/actions';\n\nconst calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nconst FormInventoryTable = ({\n  name,\n  FieldProvider,\n  validate,\n  FormSpyProvider,\n  formOptions,\n  component,\n  registry,\n  ...rest\n}) => {\n  const dispatch = useDispatch();\n  const inventory = useRef(null);\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n  const calculateSelected = () => (selected ? selected.size : 0);\n\n  return (\n    <InventoryTable\n      {...rest}\n      bulkSelect={{\n        count: calculateSelected(),\n        items: [\n          {\n            title: 'Select none (0)',\n            onClick: () => {\n              dispatch(selectEntity(-1, false));\n            },\n          },\n          {\n            ...(loaded && rows && rows.length > 0\n              ? {\n                  title: `Select page (${rows.length})`,\n                  onClick: () => {\n                    dispatch(selectEntity(0, true));\n                  },\n                }\n              : {}),\n          },\n        ],\n        checked: calculateChecked(rows, selected),\n        onSelect: (value) => {\n          dispatch(selectEntity(0, value));\n        },\n      }}\n      ref={inventory}\n      onRefresh={onRefresh}\n      tableProps={{\n        canSelectAll: false,\n      }}\n      onLoad={({ mergeWithEntities }) => {\n        registry?.register?.(mergeWithEntities(entitiesReducer()));\n      }}\n    />\n  );\n};\n\nconst WrappedFormInventoryTable = (props) => (\n  <InventoryContext.Consumer>\n    {({ registry }) =>\n      registry ? (\n        <Provider store={registry.store}>\n          <FormInventoryTable registry={registry} {...props} />\n        </Provider>\n      ) : (\n        <Fragment />\n      )\n    }\n  </InventoryContext.Consumer>\n);\n\nWrappedFormInventoryTable.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n  validate: PropTypes.any,\n  name: PropTypes.string,\n  size: PropTypes.string,\n  component: PropTypes.any,\n};\n\nFormInventoryTable.propTypes = {\n  ...WrappedFormInventoryTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n};\n\nexport default WrappedFormInventoryTable;\n","export const INVENTORY_TABLE = 'inventoryTable';\n","import componentTypes from '@data-driven-forms/react-form-renderer/dist/esm/component-types';\nimport { INVENTORY_TABLE } from '../../components/form';\n\nexport default {\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'wizzard',\n      inModal: true,\n      title: 'Create new group',\n      fields: [\n        {\n          title: 'General information',\n          name: 'step-1',\n          nextStep: 'choos-systems',\n          fields: [\n            {\n              component: componentTypes.TEXT_FIELD,\n              name: 'group-name',\n              type: 'text',\n              label: 'Group name',\n              isRequired: true,\n              validate: [\n                {\n                  type: 'required',\n                },\n              ],\n            },\n            {\n              component: componentTypes.SWITCH,\n              name: 'is-secure',\n              label: 'Is secure',\n            },\n          ],\n        },\n        {\n          title: 'Choose systems',\n          name: 'choos-systems',\n          fields: [\n            {\n              component: INVENTORY_TABLE,\n              name: 'select-system',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/dist/esm/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/dist/esm/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/dist/esm/component-mapper';\nimport schema from './newGroupSchema';\nimport { FormInventoryTable, INVENTORY_TABLE } from '../../components/form';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { InventoryContext } from '../../components/form/constants';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nconst FormTemplate = (props) => (\n  <Pf4FormTemplate {...props} showFormControls={false} />\n);\n\nconst NewGroup = ({ onAction }) => {\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n  }, []);\n\n  return (\n    <InventoryContext.Provider value={{ registry }}>\n      <FormRenderer\n        schema={schema}\n        FormTemplate={FormTemplate}\n        componentMapper={{\n          ...componentMapper,\n          [INVENTORY_TABLE]: FormInventoryTable,\n        }}\n        onSubmit={(values) => {\n          const { entities } = registry.store.getState();\n          onAction(true, {\n            ...values,\n            selected: Array.from(entities?.selected?.keys() || []),\n          });\n        }}\n        onCancel={(...args) => onAction(false, ...args)}\n      />\n    </InventoryContext.Provider>\n  );\n};\n\nNewGroup.propTypes = {\n  isOpened: PropTypes.bool,\n  onAction: PropTypes.func,\n};\n\nNewGroup.defaultProps = {\n  onAction: () => {},\n};\n\nexport default NewGroup;\n"],"sourceRoot":""}