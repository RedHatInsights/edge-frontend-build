{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsInfo.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsTable.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/newGroupSchema.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/Groups.js"],"names":["dispatch","useDispatch","threshold","useSelector","thresholdReducer","isThresholdLoading","isLoading","isDevicesInfoLoading","devicesInfoReducer","devicesInfo","canariesInfo","canariesInfoReducer","isCanariesInfoLoading","useEffect","loadThreshold","loadDevicesInfo","loadCanariesInfo","Grid","hasGutter","GridItem","span","Card","CardHeader","Title","headingLevel","CardBody","ChartPie","ariaDesc","ariaTitle","constrainToVisibleArea","legendOrientation","legendPosition","height","width","data","map","item","x","Object","keys","y","values","legendData","name","padding","bottom","left","right","top","labels","datum","themeColor","ChartThemeColor","Bullseye","Spinner","TextContent","TextList","component","TextListVariants","TextListItem","T","TextListItemVariants","Text","TextVariants","Link","to","requiredApproval","Skeleton","orphaned","delivering","Level","LevelItem","DateFormat","date","sensors","time","status","scanners","kiosks","antenna","CardFooter","Split","SplitItem","isFilled","columns","title","transforms","sortable","cellWidth","GroupsTable","onAddNewGroup","useState","sortBy","setSortBy","groups","groupsReducer","Table","aria-label","length","actions","onClick","console","log","cells","onSort","_e","index","direction","rows","group","uuid","isSecure","is_secure","last_seen","EmptyState","variant","EmptyStateVariant","size","EmptyStateBody","Button","props","colSpan","TableHeader","TableBody","propTypes","PropTypes","fields","componentTypes","inModal","nextStep","type","label","isRequired","validate","INVENTORY_TABLE","InventoryForm","lazy","activeFilters","setActiveFilters","isNewGroupOpen","setIsNewGroupOpen","meta","page","getRegistry","register","loadGroups","Fragment","PageHeader","className","Main","Stack","StackItem","PrimaryToolbar","pagination","itemCount","count","offset","limit","perPage","Number","isCompact","dedicatedAction","isDisabled","filterConfig","items","filterValues","key","onChange","event","value","placeholder","security","statusMapper","charAt","toUpperCase","slice","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","dropDirection","Suspense","fallback","schema","isOpened","onAction","isSubmit","createNewGroup","groupName","systemIDs","selected"],"mappings":"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","file":"js/GroupsPage.262e001aa5b8d6c3d2e7.js","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Bullseye,\n  Spinner,\n  Title,\n  TextContent,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Skeleton,\n  Text,\n  TextVariants,\n  Level,\n  LevelItem,\n  CardFooter,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  loadThreshold,\n  loadDevicesInfo,\n  loadCanariesInfo,\n} from '../../store/actions';\nimport { StatusIcon } from '../../components';\nimport { ChartPie, ChartThemeColor } from '@patternfly/react-charts';\nimport { ArrowRightIcon } from '@patternfly/react-icons';\n\nconst GroupsInfo = () => {\n  const dispatch = useDispatch();\n  const threshold = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.threshold || {}\n  );\n  const isThresholdLoading = useSelector(\n    ({ thresholdReducer }) => thresholdReducer?.isLoading\n  );\n  const isDevicesInfoLoading = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.isLoading\n  );\n  const devicesInfo = useSelector(\n    ({ devicesInfoReducer }) => devicesInfoReducer?.devicesInfo || {}\n  );\n  const canariesInfo = useSelector(\n    ({ canariesInfoReducer }) => canariesInfoReducer?.canariesInfo || {}\n  );\n  const isCanariesInfoLoading = useSelector(\n    ({ canariesInfoReducer }) => canariesInfoReducer?.isLoading\n  );\n  useEffect(() => {\n    dispatch(loadThreshold());\n    dispatch(loadDevicesInfo());\n    dispatch(loadCanariesInfo());\n  }, []);\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody>\n            {isThresholdLoading === false ? (\n              <ChartPie\n                ariaDesc=\"Health threshold\"\n                ariaTitle=\"Health threshold\"\n                constrainToVisibleArea={true}\n                legendOrientation=\"vertical\"\n                legendPosition=\"right\"\n                height={230}\n                width={450}\n                data={threshold.map((item) => ({\n                  x: Object.keys(item)?.[0],\n                  y: Object.values(item)?.[0],\n                }))}\n                legendData={threshold.map((item) => ({\n                  name: `${Object.keys(item)?.[0]}: ${\n                    Object.values(item)?.[0]\n                  }`,\n                }))}\n                padding={{\n                  bottom: 20,\n                  left: 20,\n                  right: 140, // Adjusted to accommodate legend\n                  top: 20,\n                }}\n                labels={({ datum }) => `${datum.x}: ${datum.y}`}\n                themeColor={ChartThemeColor.multiOrdered}\n              />\n            ) : (\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            )}\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.requiredApproval}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Required approvals\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.orphaned}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Orphaned devices\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  {isDevicesInfoLoading === false ? (\n                    <Text component={TextVariants.h1}>\n                      <Link to=\"/groups\">{devicesInfo?.delivering}</Link>\n                    </Text>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  Devices on the way\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Last Canaries</Title>\n          </CardHeader>\n          <CardBody>\n            <TextContent>\n              <TextList component={TextListVariants.dl}>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Sensors</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.sensors?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.sensors?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Scanners</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.scanners?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.scanners?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Kiosks</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.kiosks?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.kiosks?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dt}>\n                  <Link to=\"/groups\">Antenna</Link>\n                </TextListItem>\n                <TextListItem component={TextListItemVariants.dd}>\n                  {isCanariesInfoLoading === false ? (\n                    <Level>\n                      <LevelItem>\n                        <DateFormat date={canariesInfo?.antenna?.time} />\n                      </LevelItem>\n                      <LevelItem>\n                        <StatusIcon status={canariesInfo?.antenna?.status} />\n                      </LevelItem>\n                    </Level>\n                  ) : (\n                    <Skeleton />\n                  )}\n                </TextListItem>\n              </TextList>\n            </TextContent>\n          </CardBody>\n          <CardFooter>\n            <Split>\n              <SplitItem isFilled />\n              <SplitItem>\n                <Link to=\"/groups\">\n                  See canaries <ArrowRightIcon />\n                </Link>\n              </SplitItem>\n            </Split>\n          </CardFooter>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default GroupsInfo;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateVariant,\n  Title,\n  EmptyStateBody,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { StatusIcon, SecureIcon } from '../../components';\nimport { Link } from 'react-router-dom';\n\nconst columns = [\n  {\n    title: 'Name of group',\n    transforms: [sortable, cellWidth('max')],\n  },\n  {\n    title: 'Number of devices',\n    transforms: [sortable],\n  },\n  {\n    title: 'Secure',\n    transforms: [sortable, cellWidth(10)],\n  },\n  {\n    title: 'Last seen',\n    transforms: [sortable, cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    transforms: [sortable, cellWidth(10)],\n  },\n];\n\nconst GroupsTable = ({ onAddNewGroup }) => {\n  const [sortBy, setSortBy] = useState({});\n  const groups = useSelector(({ groupsReducer }) => groupsReducer?.groups);\n  return (\n    <Table\n      aria-label=\"Groups table\"\n      {...(groups.length > 0 && {\n        actions: [\n          {\n            title: 'Adopt',\n            onClick: console.log,\n          },\n          {\n            title: 'Reject',\n            onClick: console.log,\n          },\n        ],\n      })}\n      cells={columns}\n      sortBy={sortBy}\n      onSort={(_e, index, direction) =>\n        setSortBy(() => ({\n          index,\n          direction,\n        }))\n      }\n      rows={\n        groups.length > 0\n          ? groups.map((group) => ({\n              cells: [\n                {\n                  title: (\n                    <Link to={`/groups/${group?.uuid}`}>{group?.name}</Link>\n                  ),\n                },\n                group?.sensors?.length,\n                {\n                  title: <SecureIcon isSecure={group?.is_secure} />,\n                },\n                {\n                  title: <DateFormat date={group?.last_seen} />,\n                },\n                {\n                  title: <StatusIcon status={group?.status} />,\n                },\n              ],\n            }))\n          : [\n              {\n                cells: [\n                  {\n                    title: (\n                      <Bullseye>\n                        <EmptyState variant={EmptyStateVariant.full}>\n                          <Title headingLevel=\"h5\" size=\"lg\">\n                            No matching groups found\n                          </Title>\n                          <EmptyStateBody>\n                            This filter criteria matches no groups. <br /> Try\n                            changing your filter settings. Or adding new group.\n                          </EmptyStateBody>\n                          <Button variant=\"primary\" onClick={onAddNewGroup}>\n                            Add group\n                          </Button>\n                        </EmptyState>\n                      </Bullseye>\n                    ),\n                    props: {\n                      colSpan: columns.length + 1,\n                    },\n                  },\n                ],\n              },\n            ]\n      }\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nGroupsTable.propTypes = {\n  onAddNewGroup: PropTypes.func,\n};\n\nexport default GroupsTable;\n","import { componentTypes } from '@data-driven-forms/react-form-renderer';\nimport { INVENTORY_TABLE } from '../../components/form';\n\nexport default {\n  fields: [\n    {\n      component: componentTypes.WIZARD,\n      name: 'wizzard',\n      inModal: true,\n      title: 'Create new group',\n      fields: [\n        {\n          title: 'General information',\n          name: 'step-1',\n          nextStep: 'choos-systems',\n          fields: [\n            {\n              component: componentTypes.TEXT_FIELD,\n              name: 'group-name',\n              type: 'text',\n              label: 'Group name',\n              isRequired: true,\n              validate: [\n                {\n                  type: 'required',\n                },\n              ],\n            },\n            {\n              component: componentTypes.SWITCH,\n              name: 'is-secure',\n              label: 'Is secure',\n            },\n          ],\n        },\n        {\n          title: 'Choose systems',\n          name: 'choos-systems',\n          fields: [\n            {\n              component: INVENTORY_TABLE,\n              name: 'select-system',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import React, { useEffect, Fragment, useState, lazy, Suspense } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createNewGroup } from '../../api/';\nimport { loadGroups } from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport {\n  groupsReducer,\n  thresholdReducer,\n  devicesInfoReducer,\n  canariesInfoReducer,\n} from '../../store/reducers';\nimport { statusMapper } from '../../constants';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n  Main,\n} from '@redhat-cloud-services/frontend-components';\nimport {\n  Stack,\n  StackItem,\n  Pagination,\n  Skeleton,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  PrimaryToolbar,\n  TableToolbar,\n  SkeletonTable,\n} from '@redhat-cloud-services/frontend-components';\nimport GroupsInfo from './GroupsInfo';\nimport GroupsTable from './GroupsTable';\nconst InventoryForm = lazy(() => import('../../components/InventoryForm'));\nimport schema from './newGroupSchema';\n\nconst Groups = () => {\n  const [activeFilters, setActiveFilters] = useState({});\n  const [isNewGroupOpen, setIsNewGroupOpen] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(\n    ({ groupsReducer }) => groupsReducer?.isLoading\n  );\n  const meta = useSelector(\n    ({ groupsReducer }) =>\n      groupsReducer?.meta || {\n        page: 1,\n      }\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      groupsReducer,\n      thresholdReducer,\n      devicesInfoReducer,\n      canariesInfoReducer,\n    });\n    dispatch(loadGroups());\n    () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Available groups\" />\n      </PageHeader>\n      <Main className=\"edge-groups\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups__info\">\n            <GroupsInfo />\n          </StackItem>\n          <StackItem isFilled>\n            <PrimaryToolbar\n              {...(isLoading === false\n                ? {\n                    pagination: {\n                      itemCount: meta?.count,\n                      page: meta?.offset / meta?.limit + 1,\n                      perPage: Number(meta?.limit),\n                      isCompact: true,\n                    },\n                    dedicatedAction: (\n                      <Button\n                        onClick={() => setIsNewGroupOpen(true)}\n                        isDisabled={isLoading !== false}\n                      >\n                        Add group\n                      </Button>\n                    ),\n                    filterConfig: {\n                      items: [\n                        {\n                          label: 'Name',\n                          type: 'text',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            value: activeFilters?.name || '',\n                            placeholder: 'Filter by name',\n                          },\n                        },\n                        {\n                          label: 'Security',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: [\n                              {\n                                value: 'isSecure',\n                                label: 'Secure',\n                              },\n                              {\n                                value: 'nonSecure',\n                                label: 'Not secure',\n                              },\n                            ],\n                            value: activeFilters?.security || [],\n                          },\n                        },\n                        {\n                          label: 'Status',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: statusMapper.map((item) => ({\n                              value: item,\n                              label: `${item\n                                .charAt(0)\n                                .toUpperCase()}${item.slice(1)}`,\n                            })),\n                            value: activeFilters?.status || [],\n                          },\n                        },\n                      ],\n                    },\n                  }\n                : {\n                    pagination: <Skeleton />,\n                  })}\n            />\n            {isLoading === false ? (\n              <GroupsTable onAddNewGroup={() => setIsNewGroupOpen(true)} />\n            ) : (\n              <SkeletonTable colSize={5} rowSize={15} />\n            )}\n            <TableToolbar isFooter>\n              {isLoading === false && (\n                <Pagination\n                  itemCount={meta?.count}\n                  page={meta?.offset / meta?.limit + 1}\n                  perPage={Number(meta?.limit)}\n                  dropDirection=\"up\"\n                />\n              )}\n            </TableToolbar>\n          </StackItem>\n        </Stack>\n      </Main>\n      {isNewGroupOpen && (\n        <Suspense fallback=\"\">\n          <InventoryForm\n            schema={schema}\n            isOpened={isNewGroupOpen}\n            onAction={(isSubmit, values) => {\n              if (isSubmit) {\n                (async () => {\n                  await createNewGroup({\n                    groupName: values['group-name'],\n                    isSecure: values['is-secure'],\n                    systemIDs: values.selected,\n                  });\n                  dispatch(loadGroups());\n                })();\n              }\n              setIsNewGroupOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Groups;\n"],"sourceRoot":""}