{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/App.scss","webpack://insights-frontend-starter-app/./src/Routes.js","webpack://insights-frontend-starter-app/./src/App.js","webpack://insights-frontend-starter-app/./src/store/index.js","webpack://insights-frontend-starter-app/./src/App.scss?4ce1"],"names":["___CSS_LOADER_API_IMPORT___","___CSS_LOADER_AT_RULE_IMPORT_0___","exports","i","push","module","id","Groups","React","GroupsDetail","InsightsRoute","rootClass","rest","root","document","getElementById","removeAttribute","classList","add","setAttribute","Route","propTypes","component","PropTypes","Routes","Suspense","fallback","Bullseye","Spinner","size","Switch","exact","path","paths","Redirect","to","childProps","history","registry","getRegistry","register","notifications","App","props","useEffect","insights","chrome","init","identifyApp","on","event","navId","Provider","store","getStore","NotificationsPortal","withRouter","connect","Error","middleware","ReducerRegistry","promiseMiddleware","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"gIACA,IAAIA,EAA8B,EAAQ,MACtCC,EAAoC,EAAQ,OAChDC,EAAUF,GAA4B,IAC9BG,EAAEF,GAEVC,EAAQE,KAAK,CAACC,EAAOC,GAAI,kEAAmE,KAE5FD,EAAOH,QAAUA,G,uNCDXK,EAASC,UAAW,kBACxB,iCAEIC,EAAeD,UAAW,kBAC9B,iCAKIE,EAAgB,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,UAAcC,EAAW,qBAC1CC,EAAOC,SAASC,eAAe,QAKrC,OAJAF,EAAKG,gBAAgB,SACrBH,EAAKI,UAAUC,IAAf,gBAA4BP,GAAa,mBACzCE,EAAKM,aAAa,OAAQ,QAEnB,kBAAC,EAAAC,MAAUR,IAGpBF,EAAcW,UAAY,CACxBC,UAAWC,SACXZ,UAAWY,YAGN,IAAMC,EAAS,WACpB,OACE,kBAAC,EAAAC,SAAD,CACEC,SACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,GAAD,CAASC,KAAK,SAIlB,kBAAC,EAAAC,OAAD,KACE,kBAACpB,EAAD,CACEqB,OAAK,EACLC,KAAMC,OACNX,UAAWf,EACXI,UAAU,eAEZ,kBAACD,EAAD,CACEsB,KAAMC,OACNX,UAAWb,EACXE,UAAU,aAEZ,kBAAC,EAAAS,MAAD,KACE,kBAAC,EAAAc,SAAD,CAAUC,GAAIF,aAOxBT,EAAOH,UAAY,CACjBe,WAAYb,UAAgB,CAC1Bc,QAASd,UAAgB,CACvBnB,KAAMmB,c,gCChDNe,GAAWC,mBACjBD,EAASE,SAAS,CAAEC,gCAEpB,IAAMC,EAAM,SAACC,GAWX,OAVAC,gBAAU,WACRC,SAASC,OAAOC,OAEhBF,SAASC,OAAOE,YAAY,UAE5BH,SAASC,OAAOG,GAAG,kBAAkB,SAACC,GAAD,O,UAC9BP,MAAMN,QAAQjC,KAAnB,WAA4B8C,EAAMC,aAEnC,IAGD,kBAAC,EAAAC,SAAD,CAAUC,MAAOf,EAASgB,YACxB,kBAAC,EAAAC,oBAAD,MACA,kBAAC/B,EAAD,CAAQY,WAAYO,MAK1BD,EAAIrB,UAAY,CACdgB,QAASd,YAGX,SAAeiC,iBAAWC,eAAUf,K,kDCrChCJ,E,sCAEG,SAASS,IACd,GAAIT,EACF,MAAM,IAAIoB,MAAM,6BAFgB,2BAAZC,EAAY,yBAAZA,EAAY,gBAalC,OARArB,EAAW,IAAIsB,IAAJ,CAAoB,GAApB,CAAyBC,KAAzB,OAA+CF,M,sECFxDG,EAAS,IAAI,IALH,CAEd,OAAiB,OACjB,WAAoB,IAMlB,IAAK,YAAkBzD,EAAO0D,IAAIC,WAAY,CAC5C,IA+BIC,EAAY,WAEhB5D,EAAO0D,IAAIG,OACT,MACA,cAnCkB,SAAuBC,EAAGC,EAAGC,GACnD,IAAKF,GAAKC,GAAKD,IAAMC,EACnB,OAAO,EAGT,IAAIE,EAEJ,IAAKA,KAAKH,EACR,GAKIA,EAAEG,KAAOF,EAAEE,GACb,OAAO,EAIX,IAAKA,KAAKF,EACR,IAKKD,EAAEG,GACL,OAAO,EAIX,OAAO,EAOIC,CAAcN,GADrB,YACgC,SAMxBA,EAAY,WAEZH,EAAO,MAPLzD,EAAO0D,IAAIC,gBAYzB3D,EAAO0D,IAAIS,SAAQ,WACjBV,OAIW","file":"js/487.7629e19b847d213ae34d.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = require(\"-!../node_modules/css-loader/dist/cjs.js!@redhat-cloud-services/frontend-components-notifications/index.css\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\nexports.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import { Redirect, Route, Switch } from 'react-router-dom';\n\nimport PropTypes from 'prop-types';\nimport React, { Suspense } from 'react';\nimport { routes as paths } from '../package.json';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Groups = React.lazy(() =>\n  import(/* webpackChunkName: \"GroupsPage\" */ './Routes/Groups/Groups')\n);\nconst GroupsDetail = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/Groups/GroupsDetail'\n  )\n);\n\nconst InsightsRoute = ({ rootClass, ...rest }) => {\n  const root = document.getElementById('root');\n  root.removeAttribute('class');\n  root.classList.add(`page__${rootClass}`, 'pf-c-page__main');\n  root.setAttribute('role', 'main');\n\n  return <Route {...rest} />;\n};\n\nInsightsRoute.propTypes = {\n  component: PropTypes.func,\n  rootClass: PropTypes.string,\n};\n\nexport const Routes = () => {\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner size=\"xl\" />\n        </Bullseye>\n      }\n    >\n      <Switch>\n        <InsightsRoute\n          exact\n          path={paths.groups}\n          component={Groups}\n          rootClass=\"groupsPage\"\n        />\n        <InsightsRoute\n          path={paths['groups-detail']}\n          component={GroupsDetail}\n          rootClass=\"oopsPage\"\n        />\n        <Route>\n          <Redirect to={paths.groups} />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n};\n\nRoutes.propTypes = {\n  childProps: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func,\n    }),\n  }),\n};\n","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { Provider } from 'react-redux';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport {\n  NotificationsPortal,\n  notifications,\n} from '@redhat-cloud-services/frontend-components-notifications/';\n\nconst registry = getRegistry();\nregistry.register({ notifications });\n\nconst App = (props) => {\n  useEffect(() => {\n    insights.chrome.init();\n    // TODO change this to your appname\n    insights.chrome.identifyApp('groups');\n\n    insights.chrome.on('APP_NAVIGATION', (event) =>\n      this.props.history.push(`/${event.navId}`)\n    );\n  }, []);\n\n  return (\n    <Provider store={registry.getStore()}>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Provider>\n  );\n};\n\nApp.propTypes = {\n  history: PropTypes.object,\n};\n\nexport default withRouter(connect()(App));\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (registry) {\n    throw new Error('store already initialized');\n  }\n\n  registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n  //If you want to register all of your reducers, this is good place.\n  /*\n   *  registry.register({\n   *    someName: (state, action) => ({...state})\n   *  });\n   */\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./App.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}