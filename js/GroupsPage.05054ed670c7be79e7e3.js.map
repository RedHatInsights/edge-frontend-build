{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/store/action-types.js","webpack://insights-frontend-starter-app/./src/api/index.js","webpack://insights-frontend-starter-app/./src/store/groups.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsInfo.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/GroupsTable.js","webpack://insights-frontend-starter-app/./src/Routes/Groups/Groups.js","webpack://insights-frontend-starter-app/./src/store/actions.js"],"names":["LOAD_GROUPS","asyncActions","flatMap","a","keyBy","k","statusMapper","randomNumber","min","max","Math","floor","random","randomDate","offset","Date","rowCreator","uuid","replace","c","r","toString","name","substr","sensors","is_secure","Boolean","round","last_seen","status","length","fetchGroups","perPage","currPage","page","currPerPage","insights","chrome","auth","getUser","then","results","Array","map","meta","count","limit","applyReducerHash","state","groups","isLoading","payload","Grid","hasGutter","GridItem","span","Card","CardHeader","CardBody","columns","title","transforms","sortable","useState","sortBy","setSortBy","useSelector","groupsReducer","Table","aria-label","cells","onSort","_e","index","direction","rows","group","Link","to","toDateString","TableHeader","TableBody","dispatch","useDispatch","useEffect","getRegistry","register","type","loadGroups","Fragment","PageHeader","className","Main","Stack","StackItem","isFilled","PrimaryToolbar","pagination","itemCount","Number","isCompact","Skeleton","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","dropDirection"],"mappings":"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","file":"js/GroupsPage.05054ed670c7be79e7e3.js","sourcesContent":["import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\n\nconst asyncActions = flatMap([LOAD_GROUPS, LOAD_GROUP_DETAIL], (a) => [\n  a,\n  `${a}_PENDING`,\n  `${a}_FULFILLED`,\n  `${a}_REJECTED`,\n]);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n","const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'warning',\n  'notification',\n];\n\nconst randomNumber = (min, max) => Math.floor(Math.random() * (max - min));\nconst randomString = () => Math.random().toString(36).substr(2, 10);\nconst randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomwUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () => statusMapper[randomNumber(0, statusMapper.length)];\n\nconst rowCreator = () => ({\n  uuid: randomwUUID(),\n  name: randomString(),\n  sensors: randomNumber(0, 5000),\n  is_secure: randomBool(),\n  last_seen: randomDate(),\n  status: randomStatus(),\n});\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: [...new Array(perPage)].map(rowCreator),\n    meta: {\n      count: 200,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n} from '@patternfly/react-core';\n\nconst GroupsInfo = () => {\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>Health threshold Visualization</CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>Devices info</CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>Last Canaries</CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default GroupsInfo;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\n\nconst columns = [\n  {\n    title: 'Name of group',\n    transforms: [sortable],\n  },\n  {\n    title: 'Number of devices',\n    transforms: [sortable],\n  },\n  {\n    title: 'Secure',\n    transforms: [sortable],\n  },\n  {\n    title: 'Last seen',\n    transforms: [sortable],\n  },\n  {\n    title: 'Status',\n    transforms: [sortable],\n  },\n];\n\nconst GroupsTable = () => {\n  const [sortBy, setSortBy] = useState({});\n  const groups = useSelector(({ groupsReducer }) => groupsReducer?.groups);\n  return (\n    <Table\n      aria-label=\"Groups table\"\n      cells={columns}\n      sortBy={sortBy}\n      onSort={(_e, index, direction) =>\n        setSortBy(() => ({\n          index,\n          direction,\n        }))\n      }\n      rows={groups.map((group) => ({\n        cells: [\n          {\n            title: <Link to={`/groups/${group?.uuid}`}>{group?.name}</Link>,\n          },\n          group?.sensors,\n          {\n            title: group?.is_secure ? 'secure' : 'non secure',\n          },\n          {\n            title: new Date(group?.last_seen).toDateString(),\n          },\n          group?.status,\n        ],\n      }))}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nexport default GroupsTable;\n","import React, { useEffect, Fragment } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadGroups } from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { groupsReducer } from '../../store/reducers';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n  Main,\n} from '@redhat-cloud-services/frontend-components';\nimport { Stack, StackItem, Pagination, Skeleton } from '@patternfly/react-core';\nimport {\n  PrimaryToolbar,\n  TableToolbar,\n  SkeletonTable,\n} from '@redhat-cloud-services/frontend-components';\nimport GroupsInfo from './GroupsInfo';\nimport GroupsTable from './GroupsTable';\n\nconst Groups = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(\n    ({ groupsReducer }) => groupsReducer?.isLoading\n  );\n  const meta = useSelector(\n    ({ groupsReducer }) =>\n      groupsReducer?.meta || {\n        page: 1,\n      }\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({ groupsReducer });\n    dispatch(loadGroups());\n    () => registered();\n  }, []);\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Available groups\" />\n      </PageHeader>\n      <Main className=\"edge-groups\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups__info\">\n            <GroupsInfo />\n          </StackItem>\n          <StackItem isFilled>\n            <PrimaryToolbar\n              {...(isLoading === false\n                ? {\n                    pagination: {\n                      itemCount: meta?.count,\n                      page: meta?.offset / meta?.limit + 1,\n                      perPage: Number(meta?.limit),\n                      isCompact: true,\n                    },\n                  }\n                : {\n                    pagination: <Skeleton />,\n                  })}\n            />\n            {isLoading === false ? (\n              <GroupsTable />\n            ) : (\n              <SkeletonTable colSize={5} rowSize={15} />\n            )}\n            <TableToolbar isFooter>\n              {isLoading === false && (\n                <Pagination\n                  itemCount={meta?.count}\n                  page={meta?.offset / meta?.limit + 1}\n                  perPage={Number(meta?.limit)}\n                  dropDirection=\"up\"\n                />\n              )}\n            </TableToolbar>\n          </StackItem>\n        </Stack>\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default Groups;\n","import { LOAD_GROUPS } from './action-types';\nimport { fetchGroups } from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n"],"sourceRoot":""}