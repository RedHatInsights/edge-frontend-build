{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/components/InventoryForm.js"],"names":["FormTemplate","props","showFormControls","InventoryForm","isOpened","onAction","schema","title","selectedSystems","useState","registry","setRegistry","useEffect","ReducerRegistry","selected","Map","promiseMiddleware","Wrapper","Modal","Fragment","value","onLoad","map","id","store","dispatch","preSelectEntity","variant","isOpen","onClose","actions","key","onClick","entities","getState","Array","from","keys","componentMapper","INVENTORY_TABLE","FormInventoryTable","onSubmit","values","onCancel","args","propTypes","PropTypes","defaultProps"],"mappings":"08BAcA,IAAMA,EAAe,SAACC,GAAD,OACnB,kBAAC,KAAD,OAAqBA,EAArB,CAA4BC,kBAAkB,MAG1CC,EAAgB,SAAC,GAMjB,IALJC,EAKI,EALJA,SACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,MACAC,EACI,EADJA,gBACI,GAC4BC,gBAD5B,WACGC,EADH,KACaC,EADb,MAEJC,gBAAU,WACRD,EACE,IAAIE,KACF,CACEC,SAAU,IAAIC,KAEhB,CAACC,SAGJ,IAEH,IAAMC,EAAUV,EAAQW,IAAQC,WAEhC,OACE,kBAAC,aAAD,CACEC,MAAO,CACLV,WACAW,OAAQ,WACNb,WAAiBc,KAAI,YAAY,IAATC,EAAS,EAATA,GACtBb,EAASc,MAAMC,UAASC,QAAgBH,GAAI,UAKlD,kBAACN,EACMV,GAAS,CACZA,QACAoB,QAAS,SACTC,OAAQxB,EACRyB,QAAS,kBAAMxB,GAAS,IACxByB,QAAS,CACP,kBAAC,KAAD,CACEC,IAAI,UACJJ,QAAQ,UACRK,QAAS,WAAM,MACLC,EAAavB,EAASc,MAAMU,WAA5BD,SACR5B,GAAS,EAAM,CACbS,SAAUqB,MAAMC,MAAKH,SAAA,UAAAA,EAAUnB,gBAAV,eAAoBuB,SAAU,QANzD,WAYA,kBAAC,KAAD,CAAQN,IAAI,SAASJ,QAAQ,OAAOK,QAAS,kBAAM3B,GAAS,KAA5D,YAMJ,kBAAC,IAAD,CACEC,OAAQA,EACRN,aAAcA,EACdsC,gBAAe,OACVA,MADU,UAEZC,IAAkBC,MAErBC,SAAU,SAACC,GAAW,MACZT,EAAavB,EAASc,MAAMU,WAA5BD,SACR5B,GAAS,EAAD,OACHqC,GADG,IAEN5B,SAAUqB,MAAMC,MAAKH,SAAA,UAAAA,EAAUnB,gBAAV,eAAoBuB,SAAU,QAGvDM,SAAU,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAavC,EAAQ,WAAR,IAAS,GAAT,OAAmBuC,UAOpDzC,EAAc0C,UAAY,CACxBzC,SAAU0C,SACVzC,SAAUyC,SACVxC,OAAQwC,WACRvC,MAAOuC,WACPtC,gBAAiBsC,YAAkB,CACjCvB,GAAIuB,cAIR3C,EAAc4C,aAAe,CAC3B1C,SAAU,aACVC,OAAQ,IAGV","file":"js/459.58670137e501ce27ee7c.js","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormRenderer } from '@data-driven-forms/react-form-renderer';\nimport {\n  FormTemplate as Pf4FormTemplate,\n  componentMapper,\n} from '@data-driven-forms/pf4-component-mapper';\nimport { FormInventoryTable, INVENTORY_TABLE } from './form';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { InventoryContext } from './form/constants';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { Modal, Button } from '@patternfly/react-core';\nimport { preSelectEntity } from '../store/actions';\n\nconst FormTemplate = (props) => (\n  <Pf4FormTemplate {...props} showFormControls={false} />\n);\n\nconst InventoryForm = ({\n  isOpened,\n  onAction,\n  schema,\n  title,\n  selectedSystems,\n}) => {\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n  }, []);\n\n  const Wrapper = title ? Modal : Fragment;\n\n  return (\n    <InventoryContext.Provider\n      value={{\n        registry,\n        onLoad: () => {\n          selectedSystems?.map(({ id }) => {\n            registry.store.dispatch(preSelectEntity(id, true));\n          });\n        },\n      }}\n    >\n      <Wrapper\n        {...(title && {\n          title,\n          variant: 'medium',\n          isOpen: isOpened,\n          onClose: () => onAction(false),\n          actions: [\n            <Button\n              key=\"confirm\"\n              variant=\"primary\"\n              onClick={() => {\n                const { entities } = registry.store.getState();\n                onAction(true, {\n                  selected: Array.from(entities?.selected?.keys() || []),\n                });\n              }}\n            >\n              Confirm\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={() => onAction(false)}>\n              Cancel\n            </Button>,\n          ],\n        })}\n      >\n        <FormRenderer\n          schema={schema}\n          FormTemplate={FormTemplate}\n          componentMapper={{\n            ...componentMapper,\n            [INVENTORY_TABLE]: FormInventoryTable,\n          }}\n          onSubmit={(values) => {\n            const { entities } = registry.store.getState();\n            onAction(true, {\n              ...values,\n              selected: Array.from(entities?.selected?.keys() || []),\n            });\n          }}\n          onCancel={(...args) => onAction(false, ...args)}\n        />\n      </Wrapper>\n    </InventoryContext.Provider>\n  );\n};\n\nInventoryForm.propTypes = {\n  isOpened: PropTypes.bool,\n  onAction: PropTypes.func,\n  schema: PropTypes.object,\n  title: PropTypes.string,\n  selectedSystems: PropTypes.arrayOf({\n    id: PropTypes.string,\n  }),\n};\n\nInventoryForm.defaultProps = {\n  onAction: () => {},\n  schema: {},\n};\n\nexport default InventoryForm;\n"],"sourceRoot":""}