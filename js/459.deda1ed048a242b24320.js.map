{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/components/InventoryForm.js"],"names":["FormTemplate","props","showFormControls","InventoryForm","isOpened","onAction","schema","title","selectedSystems","useState","registry","setRegistry","useEffect","ReducerRegistry","selected","Map","promiseMiddleware","map","id","selectEntity","Wrapper","Modal","Fragment","value","variant","isOpen","onClose","actions","key","onClick","entities","store","getState","Array","from","keys","componentMapper","INVENTORY_TABLE","FormInventoryTable","onSubmit","values","onCancel","args","propTypes","PropTypes","defaultProps"],"mappings":"08BAcA,IAAMA,EAAe,SAACC,GAAD,OACnB,kBAAC,KAAD,OAAqBA,EAArB,CAA4BC,kBAAkB,MAG1CC,EAAgB,SAAC,GAMjB,IALJC,EAKI,EALJA,SACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,MACAC,EACI,EADJA,gBACI,GAC4BC,gBAD5B,WACGC,EADH,KACaC,EADb,MAEJC,gBAAU,WACRD,EACE,IAAIE,KACF,CACEC,SAAU,IAAIC,KAEhB,CAACC,OAGLR,WAAiBS,KAAI,gBAAGC,EAAH,EAAGA,GAAH,OAAYC,QAAaD,GAAI,QACjD,IAEH,IAAME,EAAUb,EAAQc,IAAQC,WAEhC,OACE,kBAAC,aAAD,CAA2BC,MAAO,CAAEb,aAClC,kBAACU,EACMb,GAAS,CACZA,QACAiB,QAAS,SACTC,OAAQrB,EACRsB,QAAS,kBAAMrB,GAAS,IACxBsB,QAAS,CACP,kBAAC,KAAD,CACEC,IAAI,UACJJ,QAAQ,UACRK,QAAS,WAAM,MACLC,EAAapB,EAASqB,MAAMC,WAA5BF,SACRzB,GAAS,EAAM,CACbS,SAAUmB,MAAMC,MAAKJ,SAAA,UAAAA,EAAUhB,gBAAV,eAAoBqB,SAAU,QANzD,WAYA,kBAAC,KAAD,CAAQP,IAAI,SAASJ,QAAQ,OAAOK,QAAS,kBAAMxB,GAAS,KAA5D,YAMJ,kBAAC,IAAD,CACEC,OAAQA,EACRN,aAAcA,EACdoC,gBAAe,OACVA,MADU,UAEZC,IAAkBC,MAErBC,SAAU,SAACC,GAAW,MACZV,EAAapB,EAASqB,MAAMC,WAA5BF,SACRzB,GAAS,EAAD,OACHmC,GADG,IAEN1B,SAAUmB,MAAMC,MAAKJ,SAAA,UAAAA,EAAUhB,gBAAV,eAAoBqB,SAAU,QAGvDM,SAAU,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAarC,EAAQ,WAAR,IAAS,GAAT,OAAmBqC,UAOpDvC,EAAcwC,UAAY,CACxBvC,SAAUwC,SACVvC,SAAUuC,SACVtC,OAAQsC,WACRrC,MAAOqC,WACPpC,gBAAiBoC,YAAkB,CACjC1B,GAAI0B,cAIRzC,EAAc0C,aAAe,CAC3BxC,SAAU,aACVC,OAAQ,IAGV","file":"js/459.deda1ed048a242b24320.js","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormRenderer } from '@data-driven-forms/react-form-renderer';\nimport {\n  FormTemplate as Pf4FormTemplate,\n  componentMapper,\n} from '@data-driven-forms/pf4-component-mapper';\nimport { FormInventoryTable, INVENTORY_TABLE } from './form';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { InventoryContext } from './form/constants';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { Modal, Button } from '@patternfly/react-core';\nimport { selectEntity } from '../store/actions';\n\nconst FormTemplate = (props) => (\n  <Pf4FormTemplate {...props} showFormControls={false} />\n);\n\nconst InventoryForm = ({\n  isOpened,\n  onAction,\n  schema,\n  title,\n  selectedSystems,\n}) => {\n  const [registry, setRegistry] = useState();\n  useEffect(() => {\n    setRegistry(\n      new ReducerRegistry(\n        {\n          selected: new Map(),\n        },\n        [promiseMiddleware]\n      )\n    );\n    selectedSystems?.map(({ id }) => selectEntity(id, true));\n  }, []);\n\n  const Wrapper = title ? Modal : Fragment;\n\n  return (\n    <InventoryContext.Provider value={{ registry }}>\n      <Wrapper\n        {...(title && {\n          title,\n          variant: 'medium',\n          isOpen: isOpened,\n          onClose: () => onAction(false),\n          actions: [\n            <Button\n              key=\"confirm\"\n              variant=\"primary\"\n              onClick={() => {\n                const { entities } = registry.store.getState();\n                onAction(true, {\n                  selected: Array.from(entities?.selected?.keys() || []),\n                });\n              }}\n            >\n              Confirm\n            </Button>,\n            <Button key=\"cancel\" variant=\"link\" onClick={() => onAction(false)}>\n              Cancel\n            </Button>,\n          ],\n        })}\n      >\n        <FormRenderer\n          schema={schema}\n          FormTemplate={FormTemplate}\n          componentMapper={{\n            ...componentMapper,\n            [INVENTORY_TABLE]: FormInventoryTable,\n          }}\n          onSubmit={(values) => {\n            const { entities } = registry.store.getState();\n            onAction(true, {\n              ...values,\n              selected: Array.from(entities?.selected?.keys() || []),\n            });\n          }}\n          onCancel={(...args) => onAction(false, ...args)}\n        />\n      </Wrapper>\n    </InventoryContext.Provider>\n  );\n};\n\nInventoryForm.propTypes = {\n  isOpened: PropTypes.bool,\n  onAction: PropTypes.func,\n  schema: PropTypes.object,\n  title: PropTypes.string,\n  selectedSystems: PropTypes.arrayOf({\n    id: PropTypes.string,\n  }),\n};\n\nInventoryForm.defaultProps = {\n  onAction: () => {},\n  schema: {},\n};\n\nexport default InventoryForm;\n"],"sourceRoot":""}