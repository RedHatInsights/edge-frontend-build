{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/DevicesTable.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetailInfo.js","webpack://insights-frontend-starter-app/./src/Routes/GroupsDetail/GroupsDetail.js"],"names":["columns","title","transforms","sortable","cellWidth","DevicesTable","uuid","useState","sortBy","setSortBy","devices","useSelector","groupsDetailReducer","Table","aria-label","actions","onClick","console","log","cells","onSort","_e","index","direction","rows","map","device","Link","to","name","version","DateFormat","date","last_seen","status","TableHeader","TableBody","propTypes","PropTypes","dispatch","useDispatch","useEffect","getRegistry","register","groupDevicesInfoReducer","loadGroupDevicesInfo","Grid","hasGutter","GridItem","span","Card","CardHeader","Title","headingLevel","CardBody","className","Bullseye","TextContent","Text","component","TextVariants","useParams","activeFilters","setActiveFilters","groupName","isLoading","meta","page","loadGroupsDetail","Fragment","PageHeader","Breadcrumb","BreadcrumbItem","routes","isActive","Skeleton","Main","Stack","StackItem","GroupsDetailInfo","isFilled","PrimaryToolbar","pagination","itemCount","count","offset","limit","perPage","Number","isCompact","dedicatedAction","Button","isDisabled","filterConfig","items","label","type","filterValues","key","onChange","event","value","placeholder","statusMapper","item","charAt","toUpperCase","slice","SkeletonTable","colSize","rowSize","TableToolbar","isFooter","Pagination","dropDirection"],"mappings":"+eAcMA,EAAU,CACd,CACEC,MAAO,iBACPC,WAAY,CAACC,YAAUC,eAAU,SAEnC,CACEH,MAAO,UACPC,WAAY,CAACC,aAEf,CACEF,MAAO,YACPC,WAAY,CAACC,YAAUC,eAAU,MAEnC,CACEH,MAAO,SACPC,WAAY,CAACC,YAAUC,eAAU,OAI/BC,EAAe,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAAW,GACLC,cAAS,IADJ,WAC1BC,EAD0B,KAClBC,EADkB,KAE3BC,GAAUC,kBACd,gBAAGC,EAAH,EAAGA,oBAAH,OAA6BA,aAA7B,EAA6BA,EAAqBF,WAEpD,OACE,kBAAC,EAAAG,MAAD,CACEC,aAAW,gBACXC,QAAS,CACP,CACEd,MAAO,QACPe,QAASC,QAAQC,KAEnB,CACEjB,MAAO,SACPe,QAASC,QAAQC,MAGrBC,MAAOnB,EACPQ,OAAQA,EACRY,OAAQ,SAACC,EAAIC,EAAOC,GAAZ,OACNd,GAAU,iBAAO,CACfa,QACAC,iBAGJC,KAAMd,EAAQe,KAAI,SAACC,GAAD,MAAa,CAC7BP,MAAO,CACL,CACElB,MACE,kBAAC,EAAA0B,KAAD,CAAMC,GAAE,kBAAatB,EAAb,YAAqBoB,aAArB,EAAqBA,EAAQpB,OAASoB,aAA9C,EAA8CA,EAAQG,OAG1DH,aANK,EAMLA,EAAQI,QACR,CACE7B,MAAO,kBAAC8B,EAAA,EAAD,CAAYC,KAAMN,aAAF,EAAEA,EAAQO,aAEnC,CACEhC,MAAO,kBAAC,IAAD,CAAYiC,OAAQR,aAAF,EAAEA,EAAQQ,gBAKzC,kBAAC,EAAAC,YAAD,MACA,kBAAC,EAAAC,UAAD,QAKN/B,EAAagC,UAAY,CACvB/B,KAAMgC,YAGR,U,qGCLA,QA/DmB,WACjB,IAAMC,GAAWC,mBAOjB,OANAC,gBAAU,YACWC,UAAcC,SAAS,CAAEC,+BAC5CL,GAASM,aAER,IAGD,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACC,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACC,OAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,QAAD,CAAOC,aAAa,MAApB,qBAEF,kBAACC,WAAD,QAGJ,kBAACN,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACC,OAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,QAAD,CAAOC,aAAa,MAApB,iBAEF,kBAACC,WAAD,QAGJ,kBAACN,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACC,OAAD,CAAMK,UAAU,gCACd,kBAACJ,EAAA,EAAD,KACE,kBAACL,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACG,QAAD,CAAOC,aAAa,MAApB,sBAEF,kBAACL,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACG,QAAD,CAAOC,aAAa,MAApB,oBAIN,kBAACC,WAAD,KACE,kBAACR,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACC,EAAA,EAAD,CAAUC,KAAM,GACd,kBAACG,QAAD,CAAOC,aAAa,MAClB,kBAACG,EAAA,EAAD,KACE,kBAACC,cAAD,KACE,kBAACC,OAAD,CAAMC,UAAWC,mBACf,kBAACJ,EAAA,EAAD,kBAEF,kBAACE,OAAD,CAAMC,UAAWC,mBACf,kBAACJ,EAAA,EAAD,+BAMV,kBAACR,EAAA,EAAD,CAAUC,KAAM,U,ikBC6E9B,QA1HqB,WAAM,IACjB3C,GAASuD,iBAATvD,KADiB,GAEiBC,cAAS,IAF1B,WAElBuD,EAFkB,KAEHC,EAFG,KAGnBxB,GAAWC,mBACXwB,GAAYrD,kBAChB,gBAAGC,EAAH,EAAGA,oBAAH,OAA6BA,aAAA,EAAAA,EAAqBiB,OAAQ,MAEtDoC,GAAYtD,kBAChB,gBAAGC,EAAH,EAAGA,oBAAH,OAA6BA,aAA7B,EAA6BA,EAAqBqD,aAE9CC,GAAOvD,kBACX,gBAAGC,EAAH,EAAGA,oBAAH,OACEA,aAAA,EAAAA,EAAqBsD,OAAQ,CAC3BC,KAAM,MAUZ,OANA1B,gBAAU,YACWC,UAAcC,SAAS,CAAE/B,2BAC5C2B,GAAS6B,QAAiB9D,MAEzB,IACHW,QAAQC,IAAI8C,EAAW,OAErB,kBAAC,EAAAK,SAAD,KACE,kBAACC,EAAA,GAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAA7C,KAAD,CAAMC,GAAI6C,SAAV,WAEF,kBAACD,EAAA,EAAD,CAAgBE,UAAQ,IACP,IAAdT,EAAsBD,EAAY,kBAACW,EAAA,EAAD,SAIzC,kBAACC,EAAA,EAAD,CAAMrB,UAAU,uBACd,kBAACsB,EAAA,EAAD,CAAO9B,WAAS,GACd,kBAAC+B,EAAA,EAAD,CAAWvB,UAAU,6BACnB,kBAACwB,EAAD,CAAkBzE,KAAMA,KAE1B,kBAACwE,EAAA,EAAD,CAAWE,UAAQ,GACjB,kBAACC,EAAA,GACoB,IAAdhB,EACD,CACEiB,WAAY,CACVC,UAAWjB,aAAF,EAAEA,EAAMkB,MACjBjB,MAAMD,aAAA,EAAAA,EAAMmB,SAASnB,aAAf,EAAeA,EAAMoB,OAAQ,EACnCC,QAASC,OAAOtB,aAAD,EAACA,EAAMoB,OACtBG,WAAW,GAEbC,gBACE,kBAACC,SAAD,CACE3E,QAAS,kBAAMC,QAAQC,IAAI,OAC3B0E,YAA0B,IAAd3B,GAFd,cAOF4B,aAAc,CACZC,MAAO,CACL,CACEC,MAAO,OACPC,KAAM,OACNC,aAAc,CACZC,IAAK,cACLC,SAAU,SAACC,EAAOC,GAAR,OACRtC,EAAiB,EAAD,KACVD,GAAiB,IADP,IAEdjC,KAAMwE,MAEVA,OAAOvC,aAAA,EAAAA,EAAejC,OAAQ,GAC9ByE,YAAa,mBAGjB,CACEP,MAAO,SACPC,KAAM,WACNC,aAAc,CACZC,IAAK,cACLC,SAAU,SAACC,EAAOC,GAAR,OACRtC,EAAiB,EAAD,KACVD,GAAiB,IADP,IAEdjC,KAAMwE,MAEVP,MAAOS,SAAiB,SAACC,GAAD,MAAW,CACjCH,MAAOG,EACPT,MAAO,GAAF,OAAKS,EACPC,OAAO,GACPC,eAFE,OAEcF,EAAKG,MAAM,QAEhCN,OAAOvC,aAAA,EAAAA,EAAe5B,SAAU,QAM1C,CACEgD,WAAY,kBAACP,EAAA,EAAD,SAGL,IAAdV,EACC,kBAAC,EAAD,CAAc3D,KAAMA,IAEpB,kBAACsG,EAAA,EAAD,CAAeC,QAAS,EAAGC,QAAS,KAEtC,kBAACC,EAAA,EAAD,CAAcC,UAAQ,IACL,IAAd/C,GACC,kBAACgD,aAAD,CACE9B,UAAWjB,aAAF,EAAEA,EAAMkB,MACjBjB,MAAMD,aAAA,EAAAA,EAAMmB,SAASnB,aAAf,EAAeA,EAAMoB,OAAQ,EACnCC,QAASC,OAAOtB,aAAD,EAACA,EAAMoB,OACtB4B,cAAc","file":"js/GroupsDetailPage.c5e71d8a6b4d183b3f5c.js","sourcesContent":["import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  cellWidth,\n} from '@patternfly/react-table';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport { StatusIcon } from '../../components';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst columns = [\n  {\n    title: 'Name of device',\n    transforms: [sortable, cellWidth('max')],\n  },\n  {\n    title: 'Version',\n    transforms: [sortable],\n  },\n  {\n    title: 'Last seen',\n    transforms: [sortable, cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    transforms: [sortable, cellWidth(10)],\n  },\n];\n\nconst DevicesTable = ({ uuid }) => {\n  const [sortBy, setSortBy] = useState({});\n  const devices = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.devices\n  );\n  return (\n    <Table\n      aria-label=\"Devices table\"\n      actions={[\n        {\n          title: 'Adopt',\n          onClick: console.log,\n        },\n        {\n          title: 'Reject',\n          onClick: console.log,\n        },\n      ]}\n      cells={columns}\n      sortBy={sortBy}\n      onSort={(_e, index, direction) =>\n        setSortBy(() => ({\n          index,\n          direction,\n        }))\n      }\n      rows={devices.map((device) => ({\n        cells: [\n          {\n            title: (\n              <Link to={`/groups/${uuid}/${device?.uuid}`}>{device?.name}</Link>\n            ),\n          },\n          device?.version,\n          {\n            title: <DateFormat date={device?.last_seen} />,\n          },\n          {\n            title: <StatusIcon status={device?.status} />,\n          },\n        ],\n      }))}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nDevicesTable.propTypes = {\n  uuid: PropTypes.string,\n};\n\nexport default DevicesTable;\n","import React, { useEffect } from 'react';\nimport {\n  Grid,\n  GridItem,\n  Card,\n  CardBody,\n  CardHeader,\n  Title,\n  Bullseye,\n  TextContent,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { loadGroupDevicesInfo } from '../../store/actions';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { groupDevicesInfoReducer } from '../../store/reducers';\n\nconst GroupsInfo = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({ groupDevicesInfoReducer });\n    dispatch(loadGroupDevicesInfo());\n    () => registered();\n  }, []);\n\n  return (\n    <Grid hasGutter>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Health threshold</Title>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={3}>\n        <Card>\n          <CardHeader>\n            <Title headingLevel=\"h3\">Devices info</Title>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </GridItem>\n      <GridItem span={6}>\n        <Card className=\"edge-groups--detail__complex\">\n          <CardHeader>\n            <Grid>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Canary parameters</Title>\n              </GridItem>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">Last Canaries</Title>\n              </GridItem>\n            </Grid>\n          </CardHeader>\n          <CardBody>\n            <Grid hasGutter>\n              <GridItem span={6}>\n                <Title headingLevel=\"h3\">\n                  <Bullseye>\n                    <TextContent>\n                      <Text component={TextVariants.h1}>\n                        <Bullseye>10% (89)</Bullseye>\n                      </Text>\n                      <Text component={TextVariants.h4}>\n                        <Bullseye>Of systems tested</Bullseye>\n                      </Text>\n                    </TextContent>\n                  </Bullseye>\n                </Title>\n              </GridItem>\n              <GridItem span={6}></GridItem>\n            </Grid>\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport default GroupsInfo;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  PageHeader,\n  Main,\n  PrimaryToolbar,\n  TableToolbar,\n  SkeletonTable,\n} from '@redhat-cloud-services/frontend-components';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Skeleton,\n  Stack,\n  StackItem,\n  Pagination,\n  Button,\n} from '@patternfly/react-core';\nimport { statusMapper } from '../../constants';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/esm/Registry';\nimport { routes } from '../../../package.json';\nimport { loadGroupsDetail } from '../../store/actions';\nimport { groupsDetailReducer } from '../../store/reducers';\nimport DevicesTable from './DevicesTable';\nimport GroupsDetailInfo from './GroupsDetailInfo';\n\nconst GroupsDetail = () => {\n  const { uuid } = useParams();\n  const [activeFilters, setActiveFilters] = useState({});\n  const dispatch = useDispatch();\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name || ''\n  );\n  const isLoading = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.isLoading\n  );\n  const meta = useSelector(\n    ({ groupsDetailReducer }) =>\n      groupsDetailReducer?.meta || {\n        page: 1,\n      }\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({ groupsDetailReducer });\n    dispatch(loadGroupsDetail(uuid));\n    () => registered();\n  }, []);\n  console.log(groupName, 'fff');\n  return (\n    <Fragment>\n      <PageHeader>\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={routes.groups}>Groups</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>\n            {isLoading === false ? groupName : <Skeleton />}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      </PageHeader>\n      <Main className=\"edge-groups--detail\">\n        <Stack hasGutter>\n          <StackItem className=\"edge-groups--detail__info\">\n            <GroupsDetailInfo uuid={uuid} />\n          </StackItem>\n          <StackItem isFilled>\n            <PrimaryToolbar\n              {...(isLoading === false\n                ? {\n                    pagination: {\n                      itemCount: meta?.count,\n                      page: meta?.offset / meta?.limit + 1,\n                      perPage: Number(meta?.limit),\n                      isCompact: true,\n                    },\n                    dedicatedAction: (\n                      <Button\n                        onClick={() => console.log('ff')}\n                        isDisabled={isLoading !== false}\n                      >\n                        Add device\n                      </Button>\n                    ),\n                    filterConfig: {\n                      items: [\n                        {\n                          label: 'Name',\n                          type: 'text',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            value: activeFilters?.name || '',\n                            placeholder: 'Filter by name',\n                          },\n                        },\n                        {\n                          label: 'Status',\n                          type: 'checkbox',\n                          filterValues: {\n                            key: 'text-filter',\n                            onChange: (event, value) =>\n                              setActiveFilters({\n                                ...(activeFilters || {}),\n                                name: value,\n                              }),\n                            items: statusMapper.map((item) => ({\n                              value: item,\n                              label: `${item\n                                .charAt(0)\n                                .toUpperCase()}${item.slice(1)}`,\n                            })),\n                            value: activeFilters?.status || [],\n                          },\n                        },\n                      ],\n                    },\n                  }\n                : {\n                    pagination: <Skeleton />,\n                  })}\n            />\n            {isLoading === false ? (\n              <DevicesTable uuid={uuid} />\n            ) : (\n              <SkeletonTable colSize={5} rowSize={15} />\n            )}\n            <TableToolbar isFooter>\n              {isLoading === false && (\n                <Pagination\n                  itemCount={meta?.count}\n                  page={meta?.offset / meta?.limit + 1}\n                  perPage={Number(meta?.limit)}\n                  dropDirection=\"up\"\n                />\n              )}\n            </TableToolbar>\n          </StackItem>\n        </Stack>\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default GroupsDetail;\n"],"sourceRoot":""}