{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/api/index.js","webpack://insights-frontend-starter-app/./src/components/form/constants.js","webpack://insights-frontend-starter-app/./src/store/inventory-table.js","webpack://insights-frontend-starter-app/./src/components/form/FormInventory.js","webpack://insights-frontend-starter-app/./src/components/form/componentTypes.js","webpack://insights-frontend-starter-app/./src/components/StatusIcon.js","webpack://insights-frontend-starter-app/./src/components/SecureIcon.js","webpack://insights-frontend-starter-app/./src/constants.js","webpack://insights-frontend-starter-app/./src/store/action-types.js","webpack://insights-frontend-starter-app/./src/store/actions.js","webpack://insights-frontend-starter-app/./src/store/groupsDetail.js","webpack://insights-frontend-starter-app/./src/store/groups.js","webpack://insights-frontend-starter-app/./src/store/threshold.js","webpack://insights-frontend-starter-app/./src/store/devicesInfo.js","webpack://insights-frontend-starter-app/./src/store/canariesInfo.js","webpack://insights-frontend-starter-app/./src/store/groupDevicesInfo.js"],"names":["randomNumber","min","max","Math","round","random","randomString","toString","substr","randomDate","offset","Date","floor","randomStatus","statusMapper","groups","fetchGroups","perPage","currPage","page","currPerPage","insights","chrome","auth","getUser","then","results","meta","count","length","limit","threshold","sections","rest","Promise","resolve","Array","map","currPercent","devicesInfo","requiredApproval","orphaned","delivering","canariesInfo","sensors","time","status","scanners","kiosks","antenna","groupsDetail","uuid","group","find","groupUUID","name","version","rowGroupDetailCreator","groupDevicesInfo","total","newDevices","offlineDevices","deliveringDevices","createNewGroup","groupName","isSecure","systemIDs","push","lastSeen","is_secure","last_seen","rowGroupCreator","replace","c","r","updateGroup","selected","InventoryContext","React","entitySelected","state","payload","Map","id","rows","forEach","row","set","selectedRow","clear","calculateChecked","every","has","some","FormInventoryTable","FieldProvider","validate","FormSpyProvider","formOptions","component","registry","dispatch","useDispatch","inventory","useRef","useSelector","entities","loaded","Inventory","bulkSelect","size","items","title","onClick","selectEntity","checked","onSelect","value","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","onLoad","mergeWithEntities","register","applyReducerHash","SELECT_ENTITY","WrappedFormInventoryTable","props","Provider","store","Fragment","propTypes","PropTypes","INVENTORY_TABLE","StatusIcon","Icon","statusToIcon","icon","UnknownIcon","color","SecureIcon","LockIcon","LockOpenIcon","defaultProps","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","asyncActions","flatMap","a","keyBy","k","loadGroups","type","loadThreshold","loadDevicesInfo","loadCanariesInfo","loadGroupsDetail","loadGroupDevicesInfo","onEntitiesLoaded","columns","filter","key","updated","renderFunc","systemsList","LOAD_ENTITIES_FULFILLED","devices","isLoading"],"mappings":"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","file":"js/872.552273a7f48554c3d625.js","sourcesContent":["import { statusMapper } from '../constants';\n\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () => statusMapper[randomNumber(0, statusMapper.length)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = () => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: randomNumber(0, 100),\n      orphaned: randomNumber(0, 100),\n      delivering: randomNumber(0, 100),\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  return Promise.resolve({\n    results: {\n      sensors: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      scanners: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      kiosks: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n      antenna: {\n        time: randomDate(),\n        status: randomStatus(),\n      },\n    },\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, selected }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = selected;\n  }\n  return Promise.resolve();\n};\n","import React from 'react';\n\nexport const InventoryContext = React.createContext({});\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { SELECT_ENTITY } from './action-types';\n\nconst entitySelected = (state, { payload }) => {\n  const selected = state.selected || new Map();\n  if (payload.selected) {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.set(row.id, row));\n    } else {\n      const selectedRow =\n        state.rows && state.rows.find(({ id }) => id === payload.id);\n      selected.set(payload.id, { ...(selectedRow || {}), id: payload.id });\n    }\n  } else {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.delete(row.id));\n    } else if (payload.id === -1) {\n      selected.clear();\n    } else {\n      selected.delete(payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected: new Map(selected),\n  };\n};\n\nexport const entitiesReducer = () =>\n  applyReducerHash({\n    [SELECT_ENTITY]: entitySelected,\n  });\n","import React, { Fragment, useRef } from 'react';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/components/esm/Inventory';\nimport PropTypes from 'prop-types';\nimport { InventoryContext } from './constants';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { entitiesReducer } from '../../store/inventory-table';\nimport { selectEntity } from '../../store/actions';\n\nconst calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nconst FormInventoryTable = ({\n  name,\n  FieldProvider,\n  validate,\n  FormSpyProvider,\n  formOptions,\n  component,\n  registry,\n  ...rest\n}) => {\n  const dispatch = useDispatch();\n  const inventory = useRef(null);\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n  const calculateSelected = () => (selected ? selected.size : 0);\n\n  return (\n    <div>\n      <InventoryTable\n        {...rest}\n        bulkSelect={{\n          count: calculateSelected(),\n          items: [\n            {\n              title: 'Select none (0)',\n              onClick: () => {\n                dispatch(selectEntity(-1, false));\n              },\n            },\n            {\n              ...(loaded && rows && rows.length > 0\n                ? {\n                    title: `Select page (${rows.length})`,\n                    onClick: () => {\n                      dispatch(selectEntity(0, true));\n                    },\n                  }\n                : {}),\n            },\n          ],\n          checked: calculateChecked(rows, selected),\n          onSelect: (value) => {\n            dispatch(selectEntity(0, value));\n          },\n        }}\n        ref={inventory}\n        onRefresh={onRefresh}\n        tableProps={{\n          canSelectAll: false,\n        }}\n        onLoad={({ mergeWithEntities }) => {\n          registry?.register?.(mergeWithEntities(entitiesReducer()));\n        }}\n      />\n    </div>\n  );\n};\n\nconst WrappedFormInventoryTable = (props) => (\n  <InventoryContext.Consumer>\n    {({ registry }) =>\n      registry ? (\n        <Provider store={registry.store}>\n          <FormInventoryTable registry={registry} {...props} />\n        </Provider>\n      ) : (\n        <Fragment />\n      )\n    }\n  </InventoryContext.Consumer>\n);\n\nWrappedFormInventoryTable.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n  validate: PropTypes.any,\n  name: PropTypes.string,\n  size: PropTypes.string,\n  component: PropTypes.any,\n};\n\nFormInventoryTable.propTypes = {\n  ...WrappedFormInventoryTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n};\n\nexport default WrappedFormInventoryTable;\n","export const INVENTORY_TABLE = 'inventoryTable';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return <Icon {...props} color={statusToIcon?.[status]?.color} />;\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: { icon: CheckCircleIcon, color: successColor.value },\n  error: { icon: ExclamationCircleIcon, color: dangerColor.value },\n  pending: { icon: PauseCircleIcon },\n  updating: { icon: CircleNotchIcon },\n  unknown: { icon: UnknownIcon },\n  warning: { icon: ExclamationTriangleIcon, color: warningColor.value },\n  notification: { icon: BellIcon, color: infoColor.value },\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  devices: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name,\n  uuid: payload?.uuid,\n  devices: payload?.results,\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => {\n          return <StatusIcon status={status} />;\n        },\n      },\n    ],\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: {},\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/files/esm/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n"],"sourceRoot":""}