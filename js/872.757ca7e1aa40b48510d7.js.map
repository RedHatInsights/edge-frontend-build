{"version":3,"sources":["webpack://insights-frontend-starter-app/./src/api/index.js","webpack://insights-frontend-starter-app/./src/components/form/constants.js","webpack://insights-frontend-starter-app/./src/store/inventory-table.js","webpack://insights-frontend-starter-app/./src/components/form/FormInventory.js","webpack://insights-frontend-starter-app/./src/components/form/componentTypes.js","webpack://insights-frontend-starter-app/./src/components/StatusIcon.js","webpack://insights-frontend-starter-app/./src/components/SecureIcon.js","webpack://insights-frontend-starter-app/./src/constants.js","webpack://insights-frontend-starter-app/./src/store/action-types.js","webpack://insights-frontend-starter-app/./src/store/actions.js","webpack://insights-frontend-starter-app/./src/store/groupsDetail.js","webpack://insights-frontend-starter-app/./src/store/groups.js","webpack://insights-frontend-starter-app/./src/store/threshold.js","webpack://insights-frontend-starter-app/./src/store/devicesInfo.js","webpack://insights-frontend-starter-app/./src/store/canariesInfo.js","webpack://insights-frontend-starter-app/./src/store/groupDevicesInfo.js"],"names":["randomNumber","min","max","Math","round","random","randomString","toString","substr","randomDate","offset","Date","floor","randomUUID","replace","c","r","randomStatus","statusMapper","rowGroupCreator","uuid","name","sensors","isSecure","lastSeen","is_secure","last_seen","status","groups","fetchGroups","perPage","currPage","page","currPerPage","insights","chrome","auth","getUser","then","results","meta","count","length","limit","threshold","sections","rest","Promise","resolve","Array","map","currPercent","devicesInfo","devicesCount","requiredApproval","orphaned","delivering","canariesInfo","canaries","group","date","groupsDetail","find","groupUUID","version","rowGroupDetailCreator","groupDevicesInfo","total","newDevices","offlineDevices","deliveringDevices","createNewGroup","groupName","systemIDs","push","updateGroup","InventoryContext","React","entitySelected","state","payload","selected","Map","id","rows","forEach","row","set","selectedRow","clear","loadEntitiesFulfilled","get","calculateChecked","every","has","some","FormInventoryTable","FieldProvider","validate","FormSpyProvider","formOptions","component","registry","onLoad","dispatch","useDispatch","inventory","useRef","useSelector","entities","loaded","InventoryTable","bulkSelect","size","items","title","onClick","selectEntity","checked","onSelect","value","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","LOAD_ENTITIES_FULFILLED","mergeWithEntities","INVENTORY_ACTION_TYPES","register","applyReducerHash","SELECT_ENTITY","PRE_SELECT_ENTITY","WrappedFormInventoryTable","props","Provider","store","Fragment","propTypes","PropTypes","defaultProps","INVENTORY_TABLE","StatusIcon","Icon","statusToIcon","icon","UnknownIcon","Tooltip","content","color","SecureIcon","LockIcon","LockOpenIcon","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","isEmptyFilters","activeFilters","Object","values","item","constructActiveFilters","getLabel","entries","key","label","category","chipKey","chips","isArray","onDeleteFilter","itemsToRemove","currItem","filter","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","asyncActions","flatMap","a","keyBy","k","CLEAN_ENTITIES","loadGroups","type","loadThreshold","loadDevicesInfo","systemsCount","loadCanariesInfo","loadGroupsDetail","loadGroupDevicesInfo","preSelectEntity","cleanEntities","onEntitiesLoaded","columns","updated","renderFunc","systemsList","isLoading","devices"],"mappings":"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","file":"js/872.757ca7e1aa40b48510d7.js","sourcesContent":["import { statusMapper } from '../constants';\n\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n","import React from 'react';\n\nexport const InventoryContext = React.createContext({});\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { SELECT_ENTITY, PRE_SELECT_ENTITY } from './action-types';\n\nconst entitySelected = (state, { payload }) => {\n  const selected = state.selected || new Map();\n  if (payload.selected) {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.set(row.id, row));\n    } else {\n      const selectedRow = state?.rows?.find(({ id } = {}) => id === payload.id);\n      selected.set(payload.id, { ...(selectedRow || {}), id: payload.id });\n    }\n  } else {\n    if (payload.id === 0) {\n      state.rows.forEach((row) => selected.delete(row.id));\n    } else if (payload.id === -1) {\n      selected.clear();\n    } else {\n      selected.delete(payload.id);\n    }\n  }\n\n  return {\n    ...state,\n    selected: new Map(selected),\n  };\n};\n\nconst loadEntitiesFulfilled = (state) => {\n  return {\n    ...state,\n    rows: state.rows.map(({ id, ...row }) => ({\n      id,\n      ...row,\n      selected: !!state.selected?.get(id),\n    })),\n  };\n};\n\nexport const entitiesReducer = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [SELECT_ENTITY]: entitySelected,\n    [PRE_SELECT_ENTITY]: entitySelected,\n    [LOAD_ENTITIES_FULFILLED]: loadEntitiesFulfilled,\n  });\n","import React, { Fragment, useRef } from 'react';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport PropTypes from 'prop-types';\nimport { InventoryContext } from './constants';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport { entitiesReducer } from '../../store/inventory-table';\nimport { selectEntity } from '../../store/actions';\n\nconst calculateChecked = (rows = [], selected) =>\n  rows.every(({ id }) => selected?.has(id))\n    ? rows.length > 0\n    : rows.some(({ id }) => selected?.has(id)) && null;\n\nconst FormInventoryTable = ({\n  name,\n  FieldProvider,\n  validate,\n  FormSpyProvider,\n  formOptions,\n  component,\n  registry,\n  onLoad,\n  ...rest\n}) => {\n  const dispatch = useDispatch();\n  const inventory = useRef(null);\n  const selected = useSelector(\n    ({ entities }) => entities?.selected || new Map()\n  );\n  const loaded = useSelector(({ entities }) => entities?.loaded);\n  const rows = useSelector(({ entities }) => entities?.rows);\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n  const calculateSelected = () => (selected ? selected.size : 0);\n\n  return (\n    <div>\n      <InventoryTable\n        {...rest}\n        bulkSelect={{\n          count: calculateSelected(),\n          items: [\n            {\n              title: 'Select none (0)',\n              onClick: () => {\n                dispatch(selectEntity(-1, false));\n              },\n            },\n            {\n              ...(loaded && rows && rows.length > 0\n                ? {\n                    title: `Select page (${rows.length})`,\n                    onClick: () => {\n                      dispatch(selectEntity(0, true));\n                    },\n                  }\n                : {}),\n            },\n          ],\n          checked: calculateChecked(rows, selected),\n          onSelect: (value) => {\n            dispatch(selectEntity(0, value));\n          },\n        }}\n        ref={inventory}\n        onRefresh={onRefresh}\n        tableProps={{\n          canSelectAll: false,\n        }}\n        onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, ...rest }) => {\n          registry?.register?.(\n            mergeWithEntities(entitiesReducer(INVENTORY_ACTION_TYPES))\n          );\n          onLoad({ mergeWithEntities, INVENTORY_ACTION_TYPES, ...rest });\n        }}\n      />\n    </div>\n  );\n};\n\nconst WrappedFormInventoryTable = (props) => (\n  <InventoryContext.Consumer>\n    {({ registry, onLoad }) =>\n      registry ? (\n        <Provider store={registry.store}>\n          <FormInventoryTable registry={registry} onLoad={onLoad} {...props} />\n        </Provider>\n      ) : (\n        <Fragment />\n      )\n    }\n  </InventoryContext.Consumer>\n);\n\nWrappedFormInventoryTable.propTypes = {\n  FieldProvider: PropTypes.any,\n  formOptions: PropTypes.any,\n  FormSpyProvider: PropTypes.any,\n  validate: PropTypes.any,\n  name: PropTypes.string,\n  size: PropTypes.string,\n  component: PropTypes.any,\n};\n\nFormInventoryTable.propTypes = {\n  ...WrappedFormInventoryTable.propTypes,\n  registry: PropTypes.shape({\n    register: PropTypes.func,\n  }),\n  onLoad: PropTypes.func,\n};\n\nFormInventoryTable.defaultProps = {\n  onLoad: () => undefined,\n};\n\nexport default WrappedFormInventoryTable;\n","export const INVENTORY_TABLE = 'inventoryTable';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name,\n  uuid: payload?.uuid,\n  devices: payload?.results,\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => {\n          return <StatusIcon status={status} />;\n        },\n      },\n    ],\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n"],"sourceRoot":""}