{"version":3,"sources":["webpack:///./src/components/form/CustomSubmitButtons.js","webpack:///./src/Routes/ImageManager/steps/review.js","webpack:///./src/Routes/ImageManager/steps/packages.js","webpack:///./src/Routes/ImageManager/steps/imageOutput.js","webpack:///./src/Routes/ImageManager/steps/imageSetDetails.js","webpack:///./src/Routes/ImageManager/steps/updateDetails.js","webpack:///./src/Routes/ImageManager/steps/registration.js","webpack:///./src/components/form/Packages.js","webpack:///./src/components/form/RegistrationCreds.js","webpack:///./src/components/form/ImageOutputCheckbox.js","webpack:///./src/components/form/SSHInputField.js","webpack:///./src/components/ImageCreator.js","webpack:///./src/components/ReviewSection.js","webpack:///./src/components/form/ReviewStep.js"],"names":["CustomButtons","buttonLabels","cancel","submit","back","useState","isSaving","setIsSaving","useContext","WizardContext","handlePrev","formOptions","Button","variant","type","isDisabled","valid","getState","validating","onClick","onSubmit","values","className","onCancel","propTypes","PropTypes","name","title","buttons","fields","component","PackagesLabel","release","useFormApi","releaseName","undefined","releaseMapper","TextContent","Text","nextStep","componentTypes","label","initialValue","clearedValue","imageType","includes","options","Object","entries","map","value","DEFAULT_RELEASE","validate","validatorTypes","isRequired","imageTypeMapper","placeholder","pattern","threshold","resizeOrientation","helperText","HelperText","HelperTextItem","message","mapPackagesToComponent","packages","pack","key","summary","mapComponentToPackage","props","children","Packages","defaultArch","change","input","useFieldApi","packagesSearchName","useRef","packagesAvailable","setPackagesAvailable","packagesSelected","setPackagesSelected","filterSelected","setFilterSelected","useEffect","availableSearchInput","document","querySelector","addEventListener","handleSearchOnEnter","removeEventListener","packageListChange","newAvailablePackages","newChosenPackages","chosenPkgs","handlePackagesSearch","getPackages","architecture","current","data","e","stopPropagation","DualListSelector","isSearchable","availableOptionsActions","aria-label","data-testid","availableOptions","availableOptionsTitle","chosenOptions","filter","item","chosenOptionsTitle","addSelected","removeSelected","addAll","removeAll","onAvailableOptionsSearchInputChanged","val","onChosenOptionsSearchInputChanged","filterOption","id","registrationCredsValidator","state","length","checkbox","errs","password","sshKey","meta","toggleCheckbox","useCallback","checked","event","onChange","currentTarget","passwordInput","sshKeyInput","FormGroup","isHelperTextBeforeField","hasNoPaddingTop","isStack","Checkbox","isChecked","helperTextInvalid","dirty","error","TextInput","TextArea","WarningInstallerHelperText","hasIcon","outputHelperText","ImageOutputCheckbox","index","initialValues","isUpdate","TextVariants","isVisitedLink","validated","touched","Fragment","target","href","CreateImageWizard","schema","onClose","customComponentMapper","subscription","FormTemplate","showFormControls","formValues","componentMapper","RegistrationCreds","SSHInputField","review","Review","validatorMapper","ReviewSection","testid","Grid","hasGutter","GridItem","span","TextListItem","T","TextListItemVariants","getRegistry","RegistryContext","useSelector","createImageReducer","isLoading","hasError","shallowEqual","registered","register","Bullseye","Spinner","pkgs","outputs","details","version","description","registration","credentials","before","after","calcPkgDiff","arr1","arr2","reduce","acc","some","pkg","Alert","push"],"mappings":"2SAMMA,EAAgB,SAAC,GAA+C,QAA7CC,aAAgBC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,KAAa,GACpCC,eAAS,GAD2B,WAC7DC,EAD6D,KACnDC,EADmD,QAEhCC,gBAAWC,WAAvCC,EAF4D,EAE5DA,WAAYC,EAFgD,EAEhDA,YACpB,OACE,kBAAC,KAAD,MACG,kBACC,kBAAC,aAAD,KACE,kBAACC,EAAA,GAAD,CACEC,QAAQ,UACRC,KAAK,SACLC,YACGJ,EAAYK,OACbL,EAAYM,WAAWC,YACvBZ,EAEFa,QAAS,WACPR,EAAYS,SAAS,CACnBC,OAAQV,EAAYM,WAAWI,OAC/Bd,kBAIHJ,GAEH,kBAACS,EAAA,GAAD,CACEE,KAAK,SACLD,QAAQ,YACRM,QAAST,EACTK,WAAYT,GAEXF,GAEH,yBAAKkB,UAAU,8BACb,kBAACV,EAAA,GAAD,CACEE,KAAK,SACLD,QAAQ,OACRM,QAASR,EAAYY,SACrBR,WAAYT,GAEXJ,SASfF,EAAcwB,UAAY,CACxBvB,aAAcwB,UAAgB,CAC5BvB,OAAQuB,SACRtB,OAAQsB,SACRrB,KAAMqB,WAERnB,SAAUmB,UAGZ,MC7DA,GACEC,KAAM,SACNC,MAAO,SACPC,QD0DF,ECzDEC,OAAQ,CACN,CACEH,KAAM,SACNI,UAAW,Y,2DCHXC,EAAgB,WAAM,QAEpBC,EAAO,WAAGf,GADKgB,eAAbhB,mBACK,iBAAG,EAAYI,cAAf,aAAG,EAAoBW,QAC9BE,OAA0BC,IAAZH,EAAwBI,KAAcJ,GAAW,GACrE,OACE,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,6BACuB,kBAACA,EAAA,EAAD,CAAMR,UAAU,KAAKI,GAD5C,aAON,SACEP,MAAO,sBACPD,KAAM,WACNa,SAAU,SACVV,OAAQ,CACN,CACEC,UAAWU,eACXd,KAAM,8BACNe,MAAO,kBAACV,EAAD,OAET,CACED,UAAW,mBACXJ,KAAM,oBACNe,MAAO,oBACPC,aAAc,GACdC,aAAc,M,eCxBpB,SACEhB,MAAO,UACPD,KAAM,cACNa,SAAU,kBAAGlB,EAAH,EAAGA,OAAH,OACRA,SAAA,UAAAA,EAAQuB,iBAAR,eAAmBC,SAAS,0BAA2BxB,EAAOuB,UAC1D,eACA,YACNf,OAAQ,CACN,CACEC,UAAWU,eACXd,KAAM,cACNe,MAAO,kBAACH,EAAA,EAAD,wDAET,CACER,UAAWU,WACXd,KAAM,UACNe,MAAO,UACPK,QAASC,OAAOC,QAAQZ,MAAea,KAAI,iCAA8B,CACvEC,MADyC,KAEzCT,MAFyC,SAI3CC,aAAcS,KACdC,SAAU,CAAC,CAAEtC,KAAMuC,eACnBC,YAAY,EACZvC,YAAY,GAEd,CACEe,UAAW,wBACXJ,KAAM,YACNoB,QAASC,OAAOC,QAAQO,MAAiBN,KACvC,iCAAkC,CAChCC,MADF,KAEET,MAFF,SAKFC,aAAc,CAAC,sBAAuB,oBACtCC,aAAc,GACdS,SAAU,CAAC,CAAEtC,KAAMuC,kBC1CzB,GACE1B,MAAO,UACPD,KAAM,kBACNa,SAAU,cACVV,OAAQ,CACN,CACEC,UAAWU,eACXd,KAAM,cACNe,MACE,kBAACH,EAAA,EAAD,2EAKJ,CACER,UAAWU,eACXd,KAAM,OACNe,MAAO,aACPe,YAAa,aACbJ,SAAU,CACR,CAAEtC,KAAMuC,cACR,CACEvC,KAAMuC,YACNI,QAAS,kCAEX,CAAE3C,KAAMuC,eAA2BK,UAAW,KAEhDJ,YAAY,GAEd,CACExB,UAAWU,aACXd,KAAM,cACNe,MAAO,cACPe,YAAa,kBACbG,kBAAmB,WACnBP,SAAU,CAAC,CAAEtC,KAAMuC,eAA2BK,UAAW,SCnC/D,GACE/B,MAAO,UACPD,KAAM,kBACNa,SAAU,cACVV,OAAQ,CACN,CACEC,UAAWU,eACXd,KAAM,cACNe,MACE,kBAACH,EAAA,EAAD,kEAGJ,CACER,UAAWU,eACXd,KAAM,cACNe,MAAO,cACPe,YAAa,kBACbJ,SAAU,CAAC,CAAEtC,KAAMuC,eAA2BK,UAAW,S,0BCjB/D,SACE/B,MAAO,sBACPD,KAAM,eACNa,SAAU,WACVV,OAAQ,CACN,CACEC,UAAWU,eACXd,KAAM,cACNe,MAAO,kBAACH,EAAA,EAAD,2CAET,CACER,UAAWU,eACXC,MAAO,WACPe,YAAa,iBACbI,WACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAgBxC,UAAU,aAAaT,QAAQ,iBAA/C,2EAMJa,KAAM,WACN0B,SAAU,CACR,CAAEtC,KAAMuC,cACR,CACEvC,KAAMuC,YACNI,QAAS,+BACTM,QACE,0EAEJ,CAAEjD,KAAMuC,eAA2BK,UAAW,KAEhDJ,YAAY,GAEd,CACExB,UAAW,kBACXJ,KAAM,cACN0B,SAAU,CACR,CAAEtC,KAAMuC,cACR,CACEvC,KAAMuC,YACNI,QAAS,+DAGbH,YAAY,M,yUC3CZU,EAAyB,SAACC,GAAD,OAC7BA,EAAShB,KAAI,SAACiB,EAAMC,GAAP,OACX,kBAAC9B,EAAA,EAAD,CAAa8B,IAAG,UAAKD,EAAKxC,KAAV,YAAkByC,IAChC,0BAAM7C,UAAU,sCAAsC4C,EAAKxC,MAC3D,+BAAQwC,EAAKE,cAIbC,EAAwB,SAACvC,GAAD,MAAgB,CAC5CJ,KAAMI,EAAUwC,MAAMC,SAAS,GAAGD,MAAMC,SACxCH,QAAStC,EAAUwC,MAAMC,SAAS,GAAGD,MAAMC,WAGvCC,EAAW,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,YAAgBH,EAAY,0BACjBrC,eAArByC,EADsC,EACtCA,OAAQzD,EAD8B,EAC9BA,SACR0D,GAAUC,OAAYN,GAAtBK,MACFE,GAAqBC,cAHmB,GAIIzE,cAAS,IAJb,WAIvC0E,EAJuC,KAIpBC,EAJoB,QAKE3E,cAAS,IALX,WAKvC4E,EALuC,KAKrBC,EALqB,QAMF7E,cAAS,IANP,WAMvC8E,EANuC,KAMvBC,EANuB,MAQ9CC,gBAAU,WAAM,QACdH,EACElB,GAA+B,QAAR,EAAA/C,WAAA,mBAAYI,cAAZ,eAAqBsD,EAAMjD,QAAS,KAE7D,IAAM4D,EAAuBC,SAASC,cACpC,yCAGF,OADAF,WAAsBG,iBAAiB,UAAWC,GAC3C,kBACLJ,EAAqBK,oBAAoB,UAAWD,MACrD,IAEH,IAAME,EAAoB,SAACC,EAAsBC,GAC/C,IAAMC,EAAaD,EAAkB7C,IAAIoB,GACzCW,EAAqBa,GACrBX,EAAoBY,GACpBpB,EAAOC,EAAMjD,KAAMqE,IAGfC,EAAoB,+BAAG,+GACJC,SACb,QAAR,EAAAhF,WAAA,mBAAYI,cAAZ,eAAoBW,UAAW,UACvB,QAAR,EAAAf,WAAA,mBAAYI,cAAZ,eAAoB6E,eAAgBzB,EACpCI,EAAmBsB,SAJM,gBACnBC,EADmB,EACnBA,KAKRpB,EAAqBhB,EAAuBoC,GAAQ,KANzB,2CAAH,qDASpBV,EAAsB,SAACW,GACb,UAAVA,EAAElC,MACJkC,EAAEC,kBACFN,MAIJ,OACE,kBAACO,EAAA,EAAD,CACEjF,UAAU,aACVkF,cAAY,EACZC,wBAAyB,CACvB,kBAAC7F,EAAA,GAAD,CACE8F,aAAW,uCACXvC,IAAI,wBACJwC,cAAY,qBACZxF,QAAS6E,GAJX,WASFY,iBAAkB7B,EAClB8B,sBAAsB,qBACtBC,cAAe7B,EAAiB8B,QAAO,SAACC,GAAD,yBACrC3C,EAAsB2C,UADe,iBACrC,EAA6BtF,YADQ,aACrC,EAAmCmB,SAASsC,MAE9C8B,mBAAmB,kBACnBC,YAAatB,EACbuB,eAAgBvB,EAChBwB,OAAQxB,EACRyB,UAAW,SAACxB,GAAD,OACTD,EACEC,EACAZ,EAAiB8B,QACf,SAACC,GAAD,gBACE,UAAC3C,EAAsB2C,UAAvB,iBAAC,EAA6BtF,YAA9B,aAAC,EAAmCmB,SAASsC,SAIrDmC,qCAAsC,SAACC,GACrC1C,EAAmBsB,QAAUoB,GAE/BC,kCAAmC,SAACD,GAAD,OAASnC,EAAkBmC,IAC9DE,aAAc,kBAAM,GACpBC,GAAG,6BAKTlD,EAAShD,UAAY,CACnBiD,YAAahD,YAGf,U,moBCpGO,IAAMkG,EAA6B,kBAAM,SAACzE,EAAO0E,GACtD,GAAqB,IAAjB1E,EAAM2E,OACR,MAAO,CAAEC,SAAU,yCAErB,IAAIC,EAAO,GAaX,OAXE7E,EAAML,SAAS,kBACQV,IAAtByF,EAAK,UAAoD,KAAtBA,EAAK,WAEzCG,EAAO,EAAH,KAAQA,GAAR,IAAcC,SAAU,eAG5B9E,EAAML,SAAS,gBACMV,IAApByF,EAAK,QAAgD,KAApBA,EAAK,SAEvCG,EAAO,EAAH,KAAQA,GAAR,IAAcE,OAAQ,cAErBF,IAiET,QA9D0B,SAACzD,GAAU,OACXM,OAAYN,GAA5BK,EAD2B,EAC3BA,MAAOuD,EADoB,EACpBA,KACTC,GAAiBC,kBACrB,SAACC,EAASC,GACR3D,EAAM4D,SACJF,EAAO,cACC1D,EAAMzB,OADP,CACcoF,EAAME,cAAcd,KACrC/C,EAAMzB,MAAM6D,QAAO,SAACC,GAAD,OAAUA,IAASsB,EAAME,cAAcd,SAGlE,CAAC/C,EAAM4D,WAGME,GAAkB7D,OAAY,CAAElD,KAAM,aAA7CiD,MACO+D,GAAgB9D,OAAY,CAAElD,KAAM,WAA3CiD,MAER,OACE,kBAACgE,EAAA,EAAD,CACElG,MAAM,8CACNmG,yBAAuB,EACvBC,iBAAe,EACfvF,YAAU,EACVwF,SAAO,GAEP,kBAACC,EAAA,EAAD,CACEtG,MAAM,WACNiF,GAAG,WACHsB,UAAWrE,EAAMzB,MAAML,SAAS,YAChC0F,SAAUJ,IAEXxD,EAAMzB,MAAML,SAAS,YACpB,kBAAC8F,EAAA,EAAD,CACEM,kBACEf,EAAKgB,YAAoC/G,IAA3B+F,EAAKiB,MAAL,SACVjB,EAAKiB,MAAL,cACAhH,GAGN,kBAACiH,EAAA,GAAD,KAAWtI,KAAK,YAAe2H,KAE/B,KACJ,kBAACM,EAAA,EAAD,CACEtG,MAAM,MACNiF,GAAG,SACHsB,UAAWrE,EAAMzB,MAAML,SAAS,UAChC0F,SAAUJ,IAEXxD,EAAMzB,MAAML,SAAS,UACpB,kBAAC8F,EAAA,EAAD,CACEM,kBACEf,EAAKgB,YAAkC/G,IAAzB+F,EAAKiB,MAAL,OACVjB,EAAKiB,MAAL,YACAhH,GAGN,kBAACkH,EAAA,GAAaX,IAEd,O,gDCvEJY,EAA6B,kBACjC,kBAACzF,EAAA,EAAD,CAAYvC,UAAU,aAAaiI,SAAO,GACxC,kBAACzF,EAAA,EAAD,CAAgBxC,UAAU,aAAaT,QAAQ,UAAU0I,SAAO,GAAhE,2HAE+C,6BAF/C,gGASEC,EAAmB,CACvB,mBACE,6DACF,sBACE,oFAGEC,EAAsB,SAACnF,GAAU,IAC7BrD,GAAagB,eAAbhB,SACA0D,GAAUC,OAAYN,GAAtBK,MACFwD,GAAiBC,kBACrB,SAACC,EAASC,GACR3D,EAAM4D,SACJF,EAAO,cACC1D,EAAMzB,OADP,CACcoF,EAAME,cAAcd,KACrC/C,EAAMzB,MAAM6D,QAAO,SAACC,GAAD,OAAUA,IAASsB,EAAME,cAAcd,SAGlE,CAAC/C,EAAM4D,WAGT,OACE,kBAACI,EAAA,EAAD,CACElG,MAAM,cACNmG,yBAAuB,EACvBC,iBAAe,EACfvF,YAAU,EACVwF,SAAO,GAENxE,EAAMxB,QAAQG,KAAI,WAAmByG,GAAnB,QAAGxG,EAAH,EAAGA,MAAOT,EAAV,EAAUA,MAAV,OACjB,oCACE,kBAACsG,EAAA,EAAD,CACE5E,IAAKuF,EACLjH,MAAOA,EACPiF,GAAIxE,EACJ8F,UAAWrE,EAAMzB,MAAML,SAASK,GAChCqF,SAAUJ,EACVpH,WAAsB,qBAAVmC,IAEd,kBAACb,EAAA,EAAD,MACW,QAAR,EAAApB,WAAA,mBAAY0I,qBAAZ,eAA2BC,WAClB,wBAAV1G,EACE,kBAACoG,EAAD,MAEA,kBAACzF,EAAA,EAAD,CAAYvC,UAAU,yBACpB,kBAACwC,EAAA,EAAD,CAAgBjD,QAAQ,iBACrB2I,EAAiBtG,KAIb,wBAAVA,GACC,kBAACZ,EAAA,EAAD,CAAMR,UAAW+H,WACf,kBAACvH,EAAA,EAAD,CACEhB,UAAU,aACVQ,UAAW+H,MACXC,eAAa,GAHf,gCAME,kBAAC,KAAD,CAAqBxI,UAAU,wBAWjDmI,EAAoBjI,UAAY,CAC9BmD,MAAOlD,UACPqB,QAASrB,YACPA,UAAgB,CACdyB,MAAOzB,WACPgB,MAAOhB,eAKb,U,8NC1DA,QArCsB,SAAC6C,GAAU,OACMM,O,iWAAY,EAC/ClD,KAAM,eACH4C,IAFUoE,EADgB,EACvB/D,MAAoBuD,EADG,EACHA,KAI5B,OACE,kBAACS,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,CACElG,MAAM,UACNwG,kBAAmBf,EAAKiB,MACxBY,UAAW7B,EAAKiB,OAASjB,EAAK8B,QAAU,QAAU,UAClD1G,YAAU,GAEV,kBAAC+F,EAAA,GAAD,KACE/H,UAAU,cACVoG,GAAG,cACHlE,YAAY,6BACRkF,KAGR,kBAAC,EAAAuB,SAAD,KACE,kBAAC3H,EAAA,EAAD,CAAMR,UAAW+H,WACf,kBAACvH,EAAA,EAAD,CACE4H,OAAO,SACPC,KAAK,uSACLL,eAAa,EACbhI,UAAW+H,OAJb,4BAOE,kBAAC,KAAD,CAAqBvI,UAAU,oB,qlBCnBpC,IAUD8I,GAAoB,SAAC,GAOrB,IANJC,EAMI,EANJA,OACAjJ,EAKI,EALJA,SACAkJ,EAII,EAJJA,QACAC,EAGI,EAHJA,sBACAZ,EAEI,EAFJA,cACAlF,EACI,EADJA,YAEA,OAAO4F,EACL,kBAAC,IAAD,CACEA,OAAQA,EACR/I,UAAU,gBACVkJ,aAAc,CAAEnJ,QAAQ,GACxBoJ,aAAc,SAACnG,GAAD,OACZ,kBAAC,KAAD,OAAqBA,EAArB,CAA4BoG,kBAAkB,MAEhDtJ,SAAU,SAACuJ,GAAD,OAAgBvJ,EAASuJ,IACnChB,cAAeA,EACfiB,gBAAe,SACVA,MADU,IAGb,qBAAsB,CACpB9I,UAAW+I,GAEb,wBAAyB,CACvB/I,UAAW2H,GAEb,kBAAmB,CACjB3H,UAAWgJ,GAEbC,OAAQC,IACR,mBAAoB,CAClBlJ,UAAW0C,EACXC,gBAEC8F,GAELU,gBAAe,SACV5H,MADU,IAEbsE,+BAEFpG,SAAU+I,IAGZ,kBAAC,IAAD,OAIJF,GAAkB5I,UAAY,CAC5B6I,OAAQ5I,WACRkI,cAAelI,WACfL,SAAUK,oBACV6I,QAAS7I,oBACT8I,sBAAuB9I,UAAA,OACpBA,WAAmBA,cAAoB,CACtCA,SACAA,UAAgB,CACdK,UAAWL,eAIjBgD,YAAahD,YAGf,a,uOCnFMyJ,EAAgB,SAAC,GAA4B,IAA1BvJ,EAA0B,EAA1BA,MAAOyE,EAAmB,EAAnBA,KAAM+E,EAAa,EAAbA,OACpC,OACE,kBAACC,EAAA,EAAD,CAAM9J,UAAU,aAAaqF,cAAawE,EAAQE,WAAS,GACzD,kBAACC,EAAA,EAAD,CAAUC,KAAM,GAAIF,WAAS,GAC3B,kBAAC/I,EAAA,EAAD,CAAMR,UAAW+H,QAAkBlI,IAEpCyE,EAAKnD,KAAI,gBAAGvB,EAAH,EAAGA,KAAMwB,EAAT,EAASA,MAAT,OACR,oCACE,kBAACoI,EAAA,EAAD,CAAUC,KAAM,EAAGF,WAAS,GAC1B,kBAACG,EAAAC,EAAD,CAAc3J,UAAW4J,QACtBhK,IAGL,kBAAC4J,EAAA,EAAD,CAAUC,KAAM,EAAGF,WAAS,GAC1B,kBAACG,EAAAC,EAAD,CAAc3J,UAAW4J,QACtBxI,UASfgI,EAAc1J,UAAY,CACxBG,MAAOF,WACP2E,KAAM3E,YACJA,UAAgB,CACdC,KAAMD,WACNyB,MAAOzB,cAGX0J,OAAQ1J,YAGV,UCoFA,EArHmB,WAAM,IACfR,GAAagB,eAAbhB,SACF2I,EAAW3I,IAAW0I,cAAcC,SAClC+B,GAAgBnL,gBAAWoL,KAA3BD,YAHe,GAISE,kBAC9B,gBAAGC,EAAH,EAAGA,mBAAH,MAA6B,CAC3BC,eACoC5J,KAAlC2J,aAAA,EAAAA,EAAoBC,aAChBD,aADJ,EACIA,EAAoBC,WAE1BC,UAAUF,aAAA,EAAAA,EAAoBE,YAAY,EAC1C7C,OAAO2C,aAAA,EAAAA,EAAoB3C,QAAS,QAEtC8C,gBATMF,EAJe,EAIfA,UAAWC,EAJI,EAIJA,SAgBnB,IALA3G,gBAAU,WACR,IAAM6G,EAAaP,IAAcQ,SAAS,CAAEL,0BAC5C,OAAO,kBAAMI,OACZ,IAECH,EACF,OACE,kBAACK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,OAKN,IAkCQC,EA3BFC,EAPAC,EAAU,CACd,CAAE9K,KAAM,OAAQwB,MAAOjC,IAAWI,OAAOK,MACzC,CAAEA,KAAM,UAAWwB,MAAOjC,IAAW0I,cAAc8C,QAAU,GAC7D,CAAE/K,KAAM,cAAewB,MAAOjC,IAAWI,OAAOqL,cAiB5CC,EAAe,CACnB,CAAEjL,KAAM,WAAYwB,MAAOjC,IAAWI,OAAX,UAC3B,CAAEK,KAAM,UAAWwB,MAAOjC,IAAWI,OAAOuL,cAGxCC,EAAS5L,IAAW0I,cAAc,qBAClCmD,EAAQ7L,IAAWI,OAAO,qBAC1B0L,EAAc,SAACC,EAAMC,GAAP,OAClBD,EAAKE,QACH,SAACC,EAAD,OAAQzL,EAAR,EAAQA,KAAR,OAAmByL,GAAQF,EAAKG,MAAK,SAACC,GAAD,OAASA,EAAI3L,OAASA,KAAY,EAAJ,KACnE,IAmBJ,OACE,kBAAC,EAAAuI,SAAD,KACG+B,GACC,kBAACsB,EAAA,EAAD,CACEzM,QAAQ,SACRc,MAAM,0DAGV,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,wCACmC,IACjC,kBAACA,EAAA,EAAD,CAAMR,UAAW,KAAjB,gBAFF,gCAIA,kBAAC,EAAD,CACEH,MAAO,UACPyE,KAAMoG,EACNrB,OAAQ,yBAEV,kBAAC,EAAD,CACExJ,MAAO,SACPyE,MA9DFmG,EAAU,CACZ,CAAE7K,KAAM,UAAWwB,MAAOd,KAAcnB,IAAWI,OAAOW,UAC1D,CACEN,KAAM,cACNwB,MAAOK,2BAGPtC,IAAWI,OAAOuB,UAAUC,SAAS,wBACvC0J,EAAQgB,KAAK,CAAE7L,KAAM,GAAIwB,MAAOK,8BAE3BgJ,GAqDDpB,OAAQ,wBAETlK,IAAWI,OAAOuB,UAAUC,SAAS,uBACpC,kBAAC,EAAD,CACElB,MAAO,eACPyE,KAAMuG,EACNxB,OAAQ,8BAER,KACJ,kBAAC,EAAD,CACExJ,MAAO,WACPyE,MA/CAkG,EAAO,CACX,CACE5K,KAAM,QACNwB,MAAO6J,EAAYD,EAAOD,KAGvBjD,EAAQ,UAEN0C,EAFM,CAGT,CAAE5K,KAAM,UAAWwB,MAAO6J,EAAYF,EAAQC,IAC9C,CAAEpL,KAAM,UAAWwB,MAAO,KAE5BoJ,GAoCEnB,OAAQ","file":"js/807.e4df44bac7e8b15c95a8.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { FormSpy } from '@data-driven-forms/react-form-renderer';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport PropTypes from 'prop-types';\n\nconst CustomButtons = ({ buttonLabels: { cancel, submit, back } }) => {\n  const [isSaving, setIsSaving] = useState(false);\n  const { handlePrev, formOptions } = useContext(WizardContext);\n  return (\n    <FormSpy>\n      {() => (\n        <React.Fragment>\n          <Button\n            variant=\"primary\"\n            type=\"button\"\n            isDisabled={\n              !formOptions.valid ||\n              formOptions.getState().validating ||\n              isSaving\n            }\n            onClick={() => {\n              formOptions.onSubmit({\n                values: formOptions.getState().values,\n                setIsSaving,\n              });\n            }}\n          >\n            {submit}\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={handlePrev}\n            isDisabled={isSaving}\n          >\n            {back}\n          </Button>\n          <div className=\"pf-c-wizard__footer-cancel\">\n            <Button\n              type=\"button\"\n              variant=\"link\"\n              onClick={formOptions.onCancel}\n              isDisabled={isSaving}\n            >\n              {cancel}\n            </Button>\n          </div>\n        </React.Fragment>\n      )}\n    </FormSpy>\n  );\n};\n\nCustomButtons.propTypes = {\n  buttonLabels: PropTypes.shape({\n    cancel: PropTypes.node,\n    submit: PropTypes.node,\n    back: PropTypes.node,\n  }),\n  isSaving: PropTypes.bool,\n};\n\nexport default CustomButtons;\n","import CustomButtons from '../../../components/form/CustomSubmitButtons';\n\nexport default {\n  name: 'review',\n  title: 'Review',\n  buttons: CustomButtons,\n  fields: [\n    {\n      name: 'review',\n      component: 'review',\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { releaseMapper } from '../../ImageManagerDetail/constants';\n\nconst PackagesLabel = () => {\n  const { getState } = useFormApi();\n  const release = getState()?.values?.release;\n  const releaseName = release !== undefined ? releaseMapper[release] : '';\n  return (\n    <TextContent>\n      <Text>\n        Add packages to your <Text component=\"b\">{releaseName}</Text> image.\n      </Text>\n    </TextContent>\n  );\n};\n\nexport default {\n  title: 'Additional packages',\n  name: 'packages',\n  nextStep: 'review',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'google-cloud-text-component',\n      label: <PackagesLabel />,\n    },\n    {\n      component: 'package-selector',\n      name: 'selected-packages',\n      label: 'Available options',\n      initialValue: [],\n      clearedValue: [],\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  imageTypeMapper,\n  releaseMapper,\n  DEFAULT_RELEASE,\n} from '../../ImageManagerDetail/constants';\n\nexport default {\n  title: 'Options',\n  name: 'imageOutput',\n  nextStep: ({ values }) =>\n    values?.imageType?.includes('rhel-edge-installer') || !values.imageType\n      ? 'registration'\n      : 'packages',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: <Text>Enter some basic information about your image.</Text>,\n    },\n    {\n      component: componentTypes.SELECT,\n      name: 'release',\n      label: 'Release',\n      options: Object.entries(releaseMapper).map(([release, releaseLabel]) => ({\n        value: release,\n        label: releaseLabel,\n      })),\n      initialValue: DEFAULT_RELEASE,\n      validate: [{ type: validatorTypes.REQUIRED }],\n      isRequired: true,\n      isDisabled: true,\n    },\n    {\n      component: 'image-output-checkbox',\n      name: 'imageType',\n      options: Object.entries(imageTypeMapper).map(\n        ([imageType, imageTypeLabel]) => ({\n          value: imageType,\n          label: imageTypeLabel,\n        })\n      ),\n      initialValue: ['rhel-edge-installer', 'rhel-edge-commit'],\n      clearedValue: [],\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport default {\n  title: 'Details',\n  name: 'imageSetDetails',\n  nextStep: 'imageOutput',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: (\n        <Text>\n          Enter a name and description to easily identify your image later.\n        </Text>\n      ),\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Image name',\n      placeholder: 'Image name',\n      validate: [\n        { type: validatorTypes.REQUIRED },\n        {\n          type: validatorTypes.PATTERN,\n          pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-\\s]*$/,\n        },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n      ],\n      isRequired: true,\n    },\n    {\n      component: componentTypes.TEXTAREA,\n      name: 'description',\n      label: 'Description',\n      placeholder: 'Add description',\n      resizeOrientation: 'vertical',\n      validate: [{ type: validatorTypes.MAX_LENGTH, threshold: 250 }],\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport default {\n  title: 'Details',\n  name: 'imageSetDetails',\n  nextStep: 'imageOutput',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: (\n        <Text>Enter a description to easily identify your image later.</Text>\n      ),\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'description',\n      label: 'Description',\n      placeholder: 'Add description',\n      validate: [{ type: validatorTypes.MAX_LENGTH, threshold: 250 }],\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text, HelperText, HelperTextItem } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport default {\n  title: 'Device registration',\n  name: 'registration',\n  nextStep: 'packages',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: <Text>Use this to log into your device.</Text>,\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      label: 'Username',\n      placeholder: 'Enter username',\n      helperText: (\n        <HelperText>\n          <HelperTextItem className=\"pf-u-mt-xs\" variant=\"indeterminate\">\n            Can only contain letters, numbers, hyphen ( - ), and underscores( _\n            ).\n          </HelperTextItem>\n        </HelperText>\n      ),\n      name: 'username',\n      validate: [\n        { type: validatorTypes.REQUIRED },\n        {\n          type: validatorTypes.PATTERN,\n          pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-]*$/,\n          message:\n            'Can only contain letters, numbers, hyphen ( - ), and underscores( _ ).',\n        },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n      ],\n      isRequired: true,\n    },\n    {\n      component: 'ssh-input-field',\n      name: 'credentials',\n      validate: [\n        { type: validatorTypes.REQUIRED },\n        {\n          type: validatorTypes.PATTERN,\n          pattern: /^(ssh-(rsa|dss|ed25519)|ecdsa-sha2-nistp(256|384|521)) \\S+/,\n        },\n      ],\n      isRequired: true,\n    },\n  ],\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { DualListSelector, Button, TextContent } from '@patternfly/react-core';\nimport { getPackages } from '../../api';\nimport PropTypes from 'prop-types';\n\nconst mapPackagesToComponent = (packages) =>\n  packages.map((pack, key) => (\n    <TextContent key={`${pack.name}-${key}`}>\n      <span className=\"pf-c-dual-list-selector__item-text\">{pack.name}</span>\n      <small>{pack.summary}</small>\n    </TextContent>\n  ));\n\nconst mapComponentToPackage = (component) => ({\n  name: component.props.children[0].props.children,\n  summary: component.props.children[1].props.children,\n});\n\nconst Packages = ({ defaultArch, ...props }) => {\n  const { change, getState } = useFormApi();\n  const { input } = useFieldApi(props);\n  const packagesSearchName = useRef();\n  const [packagesAvailable, setPackagesAvailable] = useState([]);\n  const [packagesSelected, setPackagesSelected] = useState([]);\n  const [filterSelected, setFilterSelected] = useState('');\n\n  useEffect(() => {\n    setPackagesSelected(\n      mapPackagesToComponent(getState()?.values?.[input.name] || [])\n    );\n    const availableSearchInput = document.querySelector(\n      '[aria-label=\"Available search input\"]'\n    );\n    availableSearchInput?.addEventListener('keydown', handleSearchOnEnter);\n    return () =>\n      availableSearchInput.removeEventListener('keydown', handleSearchOnEnter);\n  }, []);\n\n  const packageListChange = (newAvailablePackages, newChosenPackages) => {\n    const chosenPkgs = newChosenPackages.map(mapComponentToPackage);\n    setPackagesAvailable(newAvailablePackages);\n    setPackagesSelected(newChosenPackages);\n    change(input.name, chosenPkgs);\n  };\n\n  const handlePackagesSearch = async () => {\n    const { data } = await getPackages(\n      getState()?.values?.release || 'rhel-8',\n      getState()?.values?.architecture || defaultArch,\n      packagesSearchName.current\n    );\n    setPackagesAvailable(mapPackagesToComponent(data || []));\n  };\n\n  const handleSearchOnEnter = (e) => {\n    if (e.key === 'Enter') {\n      e.stopPropagation();\n      handlePackagesSearch();\n    }\n  };\n\n  return (\n    <DualListSelector\n      className=\"pf-u-mt-sm\"\n      isSearchable\n      availableOptionsActions={[\n        <Button\n          aria-label=\"Search button for available packages\"\n          key=\"availableSearchButton\"\n          data-testid=\"search-pkgs-button\"\n          onClick={handlePackagesSearch}\n        >\n          Search\n        </Button>,\n      ]}\n      availableOptions={packagesAvailable}\n      availableOptionsTitle=\"Available packages\"\n      chosenOptions={packagesSelected.filter((item) =>\n        mapComponentToPackage(item)?.name?.includes(filterSelected)\n      )}\n      chosenOptionsTitle=\"Chosen packages\"\n      addSelected={packageListChange}\n      removeSelected={packageListChange}\n      addAll={packageListChange}\n      removeAll={(newAvailablePackages) =>\n        packageListChange(\n          newAvailablePackages,\n          packagesSelected.filter(\n            (item) =>\n              !mapComponentToPackage(item)?.name?.includes(filterSelected)\n          )\n        )\n      }\n      onAvailableOptionsSearchInputChanged={(val) => {\n        packagesSearchName.current = val;\n      }}\n      onChosenOptionsSearchInputChanged={(val) => setFilterSelected(val)}\n      filterOption={() => true}\n      id=\"basicSelectorWithSearch\"\n    />\n  );\n};\n\nPackages.propTypes = {\n  defaultArch: PropTypes.string,\n};\n\nexport default Packages;\n","import React, { useCallback } from 'react';\nimport {\n  FormGroup,\n  Checkbox,\n  TextInput,\n  TextArea,\n} from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nexport const registrationCredsValidator = () => (value, state) => {\n  if (value.length === 0) {\n    return { checkbox: 'select at least one validation method' };\n  }\n  let errs = {};\n  if (\n    value.includes('password') &&\n    (state['password'] === undefined || state['password'] === '')\n  ) {\n    errs = { ...errs, password: 'Required' };\n  }\n  if (\n    value.includes('sshKey') &&\n    (state['sshKey'] === undefined || state['sshKey'] === '')\n  ) {\n    errs = { ...errs, sshKey: 'Required' };\n  }\n  return errs;\n};\n\nconst RegistrationCreds = (props) => {\n  const { input, meta } = useFieldApi(props);\n  const toggleCheckbox = useCallback(\n    (checked, event) => {\n      input.onChange(\n        checked\n          ? [...input.value, event.currentTarget.id]\n          : input.value.filter((item) => item !== event.currentTarget.id)\n      );\n    },\n    [input.onChange]\n  );\n\n  const { input: passwordInput } = useFieldApi({ name: 'password' });\n  const { input: sshKeyInput } = useFieldApi({ name: 'sshKey' });\n\n  return (\n    <FormGroup\n      label=\"Select at least one to validate credentials\"\n      isHelperTextBeforeField\n      hasNoPaddingTop\n      isRequired\n      isStack\n    >\n      <Checkbox\n        label=\"Password\"\n        id=\"password\"\n        isChecked={input.value.includes('password')}\n        onChange={toggleCheckbox}\n      />\n      {input.value.includes('password') ? (\n        <FormGroup\n          helperTextInvalid={\n            meta.dirty && meta.error['password'] !== undefined\n              ? meta.error['password']\n              : undefined\n          }\n        >\n          <TextInput type=\"password\" {...passwordInput} />\n        </FormGroup>\n      ) : null}\n      <Checkbox\n        label=\"SSH\"\n        id=\"sshKey\"\n        isChecked={input.value.includes('sshKey')}\n        onChange={toggleCheckbox}\n      />\n      {input.value.includes('sshKey') ? (\n        <FormGroup\n          helperTextInvalid={\n            meta.dirty && meta.error['sshKey'] !== undefined\n              ? meta.error['sshKey']\n              : undefined\n          }\n        >\n          <TextArea {...sshKeyInput} />\n        </FormGroup>\n      ) : null}\n    </FormGroup>\n  );\n};\n\nexport default RegistrationCreds;\n","import React, { useCallback } from 'react';\nimport {\n  FormGroup,\n  Checkbox,\n  TextContent,\n  Text,\n  TextVariants,\n  HelperText,\n  HelperTextItem,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst WarningInstallerHelperText = () => (\n  <HelperText className=\"pf-u-ml-lg\" hasIcon>\n    <HelperTextItem className=\"pf-u-pb-md\" variant=\"warning\" hasIcon>\n      Creating an installable version of your image increases the build time and\n      is not needed for updating existing devices. <br />\n      You can create an installable version of this image later if you continue\n      with this option\n    </HelperTextItem>\n  </HelperText>\n);\n\nconst outputHelperText = {\n  'rhel-edge-commit':\n    'An OSTree commit is always created when building an image.',\n  'rhel-edge-installer':\n    'An installable version of the image is typically created with a brand new image.',\n};\n\nconst ImageOutputCheckbox = (props) => {\n  const { getState } = useFormApi();\n  const { input } = useFieldApi(props);\n  const toggleCheckbox = useCallback(\n    (checked, event) => {\n      input.onChange(\n        checked\n          ? [...input.value, event.currentTarget.id]\n          : input.value.filter((item) => item !== event.currentTarget.id)\n      );\n    },\n    [input.onChange]\n  );\n\n  return (\n    <FormGroup\n      label=\"Output type\"\n      isHelperTextBeforeField\n      hasNoPaddingTop\n      isRequired\n      isStack\n    >\n      {props.options.map(({ value, label }, index) => (\n        <>\n          <Checkbox\n            key={index}\n            label={label}\n            id={value}\n            isChecked={input.value.includes(value)}\n            onChange={toggleCheckbox}\n            isDisabled={value === 'rhel-edge-commit'}\n          />\n          <TextContent>\n            {getState()?.initialValues?.isUpdate &&\n            value === 'rhel-edge-installer' ? (\n              <WarningInstallerHelperText />\n            ) : (\n              <HelperText className=\"pf-u-ml-lg pf-u-pb-sm\">\n                <HelperTextItem variant=\"indeterminate\">\n                  {outputHelperText[value]}\n                </HelperTextItem>\n              </HelperText>\n            )}\n            {value === 'rhel-edge-installer' && (\n              <Text component={TextVariants.small}>\n                <Text\n                  className=\"pf-u-ml-lg\"\n                  component={TextVariants.a}\n                  isVisitedLink\n                >\n                  Learn more about image types.\n                  <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                </Text>\n              </Text>\n            )}\n          </TextContent>\n        </>\n      ))}\n    </FormGroup>\n  );\n};\n\nImageOutputCheckbox.propTypes = {\n  input: PropTypes.array,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ),\n};\n\nexport default ImageOutputCheckbox;\n","import React, { Fragment } from 'react';\nimport {\n  FormGroup,\n  TextArea,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst SSHInputField = (props) => {\n  const { input: sshKeyInput, meta } = useFieldApi({\n    name: 'credentials',\n    ...props,\n  });\n  return (\n    <FormGroup>\n      <FormGroup\n        label=\"SSH key\"\n        helperTextInvalid={meta.error}\n        validated={meta.error && meta.touched ? 'error' : 'default'}\n        isRequired\n      >\n        <TextArea\n          className=\"pf-u-h-25vh\"\n          id=\"credentials\"\n          placeholder=\"Paste your public SSH key\"\n          {...sshKeyInput}\n        />\n      </FormGroup>\n      <Fragment>\n        <Text component={TextVariants.small}>\n          <Text\n            target=\"_blank\"\n            href=\"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/using-secure-communications-between-two-systems-with-openssh_configuring-basic-system-settings#generating-ssh-key-pairs_using-secure-communications-between-two-systems-with-openssh\"\n            isVisitedLink\n            component={TextVariants.a}\n          >\n            Learn more about SSH keys\n            <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n          </Text>\n        </Text>\n      </Fragment>\n    </FormGroup>\n  );\n};\n\nexport default SSHInputField;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport { componentMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Review from './form/ReviewStep';\nimport Packages from './form/Packages';\nimport RegistrationCreds from './form/RegistrationCreds';\nimport ImageOutputCheckbox from './form/ImageOutputCheckbox';\nimport SSHInputField from './form/SSHInputField';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { registrationCredsValidator } from './form/RegistrationCreds';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\n/**\n * Use this instead of CreateImageWizard once this PR is merged https://github.com/RedHatInsights/image-builder-frontend/pull/230\n * @returns Async component\n */\nexport const AsyncCreateImageWizard = (props) => (\n  <AsyncComponent\n    appName=\"image-builder\"\n    scope=\"image_builder\"\n    module=\"./ImageCreator\"\n    fallback={<Spinner />}\n    {...props}\n  />\n);\n\nconst CreateImageWizard = ({\n  schema,\n  onSubmit,\n  onClose,\n  customComponentMapper,\n  initialValues,\n  defaultArch,\n}) => {\n  return schema ? (\n    <FormRenderer\n      schema={schema}\n      className=\"image-builder\"\n      subscription={{ values: true }}\n      FormTemplate={(props) => (\n        <Pf4FormTemplate {...props} showFormControls={false} />\n      )}\n      onSubmit={(formValues) => onSubmit(formValues)}\n      initialValues={initialValues}\n      componentMapper={{\n        ...componentMapper,\n        // wizard: WrappedWizard,\n        'registration-creds': {\n          component: RegistrationCreds,\n        },\n        'image-output-checkbox': {\n          component: ImageOutputCheckbox,\n        },\n        'ssh-input-field': {\n          component: SSHInputField,\n        },\n        review: Review,\n        'package-selector': {\n          component: Packages,\n          defaultArch,\n        },\n        ...customComponentMapper,\n      }}\n      validatorMapper={{\n        ...validatorTypes,\n        registrationCredsValidator,\n      }}\n      onCancel={onClose}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImageWizard.propTypes = {\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  onSubmit: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  customComponentMapper: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOfType([\n      PropTypes.node,\n      PropTypes.shape({\n        component: PropTypes.node,\n      }),\n    ]),\n  }),\n  defaultArch: PropTypes.string,\n};\n\nexport default CreateImageWizard;\n","import React from 'react';\nimport {\n  Text,\n  Grid,\n  GridItem,\n  TextListItem,\n  TextVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst ReviewSection = ({ title, data, testid }) => {\n  return (\n    <Grid className=\"pf-u-pb-xl\" data-testid={testid} hasGutter>\n      <GridItem span={12} hasGutter>\n        <Text component={TextVariants.h2}>{title}</Text>\n      </GridItem>\n      {data.map(({ name, value }) => (\n        <>\n          <GridItem span={3} hasGutter>\n            <TextListItem component={TextListItemVariants.dt}>\n              {name}\n            </TextListItem>\n          </GridItem>\n          <GridItem span={9} hasGutter>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </GridItem>\n        </>\n      ))}\n    </Grid>\n  );\n};\n\nReviewSection.propTypes = {\n  title: PropTypes.string,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.string,\n    })\n  ),\n  testid: PropTypes.string,\n};\n\nexport default ReviewSection;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { TextContent, Text } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  imageTypeMapper,\n  releaseMapper,\n} from '../../Routes/ImageManagerDetail/constants';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { createImageReducer } from '../../store/reducers';\nimport { Bullseye, Spinner, Alert } from '@patternfly/react-core';\nimport ReviewSection from '../ReviewSection';\n\nconst ReviewStep = () => {\n  const { getState } = useFormApi();\n  const isUpdate = getState().initialValues.isUpdate;\n  const { getRegistry } = useContext(RegistryContext);\n  const { isLoading, hasError } = useSelector(\n    ({ createImageReducer }) => ({\n      isLoading:\n        createImageReducer?.isLoading !== undefined\n          ? createImageReducer?.isLoading\n          : false,\n      hasError: createImageReducer?.hasError || false,\n      error: createImageReducer?.error || null,\n    }),\n    shallowEqual\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({ createImageReducer });\n    return () => registered();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  const details = [\n    { name: 'Name', value: getState().values.name },\n    { name: 'Version', value: getState().initialValues.version + 1 },\n    { name: 'Description', value: getState().values.description },\n  ];\n\n  const output = () => {\n    let outputs = [\n      { name: 'Release', value: releaseMapper[getState().values.release] },\n      {\n        name: 'Output Type',\n        value: imageTypeMapper['rhel-edge-commit'],\n      },\n    ];\n    if (getState().values.imageType.includes('rhel-edge-installer')) {\n      outputs.push({ name: '', value: imageTypeMapper['rhel-edge-installer'] });\n    }\n    return outputs;\n  };\n\n  const registration = [\n    { name: 'Username', value: getState().values['username'] },\n    { name: 'ssh-key', value: getState().values.credentials },\n  ];\n\n  const before = getState().initialValues['selected-packages'];\n  const after = getState().values['selected-packages'];\n  const calcPkgDiff = (arr1, arr2) =>\n    arr1.reduce(\n      (acc, { name }) => acc + (!arr2.some((pkg) => pkg.name === name) ? 1 : 0),\n      0\n    );\n\n  const packages = () => {\n    const pkgs = [\n      {\n        name: 'Added',\n        value: calcPkgDiff(after, before),\n      },\n    ];\n    return isUpdate\n      ? [\n          ...pkgs,\n          { name: 'Removed', value: calcPkgDiff(before, after) },\n          { name: 'Updated', value: 0 },\n        ]\n      : pkgs;\n  };\n\n  return (\n    <Fragment>\n      {hasError && (\n        <Alert\n          variant=\"danger\"\n          title=\"Failed sending the request: Edge API is not available\"\n        />\n      )}\n      <TextContent>\n        <Text>\n          Review the information and click{' '}\n          <Text component={'b'}>Create image</Text> to start the build process.\n        </Text>\n        <ReviewSection\n          title={'Details'}\n          data={details}\n          testid={'review-image-details'}\n        />\n        <ReviewSection\n          title={'Output'}\n          data={output()}\n          testid={'review-image-output'}\n        />\n        {getState().values.imageType.includes('rhel-edge-installer') ? (\n          <ReviewSection\n            title={'Registration'}\n            data={registration}\n            testid={'review-image-registration'}\n          />\n        ) : null}\n        <ReviewSection\n          title={'Packages'}\n          data={packages()}\n          testid={'review-image-packages'}\n        />\n      </TextContent>\n    </Fragment>\n  );\n};\n\nexport default ReviewStep;\n"],"sourceRoot":""}