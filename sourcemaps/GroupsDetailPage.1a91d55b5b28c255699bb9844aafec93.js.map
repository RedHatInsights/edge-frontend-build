{"version":3,"file":"js/GroupsDetailPage.c771a2bb952370849116.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/DeviceStatus.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst DeviceDetailTabs = () => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md pf-u-mb-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { getDeviceHasUpdate } from '../../api/index';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: {\n          display_name: entity.display_name,\n          id: entity.id,\n          system_profile: {\n            image_data,\n            status:\n              image_data?.UpdateTransactions?.[\n                image_data.UpdateTransactions.length - 1\n              ]?.Status,\n          },\n        },\n      }));\n    })();\n  }, [entity]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/fleet-management'}>\n                {uuid ? 'Groups' : 'Fleet management'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n                    ?.UpdatesAvailable?.length > 0,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : updateModal?.deviceData?.system_profile?.status === 'BUILDING' ||\n            updateModal?.deviceData?.system_profile?.status === 'CREATED' ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"blue\"\n              icon={<InProgressIcon />}\n            >\n              Updating\n            </Label>\n          ) : updateModal?.deviceData?.system_profile?.image_data?.ImageInfo\n              ?.UpdatesAvailable?.length > 0 ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"orange\"\n              icon={<ExclamationTriangleIcon />}\n            >\n              Update Available\n            </Label>\n          ) : (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"green\"\n              icon={<CheckCircleIcon color=\"green\" />}\n            >\n              Running\n            </Label>\n          )}\n        </PageHeader>\n        <Main className=\"edge-c-device--detail\">\n          <Grid gutter=\"md\">\n            <GridItem span={12}>\n              <DeviceDetailTabs />\n            </GridItem>\n          </Grid>\n        </Main>\n      </DetailWrapper>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary</CardTitle>\n    <CardBody>\n      <Grid>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {active}\n              </Button>{' '}\n              Active\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {orphaned}\n              </Button>{' '}\n              Orphaned\n            </StackItem>\n          </Stack>\n        </GridItem>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {noReports}\n              </Button>\n              Stale\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {neverReported}\n              </Button>\n              Registered but never reported\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_active_color_300';\nimport PropTypes from 'prop-types';\n\nconst DeviceStatus = ({ imageData, rpm_ostree_deployments }) => {\n  const { UpdateTransactions, ImageInfo } = imageData || {};\n  if (rpm_ostree_deployments?.length === undefined) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <QuestionCircleIcon color=\"grey\" />\n        </SplitItem>\n        <SplitItem>Unspecified</SplitItem>\n      </Split>\n    );\n  }\n  const current_deployment = rpm_ostree_deployments[0];\n  if (!current_deployment.booted) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color=\"blue\" />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    );\n  }\n\n  if (\n    UpdateTransactions?.[UpdateTransactions.length - 1]?.Status ===\n      'BUILDING' ||\n    UpdateTransactions?.[UpdateTransactions.length - 1]?.Status === 'CREATED'\n  ) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color={infoColor.value} />\n        </SplitItem>\n        <SplitItem>Updating</SplitItem>\n      </Split>\n    );\n  }\n\n  if (ImageInfo?.UpdatesAvailable?.length > 0) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon color={warningColor.value} />\n        </SplitItem>\n        <SplitItem className=\"pf-u-warning-color-200\">\n          Update Available\n        </SplitItem>\n      </Split>\n    );\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">\n        <CheckCircleIcon color=\"green\" />\n      </SplitItem>\n      <SplitItem>Running</SplitItem>\n    </Split>\n  );\n};\n\nDeviceStatus.propTypes = {\n  id: PropTypes.string,\n  updateTransactions: PropTypes.array,\n  rpm_ostree_deployments: PropTypes.array,\n  imageData: PropTypes.object,\n};\n\nexport default DeviceStatus;\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  //onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport DeviceStatus from './DeviceStatus';\nimport { getDeviceHasUpdate } from '../../api';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [activeFilters] = useState(defaultFilters);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('update_device') === 'true') {\n      setUpdateModal((prevState) => {\n        return {\n          ...prevState,\n          isOpen: true,\n        };\n      });\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n            variant: 'compact',\n            actionResolver: (rowData) => {\n              return rowData?.system_profile?.image_data\n                ? [\n                    {\n                      title: 'Update',\n                      onClick: (_event, _index, rowData) => {\n                        setUpdateModal((prevState) => {\n                          return {\n                            ...prevState,\n                            isOpen: true,\n                            deviceData: rowData,\n                          };\n                        });\n                      },\n                    },\n                  ]\n                : rowData?.system_profile\n                ? [\n                    {\n                      title: 'No Action',\n                    },\n                  ]\n                : null;\n            },\n            areActionsDisabled: (rowData) => {\n              const updateTransactions =\n                rowData?.system_profile?.image_data?.UpdateTransactions || [];\n\n              return (\n                updateTransactions[updateTransactions.length - 1]?.Status ===\n                  'BUILDING' ||\n                updateTransactions[updateTransactions.length - 1]?.Status ===\n                  'CREATED' ||\n                !rowData?.system_profile?.image_data?.ImageInfo\n                  ?.UpdatesAvailable?.length > 0\n              );\n            },\n          }}\n          columns={(defaultColumns) => {\n            const newColumns = defaultColumns.filter((column) =>\n              ['display_name', 'updated'].includes(column.key)\n            );\n            newColumns.filter((col) => col.key === 'updated')[0].props = {\n              width: 20,\n            };\n\n            return [\n              ...newColumns,\n              {\n                key: 'system_profile',\n                title: 'Device status',\n                // eslint-disable-next-line react/display-name\n                renderFunc: (sysProf) => (\n                  <DeviceStatus\n                    rpm_ostree_deployments={sysProf.rpm_ostree_deployments}\n                    imageData={sysProf.image_data}\n                  />\n                ),\n                props: { width: 20, isStatic: true },\n              },\n            ];\n          }}\n          getEntities={async (\n            _items,\n            config,\n            _showTags,\n            defaultGetEntities\n          ) => {\n            const defaultData = await defaultGetEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                  'operating_system',\n                  'greenboot_status',\n                  'greenboot_fallback_detected',\n                  'rpm_ostree_deployments',\n                ],\n              },\n            });\n\n            const promises = defaultData.results.map(async (device) => {\n              const getImageInfo = await getDeviceHasUpdate(device.id);\n              const imageInfo =\n                !getImageInfo || getImageInfo === 404\n                  ? { data: null }\n                  : getImageInfo;\n              return {\n                ...device,\n                system_profile: {\n                  ...device.system_profile,\n                  image_data: Object.prototype.hasOwnProperty.call(\n                    imageInfo,\n                    'data'\n                  )\n                    ? null\n                    : imageInfo,\n                },\n              };\n            });\n            const rows = await Promise.all(promises);\n            return { ...defaultData, results: rows };\n          }}\n          hideFilters={{ registeredWith: true }}\n          // NOTE: add back in when device status is sent with inventory data\n          //filterConfig={{\n          //  items: [\n          //    {\n          //      label: activeFilters?.deviceStatus?.label,\n          //      type: 'checkbox',\n          //      filterValues: {\n          //        onChange: (event, value) => {\n          //          setActiveFilters(() => ({\n          //            ...(activeFilters || {}),\n          //            deviceStatus: {\n          //              ...(activeFilters?.deviceStatus || {}),\n          //              value,\n          //            },\n          //          }));\n          //          inventory.current.onRefreshData();\n          //        },\n          //        items: deviceStatusMapper,\n          //        value: activeFilters?.deviceStatus?.value || [],\n          //      },\n          //    },\n          //  ],\n          //}}\n          hasCheckbox={false}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            // NOTE: Adding custom onDelete function overrides default inventory deletion behavior\n            //onDelete: (event, itemsToRemove, isAll) => {\n            //  if (isAll) {\n            //    setActiveFilters(defaultFilters);\n            //  } else {\n            //    setActiveFilters(() =>\n            //      onDeleteFilter(activeFilters, itemsToRemove)\n            //    );\n            //  }\n            //  inventory.current.onRefreshData();\n            //},\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities }) => {\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={inventory.current.onRefreshData}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { Text } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImageSets } from '../../store/actions';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'CREATED' },\n      { option: 'BUILDING' },\n      { option: 'ERROR' },\n      { option: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Current Version', type: 'version', sort: false },\n  { title: 'Last Updated', type: 'updated_at', sort: true },\n  { title: 'Status', type: 'status', sort: false },\n];\n\nconst createRows = (data) => {\n  return data.map(({ image_set, image_build_iso_url }) => ({\n    id: image_set?.ID,\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Version,\n      {\n        title: <DateFormat date={image_set?.UpdatedAt} />,\n      },\n      {\n        title: (\n          <StatusLabel\n            status={image_set?.Images[image_set?.Images?.length - 1].Status}\n          />\n        ),\n      },\n    ],\n    imageStatus: image_set?.Images[image_set?.Images?.length - 1].Status,\n    isoURL: image_build_iso_url || null,\n    latestImageID: image_set?.Images[image_set?.Images?.length - 1].ID,\n  }));\n};\n\nconst ImageTable = ({ openCreateWizard, openUpdateWizard }) => {\n  const { count, data, isLoading, hasError } = useSelector(\n    ({ edgeImageSetsReducer }) => ({\n      count: edgeImageSetsReducer?.data?.Count || 0,\n      data: edgeImageSetsReducer?.data?.Data || null,\n      isLoading:\n        edgeImageSetsReducer?.isLoading === undefined\n          ? true\n          : edgeImageSetsReducer.isLoading,\n      hasError: edgeImageSetsReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData?.imageStatus === 'SUCCESS' ||\n      rowData?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.latestImageID);\n        },\n      });\n    }\n\n    if (rowData?.imageStatus === 'BUILDING' && rowData?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) => rowData?.imageStatus === 'BUILDING';\n\n  return (\n    <GeneralTable\n      apiFilterSort={true}\n      filters={defaultFilters}\n      loadTableData={loadEdgeImageSets}\n      tableData={{ count, data, isLoading, hasError }}\n      columnNames={columnNames}\n      rows={data ? createRows(data) : []}\n      emptyStateMessage=\"No images found\"\n      emptyStateActionMessage=\"Create new image\"\n      emptyStateAction={openCreateWizard}\n      actionResolver={actionResolver}\n      areActionsDisabled={areActionsDisabled}\n      defaultSort={{ index: 2, direction: 'desc' }}\n      toolbarButtons={[\n        {\n          title: 'Create new image',\n          click: () => openCreateWizard(),\n        },\n      ]}\n    />\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  openUpdateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageTable;\n","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport { edgeImageSetsReducer } from '../../store/reducers';\nimport ImageSetsTable from './ImageSetsTable';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        create_image: true,\n      }).toString(),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImageSetsReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","useState","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","T","AppInfo","showTags","UpdateDeviceModal","React","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","entity","entityDetails","groupName","groupsDetailReducer","deviceId","id","isOpen","deviceData","updateModal","setUpdateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","useEffect","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","image_data","prevState","system_profile","UpdateTransactions","length","Status","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","actions","isDisabled","ImageInfo","UpdatesAvailable","onClick","hideBack","hideInvDrawer","Label","icon","Main","Grid","gutter","GridItem","span","Bullseye","Spinner","navigateBack","history","push","pathname","location","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Card","CardTitle","CardBody","Stack","hasGutter","StackItem","isInline","deviceSummaryReducer","isLoading","undefined","hasError","data","shallowEqual","Tiles","dispatch","useDispatch","registered","imagesReducer","loadImages","loadDeviceSummary","Flex","FlexItem","onNewImageClick","DeviceStatus","imageData","rpm_ostree_deployments","Split","SplitItem","booted","infoColor","warningColor","updateTransactions","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","activeFilters","inventory","useRef","useHistory","URLSearchParams","search","get","cleanEntities","Fragment","PageHeaderTitle","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","actionResolver","rowData","_index","areActionsDisabled","columns","defaultColumns","newColumns","filter","column","includes","key","col","width","renderFunc","sysProf","isStatic","getEntities","_items","config","_showTags","defaultGetEntities","host_type","fields","defaultData","promises","results","map","device","getImageInfo","imageInfo","Object","prototype","hasOwnProperty","call","Promise","all","rows","hideFilters","registeredWith","hasCheckbox","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onRowClick","_e","mergeWithEntities","refreshTable","type","option","columnNames","sort","createRows","image_set","image_build_iso_url","ID","cells","paths","Name","Version","DateFormat","date","UpdatedAt","StatusLabel","Images","imageStatus","isoURL","latestImageID","ImageTable","openCreateWizard","openUpdateWizard","edgeImageSetsReducer","count","Count","Data","GeneralTable","apiFilterSort","loadTableData","loadEdgeImageSets","tableData","emptyStateMessage","emptyStateActionMessage","emptyStateAction","actionsArray","Text","href","rel","target","_rowId","defaultSort","index","direction","toolbarButtons","click","clearFilters","pagination","page","perPage","isRequired","CreateImageWizard","UpdateImageWizard","isCreateWizardOpen","setIsCreateWizardOpen","imageId","UpdateWizard","setUpdateWizard","ImageSetsTable","create_image","toString","update_image","updateImageID"],"sourceRoot":""}