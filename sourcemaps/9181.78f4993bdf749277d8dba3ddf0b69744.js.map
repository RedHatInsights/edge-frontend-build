{"version":3,"file":"js/9181.10fcd7a290ca84d99555.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/close-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/action-types.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/notifications.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/reducers/notifications.js","webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/Routes/Devices/DevicesGroupDetail.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/constants/features.js","webpack:///./src/constants/routeMapper.js","webpack:///./src/hooks/useApi.js","webpack:///./src/hooks/useInventoryGroups.js","webpack:///./src/utils/apiWithToast.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toPrimitive.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CloseIconConfig = {\n  name: 'CloseIcon',\n  height: 1024,\n  width: 730,\n  svgPath: 'M725.499315,767.757345 L469.242169,511.500499 L725.499315,255.243653 C729.196254,251.545719 731.096195,247.248119 731,242.4498 C731,237.653479 728.997365,233.35588 725.299427,229.558002 L647.542773,151.701495 C643.743891,147.903617 639.446287,146 634.64996,146 C629.852635,146 625.55503,147.803673 621.857092,151.500607 L365.5,407.857398 L109.241857,151.500607 C105.544917,147.803673 101.246314,145.904733 96.4499876,146 C91.6526619,146.104622 87.3550577,148.002562 83.5571748,151.701495 L5.7005771,229.457058 C1.90269428,233.255936 0,237.553535 0,242.350855 C0,247.148175 1.80175055,251.444775 5.50068853,255.143709 L261.857779,511.500499 L5.50068853,767.757345 C1.80175055,771.454279 -0.0961914123,775.752878 0,779.750645 C0.103697157,784.547965 2.00263857,788.845564 5.7005771,792.642443 L83.4572306,871.299502 C87.2541139,875.096381 91.5527176,877 96.3500433,877 C101.147369,877 105.444973,875.197325 109.142912,871.499391 L365.400058,615.241545 L621.657203,871.499391 C625.355142,875.197325 629.652746,877.095265 634.449072,877 C639.246398,877 643.545002,874.997437 647.342885,871.299502 L725.099538,793.54294 C728.896421,789.745062 730.796362,785.446463 730.796362,780.649143 C731.096195,775.752878 729.196254,771.454279 725.499315,767.757345',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CloseIcon = createIcon(CloseIconConfig);\n\nexport default CloseIcon;","var notificationsPrefix = '@@INSIGHTS-CORE/NOTIFICATIONS/';\nexport var ADD_NOTIFICATION = \"\".concat(notificationsPrefix, \"ADD_NOTIFICATION\");\nexport var REMOVE_NOTIFICATION = \"\".concat(notificationsPrefix, \"REMOVE_NOTIFICATION\");\nexport var CLEAR_NOTIFICATIONS = \"\".concat(notificationsPrefix, \"CLEAR_NOTIFICATIONS\");\nexport default {\n    ADD_NOTIFICATION: ADD_NOTIFICATION,\n    REMOVE_NOTIFICATION: REMOVE_NOTIFICATION,\n    CLEAR_NOTIFICATIONS: CLEAR_NOTIFICATIONS,\n};\n//# sourceMappingURL=action-types.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from './action-types';\nfunction generateID(type) {\n    return 'cloud-services' + type + '-' + new Date().getTime() + Math.random().toString(36).slice(2);\n}\nexport var addNotification = function (notification) { return ({\n    type: ADD_NOTIFICATION,\n    payload: __assign({ id: generateID('notification') }, notification),\n}); };\nexport var removeNotification = function (index) { return ({\n    type: REMOVE_NOTIFICATION,\n    payload: index,\n}); };\nexport var clearNotifications = function () { return ({\n    type: CLEAR_NOTIFICATIONS,\n}); };\nexport default {\n    addNotification: addNotification,\n    removeNotification: removeNotification,\n    clearNotifications: clearNotifications,\n};\n//# sourceMappingURL=notifications.js.map","var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from '../actions/action-types';\nvar addNotification = function (notifications, _a) {\n    var payload = _a.payload;\n    return __spreadArray(__spreadArray([], notifications, true), [payload], false);\n};\nvar removeNotification = function (notifications, _a) {\n    var payload = _a.payload;\n    var index = notifications.findIndex(function (_a) {\n        var id = _a.id;\n        return id === payload;\n    });\n    return __spreadArray(__spreadArray([], notifications.slice(0, index), true), notifications.slice(index + 1), true);\n};\nvar clearNotifications = function () { return []; };\nexport var defaultState = [];\nexport var notificationsReducers = function (state, action) {\n    if (state === void 0) { state = defaultState; }\n    switch (action.type) {\n        case ADD_NOTIFICATION:\n            return addNotification(state, action);\n        case REMOVE_NOTIFICATION:\n            return removeNotification(state, action);\n        case CLEAR_NOTIFICATIONS:\n            return clearNotifications();\n        default:\n            return state;\n    }\n};\nexport var notifications = notificationsReducers;\nexport default notifications;\n//# sourceMappingURL=notifications.js.map","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { createLink, emptyStateNoFilters, useFeatureFlags } from '../../utils';\nimport DeviceStatus, { getDeviceStatus } from '../../components/Status';\nimport RetryUpdatePopover from './RetryUpdatePopover';\nimport {\n  FEATURE_HIDE_GROUP_ACTIONS,\n  FEATURE_PARITY_INVENTORY_GROUPS,\n  FEATURE_INVENTORY_WORKSPACES_RENAME,\n} from '../../constants/features';\n\nconst insightsInventoryManageEdgeUrlName = 'manage-edge-inventory';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      // { option: 'Booting', value: 'booting' },\n      // { option: 'Running', value: 'running' },\n      { option: 'Update available', value: 'updateAvailable' },\n      // { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst GetColumnNames = (\n  inventoryGroupsEnabled,\n  isDataAvailable,\n  useWorkspacesRename\n) => {\n  return [\n    {\n      title: 'Name',\n      type: 'name',\n      sort: isDataAvailable,\n      columnTransforms: [cellWidth(25)],\n    },\n    {\n      title: 'Image',\n      type: 'image',\n      sort: false,\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: inventoryGroupsEnabled\n        ? useWorkspacesRename\n          ? 'Workspace'\n          : 'Group'\n        : 'Groups',\n      type: 'groups',\n      sort: false,\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: 'Last seen',\n      type: 'last_seen',\n      sort: isDataAvailable,\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: 'Status',\n      type: 'status',\n      sort: false,\n      columnTransforms: [cellWidth(25)],\n    },\n  ];\n};\n\nconst createRows = (\n  devices,\n  hasLinks,\n  fetchDevices,\n  deviceBaseUrl,\n  history,\n  navigate,\n  inventoryGroupsEnabled,\n  useWorkspacesRename\n) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n      DispatcherStatus,\n      GroupName,\n      GroupUUID,\n    } = device;\n    const deviceStatus = getDeviceStatus(\n      Status,\n      UpdateAvailable,\n      DispatcherStatus\n    );\n\n    // const currentInventoryPath = history ? '/edge' : paths.inventory;\n\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (inventoryGroupsEnabled) {\n      if (GroupName && GroupUUID) {\n        DeviceGroups = [{ ID: GroupUUID, Name: GroupName }];\n      } else {\n        DeviceGroups = [];\n      }\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n    const pathToDevice =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.inventory}/${DeviceUUID}`\n        : `insights/inventory/${DeviceUUID}`;\n    const pathToImage =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.manageImages}/${ImageSetID}`\n        : `insights/image-builder/manage-edge-images/${ImageSetID}`;\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(\n          Status,\n          UpdateAvailable,\n          DispatcherStatus\n        ),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: hasLinks\n            ? createLink({\n                pathname: pathToDevice,\n                linkText: DeviceName,\n                navigate,\n              })\n            : DeviceName,\n        },\n        {\n          title: ImageName\n            ? hasLinks\n              ? createLink({\n                  pathname: pathToImage,\n                  linkText: ImageName,\n                  navigate,\n                })\n              : ImageName\n            : 'unavailable',\n        },\n        {\n          title:\n            DeviceGroups.length === 0 ? (\n              <div className=\"pf-v5-u-disabled-color-200\">\n                No{' '}\n                {inventoryGroupsEnabled && useWorkspacesRename\n                  ? 'workspace'\n                  : 'group'}\n              </div>\n            ) : DeviceGroups.length === 1 ? (\n              DeviceGroups[0].Name\n            ) : (\n              deviceGroupTooltip\n            ),\n        },\n        {\n          title: LastSeen ? <DateFormat date={LastSeen} /> : 'Unknown',\n        },\n        {\n          title:\n            deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n              <RetryUpdatePopover\n                lastSeen={LastSeen}\n                fetchDevices={fetchDevices}\n                device={device}\n              >\n                <DeviceStatus\n                  type={\n                    deviceStatus === 'error'\n                      ? 'errorWithExclamationCircle'\n                      : deviceStatus\n                  }\n                  isLink={true}\n                />\n              </RetryUpdatePopover>\n            ) : (\n              <DeviceStatus\n                type={\n                  deviceStatus === 'error'\n                    ? 'errorWithExclamationCircle'\n                    : deviceStatus\n                }\n              />\n            ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  navigateProp,\n  historyProp,\n  locationProp,\n  hasCheckbox = false,\n  selectedItems,\n  selectedItemsUpdateable,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  handleEditNameSystem,\n  handleDeleteSystem,\n  handleUpdateSelected,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n  isSystemsView = false,\n  isAddSystemsView = false,\n  urlName,\n  enforceEdgeGroups,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const canBeUpdated = isSystemsView;\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const { pathname, search } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n\n  const useInventorGroups = useFeatureFlags(FEATURE_PARITY_INVENTORY_GROUPS);\n  const inventoryGroupsEnabled = !enforceEdgeGroups && useInventorGroups;\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  // Create base URL path for system detail link\n  const deviceBaseUrl = navigateProp\n    ? 'federated'\n    : pathname === paths.inventory\n    ? pathname\n    : pathname === '/'\n    ? ''\n    : `${pathname}/systems`;\n\n  const hideGroupsActions = useFeatureFlags(FEATURE_HIDE_GROUP_ACTIONS);\n\n  const actionResolver = (rowData) => {\n    const getUpdatePathname = (updateRowData) =>\n      navigateProp\n        ? `/insights/inventory/${updateRowData.rowInfo.id}/update`\n        : `/inventory/${updateRowData.rowInfo.id}/update`;\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup && !hideGroupsActions) {\n      actions.push({\n        title: `Add to ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        isDisabled: inventoryGroupsEnabled\n          ? rowData?.rowInfo?.deviceGroups.length !== 0 // disable the action item if the system has a group assigned\n          : false,\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleEditNameSystem) {\n      actions.push({\n        title: 'Edit',\n        onClick: () =>\n          handleEditNameSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleDeleteSystem) {\n      actions.push({\n        title: 'Delete',\n        onClick: () =>\n          handleDeleteSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                display_name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup && !hideGroupsActions) {\n      actions.push({\n        title: `Remove from ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData) && handleUpdateSelected) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          if (navigateProp) {\n            const pathProp = getUpdatePathname(rowData);\n            navigate(pathProp, { replace: true });\n          } else {\n            history.push({\n              pathname: getUpdatePathname(rowData),\n              // pathname: `${deviceBaseUrl}/${rowData.rowInfo.id}/update`,\n            });\n          }\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: `Remove from ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    !rowData.rowInfo?.UpdateAvailable &&\n    (rowData.rowInfo?.deviceStatus === 'updating' ||\n      rowData.rowInfo?.deviceStatus === 'upToDate');\n\n  // some filters and columns titles/labels have different values when shown in insights inventory\n  let tableFilters = [];\n  let tableColumnNames = [];\n  const isDataAvailable = data ? data.length > 0 : false;\n  const columnNames = GetColumnNames(\n    inventoryGroupsEnabled,\n    isDataAvailable,\n    useWorkspacesRename\n  );\n\n  if (urlName === insightsInventoryManageEdgeUrlName) {\n    for (let ind = 0; ind < defaultFilters.length; ind++) {\n      let filterElement = defaultFilters[ind];\n      if (filterElement['label'] === 'Status') {\n        filterElement['label'] = 'Image status';\n      }\n      tableFilters.push(filterElement);\n    }\n    for (let ind = 0; ind < columnNames.length; ind++) {\n      let columnElement = columnNames[ind];\n      if (columnElement['title'] === 'Status') {\n        columnElement['title'] = 'Image status';\n      }\n      tableColumnNames.push(columnElement);\n    }\n  } else {\n    tableFilters = defaultFilters;\n    tableColumnNames = columnNames;\n  }\n\n  return (\n    <div className=\"edge\">\n      <>\n        {isSystemsView &&\n        emptyStateNoFilters(isLoading, count, search) &&\n        !historyProp ? (\n          <CustomEmptyState\n            data-testid=\"general-table-empty-state-no-data\"\n            icon={'plus'}\n            title={'Connect edge systems'}\n            body={\n              'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n            }\n            secondaryActions={[\n              {\n                title:\n                  'Create RHEL for Edge images and configure automated management',\n                link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n                type: 'link',\n              },\n            ]}\n          />\n        ) : (\n          <GeneralTable\n            historyProp={historyProp}\n            navigateProp={navigateProp}\n            locationProp={locationProp}\n            apiFilterSort={true}\n            isUseApi={true}\n            filters={tableFilters}\n            filtersName={'edge-devices-table-filters'}\n            loadTableData={fetchDevices}\n            tableData={{\n              count: count,\n              isLoading: isLoading,\n              hasError: hasError,\n            }}\n            columnNames={tableColumnNames}\n            rows={createRows(\n              data || [],\n              isAddSystemsView || isSystemsView,\n              fetchDevices,\n              deviceBaseUrl,\n              history,\n              navigate,\n              inventoryGroupsEnabled,\n              useWorkspacesRename\n            )}\n            actionResolver={actionResolver}\n            defaultSort={{ index: 3, direction: 'desc' }}\n            toolbarButtons={\n              (canBeAdded\n                ? [\n                    {\n                      title: 'Add systems',\n                      click: () => setIsAddModalOpen(true),\n                    },\n                  ]\n                : [],\n              canBeUpdated\n                ? [\n                    {\n                      isDisabled: !selectedItemsUpdateable,\n                      title: 'Update',\n                      id: 'toolbar-update-button',\n                      click: () => handleUpdateSelected(),\n                    },\n                  ]\n                : [])\n            }\n            hasCheckbox={hasCheckbox}\n            selectedItems={selectedItems}\n            skeletonRowQuantity={skeletonRowQuantity}\n            kebabItems={kebabItems}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n          />\n        )}\n      </>\n    </div>\n  );\n};\n\nDeviceTable.propTypes = {\n  navigateProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.func,\n  selectedItemsUpdateable: PropTypes.bool,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  handleEditNameSystem: PropTypes.func,\n  handleDeleteSystem: PropTypes.func,\n  handleUpdateSelected: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isSystemsView: PropTypes.bool,\n  isAddSystemsView: PropTypes.bool,\n  urlName: PropTypes.string,\n  groupUUID: PropTypes.string,\n  enforceEdgeGroups: PropTypes.bool,\n};\n\nexport default DeviceTable;\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport DeviceTable from './DeviceTable';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventoryByGroup } from '../../api/devices';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useFeatureFlags } from '../../utils';\nimport {\n  FEATURE_HIDE_GROUP_ACTIONS,\n  FEATURE_PARITY_INVENTORY_GROUPS,\n  FEATURE_INVENTORY_WORKSPACES_RENAME,\n} from '../../constants/features';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"UpdateDeviceModal\" */ './UpdateDeviceModal')\n);\n\nconst DevicesGroupDetail = ({\n  historyProp,\n  navigateProp,\n  locationProp,\n  showHeaderProp,\n  notificationProp,\n  urlName,\n  groupUUID,\n  tableProps,\n}) => {\n  const chrome = useChrome();\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n  const [response, fetchDevices] = useApi({\n    api: getInventoryByGroup,\n    id: groupUUID,\n    tableReload: true,\n  });\n  const showHeader = showHeaderProp === undefined ? true : showHeaderProp;\n  const { data, isLoading, hasError } = response;\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const canBeUpdated = () => {\n    let canBeUpdated = false;\n    if (checkedDeviceIds.length > 0) {\n      let initialImage = checkedDeviceIds[0].imageSetId;\n      for (let device of checkedDeviceIds) {\n        if (device.imageSetId !== initialImage) {\n          canBeUpdated = false;\n          break;\n        }\n        if (\n          (!canBeUpdated &&\n            device.updateImageData &&\n            device.deviceStatus === 'updateAvailable') ||\n          device.deviceStatus === 'unresponsive' ||\n          device.deviceStatus === 'error'\n        ) {\n          canBeUpdated = true;\n        }\n      }\n    }\n    return canBeUpdated;\n  };\n\n  const handleUpdateSelected = () => {\n    setUpdateModal((prevState) => ({\n      ...prevState,\n      deviceData: checkedDeviceIds.map((device) => ({\n        id: device.id,\n        display_name: device.display_name,\n        deviceStatus: device.deviceStatus,\n      })),\n      imageData: { imageName: checkedDeviceIds[0].imageName },\n      imageSetId: checkedDeviceIds[0].imageSetId,\n      isOpen: true,\n    }));\n  };\n\n  const reloadData = async () => {\n    await fetchDevices();\n    setHasModalSubmitted(true);\n  };\n  let classNameMain = '';\n  if (showHeaderProp !== undefined && showHeader) {\n    classNameMain =\n      'edge-devices pf-l-page__main-section pf-c-page__main-section';\n  } else if (!showHeader) {\n    classNameMain = 'pf-c-toolbar';\n  }\n\n  useEffect(() => {\n    chrome?.updateDocumentTitle?.('Systems - Inventory');\n  }, [chrome]);\n\n  const hideGroupsActions = useFeatureFlags(FEATURE_HIDE_GROUP_ACTIONS);\n  const kebabMenuItems = [];\n  if (!hideGroupsActions) {\n    const groupsKebabMenuItems = [];\n\n    if (inventoryGroupsEnabled) {\n      groupsKebabMenuItems.push({\n        isDisabled:\n          !(checkedDeviceIds.length > 0) || // disable if no system checked\n          checkedDeviceIds.filter(\n            // disable if any checked systems has no groups assigned\n            (device) =>\n              device.deviceGroups === undefined ||\n              device.deviceGroups.length === 0\n          ).length > 0 ||\n          checkedDeviceIds.reduce((acc, device) => {\n            // disable if the checked systems has different groups assigned\n            const groupIDS = device.deviceGroups\n              ? device.deviceGroups.map((group) => group.ID)\n              : [];\n            const newGroupIDS = groupIDS.filter(\n              (groupID) => !acc.includes(groupID)\n            );\n            acc.push(...newGroupIDS);\n            return acc;\n          }, []).length !== 1,\n        title: `Remove from ${useWorkspacesRename ? 'workspace' : 'group'}`,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            checkedDeviceIds.map((device) => ({\n              ID: device.deviceID,\n              name: device.display_name,\n              UUID: device.id,\n              deviceGroups: device.deviceGroups,\n            })),\n            false\n          ),\n      });\n    }\n    kebabMenuItems.push(...groupsKebabMenuItems);\n  }\n\n  return (\n    <>\n      {showHeader && (\n        <PageHeader className=\"pf-m-light\">\n          <PageHeaderTitle title=\"Systems\" />\n        </PageHeader>\n      )}\n      {showHeader}\n      <section className={classNameMain}>\n        <DeviceTable\n          historyProp={historyProp}\n          navigateProp={navigateProp}\n          locationProp={locationProp}\n          isSystemsView={true}\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          updateModal={updateModal}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          handleUpdateSelected={handleUpdateSelected}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          selectedItemsUpdateable={canBeUpdated()}\n          kebabItems={kebabMenuItems.length > 0 ? kebabMenuItems : undefined}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n          urlName={urlName}\n          tableProps={tableProps}\n        />\n      </section>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                console.log('Click modal');\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            notificationProp={notificationProp}\n            refreshTable={reloadData}\n          />\n        </Suspense>\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={reloadData}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n    </>\n  );\n};\n\nDevicesGroupDetail.propTypes = {\n  historyProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  showHeaderProp: PropTypes.bool,\n  notificationProp: PropTypes.object,\n  urlName: PropTypes.string,\n  groupUUID: PropTypes.string,\n  tableProps: PropTypes.object,\n};\n\nexport default DevicesGroupDetail;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core/deprecated';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInputApi = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    change('group', null);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={(_event, isOpen) => onToggle(isOpen)}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {props.defaultOptions.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </>\n  );\n};\n\nSelectInputApi.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInputApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport {\n  removeDeviceFromGroupById,\n  removeDevicesFromInventoryGroup,\n} from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text, Icon } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport useInventoryGroups from '../../hooks/useInventoryGroups';\nimport { useFeatureFlags } from '../../utils';\nimport { FEATURE_INVENTORY_WORKSPACES_RENAME } from '../../constants/features';\n\nconst removeDescription = (deviceInfo, inventoryGroupsEnabled) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n\n  if (inventoryGroupsEnabled) {\n    return (\n      <Text>\n        <strong>{systemText} </strong> will no longer be part of{' '}\n        <strong>{groupText}</strong> and its configuration will be impacted.\n      </Text>\n    );\n  }\n\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <Icon status=\"warning\">\n    <ExclamationTriangleIcon />\n  </Icon>\n);\n\nconst createSchema = (deviceInfo, inventoryGroupsEnabled) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo, inventoryGroupsEnabled),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n\n  const [inventoryGroupsEnabled] = useInventoryGroups(false);\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n    const systemText =\n      deviceInfo.length > 1\n        ? `${deviceInfo.length} systems`\n        : deviceInfo[0].name;\n\n    const errorMessageDescription = inventoryGroupsEnabled\n      ? deviceInfo.length > 1\n        ? `Failed to remove ${deviceInfo.length} systems from ${groupName}`\n        : `Failed to remove 1 system from ${groupName}`\n      : 'Failed to remove system from group';\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${systemText} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: errorMessageDescription,\n      },\n    };\n\n    let removeDeviceGroupFunc;\n    if (inventoryGroupsEnabled) {\n      removeDeviceGroupFunc = () =>\n        removeDevicesFromInventoryGroup(\n          groupId,\n          deviceInfo.map((device) => device.UUID)\n        );\n    } else {\n      removeDeviceGroupFunc = () =>\n        removeDeviceFromGroupById(groupId, deviceInfo[0].ID);\n    }\n\n    apiWithToast(dispatch, removeDeviceGroupFunc, statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      closeModal={() => setIsModalOpen(false)}\n      title={`Remove from ${\n        inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n      }`}\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo, inventoryGroupsEnabled)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import { EDGE_API, INVENTORY_API_BASE, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const createInventoryGroup = (payload) => {\n  return instance.post(`${INVENTORY_API_BASE}/groups`, { name: payload.name });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getInventoryGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${INVENTORY_API_BASE}/groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const addDevicesToInventoryGroup = (groupId, devices) => {\n  const devicesIDS = [];\n  devices.forEach((device) => devicesIDS.push(device.UUID));\n\n  return instance.post(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts`,\n    devicesIDS\n  );\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDevicesFromInventoryGroup = (groupId, devices) => {\n  return instance.delete(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts/` + devices.join(',')\n  );\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n\nexport const getEnforceEdgeGroups = () => {\n  return instance.get(`${EDGE_API}/device-groups/enforce-edge-groups`);\n};\n\nexport const validateInventoryGroupName = (name) => {\n  return instance.get(\n    `${INVENTORY_API_BASE}/groups?name=${name}&order_by=name&order_how=ASC`\n  );\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","export const FEATURE_PARITY_INVENTORY_GROUPS =\n  'edgeParity.inventory-groups-enabled';\n\nexport const FEATURE_HIDE_GROUP_ACTIONS = 'edge-management.hide_groups_actions';\n\nexport const FEATURE_INVENTORY_WORKSPACES_RENAME =\n  'platform.rbac.groups-to-workspaces-rename';\n","export const routes = {\n  groups: '/groups',\n  groupsDetail: '/groups/:uuid',\n  deviceDetail: '/groups/:uuid/:inventoryId',\n  canaries: '/canaries',\n  fleetManagement: '/fleet-management',\n  fleetManagementDetail: '/fleet-management/:groupId',\n  fleetManagementSystemDetail: '/fleet-management/:groupId/systems/:deviceId',\n  fleetManagementSystemDetailUpdate:\n    '/fleet-management/:groupId/systems/:deviceId/update',\n  inventory: '/inventory',\n  insightsInventory: '/insights/inventory/manage-edge-inventory',\n  inventoryDetail: '/inventory/:deviceId',\n  inventoryDetailModal: '/inventory/:deviceId/:modalId',\n  inventoryDetailUpdate: '/inventory/:deviceId/update',\n  insightsInventoryDetailUpdate: '/insights/inventory/:deviceId/update',\n  manageImages: '/manage-images',\n  manageImagesDetail: '/manage-images/:imageId',\n  manageImagesDetailVersion: '/manage-images/:imageId/versions/:imageVersionId',\n  repositories: '/repositories',\n  learningResources: '/learning-resources',\n  contentSourcesRepositories: '/preview/insights/content',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n","import { useState, useEffect } from 'react';\nimport { useFeatureFlags } from '../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../constants/features';\nimport { getEnforceEdgeGroups } from '../api/groups';\n\nconst useInventoryGroups = (value) => {\n  const [data, setData] = useState(value);\n  const [ready, setReady] = useState(false);\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  useEffect(() => {\n    (async () => {\n      const response = await getEnforceEdgeGroups();\n      const enforceEdgeGroups = response?.enforce_edge_groups;\n      setData(!enforceEdgeGroups && inventoryGroupsEnabled);\n      setReady(true);\n    })();\n  }, []);\n\n  return [data, ready];\n};\n\nexport default useInventoryGroups;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };"],"names":["name","height","width","svgPath","yOffset","xOffset","notificationsPrefix","ADD_NOTIFICATION","concat","REMOVE_NOTIFICATION","CLEAR_NOTIFICATIONS","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","addNotification","notification","type","payload","id","Date","getTime","Math","random","toString","slice","removeNotification","index","clearNotifications","__spreadArray","to","from","pack","ar","l","Array","defaultState","state","action","notifications","_a","findIndex","defaultFilters","label","options","option","value","createRows","devices","hasLinks","fetchDevices","deviceBaseUrl","history","navigate","inventoryGroupsEnabled","useWorkspacesRename","map","device","DeviceName","DeviceGroups","DeviceID","DeviceUUID","UpdateAvailable","LastSeen","ImageName","ImageSetID","Status","DispatcherStatus","GroupName","GroupUUID","deviceStatus","getDeviceStatus","ID","Name","deviceGroupTooltip","React","Tooltip","content","group","key","pathToDevice","paths","inventory","pathToImage","manageImages","rowInfo","deviceID","display_name","updateImageData","imageSetId","imageName","deviceGroups","noApiSortFilter","cells","title","createLink","pathname","linkText","className","DateFormat","date","RetryUpdatePopover","lastSeen","DeviceStatus","isLink","DeviceTable","_ref","navigateProp","historyProp","locationProp","_ref$hasCheckbox","hasCheckbox","selectedItems","selectedItemsUpdateable","skeletonRowQuantity","data","count","isLoading","hasError","kebabItems","setRemoveModal","handleAddDevicesToGroup","setIsAddModalOpen","handleRemoveDevicesFromGroup","handleEditNameSystem","handleDeleteSystem","handleUpdateSelected","hasModalSubmitted","setHasModalSubmitted","_ref$isSystemsView","isSystemsView","_ref$isAddSystemsView","isAddSystemsView","urlName","enforceEdgeGroups","canBeRemoved","canBeUpdated","useHistory","useNavigate","_ref2","useLocation","search","useInventorGroups","useFeatureFlags","FEATURE_PARITY_INVENTORY_GROUPS","FEATURE_INVENTORY_WORKSPACES_RENAME","hideGroupsActions","FEATURE_HIDE_GROUP_ACTIONS","tableFilters","tableColumnNames","isDataAvailable","columnNames","sort","columnTransforms","cellWidth","GetColumnNames","ind","filterElement","push","columnElement","emptyStateNoFilters","CustomEmptyState","icon","body","secondaryActions","link","GeneralTable","apiFilterSort","isUseApi","filters","filtersName","loadTableData","tableData","rows","actionResolver","rowData","_rowData$rowInfo","_rowData$rowInfo2","_rowData$rowInfo3","getUpdatePathname","updateRowData","actions","isDisabled","onClick","UUID","_rowData$rowInfo4","_rowData$rowInfo5","_rowData$rowInfo6","areActionsDisabled","_event","_rowId","pathProp","replace","isOpen","deviceId","defaultSort","direction","toolbarButtons","click","propTypes","PropTypes","imageData","urlParam","openUpdateWizard","temp","setIsModalOpen","reload","setReload","handleSingleDeviceRemoval","groupUUID","UpdateDeviceModal","DevicesGroupDetail","_data$data","showHeaderProp","notificationProp","tableProps","chrome","useChrome","_useApi","useApi","api","getInventoryByGroup","tableReload","_useApi2","_slicedToArray","response","showHeader","undefined","_useState","useState","_useState2","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","_useState3","_useState4","setDeviceId","_useState5","_useState6","checkedDeviceIds","setCheckedDeviceIds","_useState7","_useState8","isRowSelected","setIsRowSelected","_useState9","_useState10","_useState11","deviceData","_useState12","updateModal","setUpdateModal","ids","isRow","reloadData","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","stop","classNameMain","useEffect","_chrome$updateDocumen","updateDocumentTitle","kebabMenuItems","groupsKebabMenuItems","filter","reduce","acc","newGroupIDS","groupID","includes","_toConsumableArray","PageHeader","PageHeaderTitle","prevState","_objectSpread","_step","initialImage","_iterator","_createForOfIteratorHelper","done","err","e","f","Suspense","fallback","Bullseye","Spinner","navigateBack","console","log","refreshTable","RemoveDeviceModal","isModalOpen","deviceInfo","SelectInputApi","props","useFieldApi","change","useFormApi","setIsOpen","selected","setSelected","clearSelection","Select","variant","typeAheadAriaLabel","onToggle","onSelect","selection","isPlaceholder","onClear","selections","placeholderText","defaultOptions","DeviceGroup","SelectOption","_extends","groupId","description","removeDescription","systemText","groupText","Text","WarningIcon","Icon","status","ExclamationTriangleIcon","createSchema","schema","fields","component","componentTypes","PLAIN_TEXT","isRequired","validate","validatorTypes","REQUIRED","dispatch","useDispatch","_useInventoryGroups","useInventoryGroups","Modal","closeModal","submitLabel","titleIconVariant","additionalMappers","SearchInput","onSubmit","values","removeDeviceGroupFunc","hasManyGroups","groupName","errorMessageDescription","statusMessages","onSuccess","onError","removeDevicesFromInventoryGroup","removeDeviceFromGroupById","apiWithToast","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","Stack","StackItem","position","children","isVisible","setIsVisible","DescriptionListGroup","DescriptionListTermHelpText","Popover","shouldOpen","shouldClose","alertseverityvariant","headerContent","style","color","ExclamationCircleIcon","size","DispatcherReason","headerComponent","bodyContent","footerContent","Button","isInline","updateSystem","DevicesUUID","DescriptionListDescription","defaultProps","createGroup","instance","post","EDGE_API","Type","createInventoryGroup","INVENTORY_API_BASE","getGroups","query","q","getTableParams","get","getInventoryGroups","getGroupById","updateGroupById","put","deleteGroupById","addDevicesToGroup","Devices","addDevicesToInventoryGroup","devicesIDS","forEach","removeDevicesFromGroup","join","validateGroupName","getEnforceEdgeGroups","validateInventoryGroupName","RepoModal","initialValues","validatorMapper","onClose","FormRenderer","FormTemplate","_FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","_callee2","_context2","setTimeout","abrupt","sent","_x","onCancel","statusMapper","booting","text","iconMapper","checkCircle","colorMapper","green","labelColor","building","inProgress","blue","created","upToDate","success","passed","updateAvailable","exclamationTriangle","yellow","updating","error","timesCircle","red","default","unknown","interrupted","unresponsive","exclamationCircle","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","_ref$isLabel","isLabel","_ref$toolTipContent","toolTipContent","_ref$className","Label","Split","SplitItem","textDecoration","cursor","routes","groups","groupsDetail","deviceDetail","canaries","fleetManagement","fleetManagementDetail","fleetManagementSystemDetail","fleetManagementSystemDetailUpdate","insightsInventory","inventoryDetail","inventoryDetailModal","inventoryDetailUpdate","insightsInventoryDetailUpdate","manageImagesDetail","manageImagesDetailVersion","repositories","learningResources","contentSourcesRepositories","_statusMessages","_ref$id","_ref$tableReload","setData","setIsLoading","setHasError","apiFunc","setAPIFunc","hasSuccess","fetchData","_data","_args","t0","finish","ready","setReady","enforce_edge_groups","_statusMessages2","_statusMessages3","hasInfo","onInfo","hasWarning","onWarning","Title","_assertThisInitialized","ReferenceError","_defineProperties","r","o","enumerable","configurable","writable","defineProperty","_createClass","_defineProperty","toPropertyKey","Symbol","toPrimitive","TypeError","String"],"sourceRoot":""}