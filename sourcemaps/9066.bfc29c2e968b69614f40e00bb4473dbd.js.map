{"version":3,"file":"js/9066.1663363524805.e3f0ac24172a7cd1e703.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components-inventory-general-info/esm/LoadingCard/LoadingCard.js","webpack:///./src/components/ImageInformationCard.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack } from \"@patternfly/react-core/dist/esm/layouts/Stack/Stack.js\";\nimport { StackItem } from \"@patternfly/react-core/dist/esm/layouts/Stack/StackItem.js\";\nimport { TextContent } from \"@patternfly/react-core/dist/esm/components/Text/TextContent.js\";\nimport { Text } from \"@patternfly/react-core/dist/esm/components/Text/Text.js\";\nimport { TextList } from \"@patternfly/react-core/dist/esm/components/Text/TextList.js\";\nimport { TextVariants } from \"@patternfly/react-core/dist/esm/components/Text/Text.js\";\nimport { TextListItemVariants } from \"@patternfly/react-core/dist/esm/components/Text/TextListItem.js\";\nimport { TextListVariants } from \"@patternfly/react-core/dist/esm/components/Text/TextList.js\";\nimport { TextListItem } from \"@patternfly/react-core/dist/esm/components/Text/TextListItem.js\";\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\n\nvar valueToText = function valueToText(value, singular, plural) {\n  if ((value || value === 0) && singular) {\n    return value === 1 ? \"1 \".concat(singular) : \"\".concat(value, \" \").concat(plural || \"\".concat(singular, \"s\"));\n  }\n\n  if (value === 0) {\n    return 'None';\n  }\n\n  return value || 'Not available';\n};\n\nexport var Clickable = function Clickable(_ref) {\n  var _ref$item = _ref.item,\n      _onClick = _ref$item.onClick,\n      value = _ref$item.value,\n      target = _ref$item.target,\n      plural = _ref$item.plural,\n      singular = _ref$item.singular;\n  return /*#__PURE__*/React.createElement(\"a\", {\n    onClick: function onClick(event) {\n      event.preventDefault();\n\n      _onClick(event, {\n        value: value,\n        target: target\n      });\n    },\n    href: \"\".concat(window.location.href, \"/\").concat(target)\n  }, valueToText(value, singular, plural));\n};\nClickable.propTypes = {\n  item: PropTypes.shape({\n    value: PropTypes.node,\n    target: PropTypes.string,\n    onClick: PropTypes.func,\n    plural: PropTypes.string,\n    singular: PropTypes.string\n  })\n};\nClickable.defaultProps = {\n  item: {}\n};\n\nvar LoadingCard = function LoadingCard(_ref2) {\n  var title = _ref2.title,\n      isLoading = _ref2.isLoading,\n      items = _ref2.items;\n  return /*#__PURE__*/React.createElement(Stack, {\n    hasGutter: true\n  }, /*#__PURE__*/React.createElement(StackItem, null, /*#__PURE__*/React.createElement(TextContent, null, /*#__PURE__*/React.createElement(Text, {\n    component: TextVariants.h1\n  }, title))), /*#__PURE__*/React.createElement(StackItem, {\n    isFilled: true\n  }, /*#__PURE__*/React.createElement(TextContent, null, /*#__PURE__*/React.createElement(TextList, {\n    component: TextListVariants.dl\n  }, items.map(function (item, key) {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: key\n    }, /*#__PURE__*/React.createElement(TextListItem, {\n      component: TextListItemVariants.dt\n    }, item.title), /*#__PURE__*/React.createElement(TextListItem, {\n      component: TextListItemVariants.dd\n    }, isLoading && /*#__PURE__*/React.createElement(Skeleton, {\n      size: item.size || SkeletonSize.sm\n    }), !isLoading && (item.onClick && item.value ? /*#__PURE__*/React.createElement(Clickable, {\n      item: item\n    }) : valueToText(item.value, item.singular, item.plural))));\n  })))));\n};\n\nLoadingCard.propTypes = {\n  title: PropTypes.node.isRequired,\n  isLoading: PropTypes.bool,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.node,\n    value: PropTypes.node,\n    onClick: PropTypes.func,\n    size: PropTypes.oneOf(Object.values(SkeletonSize)),\n    plural: PropTypes.string,\n    singular: PropTypes.string\n  }))\n};\nLoadingCard.defaultProps = {\n  isLoading: true,\n  items: []\n};\nexport default LoadingCard;","import React, { useEffect, useState } from 'react';\nimport LoadingCard from '@redhat-cloud-services/frontend-components-inventory-general-info/LoadingCard';\nimport { getImageDataOnDevice } from '../api/images';\nimport { routes as paths } from '../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\n\nconst ImageInformationCard = () => {\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n  const [isImageInfoLoading, setIsImageInfoLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const [imageData, setImageData] = useState(null);\n  useEffect(() => {\n    (async () => {\n      try {\n        const data = await getImageDataOnDevice(deviceId);\n        setImageData(data);\n      } catch (err) {\n        setHasError(true);\n      }\n      setIsImageInfoLoading(false);\n    })();\n  }, []);\n\n  return (\n    <LoadingCard\n      title=\"Image information\"\n      isLoading={false}\n      items={[\n        {\n          title: 'Running image',\n          value: isImageInfoLoading ? (\n            <Skeleton size={SkeletonSize.sm} />\n          ) : imageData ? (\n            <Link\n              to={`${paths['manage-images']}/${imageData?.Image?.ImageSetID}/details`}\n            >\n              {imageData?.Image?.Name}\n            </Link>\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title: 'Running version',\n          value: isImageInfoLoading ? (\n            <Skeleton size={SkeletonSize.sm} />\n          ) : imageData ? (\n            <Link\n              to={`${paths['manage-images']}/${imageData?.Image?.ImageSetID}/versions/${imageData?.Image?.ID}/details`}\n            >\n              {imageData?.Image?.Version}\n            </Link>\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title: 'Target version',\n          value: isImageInfoLoading ? (\n            <Skeleton size={SkeletonSize.sm} />\n          ) : imageData?.UpdatesAvailable ? (\n            <Link\n              to={`${paths['manage-images']}/${imageData?.UpdatesAvailable[0]?.Image?.ImageSetID}/versions/${imageData?.UpdatesAvailable[0]?.Image?.ID}/details`}\n            >\n              {imageData?.UpdatesAvailable[0]?.Image?.Version}\n            </Link>\n          ) : hasError ? (\n            'unavailable'\n          ) : (\n            'Same as running'\n          ),\n        },\n        {\n          title: 'Rollback version',\n          value: isImageInfoLoading ? (\n            <Skeleton size={SkeletonSize.sm} />\n          ) : imageData?.RollbackImage?.ID ? (\n            <Link\n              to={`${paths['manage-images']}/${imageData?.RollbackImage?.ImageSetID}/versions/${imageData?.RollbackImage?.ID}/details`}\n            >\n              {imageData?.RollbackImage?.Version}\n            </Link>\n          ) : hasError ? (\n            'unavailable'\n          ) : (\n            'None'\n          ),\n        },\n      ]}\n    />\n  );\n};\n\nexport default ImageInformationCard;\n"],"names":["valueToText","value","singular","plural","concat","Clickable","_ref","_ref$item","item","_onClick","onClick","target","event","preventDefault","href","window","location","propTypes","defaultProps","LoadingCard","_ref2","title","isLoading","items","Stack","hasGutter","StackItem","TextContent","Text","component","isFilled","TextList","map","key","Fragment","TextListItem","T","Skeleton","size","Object","values","deviceId","useSelector","entityDetails","entity","id","useState","isImageInfoLoading","setIsImageInfoLoading","hasError","setHasError","imageData","setImageData","useEffect","getImageDataOnDevice","data","SkeletonSize","Link","to","paths","Image","ImageSetID","Name","ID","Version","UpdatesAvailable","RollbackImage"],"sourceRoot":""}