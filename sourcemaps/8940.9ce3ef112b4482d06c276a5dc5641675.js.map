{"version":3,"file":"js/8940.1652890607132.032a978c03b1f4fc30d4.js","mappings":"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","sources":["webpack:///./src/components/BuildModalReview.js","webpack:///./src/Routes/Devices/UpdateDeviceModal.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextListItemVariants,\n  TextListVariants,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BuildModalReview = ({ reviewObject, key }) => {\n  return (\n    <TextContent>\n      <Title headingLevel=\"h3\">\n        <Text component={'b'}>{reviewObject.title}</Text>\n      </Title>\n      <TextList component={TextListVariants.dl}>\n        {reviewObject.rows.map((row) => (\n          <Fragment key={row.title + key}>\n            <TextListItem component={TextListItemVariants.dt}>\n              {row.title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {row.value}\n            </TextListItem>\n          </Fragment>\n        ))}\n      </TextList>\n    </TextContent>\n  );\n};\n\nBuildModalReview.propTypes = {\n  reviewObject: PropTypes.object,\n  key: PropTypes.string,\n};\n\nexport default BuildModalReview;\n","import React, { useEffect, useState } from 'react';\nimport {\n  TextContent,\n  Text,\n  Bullseye,\n  Backdrop,\n  Spinner,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport {\n  getImageById,\n  getImageSet,\n  updateDeviceLatestImage,\n} from '../../api/index';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Modal from '../../components/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport BuildModalReview from '../../components/BuildModalReview';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../ImageManagerDetail/constants';\n\nconst getImageData = (imageId) =>\n  getImageById({ id: imageId }).then((imageSetId) =>\n    getImageSet({\n      id: imageSetId?.image?.ImageSetID,\n      q: {\n        limit: 1,\n        sort_by: '-created_at',\n      },\n    })\n  );\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const [imageData, setImageData] = useState(null);\n  const dispatch = useDispatch();\n  const isMultiple = updateModal.deviceData.length > 1;\n  const deviceId = updateModal.deviceData.map((device) => device.id);\n  const deviceName = isMultiple\n    ? updateModal.deviceData.map((device) => device.display_name)\n    : updateModal?.deviceData[0]?.display_name;\n\n  useEffect(() => {\n    updateModal?.imageSetId\n      ? getImageSet({\n          id: updateModal.imageSetId,\n          q: {\n            limit: 1,\n            sort_by: '-created_at',\n          },\n        }).then((data) => setImageData(data.Data.images[0]))\n      : getImageData(updateModal.imageId).then((data) =>\n          setImageData(data.Data.images[0])\n        );\n  }, []);\n\n  const handleUpdateModal = async () => {\n    try {\n      await updateDeviceLatestImage({\n        DevicesUUID: deviceId,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating device',\n          description: isMultiple\n            ? ` ${deviceName.length} systems were added to the queue.`\n            : ` ${deviceName} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a device was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  const WarningText = () => (\n    <TextContent className=\"pf-u-pt-md\">\n      <Text\n        style={{ color: 'var(--pf-global--palette--gold-500)' }}\n        component=\"small\"\n      >\n        <ExclamationTriangleIcon /> After the update is installed, the device\n        will apply the changes.\n      </Text>\n    </TextContent>\n  );\n\n  const Description = () => (\n    <TextContent>\n      <Text>\n        Update{' '}\n        <span className=\"pf-u-font-weight-bold pf-u-font-size-md\">\n          {isMultiple ? `${deviceName.length} systems` : deviceName}\n        </span>{' '}\n        to latest version of the image linked to it.\n      </Text>\n    </TextContent>\n  );\n\n  const updateToDetails = {\n    title: `Update to version ${imageData?.image.Version}`,\n    rows: [\n      { title: 'Image Name', value: imageData?.image.Name },\n      { title: 'Version', value: imageData?.image.Version },\n      {\n        title: 'Created',\n        value: <DateFormat date={imageData?.image.CreatedAt} />,\n      },\n      {\n        title: 'Release',\n        value: distributionMapper[imageData?.image.Distribution],\n      },\n    ],\n  };\n\n  const packageDetails = {\n    title: `Changes from version ${imageData?.image.Version - 1}`,\n    rows: [\n      { title: 'Added', value: imageData?.update_added || 0 },\n      { title: 'Removed', value: imageData?.update_removed || 0 },\n      { title: 'Updated', value: imageData?.update_updated || 0 },\n    ],\n  };\n\n  const updateSchema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: Description(),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({\n          reviewObject: updateToDetails,\n          key: 'update-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'package-details',\n        label: BuildModalReview({\n          reviewObject: packageDetails,\n          key: 'package-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-text',\n        label: WarningText(),\n      },\n    ],\n  };\n\n  return (\n    <>\n      {imageData ? (\n        <Modal\n          size=\"medium\"\n          title={`Update system${\n            isMultiple ? 's' : ''\n          } to latest image version`}\n          isOpen={updateModal.isOpen}\n          openModal={() =>\n            setUpdateModal((prevState) => ({ ...prevState, isOpen: false }))\n          }\n          submitLabel=\"Update Device\"\n          schema={updateSchema}\n          onSubmit={handleUpdateModal}\n          reloadData={refreshTable}\n        />\n      ) : (\n        <Backdrop>\n          <Bullseye>\n            <Spinner isSVG diameter=\"100px\" />\n          </Bullseye>\n        </Backdrop>\n      )}\n    </>\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.array.isRequired,\n    imageData: PropTypes.object,\n    imageId: PropTypes.number,\n    imageSetId: PropTypes.number,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n"],"names":["BuildModalReview","reviewObject","key","TextContent","Title","headingLevel","Text","component","title","TextList","TextListVariants","rows","map","row","Fragment","TextListItem","T","TextListItemVariants","value","propTypes","PropTypes","UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","useState","imageData","setImageData","dispatch","useDispatch","isMultiple","deviceData","length","deviceId","device","id","deviceName","display_name","useEffect","imageId","imageSetId","getImageSet","q","limit","sort_by","then","data","Data","images","getImageById","image","ImageSetID","handleUpdateModal","updateDeviceLatestImage","DevicesUUID","addNotification","variant","description","statusText","handleClose","prevState","isOpen","updateToDetails","Version","Name","DateFormat","date","CreatedAt","distributionMapper","Distribution","packageDetails","update_added","update_removed","update_updated","updateSchema","fields","componentTypes","name","label","className","style","color","Modal","size","openModal","submitLabel","schema","onSubmit","reloadData","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired"],"sourceRoot":""}