{"version":3,"file":"js/5320.50a86909dd98ad593769.js","mappings":"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","sources":["webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInputApi = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    change('group', null);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {props.defaultOptions.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </>\n  );\n};\n\nSelectInputApi.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInputApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport {\n  removeDeviceFromGroupById,\n  removeDevicesFromInventoryGroup,\n} from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { useFeatureFlags } from '../../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../../constants/features';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n\n  if (inventoryGroupsEnabled) {\n    return (\n      <Text>\n        <strong>{systemText} </strong> will no longer be part of{' '}\n        <strong>{groupText}</strong> and its configuration will be impacted.\n      </Text>\n    );\n  }\n\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n    const systemText =\n      deviceInfo.length > 1\n        ? `${deviceInfo.length} systems`\n        : deviceInfo[0].name;\n\n    const errorMessageDescription = inventoryGroupsEnabled\n      ? deviceInfo.length > 1\n        ? `Failed to remove ${deviceInfo.length} systems from ${groupName}`\n        : `Failed to remove 1 system from ${groupName}`\n      : 'Failed to remove system from group';\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${systemText} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: errorMessageDescription,\n      },\n    };\n\n    let removeDeviceGroupFunc;\n    if (inventoryGroupsEnabled) {\n      removeDeviceGroupFunc = () =>\n        removeDevicesFromInventoryGroup(\n          groupId,\n          deviceInfo.map((device) => device.UUID)\n        );\n    } else {\n      removeDeviceGroupFunc = () =>\n        removeDeviceFromGroupById(groupId, deviceInfo[0].ID);\n    }\n\n    apiWithToast(dispatch, removeDeviceGroupFunc, statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import { EDGE_API, INVENTORY_API_BASE, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const createInventoryGroup = (payload) => {\n  return instance.post(`${INVENTORY_API_BASE}/groups`, { name: payload.name });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getInventoryGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${INVENTORY_API_BASE}/groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const addDevicesToInventoryGroup = (groupId, devices) => {\n  const devicesIDS = [];\n  devices.forEach((device) => devicesIDS.push(device.UUID));\n\n  return instance.post(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts`,\n    devicesIDS\n  );\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDevicesFromInventoryGroup = (groupId, devices) => {\n  return instance.delete(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts/` + devices.join(',')\n  );\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n\nexport const validateInventoryGroupName = (name) => {\n  return instance.get(\n    `${INVENTORY_API_BASE}/groups?name=${name}&order_by=name&order_how=ASC`\n  );\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n"],"names":["SelectInputApi","props","useFieldApi","change","useFormApi","useState","isOpen","setIsOpen","selected","setSelected","clearSelection","Select","variant","typeAheadAriaLabel","onToggle","onSelect","_event","selection","isPlaceholder","onClear","selections","placeholderText","defaultOptions","map","index","DeviceGroup","SelectOption","key","value","toString","Name","groupId","ID","description","propTypes","PropTypes","removeDescription","deviceInfo","deviceGroups","inventoryGroupsEnabled","useFeatureFlags","FEATURE_PARITY_INVENTORY_GROUPS","systemText","length","name","groupText","Text","WarningIcon","color","warningColor","createSchema","schema","fields","component","componentTypes","label","push","isRequired","validate","type","validatorTypes","RemoveDeviceModal","isModalOpen","setIsModalOpen","reloadData","dispatch","useDispatch","Modal","closeModal","title","submitLabel","titleIconVariant","additionalMappers","SearchInput","group","onSubmit","values","removeDeviceGroupFunc","hasManyGroups","groupName","errorMessageDescription","statusMessages","onSuccess","onError","removeDevicesFromInventoryGroup","device","UUID","removeDeviceFromGroupById","apiWithToast","createGroup","payload","instance","EDGE_API","Type","createInventoryGroup","INVENTORY_API_BASE","getGroups","query","q","getTableParams","getInventoryGroups","getGroupById","id","updateGroupById","deleteGroupById","addDevicesToGroup","devices","Devices","addDevicesToInventoryGroup","devicesIDS","forEach","removeDevicesFromGroup","data","join","validateGroupName","validateInventoryGroupName","RepoModal","initialValues","size","validatorMapper","onClose","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","onCancel","api","tableReload","setData","isLoading","setIsLoading","hasError","setHasError","hasSuccess","fetchData","addNotification","useEffect"],"sourceRoot":""}