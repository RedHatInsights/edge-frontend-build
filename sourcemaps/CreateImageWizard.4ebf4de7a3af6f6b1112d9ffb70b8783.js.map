{"version":3,"file":"js/CreateImageWizard.1661369336218.9472c4646f93b635fb59.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperTextItem.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/layouts/Stack/Stack.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/layouts/Stack/StackItem.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.mjs","webpack:///./node_modules/@patternfly/react-styles/css/layouts/Stack/stack.mjs","webpack:///./src/components/BuildModalReview.js","webpack:///./src/Routes/Devices/UpdateDeviceModal.js","webpack:///./src/Routes/ImageManager/CreateImageWizard.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nexport const HelperText = (_a) => {\n    var { children, className, component = 'div' } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.helperText, className) }, props), children));\n};\nHelperText.displayName = 'HelperText';\n//# sourceMappingURL=HelperText.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nconst variantStyle = {\n    default: '',\n    indeterminate: styles.modifiers.indeterminate,\n    warning: styles.modifiers.warning,\n    success: styles.modifiers.success,\n    error: styles.modifiers.error\n};\nexport const HelperTextItem = (_a) => {\n    var { children, className, component = 'div', variant = 'default', icon, isDynamic = false, hasIcon = isDynamic } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"variant\", \"icon\", \"isDynamic\", \"hasIcon\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.helperTextItem, variantStyle[variant], isDynamic && styles.modifiers.dynamic, className) }, props),\n        icon && (React.createElement(\"span\", { className: css(styles.helperTextItemIcon), \"aria-hidden\": true }, icon)),\n        hasIcon && !icon && (React.createElement(\"span\", { className: css(styles.helperTextItemIcon), \"aria-hidden\": true },\n            (variant === 'default' || variant === 'indeterminate') && React.createElement(MinusIcon, null),\n            variant === 'warning' && React.createElement(ExclamationTriangleIcon, null),\n            variant === 'success' && React.createElement(CheckCircleIcon, null),\n            variant === 'error' && React.createElement(ExclamationCircleIcon, null))),\n        React.createElement(\"span\", { className: css(styles.helperTextItemText) }, children)));\n};\nHelperTextItem.displayName = 'HelperTextItem';\n//# sourceMappingURL=HelperTextItem.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/layouts/Stack/stack';\nimport { css } from '@patternfly/react-styles';\nexport const Stack = (_a) => {\n    var { hasGutter = false, className = '', children = null, component = 'div' } = _a, props = __rest(_a, [\"hasGutter\", \"className\", \"children\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(styles.stack, hasGutter && styles.modifiers.gutter, className) }), children));\n};\nStack.displayName = 'Stack';\n//# sourceMappingURL=Stack.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/layouts/Stack/stack';\nimport { css } from '@patternfly/react-styles';\nexport const StackItem = (_a) => {\n    var { isFilled = false, className = '', children = null } = _a, props = __rest(_a, [\"isFilled\", \"className\", \"children\"]);\n    return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.stackItem, isFilled && styles.modifiers.fill, className) }), children));\n};\nStackItem.displayName = 'StackItem';\n//# sourceMappingURL=StackItem.js.map","import { createIcon } from '../createIcon';\n\nexport const MinusIconConfig = {\n  name: 'MinusIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const MinusIcon = createIcon(MinusIconConfig);\n\nexport default MinusIcon;","import('./helper-text.css');\nexport default {\n  \"helperText\": \"pf-c-helper-text\",\n  \"helperTextItem\": \"pf-c-helper-text__item\",\n  \"helperTextItemIcon\": \"pf-c-helper-text__item-icon\",\n  \"helperTextItemText\": \"pf-c-helper-text__item-text\",\n  \"modifiers\": {\n    \"indeterminate\": \"pf-m-indeterminate\",\n    \"warning\": \"pf-m-warning\",\n    \"success\": \"pf-m-success\",\n    \"error\": \"pf-m-error\",\n    \"dynamic\": \"pf-m-dynamic\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","import('./stack.css');\nexport default {\n  \"modifiers\": {\n    \"fill\": \"pf-m-fill\",\n    \"gutter\": \"pf-m-gutter\"\n  },\n  \"stack\": \"pf-l-stack\",\n  \"stackItem\": \"pf-l-stack__item\"\n};","import React, { Fragment } from 'react';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextListItemVariants,\n  TextListVariants,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BuildModalReview = ({ reviewObject, key }) => {\n  return (\n    <TextContent>\n      <Title headingLevel=\"h3\">\n        <Text component={'b'}>{reviewObject.title}</Text>\n      </Title>\n      <TextList component={TextListVariants.dl}>\n        {reviewObject.rows.map((row) => (\n          <Fragment key={row.title + key}>\n            <TextListItem component={TextListItemVariants.dt}>\n              {row.title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {row.value}\n            </TextListItem>\n          </Fragment>\n        ))}\n      </TextList>\n    </TextContent>\n  );\n};\n\nBuildModalReview.propTypes = {\n  reviewObject: PropTypes.object,\n  key: PropTypes.string,\n};\n\nexport default BuildModalReview;\n","import React, { useEffect, useState } from 'react';\nimport {\n  TextContent,\n  Text,\n  Bullseye,\n  Backdrop,\n  Spinner,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { getImageById, getImageSet } from '../../api/images';\nimport { updateDeviceLatestImage } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Modal from '../../components/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport BuildModalReview from '../../components/BuildModalReview';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\n\nconst getImageData = (imageId) =>\n  getImageById({ id: imageId }).then((imageSetId) =>\n    getImageSet({\n      id: imageSetId?.image?.ImageSetID,\n      q: {\n        limit: 1,\n        sort_by: '-created_at',\n      },\n    })\n  );\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const [imageData, setImageData] = useState(null);\n  const dispatch = useDispatch();\n  const isMultiple = updateModal.deviceData.length > 1;\n  const deviceId = updateModal.deviceData.map((device) => device.id);\n  const deviceName = isMultiple\n    ? updateModal.deviceData.map((device) => device.display_name)\n    : updateModal?.deviceData[0]?.display_name;\n\n  useEffect(() => {\n    updateModal?.imageSetId\n      ? getImageSet({\n          id: updateModal.imageSetId,\n          q: {\n            limit: 1,\n            sort_by: '-created_at',\n            status: 'SUCCESS',\n          },\n        }).then((data) => setImageData(data.Data.images[0]))\n      : getImageData(updateModal.imageId).then((data) =>\n          setImageData(data.Data.images[0])\n        );\n  }, []);\n\n  const handleUpdateModal = async () => {\n    try {\n      await updateDeviceLatestImage({\n        DevicesUUID: deviceId,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating system',\n          description: isMultiple\n            ? ` ${deviceName.length} systems were added to the queue.`\n            : ` ${deviceName} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a system was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  const WarningText = () => (\n    <TextContent className=\"pf-u-pt-md\">\n      <Text\n        style={{ color: 'var(--pf-global--palette--gold-500)' }}\n        component=\"small\"\n      >\n        <ExclamationTriangleIcon /> After the update is installed, the system\n        will apply the changes.\n      </Text>\n    </TextContent>\n  );\n\n  const Description = () => (\n    <TextContent>\n      <Text>\n        Update{' '}\n        <span className=\"pf-u-font-weight-bold pf-u-font-size-md\">\n          {isMultiple ? `${deviceName.length} systems` : deviceName}\n        </span>{' '}\n        to latest version of the image linked to it.\n      </Text>\n    </TextContent>\n  );\n\n  const updateToDetails = {\n    title: `Update to version ${imageData?.image.Version}`,\n    rows: [\n      { title: 'Image Name', value: imageData?.image.Name },\n      { title: 'Version', value: imageData?.image.Version },\n      {\n        title: 'Created',\n        value: <DateFormat date={imageData?.image.CreatedAt} />,\n      },\n      {\n        title: 'Release',\n        value: distributionMapper[imageData?.image.Distribution],\n      },\n    ],\n  };\n\n  const packageDetails = {\n    title: `Changes from version ${imageData?.image.Version - 1}`,\n    rows: [\n      { title: 'Added', value: imageData?.update_added || 0 },\n      { title: 'Removed', value: imageData?.update_removed || 0 },\n      { title: 'Updated', value: imageData?.update_updated || 0 },\n    ],\n  };\n\n  const updateSchema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: Description(),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({\n          reviewObject: updateToDetails,\n          key: 'update-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'package-details',\n        label: BuildModalReview({\n          reviewObject: packageDetails,\n          key: 'package-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-text',\n        label: WarningText(),\n      },\n    ],\n  };\n\n  return (\n    <>\n      {imageData ? (\n        <Modal\n          size=\"medium\"\n          title={`Update system${\n            isMultiple ? 's' : ''\n          } to latest image version`}\n          isOpen={updateModal.isOpen}\n          openModal={() =>\n            setUpdateModal((prevState) => ({ ...prevState, isOpen: false }))\n          }\n          submitLabel=\"Update system\"\n          schema={updateSchema}\n          onSubmit={handleUpdateModal}\n          reloadData={refreshTable}\n        />\n      ) : (\n        <Backdrop>\n          <Bullseye>\n            <Spinner isSVG diameter=\"100px\" />\n          </Bullseye>\n        </Backdrop>\n      )}\n    </>\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.array.isRequired,\n    imageData: PropTypes.object,\n    imageId: PropTypes.number,\n    imageSetId: PropTypes.number,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n","import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  registration,\n  review,\n  packages,\n  repositories,\n  imageSetDetails,\n  imageOutput,\n  customPackages,\n} from './steps';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage } from '../../store/actions';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getEdgeImageStatus } from '../../api/images';\nimport { useFeatureFlags } from '../../utils';\nimport { DEFAULT_RELEASE, TEMPORARY_RELEASE } from '../../constants';\n\nconst CreateImage = ({ navigateBack, reload }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const customRepoFlag = useFeatureFlags('fleet-management.custom-repos');\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  return user ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          architecture: 'x86_64',\n        };\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Created image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        version: 0,\n        release: temporaryReleasesFlag ? TEMPORARY_RELEASE : DEFAULT_RELEASE,\n        includesCustomRepos: customRepoFlag,\n      }}\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Create image',\n            },\n            showTitles: true,\n            title: 'Create image',\n            crossroads: [\n              'target-environment',\n              'release',\n              'imageType',\n              'third-party-repositories',\n              'imageOutput',\n              'imageSetDetails',\n              'includesCustomRepos',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              imageSetDetails,\n              imageOutput,\n              registration,\n              repositories,\n              packages,\n              review,\n              customPackages,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  reload: PropTypes.func,\n};\nCreateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default CreateImage;\n"],"names":["HelperText","_a","children","className","component","props","Component","Object","assign","displayName","variantStyle","default","indeterminate","warning","success","error","HelperTextItem","variant","icon","isDynamic","hasIcon","Stack","hasGutter","StackItem","isFilled","MinusIconConfig","name","height","width","svgPath","yOffset","xOffset","MinusIcon","BuildModalReview","reviewObject","key","TextContent","Title","headingLevel","Text","title","TextList","TextListVariants","rows","map","row","Fragment","TextListItem","T","TextListItemVariants","value","propTypes","PropTypes","UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","useState","imageData","setImageData","dispatch","useDispatch","isMultiple","deviceData","length","deviceId","device","id","deviceName","display_name","useEffect","imageId","imageSetId","getImageSet","q","limit","sort_by","status","then","data","Data","images","getImageById","image","ImageSetID","handleUpdateModal","updateDeviceLatestImage","DevicesUUID","addNotification","description","statusText","handleClose","prevState","isOpen","updateToDetails","Version","Name","DateFormat","date","CreatedAt","distributionMapper","Distribution","packageDetails","update_added","update_removed","update_updated","updateSchema","fields","componentTypes","label","style","color","Modal","size","openModal","submitLabel","schema","onSubmit","reloadData","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","CreateImage","navigateBack","reload","user","setUser","customRepoFlag","useFeatureFlags","temporaryReleasesFlag","closeAction","insights","chrome","auth","getUser","result","undefined","onClose","customComponentMapper","review","ReviewStep","values","setIsSaving","payload","architecture","createNewImage","resp","meta","polling","ID","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","defaultArch","initialValues","version","release","TEMPORARY_RELEASE","DEFAULT_RELEASE","includesCustomRepos","inModal","buttonLabels","submit","showTitles","crossroads","imageSetDetails","imageOutput","registration","repositories","packages","customPackages","defaultProps"],"sourceRoot":""}