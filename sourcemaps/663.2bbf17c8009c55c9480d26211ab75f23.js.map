{"version":3,"file":"js/663.ce840c4ce12b7e4e43f0.js","mappings":"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","sources":["webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/api/devices/index.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { createLink, emptyStateNoFilters } from '../../utils';\nimport DeviceStatus, { getDeviceStatus } from '../../components/Status';\nimport RetryUpdatePopover from './RetryUpdatePopover';\nimport { Button } from '@patternfly/react-core';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      // { option: 'Booting', value: 'booting' },\n      // { option: 'Running', value: 'running' },\n      { option: 'Update available', value: 'updateAvailable' },\n      // { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(30)],\n  },\n  {\n    title: 'Image',\n    type: 'image',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Groups',\n    type: 'groups',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last seen',\n    type: 'last_seen',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n];\n\nconst createRows = (\n  devices,\n  hasLinks,\n  fetchDevices,\n  deviceBaseUrl,\n  history,\n  navigate\n) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n      DispatcherStatus,\n    } = device;\n    const deviceStatus = getDeviceStatus(\n      Status,\n      UpdateAvailable,\n      DispatcherStatus\n    );\n\n    // const currentInventoryPath = history ? '/edge' : paths.inventory;\n\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n\n    const pathToDevice =\n      deviceBaseUrl !== 'federated'\n        ? `${deviceBaseUrl}/${DeviceUUID}`\n        : `/${DeviceUUID}`;\n    const pathToImage =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.manageImages}/${ImageSetID}`\n        : `insights/image-builder/manage-edge-images/${ImageSetID}`;\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(\n          Status,\n          UpdateAvailable,\n          DispatcherStatus\n        ),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: hasLinks\n            ? createLink({\n                pathname: pathToDevice,\n                linkText: DeviceName,\n                history,\n                navigate,\n              })\n            : DeviceName,\n        },\n        {\n          title: ImageName ? (\n            hasLinks ? (\n              <Button\n                variant=\"link\"\n                target-href={pathToImage}\n                onClick={(e) => {\n                  e.preventDefault();\n                  window.location.href = `${pathToImage}`;\n                }}\n              >\n                {ImageName}\n              </Button>\n            ) : (\n              ImageName\n            )\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title:\n            DeviceGroups.length === 0\n              ? '-'\n              : DeviceGroups.length === 1\n              ? DeviceGroups[0].Name\n              : deviceGroupTooltip,\n        },\n        {\n          title: LastSeen ? <DateFormat date={LastSeen} /> : 'Unknown',\n        },\n        {\n          title:\n            deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n              <RetryUpdatePopover\n                lastSeen={LastSeen}\n                fetchDevices={fetchDevices}\n                device={device}\n              >\n                <DeviceStatus\n                  type={\n                    deviceStatus === 'error'\n                      ? 'errorWithExclamationCircle'\n                      : deviceStatus\n                  }\n                  isLink={true}\n                />\n              </RetryUpdatePopover>\n            ) : (\n              <DeviceStatus\n                type={\n                  deviceStatus === 'error'\n                    ? 'errorWithExclamationCircle'\n                    : deviceStatus\n                }\n              />\n            ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  navigateProp,\n  historyProp,\n  locationProp,\n  hasCheckbox = false,\n  selectedItems,\n  selectedItemsUpdateable,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  handleEditNameSystem,\n  handleDeleteSystem,\n  handleUpdateSelected,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n  isSystemsView = false,\n  isAddSystemsView = false,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const canBeUpdated = isSystemsView;\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const { pathname, search } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n\n  // Create base URL path for system detail link\n  const deviceBaseUrl = historyProp\n    ? 'federated'\n    : pathname === paths.inventory\n    ? pathname\n    : pathname === '/'\n    ? ''\n    : `${pathname}/systems`;\n  const actionResolver = (rowData) => {\n    const getUpdatePathname = (updateRowData) =>\n      historyProp\n        ? `/${updateRowData.rowInfo.id}/update`\n        : `/inventory/${updateRowData.rowInfo.id}/update`;\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup) {\n      actions.push({\n        title: 'Add to group',\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleEditNameSystem) {\n      actions.push({\n        title: 'Edit',\n        onClick: () =>\n          handleEditNameSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleDeleteSystem) {\n      actions.push({\n        title: 'Delete',\n        onClick: () =>\n          handleDeleteSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                display_name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup) {\n      actions.push({\n        title: 'Remove from group',\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData)) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          history.push({\n            pathname: getUpdatePathname(rowData),\n            // pathname: `${deviceBaseUrl}/${rowData.rowInfo.id}/update`,\n          });\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: 'Remove from group',\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    !rowData.rowInfo?.UpdateAvailable &&\n    (rowData.rowInfo?.deviceStatus === 'updating' ||\n      rowData.rowInfo?.deviceStatus === 'upToDate');\n\n  return (\n    <>\n      {isSystemsView &&\n      emptyStateNoFilters(isLoading, count, search) &&\n      !historyProp ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Connect edge systems'}\n          body={\n            'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n          }\n          secondaryActions={[\n            {\n              title:\n                'Create RHEL for Edge images and configure automated management',\n              link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n              type: 'link',\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          historyProp={historyProp}\n          locationProp={locationProp}\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchDevices}\n          tableData={{\n            count: count,\n            isLoading: isLoading,\n            hasError: hasError,\n          }}\n          columnNames={columnNames}\n          rows={createRows(\n            data || [],\n            isAddSystemsView || isSystemsView,\n            fetchDevices,\n            deviceBaseUrl,\n            history,\n            navigate\n          )}\n          actionResolver={actionResolver}\n          defaultSort={{ index: 3, direction: 'desc' }}\n          toolbarButtons={\n            (canBeAdded\n              ? [\n                  {\n                    title: 'Add systems',\n                    click: () => setIsAddModalOpen(true),\n                  },\n                ]\n              : [],\n            canBeUpdated\n              ? [\n                  {\n                    isDisabled: !selectedItemsUpdateable,\n                    title: 'Update',\n                    id: 'toolbar-update-button',\n                    click: () => handleUpdateSelected(),\n                  },\n                ]\n              : [])\n          }\n          hasCheckbox={hasCheckbox}\n          selectedItems={selectedItems}\n          skeletonRowQuantity={skeletonRowQuantity}\n          kebabItems={kebabItems}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\n\nDeviceTable.propTypes = {\n  navigateProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.func,\n  selectedItemsUpdateable: PropTypes.bool,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  handleEditNameSystem: PropTypes.func,\n  handleDeleteSystem: PropTypes.func,\n  handleUpdateSelected: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isSystemsView: PropTypes.bool,\n  isAddSystemsView: PropTypes.bool,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDevice = (id) => {\n  return instance.get(`${EDGE_API}/devices/${id}`);\n};\n\nexport const getDeviceUpdates = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/${id}?${q}`);\n};\n\nexport const updateSystem = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["defaultFilters","label","type","options","option","value","columnNames","title","sort","columnTransforms","cellWidth","createRows","devices","hasLinks","fetchDevices","deviceBaseUrl","history","navigate","map","device","DeviceName","DeviceGroups","DeviceID","DeviceUUID","UpdateAvailable","LastSeen","ImageName","ImageSetID","Status","DispatcherStatus","deviceStatus","getDeviceStatus","deviceGroupTooltip","content","group","index","key","Name","pathToDevice","pathToImage","paths","rowInfo","deviceID","id","display_name","updateImageData","imageSetId","imageName","deviceGroups","noApiSortFilter","cells","createLink","pathname","linkText","variant","onClick","e","preventDefault","window","location","href","length","date","lastSeen","isLink","DeviceTable","navigateProp","historyProp","locationProp","hasCheckbox","selectedItems","selectedItemsUpdateable","skeletonRowQuantity","data","count","isLoading","hasError","kebabItems","setRemoveModal","handleAddDevicesToGroup","setIsAddModalOpen","handleRemoveDevicesFromGroup","handleEditNameSystem","handleDeleteSystem","handleUpdateSelected","hasModalSubmitted","setHasModalSubmitted","isSystemsView","isAddSystemsView","canBeRemoved","canBeUpdated","useHistory","useNavigate","useLocation","search","emptyStateNoFilters","icon","body","secondaryActions","link","apiFilterSort","isUseApi","filters","loadTableData","tableData","rows","actionResolver","rowData","actions","push","ID","name","UUID","isDisabled","areActionsDisabled","_event","_rowId","updateRowData","isOpen","deviceId","defaultSort","direction","toolbarButtons","click","propTypes","PropTypes","imageData","urlParam","openUpdateWizard","temp","setIsModalOpen","reload","setReload","handleSingleDeviceRemoval","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","status","className","RetryUpdatePopover","position","children","useState","isVisible","setIsVisible","dispatch","useDispatch","statusMessages","onSuccess","description","shouldOpen","shouldClose","alertseverityvariant","headerContent","style","color","size","DispatcherReason","headerComponent","bodyContent","footerContent","isInline","apiWithToast","updateSystem","DevicesUUID","defaultProps","getInventory","query","q","getTableParams","instance","EDGE_API","getDevice","getDeviceUpdates","payload","statusMapper","booting","text","Icon","iconMapper","colorMapper","labelColor","building","created","upToDate","success","passed","updateAvailable","updating","error","default","interrupted","unresponsive","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","isLabel","toolTipContent","Object","prototype","hasOwnProperty","call","Label","Split","SplitItem","Tooltip","textDecoration","cursor","api","notificationProp","hasSuccess","hasInfo","onInfo","onError","fetchData","response","addNotification","err","Title"],"sourceRoot":""}