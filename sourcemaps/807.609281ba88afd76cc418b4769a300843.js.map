{"version":3,"file":"js/807.1651612861970.e71f64b61bd09a54fc29.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/constants.js","webpack:///./src/hooks/useApi.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/edgeImageSets.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/imageSetDetail.js","webpack:///./src/store/edgeImagePackages.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/deviceTable.js"],"sourcesContent":["import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">{icon(color)}</SplitItem>\n      <SplitItem>{text}</SplitItem>\n    </Split>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = [\n  'CREATED',\n  'BUILDING',\n  'ERROR',\n  'SUCCESS',\n  'INTERRUPTED',\n];\n\nexport const DEFAULT_RELEASE = 'rhel-85';\n\n//For this object, it's need to sisable lint once this is not a react component\nexport const statusIcons = {\n  // eslint-disable-next-line react/display-name\n  unknown: (color) => <QuestionCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  CREATED: (color) => <CheckCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  BUILDING: (color) => <InProgressIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  ERROR: (color) => <TimesCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  SUCCESS: (color) => <CheckCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  INTERRUPTED: (color) => <TimesCircleIcon color={color} />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  CREATED: 'green',\n  BUILDING: 'blue',\n  ERROR: 'red',\n  SUCCESS: 'green',\n  INTERRUPTED: 'red',\n};\n\nexport const imageStatusMapper = {\n  CREATED: 'CREATED',\n  BUILDING: 'Image build in progress',\n  ERROR: 'ERROR',\n  SUCCESS: 'Ready',\n  INTERRUPTED: 'Interrupted',\n};\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n  'rhel-85': 'RHEL 8.5',\n};\n\nexport const releaseMapper = {\n  'rhel-85': 'Red Hat Enterprise Linux (RHEL) 8.5',\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const imageTypeMapper = {\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n};\n\nexport const isAccountMissing = (data) => data && !data?.Account;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  getInventory,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_SETS } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImageSetsPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImageSetsFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImageSetsRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_SETS}_PENDING`]: loadEdgeImageSetsPending,\n    [`${LOAD_EDGE_IMAGE_SETS}_FULFILLED`]: loadEdgeImageSetsFulfilled,\n    [`${LOAD_EDGE_IMAGE_SETS}_REJECTED`]: loadEdgeImageSetsRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_SET_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageSetDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageSetDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageSetDetailRejected = (state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_SET_DETAIL}_PENDING`]: loadImageSetDetailPending,\n    [`${LOAD_IMAGE_SET_DETAIL}_FULFILLED`]: loadImageSetDetailFulfilled,\n    [`${LOAD_IMAGE_SET_DETAIL}_REJECTED`]: loadImageSetDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_PACKAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagePackagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagePackagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagePackagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_PENDING`]: loadEdgeImagePackagesPending,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_FULFILLED`]: loadEdgeImagePackagesFulfilled,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_REJECTED`]: loadEdgeImagePackagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_TABLE } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceTablePending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceTableFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceTableRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_TABLE}_PENDING`]: loadDeviceTablePending,\n    [`${LOAD_DEVICE_TABLE}_FULFILLED`]: loadDeviceTableFulfilled,\n    [`${LOAD_DEVICE_TABLE}_REJECTED`]: loadDeviceTableRejected,\n  },\n  initialState\n);\n"],"names":["StatusLabel","status","icon","statusIcons","color","statusColors","text","composeStatus","imageStatusMapper","charAt","toUpperCase","slice","toLowerCase","className","propTypes","PropTypes","DEFAULT_RELEASE","unknown","CREATED","BUILDING","ERROR","SUCCESS","INTERRUPTED","distributionMapper","releaseMapper","imageTypeMapper","isAccountMissing","data","Account","api","id","statusMessages","tableReload","dispatch","useDispatch","useState","setData","isLoading","setIsLoading","hasError","setHasError","hasSuccess","onSuccess","title","description","onError","fetchData","query","addNotification","variant","useEffect","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","POLLING_IMAGES","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","keyBy","k","loadImageDetail","imageId","type","payload","getImageById","createNewImage","callback","createImage","then","loadEdgeImageSets","fetchEdgeImageSets","addImageToPoll","name","loadImageSetDetail","urlParam","getImageSet","q","applyReducerHash","state","groups","results","meta","threshold","devicesInfo","canariesInfo","statusMapper","SecureIcon","isSecure","props","Icon","LockIcon","LockOpenIcon","defaultProps","uuid","devices","error","_state"],"sourceRoot":""}