{"version":3,"file":"js/GroupsDetailPage.1667840664709.6c076808f35eca21c94f.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/CmpLoader.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/components/SearchInputApi.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Devices/AddSystemsToGroupModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React from 'react';\nimport { Skeleton } from '@patternfly/react-core';\nimport { PropTypes } from 'prop-types';\n\nconst CmpLoader = ({ numberOfRows }) => {\n  var CmpRows = [];\n\n  for (var i = 0; i < numberOfRows; i++) {\n    CmpRows.push(\n      <React.Fragment key={i}>\n        <Skeleton />\n        <br />\n      </React.Fragment>\n    );\n  }\n  return <React.Fragment>{CmpRows}</React.Fragment>;\n};\n\nexport default CmpLoader;\n\nCmpLoader.propTypes = {\n  numberOfRows: PropTypes.number,\n};\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { useLoadModule } from '@scalprum/react-core';\nimport CmpLoader from './CmpLoader';\n\nconst GeneralInformation = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./GeneralInformation\"\n    fallback={<CmpLoader numberOfRows={3} />}\n    {...props}\n  />\n);\n\nconst SystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./SystemCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst OperatingSystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./OperatingSystemCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst BiosCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./BiosCard\"\n    fallback={<CmpLoader numberOfRows={4} />}\n    {...props}\n  />\n);\n\nconst CollectionCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./CollectionCard\"\n    fallback={<CmpLoader numberOfRows={7} />}\n    {...props}\n  />\n);\n\nconst InfrastructureCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./InfrastructureCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nconst GeneralInformationTab = () => {\n  const [{ statusHelper }] = useLoadModule(\n    { appName: 'inventory', scope: 'inventory', module: './dataMapper' },\n    {}\n  );\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  const store = useStore();\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={store}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              store={store}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} store={store} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} store={store} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} store={store} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard\n              {...props}\n              hasKernelModules={true}\n              store={store}\n            />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper?.[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n              store={store}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport { imageTypeMapper, releaseMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail, loadEdgeImageSets } from '../../store/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Update image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Update image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      //onSubmit={handleUpdateModal}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Update Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/images';\n\nconst getActiveAlert = (\n  CVEs,\n  deviceData,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    deviceData?.UpdateTransactions[0]?.Status === 'BUILDING' ||\n    deviceData?.UpdateTransactions[0]?.Status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (deviceData?.Device?.UpdateAvailable) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  deviceData,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { params } = useRouteMatch('/inventory/:deviceId');\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!deviceData) {\n        return;\n      }\n      const id = {\n        id: deviceData?.ImageInfo?.Image?.ImageSetID,\n      };\n      const newImageData = await getImageSet(id);\n      setNewImageStatus(newImageData?.Data?.images?.[0]?.image?.Status);\n    })();\n  }, [deviceData]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, deviceData, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your system.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update system to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update system\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"System updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <Main className=\"add-100vh\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: params.deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </Main>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.number,\n  deviceData: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n          <VulnerabilityTab\n            deviceData={systemProfile}\n            setUpdateModal={setUpdateModal}\n            imageId={imageId}\n            setReload={setReload}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.number,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport { getDeviceHasUpdate, getInventory } from '../../api/devices';\nimport Status, { getDeviceStatus } from '../../components/Status';\nimport useApi from '../../hooks/useApi';\nimport RetryUpdatePopover from '../Devices/RetryUpdatePopover';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const { deviceId } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n\n  const [imageData, setImageData] = useState();\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  const [deviceData, fetchDeviceData] = useApi({\n    api: () =>\n      getInventory({\n        query: {\n          uuid: deviceId,\n        },\n      }),\n  });\n\n  const [deviceView] = deviceData.data?.data?.devices || [];\n  const {\n    Status: deviceViewStatus,\n    UpdateAvailable: updateAvailable,\n    DispatcherStatus: updateStatus,\n    LastSeen: lastSeen,\n  } = deviceView || {};\n\n  const deviceStatus = getDeviceStatus(\n    deviceViewStatus,\n    updateAvailable,\n    updateStatus\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setImageData(image_data);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n            deviceStatus: deviceStatus,\n          },\n        ],\n        imageSetId: image_data?.ImageInfo?.Image?.ImageSetID,\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to=\"/inventory\">Systems</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  imageData?.UpdateTransactions?.[0]?.Status === 'BUILDING' ||\n                  imageData?.UpdateTransactions?.[0]?.Status === 'CREATED' ||\n                  !imageData?.ImageInfo?.UpdatesAvailable?.length > 0 ||\n                  !updateModal.imageSetId,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n            inventoryId={deviceId}\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n            <RetryUpdatePopover\n              lastSeen={lastSeen}\n              device={deviceView}\n              position={'right'}\n              fetchDevices={fetchDeviceData}\n            >\n              <Status\n                type={\n                  deviceStatus === 'error'\n                    ? 'errorWithExclamationCircle'\n                    : deviceStatus\n                }\n                isLink={true}\n                isLabel={true}\n                className=\"pf-u-mt-sm cursor-pointer\"\n              />\n            </RetryUpdatePopover>\n          ) : (\n            <Status type={deviceStatus} isLabel={true} className=\"pf-u-mt-sm\" />\n          )}\n        </PageHeader>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <DeviceDetailTabs\n              systemProfile={imageData}\n              imageId={imageId}\n              setUpdateModal={setUpdateModal}\n              setReload={setReload}\n            />\n          </GridItem>\n        </Grid>\n        {updateModal.isOpen && (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <UpdateDeviceModal\n              navigateBack={() => {\n                history.push({ pathname: history.location.pathname });\n                setUpdateModal((prevState) => {\n                  return {\n                    ...prevState,\n                    isOpen: false,\n                  };\n                });\n              }}\n              setUpdateModal={setUpdateModal}\n              updateModal={updateModal}\n              refreshTable={() => setReload(true)}\n            />\n          </Suspense>\n        )}\n      </DetailWrapper>\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\nimport DeviceStatus, { getDeviceStatus } from '../../components/Status';\nimport RetryUpdatePopover from './RetryUpdatePopover';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      // { option: 'Booting', value: 'booting' },\n      // { option: 'Running', value: 'running' },\n      { option: 'Update available', value: 'updateAvailable' },\n      // { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(30)],\n  },\n  {\n    title: 'Image',\n    type: 'image',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Groups',\n    type: 'groups',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last seen',\n    type: 'last_seen',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n];\n\nconst createRows = (devices, hasLinks, fetchDevices) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n      DispatcherStatus,\n    } = device;\n    const deviceStatus = getDeviceStatus(\n      Status,\n      UpdateAvailable,\n      DispatcherStatus\n    );\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(\n          Status,\n          UpdateAvailable,\n          DispatcherStatus\n        ),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: hasLinks ? (\n            <Link to={`${paths['inventory']}/${DeviceUUID}`}>{DeviceName}</Link>\n          ) : (\n            DeviceName\n          ),\n        },\n        {\n          title: ImageName ? (\n            hasLinks ? (\n              <Link to={`${paths['manage-images']}/${ImageSetID}/`}>\n                {ImageName}\n              </Link>\n            ) : (\n              ImageName\n            )\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title:\n            DeviceGroups.length === 0\n              ? '-'\n              : DeviceGroups.length === 1\n              ? DeviceGroups[0].Name\n              : deviceGroupTooltip,\n        },\n        {\n          title: LastSeen ? <DateFormat date={LastSeen} /> : 'Unknown',\n        },\n        {\n          title:\n            deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n              <RetryUpdatePopover\n                lastSeen={LastSeen}\n                fetchDevices={fetchDevices}\n                device={device}\n              >\n                <DeviceStatus\n                  type={\n                    deviceStatus === 'error'\n                      ? 'errorWithExclamationCircle'\n                      : deviceStatus\n                  }\n                  isLink={true}\n                />\n              </RetryUpdatePopover>\n            ) : (\n              <DeviceStatus\n                type={\n                  deviceStatus === 'error'\n                    ? 'errorWithExclamationCircle'\n                    : deviceStatus\n                }\n              />\n            ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  hasCheckbox = false,\n  selectedItems,\n  selectedItemsUpdateable,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  setUpdateModal,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  handleUpdateSelected,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n  isSystemsView = false,\n  isAddSystemsView = false,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const canBeUpdated = isSystemsView;\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup) {\n      actions.push({\n        title: 'Add to group',\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup) {\n      actions.push({\n        title: 'Remove from group',\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData)) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          setUpdateModal((prevState) => {\n            return {\n              ...prevState,\n              isOpen: true,\n              deviceData: [\n                {\n                  id: rowData.rowInfo.id,\n                  display_name: rowData.rowInfo.display_name,\n                  deviceStatus: rowData.rowInfo.deviceStatus,\n                },\n              ],\n              imageSetId: rowData.rowInfo.imageSetId,\n            };\n          });\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: 'Remove from group',\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    !rowData.rowInfo?.UpdateAvailable &&\n    (rowData.rowInfo?.deviceStatus === 'updating' ||\n      rowData.rowInfo?.deviceStatus === 'upToDate');\n\n  return (\n    <>\n      {isSystemsView && emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Connect edge systems'}\n          body={\n            'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n          }\n          secondaryActions={[\n            {\n              title:\n                'Create RHEL for Edge images and configure automated management',\n              link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n              type: 'link',\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchDevices}\n          tableData={{\n            count: count,\n            isLoading: isLoading,\n            hasError: hasError,\n          }}\n          columnNames={columnNames}\n          rows={createRows(\n            data || [],\n            isAddSystemsView || isSystemsView,\n            fetchDevices\n          )}\n          actionResolver={actionResolver}\n          defaultSort={{ index: 3, direction: 'desc' }}\n          toolbarButtons={\n            (canBeAdded\n              ? [\n                  {\n                    title: 'Add systems',\n                    click: () => setIsAddModalOpen(true),\n                  },\n                ]\n              : [],\n            canBeUpdated\n              ? [\n                  {\n                    isDisabled: !selectedItemsUpdateable,\n                    title: 'Update',\n                    id: 'toolbar-update-button',\n                    click: () => handleUpdateSelected(),\n                  },\n                ]\n              : [])\n          }\n          hasCheckbox={hasCheckbox}\n          selectedItems={selectedItems}\n          skeletonRowQuantity={skeletonRowQuantity}\n          kebabItems={kebabItems}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\n\nDeviceTable.propTypes = {\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.func,\n  selectedItemsUpdateable: PropTypes.bool,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  setUpdateModal: PropTypes.func,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  handleUpdateSelected: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isSystemsView: PropTypes.bool,\n  isAddSystemsView: PropTypes.bool,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport {\n  HelperText,\n  HelperTextItem,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useApi from '../hooks/useApi';\nimport { getGroups } from '../api/groups';\nimport { debounce } from 'lodash';\n\nconst SelectInput = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [{ data, isLoading }, fetchGroups] = useApi({ api: getGroups });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  const updateSelection = (value) => {\n    // Update state when an option has been selected.\n    setSelected(value);\n    setIsOpen(false);\n    change('group', value);\n  };\n\n  const onSelect = (_event, selection) => {\n    if (_event) updateSelection(selection);\n  };\n\n  const clearSelection = () => {\n    setSearchTerm('');\n    fetchGroups();\n    updateSelection(null);\n  };\n\n  const onFilter = (_event, value) => {\n    /* This handler is called on input changes as well as when children change.\n       _event is null when the children change. Only update searchTerm state\n       and fetch results from the API only if there was an actual input change.\n    */\n    if (_event && value != searchTerm) {\n      setSearchTerm(value);\n      fetchGroups({ name: encodeURIComponent(value) });\n    }\n  };\n\n  const options = data?.data || [];\n  const totalCount = data?.count || 0;\n\n  return (\n    <>\n      <HelperText>\n        {!isLoading && !selected && isOpen && totalCount > options.length ? (\n          <HelperTextItem variant=\"warning\" className=\"pf-u-font-weight-bold\">\n            Over {options.length} results found. Refine your search.\n          </HelperTextItem>\n        ) : (\n          <HelperTextItem className=\"pf-u-font-weight-bold\">\n            Select a group\n          </HelperTextItem>\n        )}\n      </HelperText>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a group\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected ? selected : searchTerm}\n        isOpen={isOpen}\n        onFilter={debounce(onFilter, 300)}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click to select a group\"\n        noResultsFoundText={isLoading ? 'Loading...' : 'No results found'}\n        isInputValuePersisted={true}\n        maxHeight={'180px'}\n      >\n        {isLoading\n          ? []\n          : options?.map(({ DeviceGroup }) => (\n              <SelectOption\n                key={DeviceGroup.ID}\n                value={{\n                  toString: () => DeviceGroup.Name,\n                  groupId: DeviceGroup.ID,\n                }}\n                {...(DeviceGroup.description && {\n                  description: DeviceGroup.description,\n                })}\n              />\n            ))}\n      </Select>\n    </>\n  );\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInputApi from '../../components/SearchInputApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Button, Text } from '@patternfly/react-core';\n\nconst CreateGroupButton = ({ closeModal }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={closeModal}>\n      Create Group\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  closeModal: PropTypes.func,\n};\n\nconst createDescription = (deviceIds) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a group to add <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds),\n    },\n    {\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(group.groupId), deviceIds),\n      statusMessages\n    );\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Add to group\"\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInputApi,\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          closeModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n        },\n      }}\n      schema={createSchema(deviceIds)}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInputApi = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    change('group', null);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {props.defaultOptions.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </>\n  );\n};\n\nSelectInputApi.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInputApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { removeDeviceFromGroupById } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceInfo[0].name} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to remove system from group',\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, deviceInfo[0].ID),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useHistory } from 'react-router-dom';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api/devices';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst Inventory = () => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const history = useHistory();\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const canBeUpdated = () => {\n    let canBeUpdated = false;\n    if (checkedDeviceIds.length > 0) {\n      let initialImage = checkedDeviceIds[0].imageSetId;\n      for (let device of checkedDeviceIds) {\n        if (device.imageSetId !== initialImage) {\n          canBeUpdated = false;\n          break;\n        }\n        if (\n          (!canBeUpdated &&\n            device.updateImageData &&\n            device.deviceStatus === 'updateAvailable') ||\n          device.deviceStatus === 'unresponsive' ||\n          device.deviceStatus === 'error'\n        ) {\n          canBeUpdated = true;\n        }\n      }\n    }\n    return canBeUpdated;\n  };\n\n  const handleUpdateSelected = () => {\n    setUpdateModal((prevState) => ({\n      ...prevState,\n      deviceData: checkedDeviceIds.map((device) => ({\n        id: device.id,\n        display_name: device.display_name,\n        deviceStatus: device.deviceStatus,\n      })),\n      imageSetId: checkedDeviceIds[0].imageSetId,\n      isOpen: true,\n    }));\n  };\n\n  const reloadData = async () => {\n    await fetchDevices();\n    setHasModalSubmitted(true);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <DeviceTable\n          isSystemsView={true}\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          handleUpdateSelected={handleUpdateSelected}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          selectedItemsUpdateable={canBeUpdated()}\n          kebabItems={[\n            {\n              isDisabled: !(checkedDeviceIds.length > 0),\n              title: 'Add to group',\n              onClick: () =>\n                handleAddDevicesToGroup(\n                  checkedDeviceIds.map((device) => ({\n                    ID: device.deviceID,\n                    name: device.display_name,\n                  })),\n                  false\n                ),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={reloadData}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={reloadData}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Inventory;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateDeviceLatestImage } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateDeviceLatestImage({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n};\n\nexport default RetryUpdatePopover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  addDevicesToGroup,\n  validateGroupName,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={validatorMapper}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchGroups,\n}) => {\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData.rowInfo;\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled:\n            devices.length > 0\n              ? !(rowData?.rowInfo?.hasValidUpdate && hasUpdate)\n              : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n        hasValidUpdate: rowData?.DeviceGroup?.ValidUpdate,\n      },\n      cells: [\n        {\n          title: <Link to={`${paths['fleet-management']}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={[\n          {\n            title: 'Create group',\n            click: handleCreateModal,\n          },\n        ]}\n        hasModalSubmitted={hasModalSubmitted}\n        setHasModalSubmitted={setHasModalSubmitted}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={async () => {\n              await fetchGroups();\n              setHasModalSubmitted(true);\n            }}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  closeModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React, { useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/groups';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\n\nconst Groups = () => {\n  const history = useHistory();\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const reloadData = async () => {\n    await fetchGroups();\n    setHasModalSubmitted(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(isLoading, data?.count, history) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={reloadData}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Button, Modal } from '@patternfly/react-core';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { getInventory } from '../../api/devices';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst AddSystemsToGroupModal = ({\n  groupId,\n  closeModal,\n  isOpen,\n  reloadData,\n  groupName,\n}) => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [deviceIds, setDeviceIds] = useState([]);\n  const dispatch = useDispatch();\n\n  const handleAddDevicesToGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `An error occurred making the request`,\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () =>\n        addDevicesToGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(async () => await reloadData(), 500);\n    closeModal();\n  };\n\n  return (\n    <Modal\n      id=\"add-systems-modal\"\n      title=\"Add systems\"\n      position=\"top\"\n      isOpen={isOpen}\n      onClose={closeModal}\n      variant=\"large\"\n      actions={[\n        <Button\n          isDisabled={deviceIds.length === 0}\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={handleAddDevicesToGroup}\n        >\n          Add systems\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <DeviceTable\n        selectedItems={setDeviceIds}\n        skeletonRowQuantity={15}\n        hasCheckbox={true}\n        isLoading={isLoading}\n        hasError={hasError}\n        count={data?.count}\n        data={data?.data?.devices || []}\n        fetchDevices={fetchDevices}\n      />\n    </Modal>\n  );\n};\nAddSystemsToGroupModal.propTypes = {\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n  groupName: PropTypes.string,\n};\n\nexport default AddSystemsToGroupModal;\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Flex,\n  FlexItem,\n  Skeleton,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Empty from '../../components/Empty';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/groups';\nimport AddSystemsToGroupModal from '../Devices/AddSystemsToGroupModal';\nimport {\n  canUpdateSelectedDevices,\n  emptyStateNoFliters,\n  stateToUrlSearch,\n} from '../../utils';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\nimport RenameGroupModal from '../Groups/RenameGroupModal';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst GroupsDetail = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const history = useHistory();\n  const { groupId } = params;\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchDevices] = useApi({\n    api: getGroupById,\n    id: groupId,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  useEffect(() => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('add_system_modal=true', isAddModalOpen),\n    });\n  }, [isAddModalOpen]);\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove system' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} systems have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove systems' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const actionsLabel = 'Actions for group details view';\n  const dropdownId = 'group-details-dropdown';\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={`${paths['fleet-management']}`}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb>\n            <BreadcrumbItem isActive>\n              <Skeleton width=\"100px\" />\n            </BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id={dropdownId}\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                  aria-label={actionsLabel}\n                >\n                  <Tooltip\n                    content={actionsLabel}\n                    reference={() => document.getElementById(dropdownId)}\n                  />\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"rename-device-group\"\n                  onClick={() => handleRenameModal(groupId, groupName)}\n                >\n                  Rename group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.DevicesView?.devices?.map((device) => ({\n                      imageSetId: device?.ImageSetID,\n                    })),\n                    imageData: data?.DevicesView?.devices?.some(\n                      (device) => device.ImageID\n                    ),\n                  })}\n                  onClick={() => {\n                    setIsDropdownOpen(false);\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.DevicesView?.devices?.map((device) => ({\n                        id: device?.DeviceUUID,\n                        display_name:\n                          device?.DeviceName === ''\n                            ? 'localhost'\n                            : device?.DeviceName,\n                      })),\n                      imageSetId: data?.DevicesView?.devices.find(\n                        (device) => device.ImageSetID\n                      )?.ImageSetID,\n                    }));\n                  }}\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(\n          isLoading,\n          data?.DeviceGroup?.Devices.length,\n          history\n        ) ? (\n          <DeviceTable\n            data={data?.DevicesView?.devices || []}\n            count={data?.DevicesView?.total}\n            isLoading={isLoading}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: 'Remove from group',\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageSetId: deviceIds.find((device) => device?.imageSetId)\n                      .imageSetId,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            setUpdateModal={setUpdateModal}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchDevices={fetchDevices}\n            isAddSystemsView={true}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Add systems to the group\"\n              body=\"Create groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n      {isAddModalOpen && (\n        <AddSystemsToGroupModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchDevices}\n          groupName={data?.DeviceGroup?.Name}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          closeModal={() => setRemoveModal(false)}\n          title={'Remove from group'}\n          submitLabel={'Remove'}\n          variant=\"danger\"\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchDevices}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths['fleet-management'])}\n          modalState={modalState}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={() => fetchDevices()}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GroupsDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\nimport Status from '../../components/Status';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Current version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(30)],\n  },\n];\n\nconst createRows = (data) => {\n  return data.map((image_set, index) => ({\n    rowInfo: {\n      id: image_set?.ID,\n      imageStatus: image_set?.Status,\n      isoURL: image_set?.ImageBuildIsoURL || null,\n      latestImageID: image_set?.ImageID,\n    },\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Version,\n      {\n        title: image_set?.UpdatedAt ? (\n          <DateFormat date={image_set?.UpdatedAt} />\n        ) : (\n          'Unknown'\n        ),\n      },\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <Status type={image_set?.Status.toLowerCase()} />\n          </>\n        ),\n      },\n    ],\n  }));\n};\n\nconst ImageTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  fetchImageSets,\n  openCreateWizard,\n  openUpdateWizard,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n}) => {\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.rowInfo?.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo?.latestImageID);\n        },\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'No images found'}\n          body={''}\n          primaryAction={{\n            click: openCreateWizard,\n            text: 'Create new image',\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchImageSets}\n          tableData={{ count, data, isLoading, hasError }}\n          columnNames={columnNames}\n          rows={data ? createRows(data) : []}\n          actionResolver={actionResolver}\n          areActionsDisabled={areActionsDisabled}\n          defaultSort={{ index: 2, direction: 'desc' }}\n          toolbarButtons={[\n            {\n              title: 'Create new image',\n              click: () => openCreateWizard(),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\n\nImageTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  fetchImageSets: PropTypes.func,\n  clearFilters: PropTypes.func,\n  openCreateWizard: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n  filters: PropTypes.array,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }),\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n};\n\nexport default ImageTable;\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport ImageSetsTable from './ImageSetsTable';\nimport { stateToUrlSearch } from '../../utils';\nimport { getImageSets } from '../../api/images';\nimport useApi from '../../hooks/useApi';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const history = useHistory();\n\n  const [response, fetchImageSets] = useApi({\n    api: getImageSets,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('create_image=true', true),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('update_image=true', true),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  const reload = async () => {\n    await fetchImageSets();\n    setHasModalSubmitted(true);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          data={data?.data || []}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          fetchImageSets={fetchImageSets}\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('create_image=true', false),\n              });\n              setIsCreateWizardOpen(false);\n            }}\n            reload={reload}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('update_image=true', false),\n              });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            reload={reload}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n  const hasSuccess = statusMessages?.onSuccess;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n      return response;\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n          // Add error message from API, if present\n          description: err?.Title\n            ? `${statusMessages.onError.description}: ${err.Title}`\n            : statusMessages.onError.description,\n        }),\n      });\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","CmpLoader","numberOfRows","CmpRows","i","push","key","GeneralInformation","props","AsyncComponent","appName","module","fallback","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","lazy","useLoadModule","scope","statusHelper","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","store","useStore","Suspense","SystemCardWrapper","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","data","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","onClick","payload","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","addNotification","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","deviceData","setUpdateModal","params","useRouteMatch","useState","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","ImageInfo","Image","ImageSetID","getImageSet","newImageData","Data","images","isLoading","filter","length","UpdateTransactions","Device","UpdateAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","Main","customIntlProvider","entity","deviceId","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","AppInfo","showTags","Vulnerability","UpdateDeviceModal","React","setImageId","useParams","entityDetails","imageData","setImageData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","insights","chrome","registerModule","hideGlobalFilter","appAction","useApi","api","getInventory","query","uuid","fetchDeviceData","devices","deviceView","deviceViewStatus","updateAvailable","updateStatus","DispatcherStatus","lastSeen","LastSeen","deviceStatus","getDeviceStatus","display_name","getDeviceHasUpdate","image_data","imageSetId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","isActive","Skeleton","size","SkeletonSize","InventoryDetailHead","isDisabled","UpdatesAvailable","hideBack","hideInvDrawer","inventoryId","RetryUpdatePopover","device","position","fetchDevices","type","isLink","isLabel","Grid","gutter","GridItem","span","navigateBack","history","pathname","location","refreshTable","defaultFilters","label","options","option","columnNames","sort","columnTransforms","cellWidth","createRows","hasLinks","DeviceName","DeviceGroups","DeviceID","DeviceUUID","ImageName","deviceGroupTooltip","group","index","rowInfo","deviceID","updateImageData","imageName","deviceGroups","noApiSortFilter","cells","paths","date","DeviceTable","hasCheckbox","selectedItems","selectedItemsUpdateable","skeletonRowQuantity","count","hasError","kebabItems","setRemoveModal","handleAddDevicesToGroup","setIsAddModalOpen","handleRemoveDevicesFromGroup","handleUpdateSelected","hasModalSubmitted","setHasModalSubmitted","isSystemsView","isAddSystemsView","canBeRemoved","canBeUpdated","useHistory","emptyStateNoFliters","icon","body","secondaryActions","link","apiFilterSort","isUseApi","loadTableData","tableData","rows","actionResolver","rowData","areActionsDisabled","_rowId","defaultSort","direction","toolbarButtons","click","urlParam","openUpdateWizard","temp","setIsModalOpen","handleSingleDeviceRemoval","useFieldApi","change","useFormApi","setIsOpen","selected","setSelected","getGroups","fetchGroups","searchTerm","setSearchTerm","updateSelection","totalCount","HelperText","HelperTextItem","Select","typeAheadAriaLabel","onToggle","selection","onClear","selections","onFilter","encodeURIComponent","placeholderText","noResultsFoundText","isInputValuePersisted","maxHeight","DeviceGroup","SelectOption","toString","groupId","CreateGroupButton","closeModal","createDescription","deviceIds","systemText","createSchema","fields","componentTypes","validate","validatorTypes","AddDeviceModal","isModalOpen","setIsCreateGroupModalOpen","reloadData","submitLabel","additionalMappers","SearchInputApi","schema","onSubmit","values","statusMessages","onSuccess","onError","apiWithToast","addDevicesToGroup","parseInt","SelectInputApi","clearSelection","isPlaceholder","defaultOptions","removeDescription","deviceInfo","groupText","WarningIcon","warningColor","RemoveDeviceModal","titleIconVariant","SearchInput","hasManyGroups","groupName","removeDeviceFromGroupById","tableReload","response","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","setDeviceId","checkedDeviceIds","setCheckedDeviceIds","isRowSelected","setIsRowSelected","isCreateGroupModalOpen","ids","isRow","Fragment","PageHeaderTitle","initialImage","CreateGroupModal","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","children","isVisible","setIsVisible","shouldOpen","shouldClose","alertseverityvariant","style","DispatcherReason","headerComponent","footerContent","updateDeviceLatestImage","DevicesUUID","defaultProps","asyncGroupNameValidation","undefined","validateGroupName","isValid","validatorMapper","createGroupSchema","helperText","autoFocus","threshold","nameValidator","handleCreateGroup","createGroup","handleAddDevicesToNewGroup","DeleteGroupModal","modalState","deleteGroupById","columns","GroupTable","handleCreateModal","handleRenameModal","handleDeleteModal","buildRows","Devices","DevicesImageInfo","systems","devicesImageInfo","hasValidUpdate","ValidUpdate","GeneralTable","hasUpdate","some","UUID","find","ImageID","emptyFilterState","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","Flex","justifyContent","default","Empty","primaryAction","text","RenameGroupModal","initialValues","updateGroupById","AddSystemsToGroupModal","setDeviceIds","setTimeout","isDropdownOpen","setIsDropdownOpen","isAddModalOpen","removeModal","getGroupById","getDeviceIds","search","stateToUrlSearch","actionsLabel","dropdownId","width","FlexItem","Dropdown","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","newState","reference","document","getElementById","dropdownItems","DropdownItem","canUpdateSelectedDevices","DevicesView","total","removeDevicesFromGroup","TooltipSelectorRef","image_set","imageStatus","isoURL","ImageBuildIsoURL","latestImageID","UpdatedAt","DateFormat","toLowerCase","ImageTable","fetchImageSets","openCreateWizard","actionsArray","href","rel","target","clearFilters","pagination","page","perPage","CreateImageWizard","UpdateImageWizard","getImageSets","isCreateWizardOpen","setIsCreateWizardOpen","UpdateWizard","setUpdateWizard","ImageSetsTable","updateImageID","instance","EDGE_API","Type","q","getTableParams","RepoModal","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","onCancel","hasSuccess","fetchData","Title"],"sourceRoot":""}