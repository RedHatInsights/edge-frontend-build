{"version":3,"file":"js/364.6d7ece2d12b00fc86a70.js","mappings":"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","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/store/polling.js","webpack:///./src/store/index.js"],"sourcesContent":["import { Redirect, Route, Switch } from 'react-router-dom';\n\nimport React, { Suspense } from 'react';\nimport { routes as paths } from '../package.json';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n// const Groups = React.lazy(() =>\n//   import(/* webpackChunkName: \"GroupsPage\" */ './Routes/Groups/Groups')\n// );\n// const GroupsDetail = React.lazy(() =>\n//   import(\n//     /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/GroupsDetail/GroupsDetail'\n//   )\n// );\n\nconst DeviceDetail = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/DeviceDetail/DeviceDetail'\n  )\n);\n\n// const Canaries = React.lazy(() =>\n//   import(\n//     /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/Canaries/Canaries'\n//   )\n// );\n\nconst Devices = React.lazy(() =>\n  import(/* webpackChunkName: \"GroupsDetailPage\" */ './Routes/Devices/Devices')\n);\n\nconst Images = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/ImageManager/Images'\n  )\n);\n\nconst ImageDetail = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/ImageManagerDetail/ImageDetail'\n  )\n);\n\nconst Repositories = React.lazy(() =>\n  import('./Routes/Repositories/Repositories')\n);\n\nexport const Routes = () => {\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner size=\"xl\" />\n        </Bullseye>\n      }\n    >\n      <Switch>\n        {/* <Route exact path={paths.groups} component={Groups} /> */}\n        {/* <Route exact path={paths['groups-detail']} component={GroupsDetail} /> */}\n        {/* <Route path={paths['device-detail']} component={DeviceDetail} /> */}\n        {/* <Route path={paths.canaries} component={Canaries} /> */}\n        <Route exact path={paths['fleet-management']} component={Devices} />\n        <Route path={paths['manage-images-detail']} component={ImageDetail} />\n        <Route path={paths['manage-images']} component={Images} />\n        <Route\n          path={paths['fleet-management-detail']}\n          component={DeviceDetail}\n        />\n        <Route exact path={paths['repositories']} component={Repositories} />\n        <Route>\n          <Redirect to={paths['fleet-management']} />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n};\n","import React, { useEffect, Fragment, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from './store';\nimport { Routes } from './Routes';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotificationPortal } from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport './App.scss';\n\nconst App = (props) => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isLogged, setIsLogged] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    insights.chrome.init();\n    // TODO change this to your appname\n    insights.chrome.identifyApp('fleet-management');\n\n    insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n\n    const registered = getRegistry().register({\n      notifications: notificationsReducer,\n    });\n    (async () => {\n      await insights.chrome.auth.getUser();\n      setIsLogged(true);\n    })();\n\n    return () => {\n      registered();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationPortal />\n      {isLogged ? (\n        <Routes childProps={props} />\n      ) : (\n        <Bullseye>\n          <Spinner size=\"xl\" />\n        </Bullseye>\n      )}\n    </Fragment>\n  );\n};\n\nexport default App;\n","const POLLING_SUFFIX = 'POLLING';\n\nconst hasPollingData = (polling = {}) => {\n  return polling?.id && polling?.fetcher && polling?.condition;\n};\n\nconst ofPollingType = (type) => type.endsWith(`_${POLLING_SUFFIX}`);\n\nexport const polling =\n  (pollHash = {}) =>\n  ({ dispatch }) =>\n  (next) =>\n  (action) => {\n    const { type, payload, meta } = action;\n    if (ofPollingType(type) && hasPollingData(payload)) {\n      const { id, fetcher, condition, onEvent } = payload;\n      if (pollHash[id]) {\n        return;\n      }\n      pollHash[id] = true;\n      setTimeout(() => {\n        dispatch({\n          type: id,\n          payload: fetcher().then((resp) => {\n            pollHash[id] = false;\n            const [toContinue, stateName] = condition(resp);\n            const nextActions = onEvent?.[stateName] || [];\n            nextActions.forEach((action) => action(dispatch));\n            if (toContinue) {\n              dispatch(action);\n            }\n          }),\n        }).catch(() => null);\n      }, 15 * 1000);\n      return;\n    }\n\n    if (hasPollingData(meta?.polling)) {\n      const { id, fetcher, condition, onEvent } = meta.polling;\n      dispatch({\n        type: `${id}_POLLING`,\n        payload: {\n          id,\n          fetcher,\n          condition,\n          onEvent,\n        },\n      });\n    }\n\n    next(action);\n  };\n","import { createContext } from 'react';\nimport { ReducerRegistry } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { polling } from './polling';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  return new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorDescriptionKey: ['detail', 'stack'],\n    }),\n    polling(),\n    ...middleware,\n  ]);\n}\n"],"names":["DeviceDetail","React","Devices","Images","ImageDetail","Repositories","Routes","Suspense","fallback","Bullseye","Spinner","size","Switch","Route","exact","path","paths","component","Redirect","to","props","getRegistry","useContext","RegistryContext","useState","isLogged","setIsLogged","history","useHistory","useEffect","insights","chrome","init","identifyApp","on","event","push","navId","registered","register","notifications","notificationsReducer","auth","getUser","Fragment","NotificationPortal","childProps","hasPollingData","polling","id","fetcher","condition","ofPollingType","type","endsWith","pollHash","dispatch","next","action","payload","meta","onEvent","setTimeout","then","resp","toContinue","stateName","forEach","createContext","middleware","ReducerRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}