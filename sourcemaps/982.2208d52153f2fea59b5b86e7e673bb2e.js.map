{"version":3,"file":"js/982.1667577792285.d384bc71f486cf44168c.js","mappings":"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","sources":["webpack:///./src/api/devices/index.js","webpack:///./src/api/images/index.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/edgeImageSets.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/imageSetDetail.js","webpack:///./src/store/edgeImagePackages.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/deviceTable.js"],"sourcesContent":["import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/devices/${id}`);\n  } catch (err) {\n    // temp error solution\n    console.log('');\n  }\n};\n\nexport const updateDeviceLatestImage = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","import { EDGE_API, IMAGE_BUILDER_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({\n  id,\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/view/${id}?${query}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show system summary data',\n          description: 'Failed receiving system summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No system summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_SETS } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImageSetsPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImageSetsFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImageSetsRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_SETS}_PENDING`]: loadEdgeImageSetsPending,\n    [`${LOAD_EDGE_IMAGE_SETS}_FULFILLED`]: loadEdgeImageSetsFulfilled,\n    [`${LOAD_EDGE_IMAGE_SETS}_REJECTED`]: loadEdgeImageSetsRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_SET_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageSetDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageSetDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageSetDetailRejected = (state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_SET_DETAIL}_PENDING`]: loadImageSetDetailPending,\n    [`${LOAD_IMAGE_SET_DETAIL}_FULFILLED`]: loadImageSetDetailFulfilled,\n    [`${LOAD_IMAGE_SET_DETAIL}_REJECTED`]: loadImageSetDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_PACKAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagePackagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagePackagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagePackagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_PENDING`]: loadEdgeImagePackagesPending,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_FULFILLED`]: loadEdgeImagePackagesFulfilled,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_REJECTED`]: loadEdgeImagePackagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_TABLE } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceTablePending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceTableFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceTableRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_TABLE}_PENDING`]: loadDeviceTablePending,\n    [`${LOAD_DEVICE_TABLE}_FULFILLED`]: loadDeviceTableFulfilled,\n    [`${LOAD_DEVICE_TABLE}_REJECTED`]: loadDeviceTableRejected,\n  },\n  initialState\n);\n"],"names":["getInventory","query","q","getTableParams","instance","EDGE_API","getDeviceHasUpdate","id","console","log","updateDeviceLatestImage","payload","checkImageName","name","createImage","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","length","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","Name","URL","endpoint","getImageSet","limit","offset","sort_by","getImageSetViewVersions","imageSetID","getImageSetView","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","search","params","URLSearchParams","IMAGE_BUILDER_API","toString","getImageById","getImageSets","statusMapper","booting","text","Icon","iconMapper","color","colorMapper","labelColor","building","created","upToDate","success","passed","updateAvailable","updating","error","default","interrupted","unresponsive","errorWithExclamationCircle","getDeviceStatus","deviceStatus","isUpdateAvailable","dispatcherStatus","Status","type","isLabel","toolTipContent","className","isLink","Object","prototype","hasOwnProperty","call","Label","icon","Split","style","SplitItem","Tooltip","content","textDecoration","cursor","propTypes","PropTypes","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","POLLING_IMAGES","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","keyBy","k","loadImageDetail","dispatch","imageId","createNewImage","callback","then","loadEdgeImageSets","addImageToPoll","applyReducerHash","isLoading","hasError","data","state","groups","results","meta","threshold","devicesInfo","canariesInfo","SecureIcon","isSecure","props","LockIcon","LockOpenIcon","defaultProps","uuid","devices","_state"],"sourceRoot":""}