{"version":3,"file":"js/UpdateImageWizard.1667500780588.6a2e6a43ea44f407c945.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManager/UpdateImageWizard.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  review,\n  packages,\n  updateDetails,\n  registration,\n  repositories,\n  imageOutput,\n  customPackages,\n} from './steps';\nimport { Bullseye, Backdrop, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useFeatureFlags, getReleases } from '../../utils';\nimport { temporaryReleases, supportedReleases } from '../../constants';\n\nconst UpdateImage = ({ navigateBack, updateImageID, reload }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateImageID && loadImageDetail(dispatch, updateImageID);\n    return () => registered();\n  }, [dispatch]);\n\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  return user && data ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          Id: data?.image?.ID,\n          name: data?.image?.Name,\n          version: data?.image?.Version + 1,\n          architecture: 'x86_64',\n          credentials: values.credentials\n            ? values.credentials\n            : data?.image?.Installer.SshKey,\n          username: values.username\n            ? values.username\n            : data?.image?.Installer.Username,\n        };\n\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Update image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n          dispatch(\n            addImageToPoll({ name: data.value.Name, id: data.value.ID })\n          );\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        imageID: data?.image.ID,\n        name: data?.image?.Name,\n        isUpdate: true,\n        description: data?.image?.Description,\n        credentials: data?.image?.Installer.SshKey,\n        username: data?.image?.Installer.Username,\n        version: data?.image?.Version,\n        release: data?.image?.Distribution,\n        release_options: temporaryReleasesFlag\n          ? getReleases(data?.image?.Distribution, [\n              ...supportedReleases,\n              ...temporaryReleases,\n            ])\n          : getReleases(data?.image?.Distribution),\n        imageType: ['rhel-edge-commit'],\n        'selected-packages': data?.image?.Packages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n        'third-party-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'initial-custom-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'custom-packages': data?.image?.CustomPackages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n      }}\n      test=\"\"\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Update image',\n            },\n            showTitles: true,\n            title: `Update image: ${data?.image?.Name}`,\n            crossroads: [\n              'target-environment',\n              'release',\n              'imageType',\n              'third-party-repositories',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              updateDetails,\n              imageOutput,\n              registration,\n              repositories,\n              packages,\n              repositories,\n              review,\n              customPackages,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  updateImageID: PropTypes.number,\n  reload: PropTypes.func,\n};\nUpdateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default UpdateImage;\n"],"names":["UpdateImage","navigateBack","updateImageID","reload","useState","user","setUser","dispatch","useDispatch","closeAction","temporaryReleasesFlag","useFeatureFlags","getRegistry","useContext","RegistryContext","data","useSelector","imageDetailReducer","shallowEqual","useEffect","registered","register","loadImageDetail","insights","chrome","auth","getUser","then","result","undefined","onClose","customComponentMapper","review","ReviewStep","onSubmit","values","setIsSaving","payload","Id","image","ID","name","Name","version","Version","architecture","credentials","Installer","SshKey","username","Username","createNewImage","resp","addNotification","variant","title","description","value","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","addImageToPoll","defaultArch","initialValues","imageID","isUpdate","Description","release","Distribution","release_options","getReleases","supportedReleases","temporaryReleases","imageType","Packages","map","pkg","ThirdPartyRepositories","repo","CustomPackages","test","schema","fields","component","componentTypes","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","updateDetails","imageOutput","registration","repositories","packages","customPackages","isSVG","diameter","propTypes","PropTypes","defaultProps"],"sourceRoot":""}