{"version":3,"file":"js/5784.404735340035942ccd45.js","mappings":"mSAkBMA,EAAwB,mCAAG,gGAAiB,GAE3B,KAFiBC,EAAQ,EAAH,6BAAG,IAEpCC,OAAY,8CACbC,GAAS,wBAECC,EAAAA,EAAAA,IAAkBH,GAAM,OAAjC,IAAG,EAAH,KACDI,KAAKC,QAAS,CAAF,oBAEb,4BAA2B,2CAEpC,kBAV6B,mCAYxBC,EAAiC,mCAAG,kGAAiB,GAEpC,KAF0BN,EAAQ,EAAH,6BAAG,IAE7CC,OAAY,8CACbC,GAAS,wBAECK,EAAAA,EAAAA,IAA2BP,GAAM,OAA1C,MAAJQ,EAAO,EAAH,MACDC,QAAQR,OAAS,GAAKO,EAAKC,QAAQ,GAAGC,OAASV,GAAK,qBAErD,4BAA2B,2CAEpC,kBAVsC,mCAYjCW,EAAkB,CACtBC,UAAW,kBAAMb,CAAwB,GAGrCc,EAA2B,CAC/BD,UAAW,kBAAMN,CAAiC,GAG9CQ,EAAoB,CACxBC,OAAQ,CACN,CACEC,UAAWC,EAAAA,EAAAA,WACXP,KAAM,OACNQ,MAAO,aACPC,WACE,kFACFC,YAAY,EACZC,WAAW,EACXC,SAAU,CAER,CAAEC,KAAM,aACR,CAAEA,KAAMC,EAAAA,EAAAA,UACR,CAAED,KAAMC,EAAAA,EAAAA,WAA2BC,UAAW,IAC9CC,EAAAA,OAMFC,EAAmB,SAAH,GAKhB,IAJJC,EAAW,EAAXA,YACAC,EAAc,EAAdA,eACAC,EAAS,EAATA,UACAC,EAAU,EAAVA,WAEMC,GAAWC,EAAAA,EAAAA,eAEXC,GAAyBC,EAAAA,EAAAA,IAAmB,GAE5CC,EAAoB,SAACC,GACzB,IAQIC,EAREC,EAAiB,CACrBC,UAAW,CACTC,MAAO,UACPC,YAAa,GAAF,OAAKL,EAAO3B,KAAI,mCAE7BiC,QAAS,CAAEF,MAAO,QAASC,YAAa,2BAS1C,OAJEJ,EADEJ,EACgB,kBAAMU,EAAAA,EAAAA,IAAqBP,EAAO,EAElC,kBAAMQ,EAAAA,EAAAA,IAAYR,EAAO,GAEtCS,EAAAA,EAAAA,GAAad,EAAUM,EAAiBC,EACjD,EAEMQ,EAA0B,mCAAG,WAAOV,GAAM,iFAO7C,GANKE,EAAiB,CACrBC,UAAW,CACTC,MAAO,UACPC,YAAa,gCAAF,OAAkCL,EAAO3B,KAAI,kBAE1DiC,QAAS,CAAEF,MAAO,QAASC,YAAa,mCAItCR,EAAwB,CAAF,+BACHE,EAAkBC,GAAO,gBAAtCW,EAAE,EAAFA,GACRC,EAAwB,kBAAMC,EAAAA,EAAAA,IAA2BF,EAAIlB,EAAU,EAAC,wCAEnDM,EAAkBC,GAAO,iBAAtCc,EAAE,EAAFA,GACRF,EAAwB,kBAAMG,EAAAA,EAAAA,IAAkBC,SAASF,GAAKrB,EAAU,EAAC,SAE3EgB,EAAAA,EAAAA,GAAad,EAAUiB,EAAuBV,GAAgB,4CAC/D,gBAlB+B,sCAoBhC,OACE,kBAAC,IAAK,CACJe,OAAQ1B,EACR2B,WAAY,kBAAM1B,GAAe,EAAM,EACvCY,MAAM,eACNe,YAAY,SACZC,OAAQ3C,EACR4C,SAAU5B,EAAYiB,EAA6BX,EACnDL,WAAYA,EACZpB,gBACEuB,EAAyBrB,EAA2BF,GAI5D,EAEA,UAEAgB,EAAiBgC,UAAY,CAC3B/B,YAAagC,IAAAA,KACb/B,eAAgB+B,IAAAA,KAChB7B,WAAY6B,IAAAA,KACZ9B,UAAW8B,IAAAA,M,+LCjIPlB,EAAc,SAAChC,GAAI,OACvB,kBAAC,IAAI,KACH,gCAASA,EAAK,KAAU,2HAEnB,EAGH+C,EAAS,SAAC/C,GAAI,MAAM,CACxBK,OAAQ,CACN,CACEC,UAAWC,EAAAA,EAAAA,WACXP,KAAM,kBACNQ,MAAOwB,EAAYhC,IAErB,CACEM,UAAWC,EAAAA,EAAAA,SACXP,KAAM,eACNQ,MAAO,kDACPI,SAAU,CAAC,CAAEC,KAAMC,EAAAA,EAAAA,aAGxB,EAEKqC,EAAc,WAAH,OACf,kBAAC,KAAuB,CAACC,MAAOC,EAAAA,EAAAA,OAAsB,EAGlDC,EAAmB,SAAH,GAKhB,IAJJpC,EAAW,EAAXA,YACAC,EAAc,EAAdA,eACAE,EAAU,EAAVA,WACAkC,EAAU,EAAVA,WAEQjB,EAAaiB,EAAbjB,GAAItC,EAASuD,EAATvD,KACNsB,GAAWC,EAAAA,EAAAA,eAajB,OACE,kBAAC,IAAK,CACJqB,OAAQ1B,EACR2B,WAAY,kBAAM1B,GAAe,EAAM,EACvCY,MAAM,eACNyB,iBAAkBL,EAClBM,QAAQ,SACRX,YAAY,SACZC,OAAQA,EAAO/C,GACfgD,SApBsB,WACxB,IAAMnB,EAAiB,CACrBC,UAAW,CACTC,MAAO,UACPC,YAAa,GAAF,OAAKhC,EAAI,mCAEtBiC,QAAS,CAAEF,MAAO,QAASC,YAAa,4BAE1CI,EAAAA,EAAAA,GAAad,GAAU,kBAAMoC,EAAAA,EAAAA,IAAgBpB,EAAG,GAAET,EACpD,EAYIR,WAAYA,GAGlB,EAEAiC,EAAiBL,UAAY,CAC3BX,GAAIY,IAAAA,OACJlD,KAAMkD,IAAAA,OACNK,WAAYL,IAAAA,OACZhC,YAAagC,IAAAA,KACb/B,eAAgB+B,IAAAA,KAChB7B,WAAY6B,IAAAA,MAEd,S,o2BC1EA,IAAMS,EAAoBC,IAAAA,MAAW,kBACnC,0GAEC,IAGGC,EAAU,CACd,CACErD,MAAO,OACPK,KAAM,SAQJiD,EAAU,CACd,CAAE/B,MAAO,OAAQlB,KAAM,OAAQkD,MAAM,GACrC,CAAEhC,MAAO,UAAWlB,KAAM,OAAQkD,MAAM,GACxC,CAAEhC,MAAO,QAASlB,KAAM,OAAQkD,MAAM,IAGlCC,EAAa,SAAH,GAaV,IAZJtE,EAAI,EAAJA,KACAuE,EAAK,EAALA,MACAC,EAAS,EAATA,UACAC,EAAQ,EAARA,SACAC,EAAiB,EAAjBA,kBACAC,EAAiB,EAAjBA,kBACAC,EAAiB,EAAjBA,kBACAC,EAAiB,EAAjBA,kBACAC,EAAoB,EAApBA,qBACAC,EAAY,EAAZA,aACAC,EAAY,EAAZA,aACAC,EAAW,EAAXA,YAEMC,GAA0BC,EAAAA,EAAAA,IAC9B,qCAGIC,GAAUC,EAAAA,EAAAA,MACRC,GAAaP,EAAeA,KAAiBQ,EAAAA,EAAAA,OAA7CD,SAEFE,EAAWR,EACbA,IACAS,EAAAA,aACAA,EAAAA,EAAAA,eACA,KAEJ,GAAsCC,EAAAA,EAAAA,UAAS,CAC7CxC,QAAQ,EACRyC,WAAY,KACZC,UAAW,OACX,eAJKC,EAAW,KAAEC,EAAc,KA0C5BC,EAAY/F,aAAI,EAAJA,EAAMgG,KAAI,SAACC,GAAY,UACvC,EAA8BA,EAAQC,YAA9BnD,EAAE,EAAFA,GAAIoD,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QACZC,EAAqBJ,EAArBI,iBACDA,IACHA,EAAmB,IAErB,IAAMC,EAAUF,QAAAA,EAAW,GACrBG,EACJ,6BACE,kBAACC,EAAA,EAAO,CACNC,QACE,6BACGJ,EAAiBL,KAAI,SAACU,EAAQC,GAAK,OAClC,uBAAGC,IAAKD,GAAQD,EAAOP,KAAS,MAKtC,8BAAM,qBAKZ,MAAO,CACLU,QAAS,CACPjE,GAAIG,EACJV,MAAO8D,EACPI,MAC8B,IAA5BF,EAAiBxG,OACb,IACAwG,EAAiBxG,OAAS,EAC1B,kBACmB,QADF,EACjBwG,EAAiB,UAAE,aAAnB,EAAqBF,KAC3BW,iBAAkBb,EAAQI,iBAC1BU,QAASX,EACTY,eAAgBf,SAAoB,QAAb,EAAPA,EAASC,mBAAW,WAAb,EAAP,EAAsBe,aAExCC,MAAO,CACL,CACE7E,OAAO8E,EAAAA,EAAAA,IAAW,CAChB7B,SAAU,GAAF,OAAK8B,EAAAA,EAAAA,gBAAqB,YAAIrE,GACtCsE,SAAUlB,KAGd,CACE9D,MAAOiE,EAAQzG,QAEjB,CACEwC,MAC8B,IAA5BgE,EAAiBxG,OACb,IACAwG,EAAiBxG,OAAS,EAC1B0G,EACmB,QADd,EACLF,EAAiB,UAAE,aAAnB,EAAqBF,OAInC,IAEA,OACE,oCACE,kBAACmB,EAAA,EAAY,CACXC,eAAe,EACfC,UAAU,EACVC,cAAexC,EACfd,QAASA,EACTuD,UAAW,CACTnD,MAAAA,EACAvE,KAAAA,EACAwE,UAAAA,EACAC,SAAAA,GAEFkD,YAAavD,EACbwD,KAAM7B,EACN8B,eA9GiB,SAAC5B,GAAY,MAClC,GAAKA,UAAAA,EAASY,QAAS,MAAO,GAC9B,MAAiDZ,EAAQY,QAAjDjE,EAAE,EAAFA,GAAIP,EAAK,EAALA,MAAO0E,EAAO,EAAPA,QAASD,EAAgB,EAAhBA,iBACtBgB,EAAYhB,aAAgB,EAAhBA,EAAkBiB,MAAK,SAACxB,GAAK,OAAKA,EAAMyB,eAAe,IAEzE,OACEpF,GAAM,CACJ,CACEP,MAAO,SACP4F,QAAS,kBAAMtD,EAAkB/B,EAAIP,EAAM,GAE7C,CACEA,MAAO,SACP4F,QAAS,kBAAMrD,EAAkBhC,EAAIP,EAAM,GAE7C,CACEA,MAAO,SACP4F,QAAS,kBACPnC,GAAe,SAACoC,GAAS,cACpBA,GAAS,IACZvC,WAAYoB,EAAQf,KAAI,SAACU,GAAM,MAAM,CACnC9D,GAAI8D,EAAOyB,KACXC,aAAc1B,EAAOP,KACtB,IACDkC,QAAStB,EAAQuB,MAAK,SAAC5B,GAAM,OAAKA,aAAM,EAANA,EAAQ6B,OAAO,IAAEA,QACnDrF,QAAQ,GAAI,GACX,EACLsF,aACEzB,EAAQlH,OAAS,GACXoG,SAAgB,QAAT,EAAPA,EAASY,eAAO,OAAhB,EAAkBG,gBAAkBc,IAKpD,EA6EM/C,aAAcA,EACdC,aAAcA,EACdyD,mBAAoB,kBAAM,CAAK,EAC/BC,YAAa,CAAE/B,MAAO,EAAGgC,UAAW,OACpCC,iBAAkB,CAChBvG,MAAO,2BACPwG,KAAM,wDAERC,eACE5D,EACI,GACA,CACE,CACE7C,MAAO,eACP0G,MAAOrE,IAIjBG,kBAAmBA,EACnBC,qBAAsBA,IAEvBe,EAAY3C,QACX,kBAAC,EAAA8F,SAAQ,CACPC,SACE,kBAACC,EAAA,EAAQ,KACP,kBAACC,EAAA,EAAO,QAIZ,kBAAClF,EAAiB,CAChBmF,aAAc,WACRpE,EACFQ,EAAS,CAAEF,SAAAA,IAEXF,EAAQiE,KAAK,CAAE/D,SAAAA,IAEjBQ,GAAe,SAACoC,GACd,OAAO,EAAP,KACKA,GAAS,IACZhF,QAAQ,GAEZ,GACF,EACA4C,eAAgBA,EAChBD,YAAaA,EACbyD,cAAY,iBAAE,8FACNrE,IAAa,OACnBH,GAAqB,GAAM,8CAOzC,EAEAR,EAAWf,UAAY,CACrBvD,KAAMwD,IAAAA,MACNe,MAAOf,IAAAA,OACPL,WAAYK,IAAAA,KACZgB,UAAWhB,IAAAA,KACXiB,SAAUjB,IAAAA,KACVmB,kBAAmBnB,IAAAA,KACnBoB,kBAAmBpB,IAAAA,KACnBkB,kBAAmBlB,IAAAA,KACnBqB,kBAAmBrB,IAAAA,KACnBsB,qBAAsBtB,IAAAA,KACtBuB,aAAcvB,IAAAA,KACdwB,aAAcxB,IAAAA,KACdyB,YAAazB,IAAAA,MAGf,U,8ECrHA+F,QAAAA,UAAmB,CACjBC,WAAYhG,IAAAA,OACZiG,YAAajG,IAAAA,KACbuB,aAAcvB,IAAAA,KACdwB,aAAcxB,IAAAA,KACdkG,iBAAkBlG,IAAAA,QAGpB,QAtHe,SAAH,GAAuC,IAAjCuB,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aACxBE,GAA0BC,EAAAA,EAAAA,IAC9B,qCAEMwE,GAAW5E,EAAeA,KAAiBQ,EAAAA,EAAAA,OAA3CoE,OAER,GAAgCC,EAAAA,EAAAA,GAAO,CACrCC,IAAKC,EAAAA,GACLC,aAAa,IACb,eAHKC,EAAQ,KAAE/E,EAAW,KAItBgF,GAASC,EAAAA,EAAAA,KACPlK,EAA8BgK,EAA9BhK,KAAMwE,EAAwBwF,EAAxBxF,UAAWC,EAAauF,EAAbvF,SAEzB,GAAoCiB,EAAAA,EAAAA,UAAS,CAAE9C,GAAI,KAAMtC,KAAM,KAAK,eAA7DuD,EAAU,KAAEsG,EAAa,KAChC,GAAkDzE,EAAAA,EAAAA,WAAS,GAAM,eAA1D0E,EAAiB,KAAEC,EAAoB,KAC9C,GAAkD3E,EAAAA,EAAAA,WAAS,GAAM,eAA1D4E,EAAiB,KAAEC,EAAoB,KAC9C,GAAkD7E,EAAAA,EAAAA,WAAS,GAAM,eAA1D8E,EAAiB,KAAEC,EAAoB,KAC9C,GAAkD/E,EAAAA,EAAAA,WAAS,GAAM,eAA1Db,EAAiB,KAAEC,EAAoB,KAYxCnD,EAAU,mCAAG,8FACXsD,IAAa,OACnBH,GAAqB,GAAM,2CAC5B,kBAHe,mCAShB,OAJA4F,EAAAA,EAAAA,YAAU,WAAM,MACdT,SAA2B,QAArB,EAANA,EAAQU,2BAAmB,OAA3B,OAAAV,EAA8B,uCAChC,GAAG,CAACA,IAGF,oCACE,kBAACW,EAAA,EAAU,CAACC,UAAU,cACpB,kBAACC,EAAA,EAAe,CAACzI,MAAM,YAEzB,6BAASwI,UAAU,gEACfE,EAAAA,EAAAA,IAAoBvG,EAAWxE,aAAI,EAAJA,EAAMuE,MAAOoF,GAgB5C,kBAACqB,EAAA,EAAI,CAACC,eAAgB,CAAEC,QAAS,yBAC9BhG,EAAwB,IAAG,IAC5B,kBAACiG,EAAA,EAAK,CACJC,KAAK,OACL/I,MAAM,wBACNwG,KAAK,qEACLwC,cAAe,CACbC,KAAM,eACNvC,MAAO,kBAAMsB,GAAqB,EAAK,GAEzCkB,iBAAkB,CAChB,CACEpK,KAAM,OACNkB,MAAO,iCACPmJ,KAAM,oJA7Bd,kBAAC,EAAU,CACTxL,MAAMA,aAAI,EAAJA,EAAMA,OAAQ,GACpBuE,MAAOvE,aAAI,EAAJA,EAAMuE,MACbC,UAAWA,EACXC,SAAUA,EACVE,kBA/BgB,SAAC/B,EAAItC,GAC7B6J,EAAc,CAAEvH,GAAAA,EAAItC,KAAAA,IACpBiK,GAAqB,EACvB,EA6BUxF,aAAcA,EACdC,aAAcA,EACdJ,kBA7BgB,SAAChC,EAAItC,GAC7B6J,EAAc,CAAEvH,GAAAA,EAAItC,KAAAA,IACpBmK,GAAqB,EACvB,EA2BU/F,kBAAmB,kBAAM2F,GAAqB,EAAK,EACnDxF,kBAAmBA,EACnBC,qBAAsBA,EACtBG,YAAaA,KA0BlBmF,GACC,kBAAC7I,EAAA,EAAgB,CACfC,YAAa4I,EACb3I,eAAgB4I,EAChB1I,WAAYA,IAGf2I,GACC,kBAACmB,EAAA,EAAgB,CACfjK,YAAa8I,EACb7I,eAAgB8I,EAChB5I,WAAYA,EACZkC,WAAYA,IAGf2G,GACC,kBAAC5G,EAAA,EAAgB,CACfpC,YAAagJ,EACb/I,eAAgBgJ,EAChB9I,WAAYA,EACZkC,WAAYA,IAKtB,C,wMCtHMlE,EAAwB,mCAAG,WAAOC,GAAK,kFACxBG,EAAAA,EAAAA,IAAkBH,GAAM,OAAjC,IAAG,EAAH,KACDI,KAAKC,QAAS,CAAF,wCACZ,6BAA2B,2CAErC,gBAL6B,sCAOxBS,EAAoB,CACxBC,OAAQ,CACN,CACEC,UAAWC,EAAAA,EAAAA,WACXP,KAAM,OACNQ,MAAO,aACPC,WACE,kFACFC,YAAY,EACZE,SAAU,CACR,CAAEC,KAAMC,EAAAA,EAAAA,UAER,CAAED,KAAMC,EAAAA,EAAAA,WAA2BC,UAAW,IAC9CC,EAAAA,GACA3B,MAMF8L,EAAmB,SAAH,GAKhB,IAJJjK,EAAW,EAAXA,YACAC,EAAc,EAAdA,eACAE,EAAU,EAAVA,WACAkC,EAAU,EAAVA,WAEQjB,EAAaiB,EAAbjB,GAAItC,EAASuD,EAATvD,KACNsB,GAAWC,EAAAA,EAAAA,eAYjB,OACE,kBAAC,IAAK,CACJqB,OAAQ1B,EACR2B,WAAY,kBAAM1B,GAAe,EAAM,EACvCY,MAAM,eACNe,YAAY,OACZC,OAAQ3C,EACRgL,cAAe7H,EACfP,SAlBsB,SAACrB,GACzB,IAAME,EAAiB,CACrBC,UAAW,CACTC,MAAO,UACPC,YAAa,GAAF,OAAKhC,EAAI,gCAAwB2B,EAAO3B,KAAI,kBAEzDiC,QAAS,CAAEF,MAAO,QAASC,YAAa,4BAE1CI,EAAAA,EAAAA,GAAad,GAAU,kBAAM+J,EAAAA,EAAAA,IAAgB/I,EAAIX,EAAO,GAAEE,EAC5D,EAUIR,WAAYA,GAGlB,EAEA8J,EAAiBlI,UAAY,CAC3BX,GAAIY,IAAAA,OACJK,WAAYL,IAAAA,OACZhC,YAAagC,IAAAA,KACb/B,eAAgB+B,IAAAA,KAChB7B,WAAY6B,IAAAA,MAEd,S,yMC1Eaf,EAAc,SAACmJ,GAC1B,OAAOC,EAAAA,SAAAA,KAAc,GAAD,OAAIC,EAAAA,GAAQ,mBAAmB,CACjD3F,KAAMyF,EAAQtL,KACdyL,KAAM,UAEV,EAEavJ,EAAuB,SAACoJ,GACnC,OAAOC,EAAAA,SAAAA,KAAc,GAAD,OAAIG,EAAAA,GAAkB,WAAW,CAAE1L,KAAMsL,EAAQtL,MACvE,EAEawJ,EAAY,SAAH,GAAkB,IAAZmC,EAAK,EAALA,MACpBC,GAAIC,EAAAA,EAAAA,IAAeF,GACzB,OAAOJ,EAAAA,SAAAA,IAAa,GAAD,OAAIC,EAAAA,GAAQ,0BAAkBI,GACnD,EAEaE,EAAqB,SAAH,GAAkB,IAAZH,EAAK,EAALA,MAC7BC,GAAIC,EAAAA,EAAAA,IAAeF,GACzB,OAAOJ,EAAAA,SAAAA,IAAa,GAAD,OAAIG,EAAAA,GAAkB,mBAAWE,GACtD,EAEaG,EAAe,SAAH,GAAsB,IAAhBzJ,EAAE,EAAFA,GAAIqJ,EAAK,EAALA,MAC3BC,GAAIC,EAAAA,EAAAA,IAAeF,GACzB,OAAOJ,EAAAA,SAAAA,IAAa,GAAD,OAAIC,EAAAA,GAAQ,0BAAkBlJ,EAAE,iBAASsJ,GAC9D,EAEaP,EAAkB,SAAC/I,EAAIgJ,GAClC,OAAOC,EAAAA,SAAAA,IAAa,GAAD,OAAIC,EAAAA,GAAQ,0BAAkBlJ,GAAM,CACrDuD,KAAMyF,EAAQtL,KACdyL,KAAM,UAEV,EAEa/H,EAAkB,SAACpB,GAC9B,OAAOiJ,EAAAA,SAAAA,OAAgB,GAAD,OAAIC,EAAAA,GAAQ,0BAAkBlJ,GACtD,EAEaI,EAAoB,SAACsJ,EAASvF,GACzC,OAAO8E,EAAAA,SAAAA,KAAc,GAAD,OAAIC,EAAAA,GAAQ,0BAAkBQ,EAAO,YAAY,CACnEvJ,GAAIuJ,EACJlG,QAASW,GAEb,EAEajE,EAA6B,SAACwJ,EAASvF,GAClD,IAAMwF,EAAa,GAGnB,OAFAxF,EAAQyF,SAAQ,SAAC9F,GAAM,OAAK6F,EAAWlD,KAAK3C,EAAOyB,KAAK,IAEjD0D,EAAAA,SAAAA,KAAc,GAAD,OACfG,EAAAA,GAAkB,mBAAWM,EAAO,UACvCC,EAEJ,EAEaE,EAAyB,SAACH,EAASvF,GAC9C,OAAO8E,EAAAA,SAAAA,OAAgB,GAAD,OAAIC,EAAAA,GAAQ,0BAAkBQ,EAAO,YAAY,CACrEtM,KAAM,CACJ+C,GAAIuJ,EACJlG,QAASW,IAGf,EAEa2F,EAAkC,SAACJ,EAASvF,GACvD,OAAO8E,EAAAA,SAAAA,OACL,UAAGG,EAAAA,GAAkB,mBAAWM,EAAO,WAAYvF,EAAQ4F,KAAK,KAEpE,EAEaC,EAA4B,SAACN,EAAS1J,GACjD,OAAOiJ,EAAAA,SAAAA,OAAgB,GAAD,OAAIC,EAAAA,GAAQ,0BAAkBQ,EAAO,oBAAY1J,GACzE,EAEa7C,EAAoB,SAACO,GAChC,OAAOuL,EAAAA,SAAAA,IAAa,GAAD,OAAIC,EAAAA,GAAQ,oCAA4BxL,GAC7D,EAEauM,EAAuB,WAClC,OAAOhB,EAAAA,SAAAA,IAAa,GAAD,OAAIC,EAAAA,GAAQ,sCACjC,EAEa3L,EAA6B,SAACG,GACzC,OAAOuL,EAAAA,SAAAA,IAAa,GAAD,OACdG,EAAAA,GAAkB,wBAAgB1L,EAAI,gCAE7C,C,iwBCjFA,IAAMwM,EAAY,SAAH,GAcT,IAbJ5J,EAAM,EAANA,OACAb,EAAK,EAALA,MACAyB,EAAgB,EAAhBA,iBACAX,EAAU,EAAVA,WACAC,EAAW,EAAXA,YACAC,EAAM,EAANA,OACAqI,EAAa,EAAbA,cACA3H,EAAO,EAAPA,QACApC,EAAU,EAAVA,WACAoL,EAAI,EAAJA,KACAzJ,EAAQ,EAARA,SACA0J,EAAiB,EAAjBA,kBACAzM,EAAe,EAAfA,gBAEA,OACE,kBAAC,IAAK,CACJwD,QAASgJ,QAAAA,EAAQ,QACjB1K,MAAOA,EACPyB,iBAAkBA,QAAAA,EAAoB,KACtCZ,OAAQA,EACR+J,QAAS9J,GAET,kBAAC,IAAY,CACXE,OAAQA,EACR9C,gBAAiBA,EACjB2M,aAAc,SAACC,GAAK,OAClB,kBAAC,MAAY,UACPA,EAAK,CACT/J,YAAaA,EACbgK,cAAe,CAAC,WAChBC,aAAc,CACZC,OAAQ,CAAEvJ,QAAAA,MAEZ,EAEJ2H,cAAeA,EACf6B,gBACEP,EAAiB,OACRA,GAAsBO,EAAAA,IAC3BA,EAAAA,GAENjK,SAAQ,mCAAE,WAAOrB,GAAM,iFACfqB,EAASrB,GAAO,OACtBuL,YAAU,iBAAC,8FAAkB7L,IAAY,mFAAE,KAC3CwB,IAAa,2CACd,mDAJO,GAKRsK,SAAU,kBAAMtK,GAAY,IAIpC,EAEA2J,EAAUvJ,UAAY,CACpBL,OAAQM,IAAAA,KACRnB,MAAOmB,IAAAA,OACPL,WAAYK,IAAAA,KACZ7B,WAAY6B,IAAAA,KACZJ,YAAaI,IAAAA,OACbH,OAAQG,IAAAA,OACRkI,cAAelI,IAAAA,OACfO,QAASP,IAAAA,OACTF,SAAUE,IAAAA,KACVuJ,KAAMvJ,IAAAA,OACNwJ,kBAAmBxJ,IAAAA,OACnBM,iBAAkBN,IAAAA,IAClBjD,gBAAiBiD,IAAAA,QAGnB,S,wDC5EO,IAAMkK,EACX,sCAEWC,EAA6B,qC,0ICmB1C,QAjB2B,SAAC/N,GAC1B,OAAwB8F,EAAAA,EAAAA,UAAS9F,GAAM,eAAhCI,EAAI,KAAE4N,EAAO,KACd9L,GAAyBqD,EAAAA,EAAAA,IAC7BuI,EAAAA,GAWF,OARAhD,EAAAA,EAAAA,YAAU,YACR,iBAAC,uGACwBmC,EAAAA,EAAAA,MAAsB,OAAvC7C,EAAW,EAAH,KACR6D,EAAoB7D,aAAQ,EAARA,EAAU8D,oBACpCF,GAASC,GAAqB/L,GAAwB,0CAHxD,EAKF,GAAG,IAEI9B,CACT,C,6qBC8DA,QAhFqB,SAAC4B,EAAUiI,EAAK1H,EAAgBuH,GAAqB,UAClEqE,EAA2B,QAAjB,EAAG5L,SAAc,aAAd,EAAgBC,UAC7B4L,EAAwB,QAAjB,EAAG7L,SAAc,aAAd,EAAgB8L,OAC1BC,EAA2B,QAAjB,EAAG/L,SAAc,aAAd,EAAgBgM,UAE9BhM,IACHA,EAAiB,CACfC,UAAW,CACTC,MAAO,UACPC,YAAa,0CAEfC,QAAS,CACPF,MAAO,QACPC,YAAa,0CAKnB,IAAM8L,EAAS,mCAAG,6GAESvE,IAAK,OAoC3B,OApCKG,EAAW,EAAH,KACVgE,IACEtE,EACFA,EAAiBsE,QAAQ7L,EAAe8L,QAExCrM,EAAS,EAAD,IACHyM,EAAAA,EAAAA,IAAgB,EAAD,CAChBtK,QAAS,QACN5B,EAAe8L,YAKtBF,IACErE,EACFA,EAAiBqE,WAAW5L,EAAeC,WAE3CR,EAAS,EAAD,IACHyM,EAAAA,EAAAA,IAAgB,EAAD,CAChBtK,QAAS,WACN5B,EAAeC,eAKtB8L,IACExE,EACFA,EAAiBwE,WAAW/L,EAAegM,WAE3CvM,EAAS,EAAD,IACHyM,EAAAA,EAAAA,IAAgB,EAAD,CAChBtK,QAAS,WACN5B,EAAegM,eAIzB,kBACMnE,GAAQ,QAed,OAfc,0BAEXN,EACFA,EAAiB4E,IAAInM,EAAeI,QAAS,EAAF,IAE3CX,EAAS,EAAD,IACHyM,EAAAA,EAAAA,IAAgB,EAAD,GAChBtK,QAAS,UACN5B,EAAeI,SAAO,IAEzBD,YAAa,iCAAKiM,MAAK,UAChBpM,EAAeI,QAAQD,YAAW,aAAK,KAAIiM,OAC9CpM,EAAeI,QAAQD,iBAGhC,kFAGJ,kBAzDc,mCA2Df,OAAO8L,GACT,C,mUC/Ee,SAASI,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACI7H,EAAK+H,EADLC,GAAS,OAA6BH,EAAQC,GAElD,GAAIG,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBL,GACpD,IAAKE,EAAI,EAAGA,EAAII,EAAiBlP,OAAQ8O,IACvC/H,EAAMmI,EAAiBJ,GACnBD,EAASM,QAAQpI,IAAQ,GACxBiI,OAAOI,UAAUC,qBAAqBC,KAAKV,EAAQ7H,KACxDgI,EAAOhI,GAAO6H,EAAO7H,GAEzB,CACA,OAAOgI,CACT,C","sources":["webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/constants/features.js","webpack:///./src/hooks/useInventoryGroups.js","webpack:///./src/utils/apiWithToast.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  createInventoryGroup,\n  addDevicesToGroup,\n  validateGroupName,\n  validateInventoryGroupName,\n  addDevicesToInventoryGroup,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport useInventoryGroups from '../../hooks/useInventoryGroups';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst asyncInventoryGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateInventoryGroupName(value);\n  if (resp.results.length > 0 && resp.results[0].name === value) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst inventoryValidatorMapper = {\n  groupName: () => asyncInventoryGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const inventoryGroupsEnabled = useInventoryGroups(false);\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n\n    let createGroupFunc;\n    if (inventoryGroupsEnabled) {\n      createGroupFunc = () => createInventoryGroup(values);\n    } else {\n      createGroupFunc = () => createGroup(values);\n    }\n    return apiWithToast(dispatch, createGroupFunc, statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    let addDevicesToGroupFunc;\n    if (inventoryGroupsEnabled) {\n      const { id } = await handleCreateGroup(values);\n      addDevicesToGroupFunc = () => addDevicesToInventoryGroup(id, deviceIds);\n    } else {\n      const { ID } = await handleCreateGroup(values);\n      addDevicesToGroupFunc = () => addDevicesToGroup(parseInt(ID), deviceIds);\n    }\n    apiWithToast(dispatch, addDevicesToGroupFunc, statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={\n        inventoryGroupsEnabled ? inventoryValidatorMapper : validatorMapper\n      }\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\nimport { createLink, useFeatureFlags } from '../../utils';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  locationProp,\n  navigateProp,\n  fetchGroups,\n}) => {\n  const hideCreateGroupsEnabled = useFeatureFlags(\n    'edge-management.hide-create-group'\n  );\n\n  const history = useHistory();\n  const { pathname } = locationProp ? locationProp() : useLocation();\n\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData.rowInfo;\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled:\n            devices.length > 0\n              ? !(rowData?.rowInfo?.hasValidUpdate && hasUpdate)\n              : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n        hasValidUpdate: rowData?.DeviceGroup?.ValidUpdate,\n      },\n      cells: [\n        {\n          title: createLink({\n            pathname: `${paths.fleetManagement}/${ID}`,\n            linkText: Name,\n          }),\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        locationProp={locationProp}\n        navigateProp={navigateProp}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={\n          hideCreateGroupsEnabled\n            ? []\n            : [\n                {\n                  title: 'Create group',\n                  click: handleCreateModal,\n                },\n              ]\n        }\n        hasModalSubmitted={hasModalSubmitted}\n        setHasModalSubmitted={setHasModalSubmitted}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              if (navigateProp) {\n                navigate({ pathname });\n              } else {\n                history.push({ pathname });\n              }\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={async () => {\n              await fetchGroups();\n              setHasModalSubmitted(true);\n            }}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  closeModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React, { useEffect, useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/groups';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { emptyStateNoFilters, useFeatureFlags } from '../../utils';\nimport PropTypes from 'prop-types';\nimport Images from '../ImageManager/Images';\nimport { useLocation } from 'react-router-dom';\n\n// eslint-disable-next-line react/prop-types\nconst Groups = ({ locationProp, navigateProp }) => {\n  const hideCreateGroupsEnabled = useFeatureFlags(\n    'edge-management.hide-create-group'\n  );\n  const { search } = locationProp ? locationProp() : useLocation();\n\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const chrome = useChrome();\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const reloadData = async () => {\n    await fetchGroups();\n    setHasModalSubmitted(true);\n  };\n\n  useEffect(() => {\n    chrome?.updateDocumentTitle?.('Groups - Inventory | Edge management');\n  }, [chrome]);\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <section className=\"edge-groups pf-l-page__main-section pf-c-page__main-section\">\n        {!emptyStateNoFilters(isLoading, data?.count, search) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            locationProp={locationProp}\n            navigateProp={navigateProp}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            {hideCreateGroupsEnabled}?{}:\n            <Empty\n              icon=\"plus\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n            {}\n          </Flex>\n        )}\n      </section>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={reloadData}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nImages.propTypes = {\n  pathPrefix: PropTypes.string,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  notificationProp: PropTypes.object,\n};\n\nexport default Groups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import { EDGE_API, INVENTORY_API_BASE, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const createInventoryGroup = (payload) => {\n  return instance.post(`${INVENTORY_API_BASE}/groups`, { name: payload.name });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getInventoryGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${INVENTORY_API_BASE}/groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const addDevicesToInventoryGroup = (groupId, devices) => {\n  const devicesIDS = [];\n  devices.forEach((device) => devicesIDS.push(device.UUID));\n\n  return instance.post(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts`,\n    devicesIDS\n  );\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDevicesFromInventoryGroup = (groupId, devices) => {\n  return instance.delete(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts/` + devices.join(',')\n  );\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n\nexport const getEnforceEdgeGroups = () => {\n  return instance.get(`${EDGE_API}/device-groups/enforce-edge-groups`);\n};\n\nexport const validateInventoryGroupName = (name) => {\n  return instance.get(\n    `${INVENTORY_API_BASE}/groups?name=${name}&order_by=name&order_how=ASC`\n  );\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","export const FEATURE_PARITY_INVENTORY_GROUPS =\n  'edgeParity.inventory-groups-enabled';\n\nexport const FEATURE_HIDE_GROUP_ACTIONS = 'edge-management.hide_groups_actions';\n","import { useState, useEffect } from 'react';\nimport { useFeatureFlags } from '../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../constants/features';\nimport { getEnforceEdgeGroups } from '../api/groups';\n\nconst useInventoryGroups = (value) => {\n  const [data, setData] = useState(value);\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  useEffect(() => {\n    (async () => {\n      const response = await getEnforceEdgeGroups();\n      const enforceEdgeGroups = response?.enforce_edge_groups;\n      setData(!enforceEdgeGroups && inventoryGroupsEnabled);\n    })();\n  }, []);\n\n  return data;\n};\n\nexport default useInventoryGroups;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["asyncGroupNameValidation","value","length","undefined","validateGroupName","data","isValid","asyncInventoryGroupNameValidation","validateInventoryGroupName","resp","results","name","validatorMapper","groupName","inventoryValidatorMapper","createGroupSchema","fields","component","componentTypes","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","CreateGroupModal","isModalOpen","setIsModalOpen","deviceIds","reloadData","dispatch","useDispatch","inventoryGroupsEnabled","useInventoryGroups","handleCreateGroup","values","createGroupFunc","statusMessages","onSuccess","title","description","onError","createInventoryGroup","createGroup","apiWithToast","handleAddDevicesToNewGroup","id","addDevicesToGroupFunc","addDevicesToInventoryGroup","ID","addDevicesToGroup","parseInt","isOpen","closeModal","submitLabel","schema","onSubmit","propTypes","PropTypes","WarningIcon","color","warningColor","DeleteGroupModal","modalState","titleIconVariant","variant","deleteGroupById","UpdateDeviceModal","React","filters","columns","sort","GroupTable","count","isLoading","hasError","handleCreateModal","handleRenameModal","handleDeleteModal","hasModalSubmitted","setHasModalSubmitted","locationProp","navigateProp","fetchGroups","hideCreateGroupsEnabled","useFeatureFlags","history","useHistory","pathname","useLocation","navigate","useNavigate","useState","deviceData","imageData","updateModal","setUpdateModal","buildRows","map","rowData","DeviceGroup","Name","Devices","DevicesImageInfo","systems","image","Tooltip","content","device","index","key","rowInfo","devicesImageInfo","devices","hasValidUpdate","ValidUpdate","cells","createLink","paths","linkText","GeneralTable","apiFilterSort","isUseApi","loadTableData","tableData","columnNames","rows","actionResolver","hasUpdate","some","UpdateAvailable","onClick","prevState","UUID","display_name","imageId","find","ImageID","isDisabled","areActionsDisabled","defaultSort","direction","emptyFilterState","body","toolbarButtons","click","Suspense","fallback","Bullseye","Spinner","navigateBack","push","refreshTable","Images","pathPrefix","historyProp","notificationProp","search","useApi","api","getGroups","tableReload","response","chrome","useChrome","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","useEffect","updateDocumentTitle","PageHeader","className","PageHeaderTitle","emptyStateNoFilters","Flex","justifyContent","default","Empty","icon","primaryAction","text","secondaryActions","link","RenameGroupModal","initialValues","updateGroupById","payload","instance","EDGE_API","Type","INVENTORY_API_BASE","query","q","getTableParams","getInventoryGroups","getGroupById","groupId","devicesIDS","forEach","removeDevicesFromGroup","removeDevicesFromInventoryGroup","join","removeDeviceFromGroupById","getEnforceEdgeGroups","RepoModal","size","additionalMappers","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","onCancel","FEATURE_PARITY_INVENTORY_GROUPS","FEATURE_HIDE_GROUP_ACTIONS","setData","enforceEdgeGroups","enforce_edge_groups","hasSuccess","hasInfo","onInfo","hasWarning","onWarning","fetchData","addNotification","err","Title","_objectWithoutProperties","source","excluded","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}