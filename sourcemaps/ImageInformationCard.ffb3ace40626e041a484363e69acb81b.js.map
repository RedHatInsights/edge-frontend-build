{"version":3,"file":"js/ImageInformationCard.0d854368b61edaebb50f.js","mappings":"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","sources":["webpack:///./src/components/ImageInformationCard.js"],"sourcesContent":["import React, { Suspense, useEffect, useState } from 'react';\nimport { getImageDataOnDevice } from '../api/images';\nimport { routes as paths } from '../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport CmpLoader from './CmpLoader';\nimport PropTypes from 'prop-types';\n\nconst LoadingCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./LoadingCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = ({ deviceIdProps }) => {\n  const deviceId =\n    deviceIdProps ??\n    useSelector(({ entityDetails }) => entityDetails?.entity?.id);\n  const [isImageInfoLoading, setIsImageInfoLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [imageData, setImageData] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const data = await getImageDataOnDevice(deviceId);\n        setImageData(data);\n      } catch (err) {\n        setHasError(true);\n      }\n      setIsImageInfoLoading(false);\n    })();\n  }, []);\n\n  const edgeImageData = [\n    {\n      title: 'Running image',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData ? (\n        <Link\n          to={`${paths.manageImages}/${imageData?.Image?.ImageSetID}/details`}\n        >\n          {imageData?.Image?.Name}\n        </Link>\n      ) : (\n        'unavailable'\n      ),\n    },\n    {\n      title: 'Running version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData ? (\n        <Link\n          to={`${paths.manageImages}/${imageData?.Image?.ImageSetID}/versions/${imageData?.Image?.ID}/details`}\n        >\n          {imageData?.Image?.Version}\n        </Link>\n      ) : (\n        'unavailable'\n      ),\n    },\n    {\n      title: 'Target version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData?.UpdatesAvailable ? (\n        <Link\n          to={`${paths.manageImages}/${imageData?.UpdatesAvailable[0]?.Image?.ImageSetID}/versions/${imageData?.UpdatesAvailable[0]?.Image?.ID}/details`}\n        >\n          {imageData?.UpdatesAvailable[0]?.Image?.Version}\n        </Link>\n      ) : hasError ? (\n        'unavailable'\n      ) : (\n        'Same as running'\n      ),\n    },\n    {\n      title: 'Rollback version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData?.RollbackImage?.ID ? (\n        <Link\n          to={`${paths.manageImages}/${imageData?.RollbackImage?.ImageSetID}/versions/${imageData?.RollbackImage?.ID}/details`}\n        >\n          {imageData?.RollbackImage?.Version}\n        </Link>\n      ) : hasError ? (\n        'unavailable'\n      ) : (\n        'None'\n      ),\n    },\n  ];\n\n  const federatedImageData = [\n    {\n      title: 'Running image',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData ? (\n        imageData?.Image?.Name\n      ) : (\n        'unavailable'\n      ),\n    },\n    {\n      title: 'Running version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData ? (\n        imageData?.Image?.Version\n      ) : (\n        'unavailable'\n      ),\n    },\n    {\n      title: 'Target version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData?.UpdatesAvailable ? (\n        imageData?.UpdatesAvailable[0]?.Image?.Version\n      ) : hasError ? (\n        'unavailable'\n      ) : (\n        'Same as running'\n      ),\n    },\n    {\n      title: 'Rollback version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData?.RollbackImage?.ID ? (\n        imageData?.RollbackImage?.Version\n      ) : hasError ? (\n        'unavailable'\n      ) : (\n        'None'\n      ),\n    },\n  ];\n\n  return (\n    <Suspense fallback=\"\">\n      <LoadingCard\n        title=\"Image information\"\n        isLoading={false}\n        items={deviceIdProps ? federatedImageData : edgeImageData}\n      />\n    </Suspense>\n  );\n};\n\nImageInformationCard.propTypes = {\n  deviceIdProps: PropTypes.string,\n};\n\nexport default ImageInformationCard;\n"],"names":["LoadingCard","props","appName","module","fallback","numberOfRows","ImageInformationCard","deviceIdProps","deviceId","useSelector","entityDetails","entity","id","useState","isImageInfoLoading","setIsImageInfoLoading","hasError","setHasError","imageData","setImageData","useEffect","getImageDataOnDevice","data","edgeImageData","title","value","size","SkeletonSize","to","paths","Image","ImageSetID","Name","ID","Version","UpdatesAvailable","RollbackImage","federatedImageData","Suspense","isLoading","items","propTypes","PropTypes"],"sourceRoot":""}