{"version":3,"file":"js/GroupsDetailPage.1650559187455.75fc2bfee305a6b155a8.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Devices/AddSystemsToGroupModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/components/Modal.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  imageTypeMapper,\n  releaseMapper,\n} from '../ImageManagerDetail/constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail, loadEdgeImageSets } from '../../store/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Update image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Create image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      //onSubmit={handleUpdateModal}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Create Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/index';\n\nconst getActiveAlert = (\n  CVEs,\n  systemProfile,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (\n    CVEs?.isLoading ||\n    CVEs?.meta?.filter ||\n    !systemProfile?.[0].system_profile\n  ) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    systemProfile?.[0]?.system_profile?.status === 'BUILDING' ||\n    systemProfile?.[0]?.system_profile?.status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (\n    systemProfile?.[0]?.system_profile?.image_data?.ImageInfo?.UpdatesAvailable\n      ?.length > 0\n  ) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  systemProfile,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { params } = useRouteMatch('/inventory/:deviceId');\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!systemProfile?.[0]?.system_profile) {\n        return;\n      }\n      const id = {\n        id: systemProfile?.[0]?.system_profile?.image_data?.ImageInfo?.Image\n          ?.ImageSetID,\n      };\n      const newImageData = await getImageSet(id);\n      setNewImageStatus(newImageData?.Data?.images?.[0]?.image?.Status);\n    })();\n  }, [systemProfile]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, systemProfile, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, systemProfile, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your device.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update device to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update Device\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Device updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <Main className=\"add-100vh\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: params.deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </Main>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.string,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n          <VulnerabilityTab\n            systemProfile={systemProfile}\n            setUpdateModal={setUpdateModal}\n            imageId={imageId}\n            setReload={setReload}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.string,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { getDeviceHasUpdate } from '../../api/index';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          ...(prevState.deviceData || []),\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n            system_profile: {\n              image_data,\n              status:\n                image_data?.UpdateTransactions?.[\n                  image_data.UpdateTransactions.length - 1\n                ]?.Status,\n            },\n          },\n        ],\n        imageData: image_data?.ImageInfo?.UpdatesAvailable?.[0],\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/inventory'}>\n                {uuid ? 'Groups' : 'Systems'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n                    ?.UpdatesAvailable?.length > 0,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : updateModal?.deviceData?.system_profile?.status === 'BUILDING' ||\n            updateModal?.deviceData?.system_profile?.status === 'CREATED' ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"blue\"\n              icon={<InProgressIcon />}\n            >\n              Updating\n            </Label>\n          ) : updateModal?.deviceData?.system_profile?.image_data?.ImageInfo\n              ?.UpdatesAvailable?.length > 0 ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"orange\"\n              icon={<ExclamationTriangleIcon />}\n            >\n              Update Available\n            </Label>\n          ) : (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"green\"\n              icon={<CheckCircleIcon color=\"green\" />}\n            >\n              Running\n            </Label>\n          )}\n        </PageHeader>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <DeviceDetailTabs\n              systemProfile={updateModal?.deviceData}\n              imageId={imageId}\n              setUpdateModal={setUpdateModal}\n              setReload={setReload}\n            />\n          </GridItem>\n        </Grid>\n        {updateModal.isOpen && (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <UpdateDeviceModal\n              navigateBack={() => {\n                history.push({ pathname: history.location.pathname });\n                setUpdateModal((prevState) => {\n                  return {\n                    ...prevState,\n                    isOpen: false,\n                  };\n                });\n              }}\n              setUpdateModal={setUpdateModal}\n              updateModal={updateModal}\n              refreshTable={() => setReload(true)}\n            />\n          </Suspense>\n        )}\n      </DetailWrapper>\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Split, SplitItem, Tooltip } from '@patternfly/react-core';\nimport { loadDeviceTable } from '../../store/actions';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport { emptyStateNoFliters } from '../../constants';\n\nconst getDeviceStatus = (deviceData) =>\n  deviceData?.ImageInfo?.UpdatesAvailable\n    ? 'updateAvailable'\n    : deviceData?.Device?.Booted\n    ? 'running'\n    : 'booting';\n\nconst DeviceStatus = ({ Device }) => {\n  const status = getDeviceStatus(Device);\n  const statusType = {\n    booting: (\n      <Split className=\"pf-u-info-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    ),\n    running: (\n      <Split className=\"pf-u-success-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <CheckCircleIcon />\n        </SplitItem>\n        <SplitItem>Running</SplitItem>\n      </Split>\n    ),\n    updateAvailable: (\n      <Split className=\"pf-u-warning-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon />\n        </SplitItem>\n        <SplitItem>Update Available</SplitItem>\n      </Split>\n    ),\n  };\n\n  return statusType[status];\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Image',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Booting', value: 'booting' },\n      { option: 'Running', value: 'running' },\n      { option: 'Update Available', value: 'updateAvailable' },\n      { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(30)],\n  },\n  {\n    title: 'Image',\n    type: 'image',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Groups',\n    type: 'groups',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last Seen',\n    type: 'last_seen',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n];\n\nconst createRows = (devices) =>\n  devices?.map((device) => {\n    const { Device, ImageInfo } = device;\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {Device.DevicesGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        deviceID: Device?.ID,\n        id: Device?.UUID,\n        display_name: Device?.DeviceName,\n        updateImageData: ImageInfo?.UpdatesAvailable?.[0],\n        deviceStatus: getDeviceStatus(device),\n        imageSetId: ImageInfo?.Image?.ImageSetID,\n        imageName: ImageInfo?.Image?.Name,\n        deviceGroups: Device.DevicesGroups,\n      },\n      noApiSortFilter: [\n        Device?.DeviceName || '',\n        ImageInfo?.Image?.Name || '',\n        '',\n        Device?.LastSeen || '',\n        getDeviceStatus(device),\n      ],\n      cells: [\n        {\n          title: (\n            <Link to={`${paths['inventory']}/${Device?.UUID}`}>\n              {Device?.DeviceName}\n            </Link>\n          ),\n        },\n        {\n          title: ImageInfo?.Image?.Name ? (\n            <Link\n              to={`${paths['manage-images']}/${ImageInfo?.Image?.ImageSetID}/versions/${ImageInfo?.Image?.ID}/details`}\n            >\n              {ImageInfo?.Image?.Name}\n            </Link>\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title:\n            Device.DevicesGroups.length === 0\n              ? '-'\n              : Device.DevicesGroups.length === 1\n              ? Device.DevicesGroups[0].Name\n              : deviceGroupTooltip,\n        },\n        {\n          title: <DateFormat date={Device?.LastSeen} />,\n        },\n        {\n          title: <DeviceStatus Device={device} />,\n        },\n      ],\n    };\n  });\n\nconst DeviceTable = ({\n  hasCheckbox = false,\n  selectedItems,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  setUpdateModal,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup) {\n      actions.push({\n        title: 'Add to group',\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup) {\n      actions.push({\n        title: 'Remove from group',\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData)) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          setUpdateModal((prevState) => {\n            return {\n              ...prevState,\n              isOpen: true,\n              deviceData: [\n                {\n                  id: rowData.rowInfo.id,\n                  display_name: rowData.rowInfo.display_name,\n                },\n              ],\n              imageData: rowData.rowInfo.updateImageData,\n            };\n          });\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: 'Remove from group',\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.deviceStatus !== 'updateAvailable';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Connect edge systems'}\n          body={\n            'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n          }\n          secondaryActions={[\n            {\n              title: 'How to connect a system',\n              link: '/',\n              type: 'link',\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={false}\n          filters={defaultFilters}\n          loadTableData={loadDeviceTable}\n          tableData={{\n            count: count,\n            isLoading: isLoading,\n            hasError: hasError,\n          }}\n          columnNames={columnNames}\n          rows={createRows(data || [])}\n          actionResolver={actionResolver}\n          defaultSort={{ index: 3, direction: 'desc' }}\n          toolbarButtons={\n            canBeAdded\n              ? [\n                  {\n                    title: 'Add systems',\n                    click: () => setIsAddModalOpen(true),\n                  },\n                ]\n              : []\n          }\n          hasCheckbox={hasCheckbox}\n          skeletonRowQuantity={skeletonRowQuantity}\n          selectedItems={selectedItems}\n          kebabItems={kebabItems}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\nDeviceTable.propTypes = {\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.array,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  setUpdateModal: PropTypes.func,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInput = ({ defaultOptions }) => {\n  const { change } = useFormApi();\n  const [options, setOptions] = useState(defaultOptions);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    setIsOpen(false);\n    setOptions(defaultOptions);\n  };\n\n  return (\n    <div>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {options?.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </div>\n  );\n};\n\nSelectInput.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { getGroups, addDevicesToGroup } from '../../api';\nimport { useDispatch } from 'react-redux';\nimport { Button, Text } from '@patternfly/react-core';\n\nconst CreateGroupButton = ({ openModal }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={openModal}>\n      Create Group\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  openModal: PropTypes.bool,\n};\n\nconst createDescription = (deviceIds) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a group to add <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds),\n    },\n    {\n      component: 'search-input',\n      name: 'name',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n  const [response] = useApi(getGroups);\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add device to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(group.groupId), deviceIds),\n      statusMessages\n    );\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Add to group\"\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions: response?.data?.data || [],\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          openModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n        },\n      }}\n      schema={createSchema(deviceIds)}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { removeDeviceFromGroupById } from '../../api';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'name',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceInfo[0].name} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to remove device from group',\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, deviceInfo[0].ID),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      openModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useHistory } from 'react-router-dom';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst Inventory = () => {\n  const [response, fetchData] = useApi(getInventory);\n  const { data, isLoading, hasError } = response;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const history = useHistory();\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <DeviceTable\n          data={data?.data}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          kebabItems={[\n            {\n              isDisabled: !(checkedDeviceIds.length > 0),\n              title: 'Add to group',\n              onClick: () =>\n                handleAddDevicesToGroup(\n                  checkedDeviceIds.map((device) => ({\n                    ID: device.deviceID,\n                    name: device.display_name,\n                  })),\n                  false\n                ),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchData}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={() => {\n            fetchData();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={() => {\n            fetchData();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={() => {\n            fetchData();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Inventory;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { createGroup, addDevicesToGroup, validateGroupName } from '../../api';\nimport { nameValidator } from '../../constants';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  // isValid should be isNotValid\n  // who wrote that Go code :thinking_face:\n  // spoiler: it was me\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        asyncGroupNameValidation,\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    /*\n      temp focus solution, better approach to pass a ref input and set it\n      when form inputs are mounted\n    */\n\n    setTimeout(() => {\n      const input = document.querySelector('#name');\n      if (input) input.focus();\n    }, 50);\n  }, []);\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add device to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Create Group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\nimport { validateImage } from '../../api';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Image',\n    type: 'text',\n  },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  fetchGroups,\n}) => {\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData?.rowInfo;\n    const hasValidImage =\n      devices.length > 0 &&\n      !validateImage(\n        devices.map((device) => ({\n          ID: device.ImageID,\n        }))\n      ).UpdateValid;\n\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.ID,\n                display_name: device.Name,\n              })),\n              imageData: {\n                Image: {\n                  Name: devicesImageInfo[0].Name,\n                  Version: devicesImageInfo[0].Version,\n                  CreatedAt: devicesImageInfo[0].CreatedAt,\n                  Distribution: devicesImageInfo[0].Distribution,\n                  CommitID: devicesImageInfo[0].CommitID,\n                },\n                PackageDiff: devicesImageInfo[0].PackageDiff,\n              },\n              isOpen: true,\n            })),\n          isDisabled: devices.length > 0 ? !(hasValidImage && hasUpdate) : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData?.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n      },\n      noApiSortFilter: [\n        Name,\n        '',\n        DevicesImageInfo.length === 0\n          ? '-'\n          : DevicesImageInfo.length > 1\n          ? 'Multiple images'\n          : DevicesImageInfo[0]?.Name,\n      ],\n      cells: [\n        {\n          title: <Link to={`${paths['fleet-management']}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={false}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={[\n          {\n            title: 'Create group',\n            click: handleCreateModal,\n          },\n        ]}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchGroups}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  openModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById } from '../../api';\nimport { nameValidator } from '../../constants';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/index';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\n\nconst Groups = () => {\n  const [response, fetchGroups] = useApi(getGroups);\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {isLoading || data?.count > 0 ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"module\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your devices more effectively\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: '#',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={fetchGroups}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={fetchGroups}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={fetchGroups}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","import React, { useState } from 'react';\nimport { Button, Modal } from '@patternfly/react-core';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/index';\nimport { getInventory } from '../../api';\nimport useApi from '../../hooks/useApi';\n\nconst AddSystemsToGroupModal = ({\n  groupId,\n  closeModal,\n  isOpen,\n  reloadData,\n}) => {\n  const [response] = useApi(getInventory);\n  const { data, isLoading, hasError } = response;\n  const [deviceIds, setDeviceIds] = useState([]);\n\n  return (\n    <Modal\n      id=\"add-systems-modal\"\n      title=\"Add systems\"\n      position=\"top\"\n      isOpen={isOpen}\n      onClose={closeModal}\n      variant=\"large\"\n      actions={[\n        <Button\n          isDisabled={deviceIds.length === 0}\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => {\n            addDevicesToGroup(\n              parseInt(groupId),\n              deviceIds.map((device) => ({ ID: device.deviceID }))\n            );\n            setTimeout(async () => await reloadData(), 500);\n            closeModal();\n          }}\n        >\n          Add systems\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <DeviceTable\n        selectedItems={setDeviceIds}\n        skeletonRowQuantity={15}\n        hasCheckbox={true}\n        isLoading={isLoading}\n        hasError={hasError}\n        count={data?.count}\n        data={data?.data || []}\n      />\n    </Modal>\n  );\n};\nAddSystemsToGroupModal.propTypes = {\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n};\n\nexport default AddSystemsToGroupModal;\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Flex,\n  FlexItem,\n  Skeleton,\n} from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Empty from '../../components/Empty';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/index';\nimport AddSystemsToGroupModal from '../Devices/AddSystemsToGroupModal';\nimport { canUpdateSelectedDevices, stateToUrlSearch } from '../../constants';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst GroupsDetail = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const history = useHistory();\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchData] = useApi(() => getGroupById(groupId));\n  const { data, isLoading, hasError } = response;\n  const { groupId } = params;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  useEffect(() => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('add_system_modal=true', isAddModalOpen),\n    });\n  }, [isAddModalOpen]);\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove device' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} systems have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove systems' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const getDeviceStatus = (deviceData) =>\n    deviceData?.ImageInfo?.UpdatesAvailable\n      ? 'updateAvailable'\n      : deviceData?.Device?.Booted\n      ? 'running'\n      : 'booting';\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={`${paths['fleet-management']}`}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb isActive>\n            <Skeleton width=\"100px\" />\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id=\"image-set-details-dropdown\"\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                >\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete Group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.Devices?.data?.map((device) => ({\n                      imageSetId: device?.ImageInfo?.Image.ImageSetID,\n                    })),\n                    imageData:\n                      data?.Devices?.data[0].ImageInfo?.UpdatesAvailable?.[0],\n                  })}\n                  onClick={() =>\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.Devices?.data?.map((device) => ({\n                        deviceID: device?.Device?.ID,\n                        id: device?.Device?.UUID,\n                        display_name: device?.Device?.DeviceName,\n                        updateImageData:\n                          device?.ImageInfo?.UpdatesAvailable?.[0],\n                        deviceStatus: getDeviceStatus(device),\n                        imageSetId: device?.ImageInfo?.Image?.ImageSetID,\n                        imageName: device?.ImageInfo?.Image?.Name,\n                      })),\n                      imageData:\n                        data?.Devices?.data[0].ImageInfo.UpdatesAvailable?.[0],\n                    }))\n                  }\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {isLoading || data?.Devices?.count > 0 ? (\n          <DeviceTable\n            data={data?.Devices?.data || []}\n            count={data?.Devices?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: 'Remove from group',\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageData: deviceIds[0].updateImageData,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            setUpdateModal={setUpdateModal}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"cube\"\n              title=\"Add systems to the group\"\n              body=\"Create groups to help manage your systems more effectively\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: '#',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n      {isAddModalOpen && (\n        <AddSystemsToGroupModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchData}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          openModal={() => setRemoveModal(false)}\n          title={'Remove from group'}\n          submitLabel={'Remove'}\n          variant=\"danger\"\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchData}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchData}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths['fleet-management'])}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GroupsDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImageSets } from '../../store/actions';\nimport { cellWidth } from '@patternfly/react-table';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../constants';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Current Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last Updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(30)],\n  },\n];\n\nconst createRows = (data) => {\n  return data.map(({ image_set, image_build_iso_url }, index) => ({\n    rowInfo: {\n      id: image_set?.ID,\n      imageStatus: image_set?.Images[0].Status,\n      isoURL: image_build_iso_url || null,\n      latestImageID: image_set?.Images[0].ID,\n    },\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Images[0].Version, // remove when image_set.Version is accurate\n      {\n        title: <DateFormat date={image_set?.UpdatedAt} />,\n      },\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <StatusLabel status={image_set?.Images[0].Status} />\n          </>\n        ),\n      },\n    ],\n  }));\n};\n\nconst ImageTable = ({ openCreateWizard, openUpdateWizard }) => {\n  const { count, data, isLoading, hasError } = useSelector(\n    ({ edgeImageSetsReducer }) => ({\n      count: edgeImageSetsReducer?.data?.Count || 0,\n      data: edgeImageSetsReducer?.data?.Data || [],\n      isLoading:\n        edgeImageSetsReducer?.isLoading === undefined\n          ? true\n          : edgeImageSetsReducer.isLoading,\n      hasError: edgeImageSetsReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.rowInfo?.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo?.latestImageID);\n        },\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'No images found'}\n          body={''}\n          primaryAction={{\n            click: openCreateWizard,\n            text: 'Create new image',\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          filters={defaultFilters}\n          loadTableData={loadEdgeImageSets}\n          tableData={{ count, data, isLoading, hasError }}\n          columnNames={columnNames}\n          rows={data ? createRows(data) : []}\n          actionResolver={actionResolver}\n          areActionsDisabled={areActionsDisabled}\n          defaultSort={{ index: 2, direction: 'desc' }}\n          toolbarButtons={[\n            {\n              title: 'Create new image',\n              click: () => openCreateWizard(),\n            },\n          ]}\n        />\n      )}\n    </>\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func,\n  openCreateWizard: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n  filters: PropTypes.array,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }),\n};\n\nexport default ImageTable;\n","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport { edgeImageSetsReducer } from '../../store/reducers';\nimport ImageSetsTable from './ImageSetsTable';\nimport { stateToUrlSearch } from '../../constants';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('create_image=true', true),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('update_image=true', true),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImageSetsReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('create_image=true', false),\n              });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('update_image=true', false),\n              });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  openModal, // should be closeModal, update here and other places that use it\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={openModal}\n    >\n      <FormRenderer\n        schema={schema}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          openModal();\n        }}\n        onCancel={() => openModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n  const hasSuccess = statusMessages?.onSuccess;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n      return response;\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","data","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","key","onClick","payload","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","addNotification","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","setUpdateModal","params","useRouteMatch","useState","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","system_profile","image_data","ImageInfo","Image","ImageSetID","getImageSet","newImageData","Data","images","isLoading","filter","length","UpdatesAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","Main","AsyncComponent","appName","module","customIntlProvider","entity","deviceId","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","AppInfo","showTags","Vulnerability","UpdateDeviceModal","React","setImageId","useParams","inventoryId","uuid","entityDetails","groupName","groupsDetailReducer","deviceData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","UpdateTransactions","imageData","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","isDisabled","hideBack","hideInvDrawer","Label","icon","Grid","gutter","GridItem","span","navigateBack","history","push","pathname","location","refreshTable","getDeviceStatus","Device","Booted","DeviceStatus","booting","running","updateAvailable","defaultFilters","label","type","options","option","columnNames","sort","columnTransforms","cellWidth","DeviceTable","devices","hasCheckbox","selectedItems","skeletonRowQuantity","count","hasError","kebabItems","setRemoveModal","setIsAddModalOpen","handleAddDevicesToGroup","handleRemoveDevicesFromGroup","hasModalSubmitted","setHasModalSubmitted","canBeRemoved","canBeAdded","useHistory","emptyStateNoFliters","body","secondaryActions","link","apiFilterSort","loadTableData","loadDeviceTable","tableData","rows","device","deviceGroupTooltip","DevicesGroups","group","index","rowInfo","deviceID","UUID","DeviceName","updateImageData","deviceStatus","imageSetId","imageName","deviceGroups","noApiSortFilter","LastSeen","cells","paths","date","actionResolver","rowData","areActionsDisabled","_rowId","defaultSort","direction","toolbarButtons","click","urlParam","openUpdateWizard","temp","setIsModalOpen","handleSingleDeviceRemoval","SelectInput","defaultOptions","change","useFormApi","setOptions","setIsOpen","selected","setSelected","clearSelection","Select","typeAheadAriaLabel","onToggle","selection","isPlaceholder","onClear","selections","placeholderText","DeviceGroup","SelectOption","toString","groupId","CreateGroupButton","openModal","createDescription","deviceIds","systemText","createSchema","fields","componentTypes","validate","validatorTypes","AddDeviceModal","isModalOpen","setIsCreateGroupModalOpen","reloadData","useApi","getGroups","response","submitLabel","additionalMappers","SearchInput","schema","onSubmit","values","statusMessages","onSuccess","onError","apiWithToast","addDevicesToGroup","parseInt","removeDescription","deviceInfo","groupText","WarningIcon","warningColor","RemoveDeviceModal","titleIconVariant","hasManyGroups","removeDeviceFromGroupById","getInventory","fetchData","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","setDeviceId","checkedDeviceIds","setCheckedDeviceIds","isRowSelected","setIsRowSelected","isCreateGroupModalOpen","ids","isRow","Fragment","PageHeaderTitle","setTimeout","CreateGroupModal","asyncGroupNameValidation","validateGroupName","isValid","createGroupSchema","helperText","threshold","nameValidator","input","document","querySelector","focus","handleCreateGroup","createGroup","handleAddDevicesToNewGroup","DeleteGroupModal","modalState","deleteGroupById","columns","GroupTable","handleCreateModal","handleRenameModal","handleDeleteModal","fetchGroups","buildRows","Devices","DevicesImageInfo","systems","devicesImageInfo","GeneralTable","hasValidImage","validateImage","ImageID","UpdateValid","hasUpdate","some","UpdateAvailable","CreatedAt","CommitID","PackageDiff","emptyFilterState","RenameGroupModal","initialValues","updateGroupById","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","Flex","justifyContent","default","Empty","primaryAction","text","AddSystemsToGroupModal","closeModal","setDeviceIds","position","isDropdownOpen","setIsDropdownOpen","isAddModalOpen","removeModal","getGroupById","getDeviceIds","search","stateToUrlSearch","width","FlexItem","Dropdown","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","newState","dropdownItems","DropdownItem","canUpdateSelectedDevices","removeDevicesFromGroup","TooltipSelectorRef","reference","getElementById","createRows","image_set","image_build_iso_url","imageStatus","Images","isoURL","latestImageID","DateFormat","UpdatedAt","StatusLabel","ImageTable","openCreateWizard","edgeImageSetsReducer","Count","undefined","actionsArray","href","rel","target","clearFilters","pagination","page","perPage","CreateImageWizard","UpdateImageWizard","isCreateWizardOpen","setIsCreateWizardOpen","UpdateWizard","setUpdateWizard","ImageSetsTable","updateImageID","RepoModal","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","onCancel","api","hasSuccess"],"sourceRoot":""}