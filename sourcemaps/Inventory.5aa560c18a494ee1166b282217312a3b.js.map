{"version":3,"file":"js/Inventory.17a6a6282acb36a303a5.js","mappings":"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","sources":["webpack:///./src/api/images/index.js"],"sourcesContent":["import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n"],"names":["checkImageName","name","payload","instance","EDGE_API","createImage","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","length","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","id","Name","URL","uuid","endpoint","getImageSet","q","limit","offset","sort_by","query","getTableParams","getImageSetViewVersions","imageSetID","getImageSetView","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","search","params","URLSearchParams","IMAGE_BUILDER_API","toString","getImageById","getImageSets","postRpmsNames","urls","CONTENT_SOURCES_API"],"sourceRoot":""}