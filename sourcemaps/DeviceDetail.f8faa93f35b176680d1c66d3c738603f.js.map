{"version":3,"file":"js/DeviceDetail.316ff364055a11899499.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/store/action-types.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/edgeImageSets.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/imageSetDetail.js","webpack:///./src/store/edgeImagePackages.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/deviceTable.js","webpack:///./src/store/actions.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/api/devices/index.js","webpack:///./src/api/images/index.js","webpack:///./src/api/index.js","webpack:///./src/components/CmpLoader.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/constants/index.js","webpack:///./src/hooks/useApi.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport CmpLoader from './CmpLoader';\n\nconst GeneralInformation = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./GeneralInformation\"\n    fallback={<CmpLoader numberOfRows={3} />}\n    {...props}\n  />\n);\n\nconst SystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./SystemCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst OperatingSystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./OperatingSystemCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst BiosCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./BiosCard\"\n    fallback={<CmpLoader numberOfRows={4} />}\n    {...props}\n  />\n);\n\nconst CollectionCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./CollectionCard\"\n    fallback={<CmpLoader numberOfRows={7} />}\n    {...props}\n  />\n);\n\nconst InfrastructureCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./InfrastructureCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"ImageInformationCard\" */ './ImageInformationCard'\n  )\n);\n\nconst InfrastructureCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      {' '}\n      <InfrastructureCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst ImageInformationCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      {' '}\n      <ImageInformationCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst BiosCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      <BiosCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst OperatingSystemCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      <OperatingSystemCard {...props} hasKernelModules={true} store={store} />\n    </Suspense>\n  );\n};\n\nconst CollectionCardWrapper = (props) => {\n  const store = useStore();\n  // TODO: fix rhcHealth display\n  const rhcHealth = null;\n  return (\n    <Suspense fallback=\"\">\n      <CollectionCard\n        {...props}\n        extra={[\n          {\n            title: 'RHC Health (broker functioning)',\n            value: rhcHealth || (\n              <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n              </Tooltip>\n            ),\n          },\n        ]}\n        store={store}\n      />\n    </Suspense>\n  );\n};\n\nconst SystemCardWrapper = (props) => {\n  const store = useStore();\n  const { greenbootStatus } = useSelector(({ systemProfileStore }) => {\n    return {\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n    };\n  });\n\n  return (\n    <Suspense fallback=\"\">\n      <SystemCard\n        {...props}\n        store={store}\n        hasCPUs={false}\n        hasSockets={false}\n        hasCores={false}\n        hasCPUFlags={false}\n        hasRAM={false}\n        hasSAP={false}\n        extra={[\n          {\n            title: (\n              <TitleWithPopover\n                title=\"GreenBoot Status\"\n                content=\"This is a description about greenboot status\"\n              />\n            ),\n            value: <GreenbootStatus status={greenbootStatus} />,\n          },\n        ]}\n      />\n    </Suspense>\n  );\n};\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const store = useStore();\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={store}\n        writePermissions={writePermissions}\n        SystemCardWrapper={SystemCardWrapper}\n        OperatingSystemCardWrapper={InfrastructureCardWrapper}\n        BiosCardWrapper={ImageInformationCardWrapper}\n        InfrastructureCardWrapper={BiosCardWrapper}\n        ConfigurationCardWrapper={OperatingSystemCardWrapper}\n        CollectionCardWrapper={CollectionCardWrapper}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No system summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_SETS } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImageSetsPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImageSetsFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImageSetsRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_SETS}_PENDING`]: loadEdgeImageSetsPending,\n    [`${LOAD_EDGE_IMAGE_SETS}_FULFILLED`]: loadEdgeImageSetsFulfilled,\n    [`${LOAD_EDGE_IMAGE_SETS}_REJECTED`]: loadEdgeImageSetsRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_SET_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageSetDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageSetDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageSetDetailRejected = (state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_SET_DETAIL}_PENDING`]: loadImageSetDetailPending,\n    [`${LOAD_IMAGE_SET_DETAIL}_FULFILLED`]: loadImageSetDetailFulfilled,\n    [`${LOAD_IMAGE_SET_DETAIL}_REJECTED`]: loadImageSetDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_PACKAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagePackagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagePackagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagePackagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_PENDING`]: loadEdgeImagePackagesPending,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_FULFILLED`]: loadEdgeImagePackagesFulfilled,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_REJECTED`]: loadEdgeImagePackagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_TABLE } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceTablePending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceTableFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceTableRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_TABLE}_PENDING`]: loadDeviceTablePending,\n    [`${LOAD_DEVICE_TABLE}_FULFILLED`]: loadDeviceTableFulfilled,\n    [`${LOAD_DEVICE_TABLE}_REJECTED`]: loadDeviceTableRejected,\n  },\n  initialState\n);\n","import {\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show system summary data',\n          description: 'Failed receiving system summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport { imageTypeMapper, releaseMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  createNewImage,\n  addImageToPoll,\n  loadImageDetail,\n  loadEdgeImageSets,\n} from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Update image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Update Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/images';\n\nconst getActiveAlert = (\n  CVEs,\n  deviceData,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    deviceData?.UpdateTransactions[0]?.Status === 'BUILDING' ||\n    deviceData?.UpdateTransactions[0]?.Status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (deviceData?.Device?.UpdateAvailable) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  deviceData,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { deviceId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!deviceData) {\n        return;\n      }\n      // Use view API to get current image set status\n      const params = {\n        id: 'view',\n        q: { id: deviceData?.ImageInfo?.Image?.ImageSetID },\n      };\n      const resp = await getImageSet(params);\n      setNewImageStatus(resp?.data?.[0]?.Status);\n    })();\n  }, [deviceData]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, deviceData, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your system.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update system to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update system\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"System updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </section>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.number,\n  deviceData: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport GeneralInformationTab from '../../components/DeviceDetail';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <Tabs\n      className=\"pf-u-ml-md\"\n      activeKey={activeTabKey}\n      onSelect={handleTabClick}\n    >\n      <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n        <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n          <GeneralInformationTab />\n        </section>\n      </Tab>\n      <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n        <VulnerabilityTab\n          deviceData={systemProfile}\n          setUpdateModal={setUpdateModal}\n          imageId={imageId}\n          setReload={setReload}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.number,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useHistory, useLocation, useParams, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport { getDevice, getInventory } from '../../api/devices';\nimport Status, { getDeviceStatus } from '../../components/Status';\nimport useApi from '../../hooks/useApi';\nimport RetryUpdatePopover from '../Devices/RetryUpdatePopover';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { routes as paths } from '../../constants/routeMapper';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [{ default: systemProfileStore }] = useLoadModule(\n    {\n      appName: 'inventory',\n      scope: 'inventory',\n      module: './systemProfileStore',\n    },\n    {}\n  );\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const { deviceId, groupId } = useParams();\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const hasEntityFinishedLoading = useSelector(\n    (store) => store?.entityDetails?.loaded\n  );\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n\n  const [imageData, setImageData] = useState();\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n\n  const [deviceData, fetchDeviceData] = useApi({\n    api: () =>\n      getInventory({\n        query: {\n          uuid: deviceId,\n        },\n      }),\n  });\n\n  const [deviceView] = deviceData.data?.data?.devices || [];\n  const {\n    Status: deviceViewStatus,\n    UpdateAvailable: updateAvailable,\n    DispatcherStatus: updateStatus,\n    LastSeen: lastSeen,\n    DeviceGroups: deviceGroups,\n  } = deviceView || {};\n\n  const groupName = groupId\n    ? deviceGroups?.find((group) => group.ID.toString() === groupId)?.Name\n    : null;\n\n  const deviceStatus = getDeviceStatus(\n    deviceViewStatus,\n    updateAvailable,\n    updateStatus\n  );\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDevice(deviceId);\n      setImageData(image_data);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n            deviceStatus: deviceStatus,\n          },\n        ],\n        imageSetId: image_data?.ImageInfo?.Image?.ImageSetID,\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  return systemProfileStore ? (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n      inventoryId={deviceId}\n    >\n      <PageHeader>\n        {!groupName ? (\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={paths.inventory}>Systems</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb ouiaId=\"groups-list\">\n            <BreadcrumbItem>\n              <Link to={paths.fleetManagement}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>\n              <Link to={`${paths.fleetManagement}/${groupId}`}>\n                {groupName}\n              </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <InventoryDetailHead\n          fallback=\"\"\n          actions={[\n            {\n              title: 'Update',\n              isDisabled:\n                imageData?.UpdateTransactions?.[0]?.Status === 'BUILDING' ||\n                imageData?.UpdateTransactions?.[0]?.Status === 'CREATED' ||\n                !imageData?.ImageInfo?.UpdatesAvailable?.length > 0,\n              onClick: () => {\n                history.push({\n                  pathname: `${pathname}/update`,\n                  search: '?from_details=true',\n                });\n              },\n            },\n          ]}\n          hideBack\n          hideInvDrawer\n          inventoryId={deviceId}\n        />\n\n        {isDeviceStatusLoading ? (\n          <Skeleton size={SkeletonSize.xs} />\n        ) : deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n          <RetryUpdatePopover\n            lastSeen={lastSeen}\n            device={deviceView}\n            position={'right'}\n            fetchDevices={fetchDeviceData}\n          >\n            <Status\n              id={'device-status'}\n              type={\n                deviceStatus === 'error'\n                  ? 'errorWithExclamationCircle'\n                  : deviceStatus\n              }\n              isLink={true}\n              isLabel={true}\n              className=\"pf-u-mt-sm cursor-pointer\"\n            />\n          </RetryUpdatePopover>\n        ) : (\n          <Status\n            id={'device-status'}\n            type={deviceStatus}\n            isLabel={true}\n            className=\"pf-u-mt-sm\"\n          />\n        )}\n      </PageHeader>\n      {hasEntityFinishedLoading && (\n        <DeviceDetailTabs\n          systemProfile={imageData}\n          imageId={imageId}\n          setUpdateModal={setUpdateModal}\n          setReload={setReload}\n        />\n      )}\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={() => setReload(true)}\n          />\n        </Suspense>\n      )}\n    </DetailWrapper>\n  ) : (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default DeviceDetail;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDevice = (id) => {\n  return instance.get(`${EDGE_API}/devices/${id}`);\n};\n\nexport const getDeviceUpdates = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/${id}?${q}`);\n};\n\nexport const updateSystem = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const EDGE_API = '/api/edge/v1';\nexport const CONTENT_SOURCES_API = '/api/content-sources/v1';\n\nexport const getTableParams = (q) => {\n  if (q === undefined) {\n    return '';\n  }\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n","import React from 'react';\nimport { Skeleton } from '@patternfly/react-core';\nimport { PropTypes } from 'prop-types';\n\nconst CmpLoader = ({ numberOfRows }) => {\n  var CmpRows = [];\n\n  for (var i = 0; i < numberOfRows; i++) {\n    CmpRows.push(\n      <React.Fragment key={i}>\n        <Skeleton />\n        <br />\n      </React.Fragment>\n    );\n  }\n  return <React.Fragment>{CmpRows}</React.Fragment>;\n};\n\nexport default CmpLoader;\n\nCmpLoader.propTypes = {\n  numberOfRows: PropTypes.number,\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import {\n  BellIcon,\n  CheckCircleIcon,\n  CircleNotchIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  PauseCircleIcon,\n  PlusCircleIcon,\n  UnknownIcon,\n  RepositoryIcon,\n  SearchIcon,\n  ModuleIcon,\n  CubeIcon,\n  TimesCircleIcon,\n  InProgressIcon,\n  QuestionCircleIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\nimport activeColor from '@patternfly/react-tokens/dist/esm/global_active_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const sortByDirection = (data, direction = 'asc') =>\n  data.sort((a, b) =>\n    direction === 'asc'\n      ? a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n      : b.name.toLowerCase().localeCompare(a.name.toLowerCase())\n  );\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const composeStatus = [\n  'CREATED',\n  'BUILDING',\n  'ERROR',\n  'SUCCESS',\n  'INTERRUPTED',\n];\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n  'rhel-85': 'RHEL 8.5',\n  'rhel-86': 'RHEL 8.6',\n  'rhel-87': 'RHEL 8.7',\n  'rhel-90': 'RHEL 9.0',\n  'rhel-91': 'RHEL 9.1',\n};\n\nexport const releaseMapper = {\n  'rhel-91': 'Red Hat Enterprise Linux (RHEL) 9.1',\n  'rhel-90': 'Red Hat Enterprise Linux (RHEL) 9.0',\n  'rhel-87': 'Red Hat Enterprise Linux (RHEL) 8.7',\n  'rhel-86': 'Red Hat Enterprise Linux (RHEL) 8.6',\n  'rhel-85': 'Red Hat Enterprise Linux (RHEL) 8.5',\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const supportedReleases = [\n  'rhel-84',\n  'rhel-85',\n  'rhel-86',\n  'rhel-87',\n  'rhel-90',\n  'rhel-91',\n];\n\nexport const temporaryReleases = ['rhel-91'];\n\nexport const DEFAULT_RELEASE = 'rhel-90';\nexport const TEMPORARY_RELEASE = 'rhel-91';\n\nexport const imageTypeMapper = {\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n};\n\nexport const iconMapper = {\n  unknown: UnknownIcon,\n  repository: RepositoryIcon,\n  search: SearchIcon,\n  module: ModuleIcon,\n  cube: CubeIcon,\n  question: QuestionCircleIcon,\n  plus: PlusCircleIcon,\n  checkCircle: CheckCircleIcon,\n  exclamationTriangle: ExclamationTriangleIcon,\n  timesCircle: TimesCircleIcon,\n  inProgress: InProgressIcon,\n  exclamationCircle: ExclamationCircleIcon,\n};\n\nexport const colorMapper = {\n  green: successColor.value,\n  yellow: warningColor.value,\n  lightBlue: infoColor.value,\n  blue: activeColor.value,\n  red: dangerColor.value,\n};\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","props","AsyncComponent","appName","module","fallback","CmpLoader","numberOfRows","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","React","InfrastructureCardWrapper","store","useStore","Suspense","ImageInformationCardWrapper","BiosCardWrapper","OperatingSystemCardWrapper","hasKernelModules","CollectionCardWrapper","extra","value","Tooltip","SystemCardWrapper","greenbootStatus","useSelector","systemProfileStore","systemProfile","greenboot_status","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","writePermissions","permissionsReducer","ConfigurationCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","keyBy","k","isLoading","hasError","data","payload","groups","results","meta","threshold","devicesInfo","canariesInfo","statusMapper","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","defaultProps","uuid","devices","error","_state","loadEdgeImageSets","dispatch","query","type","fetchEdgeImageSets","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","useDispatch","getRegistry","useContext","RegistryContext","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","getImageById","id","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","key","onClick","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","callback","createImage","then","createNewImage","resp","addNotification","polling","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","deviceData","setUpdateModal","deviceId","useParams","useState","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","params","q","ImageInfo","Image","ImageSetID","getImageSet","filter","length","UpdateTransactions","Device","UpdateAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","customIntlProvider","entity","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","Vulnerability","UpdateDeviceModal","useLoadModule","scope","history","useHistory","pathname","useLocation","groupId","setImageId","hasEntityFinishedLoading","entityDetails","imageData","setImageData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","useApi","api","getInventory","fetchDeviceData","deviceView","deviceViewStatus","updateAvailable","updateStatus","DispatcherStatus","lastSeen","LastSeen","deviceGroups","DeviceGroups","groupName","find","group","toString","deviceStatus","getDeviceStatus","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDevice","image_data","imageSetId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","inventoryId","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","paths","isActive","Skeleton","size","SkeletonSize","InventoryDetailHead","isDisabled","UpdatesAvailable","push","search","hideBack","hideInvDrawer","RetryUpdatePopover","device","position","fetchDevices","isLink","isLabel","navigateBack","refreshTable","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","date","children","isVisible","setIsVisible","statusMessages","onSuccess","DeviceName","shouldOpen","shouldClose","alertseverityvariant","style","DispatcherReason","icon","headerComponent","footerContent","apiWithToast","updateSystem","DevicesUUID","DeviceUUID","getTableParams","instance","EDGE_API","getDeviceUpdates","checkImageName","imageTypes","packages","thirdPartyRepositories","customPackages","distribution","item","outputTypes","commit","arch","installer","sshkey","repo","URL","endpoint","limit","offset","sort_by","getImageSetViewVersions","imageSetID","getImageSetView","getImageDataOnDevice","getPackages","URLSearchParams","IMAGE_BUILDER_API","getImageSets","postRpmsNames","urls","CONTENT_SOURCES_API","undefined","Object","keys","reduce","acc","curr","multiVals","val","includes","CmpRows","i","booting","text","iconMapper","colorMapper","labelColor","building","created","upToDate","passed","updating","default","interrupted","unresponsive","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","toolTipContent","prototype","hasOwnProperty","call","Label","Split","SplitItem","textDecoration","cursor","sortByDirection","direction","sort","b","toLowerCase","localeCompare","distributionMapper","supportedReleases","temporaryReleases","DEFAULT_RELEASE","TEMPORARY_RELEASE","unknown","UnknownIcon","repository","RepositoryIcon","SearchIcon","ModuleIcon","cube","CubeIcon","question","QuestionCircleIcon","plus","PlusCircleIcon","checkCircle","CheckCircleIcon","exclamationTriangle","ExclamationTriangleIcon","timesCircle","TimesCircleIcon","inProgress","InProgressIcon","exclamationCircle","ExclamationCircleIcon","green","successColor","yellow","warningColor","lightBlue","infoColor","blue","activeColor","red","dangerColor","statusToIcon","done","pending","PauseCircleIcon","CircleNotchIcon","warning","notification","BellIcon","tableReload","setData","setIsLoading","setHasError","hasSuccess","onError","fetchData","notificationProp","hasInfo","onInfo","response","err","Title"],"sourceRoot":""}