{"version":3,"file":"js/CreateImageWizard.3b9a62accf72c86309cc.js","mappings":"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","sources":["webpack:///./src/Routes/Devices/UpdateDeviceModal.js","webpack:///./src/Routes/ImageManager/CreateImageWizard.js"],"sourcesContent":["import React from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../ImageManagerDetail/constants';\nimport PropTypes from 'prop-types';\nimport { updateDeviceLatestImage } from '../../api/index';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const dispatch = useDispatch();\n  const imageData =\n    updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n      ?.UpdatesAvailable[\n      updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n        ?.UpdatesAvailable.length - 1\n    ];\n  const handleUpdateModal = async () => {\n    try {\n      await updateDeviceLatestImage({\n        DeviceUUID: updateModal.deviceData?.id,\n        CommitId: imageData?.Image.CommitID,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating device',\n          description: ` ${updateModal.deviceData.display_name} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a device was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={`Update ${updateModal.deviceData?.display_name} to latest image`}\n      description=\"Update this device to use the latest version of the image linked to it.\"\n      isOpen={updateModal.isOpen}\n      onClose={handleClose}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Update Device\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Update to</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Image Name\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.Image.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.Image.Version}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Created\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            <DateFormat date={imageData?.Image.CreatedAt} />\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {distributionMapper[imageData?.Image.Distribution]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Package Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Added</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.PackageDiff?.Added?.length || 0}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Removed\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.PackageDiff?.Removed?.length || 0}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.PackageDiff?.Updated?.length || 0}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n      <TextContent className=\"pf-u-pt-md\">\n        <Text\n          style={{ color: 'var(--pf-global--palette--gold-500)' }}\n          component=\"small\"\n        >\n          <ExclamationTriangleIcon /> After the update is installed, the device\n          will apply the changes.\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.object.isRequired,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n","import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  registration,\n  review,\n  packages,\n  imageSetDetails,\n  imageOutput,\n} from './steps';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage, loadEdgeImages } from '../../store/actions';\nimport { CREATE_NEW_IMAGE_RESET } from '../../store/action-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getEdgeImageStatus } from '../../api';\n\nconst CreateImage = ({ navigateBack }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    dispatch({ type: CREATE_NEW_IMAGE_RESET });\n  };\n  useEffect(() => {\n    (async () => {\n      const userData = (await insights?.chrome?.auth?.getUser()) || {};\n      setUser(() => userData);\n    })();\n  }, []);\n\n  return user ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          architecture: 'x86_64',\n        };\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Created image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                    (dispatch) => loadEdgeImages(dispatch),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n          loadEdgeImages(dispatch);\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{ version: 0 }}\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Create image',\n            },\n            showTitles: true,\n            title: 'Create image',\n            crossroads: ['target-environment', 'release', 'imageType'],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              imageSetDetails,\n              imageOutput,\n              registration,\n              packages,\n              review,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImage.propTypes = {\n  navigateBack: PropTypes.func,\n};\nCreateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default CreateImage;\n"],"names":["UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","dispatch","useDispatch","imageData","deviceData","system_profile","image_data","ImageInfo","UpdatesAvailable","length","handleUpdateModal","updateDeviceLatestImage","DeviceUUID","id","CommitId","Image","CommitID","addNotification","variant","title","description","display_name","statusText","handleClose","prevState","isOpen","onClose","actions","key","onClick","T","component","TextVariants","TextListVariants","TextListItemVariants","Name","Version","date","CreatedAt","distributionMapper","Distribution","PackageDiff","Added","Removed","Updated","className","style","color","propTypes","PropTypes","isRequired","CreateImage","navigateBack","useState","user","setUser","closeAction","type","CREATE_NEW_IMAGE_RESET","useEffect","insights","chrome","auth","getUser","userData","customComponentMapper","review","ReviewStep","onSubmit","values","setIsSaving","payload","architecture","createNewImage","resp","value","meta","polling","ID","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImages","defaultArch","initialValues","version","schema","fields","componentTypes","name","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","imageSetDetails","imageOutput","registration","packages","defaultProps"],"sourceRoot":""}