{"version":3,"file":"js/1286.8132b6bb0eaa7ad45917.js","mappings":"0NAwBA,QAnBoB,SAACA,GAAU,MAC7B,GAAiCC,EAAAA,EAAAA,GAAO,CACtCC,IAAKC,EAAAA,GACLC,aAAa,IACb,eAHKC,EAAQ,KAAEC,EAAY,KAIrBC,EAA8BF,EAA9BE,KAAMC,EAAwBH,EAAxBG,UAAWC,EAAaJ,EAAbI,SAEzB,OACE,kBAAC,WAAW,QACVD,UAAWA,EACXC,SAAUA,EACVC,MAAOH,aAAI,EAAJA,EAAMG,MACbH,MAAMA,SAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYI,UAAW,GAC7BL,aAAcA,GACVN,GAGV,C,+CCtBO,IAAMY,EAAS,CACpBC,OAAQ,UACRC,aAAc,gBACdC,aAAc,6BACdC,SAAU,YACVC,gBAAiB,oBACjBC,sBAAuB,6BACvBC,4BAA6B,+CAC7BC,kCACE,sDACFC,UAAW,aACXC,kBAAmB,4CACnBC,gBAAiB,uBACjBC,sBAAuB,8BACvBC,8BAA+B,uCAC/BC,aAAc,iBACdC,mBAAoB,0BACpBC,0BAA2B,mDAC3BC,aAAc,gBACdC,kBAAmB,sBACnBC,2BAA4B,4B,8sBCyC9B,QAzDe,SAAH,GAAgE,MAA1D7B,EAAG,EAAHA,IAAG,IAAE8B,GAAAA,OAAE,IAAG,OAAI,EAAEC,EAAc,EAAdA,eAAc,IAAE7B,YAAAA,OAAW,IAAG,GAAK,EAC7D8B,GAAWC,EAAAA,EAAAA,eACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAG,eAA7B7B,EAAI,KAAE8B,EAAO,KACpB,GAAkCD,EAAAA,EAAAA,WAAS,GAAK,eAAzC5B,EAAS,KAAE8B,EAAY,KAC9B,GAAgCF,EAAAA,EAAAA,WAAS,GAAM,eAAxC3B,EAAQ,KAAE8B,EAAW,KAEtBC,EAA2B,QAAjB,EAAGP,SAAc,aAAd,EAAgBQ,UAC9BR,IACHA,EAAiB,CACfQ,UAAW,CACTC,MAAO,UACPC,YAAa,0CAEfC,QAAS,CACPF,MAAO,QACPC,YAAa,0CAKnB,IAAME,EAAS,mCAAG,kGACG,OADIC,EAAQ,EAAH,6BAAG,GAC/BR,GAAa,GAAM,kBAEEpC,EAAI,CAAE8B,GAAAA,EAAIc,MAAAA,IAAQ,OAA/BvC,EAAO,EAAH,KACV8B,EAAQ9B,GAEJiC,GACFN,EAAS,EAAD,IACHa,EAAAA,EAAAA,IAAgB,EAAD,CAChBC,QAAS,WACNf,EAAeQ,cAGvB,kDAEDF,GAAY,GAEZL,EAAS,EAAD,IACHa,EAAAA,EAAAA,IAAgB,EAAD,CAChBC,QAAS,UACNf,EAAeW,YAEnB,QAEiB,OAFjB,UAEHN,GAAa,GAAO,6EAEvB,kBA1Bc,mCAkCf,OANAW,EAAAA,EAAAA,YAAU,WACH7C,GACHyC,GAEJ,GAAG,IAEI,CAAC,CAAEtC,KAAAA,EAAMC,UAAAA,EAAWC,SAAAA,GAAYoC,EACzC,C","sources":["webpack:///./src/Routes/Devices/DevicesView.js","webpack:///./src/constants/routeMapper.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React from 'react';\nimport DeviceTable from './DeviceTable';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api/devices';\n\nconst DevicesView = (props) => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  return (\n    <DeviceTable\n      isLoading={isLoading}\n      hasError={hasError}\n      count={data?.count}\n      data={data?.data?.devices || []}\n      fetchDevices={fetchDevices}\n      {...props}\n    />\n  );\n};\n\nexport default DevicesView;\n","export const routes = {\n  groups: '/groups',\n  groupsDetail: '/groups/:uuid',\n  deviceDetail: '/groups/:uuid/:inventoryId',\n  canaries: '/canaries',\n  fleetManagement: '/fleet-management',\n  fleetManagementDetail: '/fleet-management/:groupId',\n  fleetManagementSystemDetail: '/fleet-management/:groupId/systems/:deviceId',\n  fleetManagementSystemDetailUpdate:\n    '/fleet-management/:groupId/systems/:deviceId/update',\n  inventory: '/inventory',\n  insightsInventory: '/insights/inventory/manage-edge-inventory',\n  inventoryDetail: '/inventory/:deviceId',\n  inventoryDetailUpdate: '/inventory/:deviceId/update',\n  insightsInventoryDetailUpdate: '/insights/inventory/:deviceId/update',\n  manageImages: '/manage-images',\n  manageImagesDetail: '/manage-images/:imageId',\n  manageImagesDetailVersion: '/manage-images/:imageId/versions/:imageVersionId',\n  repositories: '/repositories',\n  learningResources: '/learning-resources',\n  contentSourcesRepositories: '/preview/insights/content',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n"],"names":["props","useApi","api","getInventory","tableReload","response","fetchDevices","data","isLoading","hasError","count","devices","routes","groups","groupsDetail","deviceDetail","canaries","fleetManagement","fleetManagementDetail","fleetManagementSystemDetail","fleetManagementSystemDetailUpdate","inventory","insightsInventory","inventoryDetail","inventoryDetailUpdate","insightsInventoryDetailUpdate","manageImages","manageImagesDetail","manageImagesDetailVersion","repositories","learningResources","contentSourcesRepositories","id","statusMessages","dispatch","useDispatch","useState","setData","setIsLoading","setHasError","hasSuccess","onSuccess","title","description","onError","fetchData","query","addNotification","variant","useEffect"],"sourceRoot":""}