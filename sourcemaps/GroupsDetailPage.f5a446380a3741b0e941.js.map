{"version":3,"sources":["webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/DeviceStatus.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/constants.js","webpack:///./src/Routes/ImageManager/ImageTable.js","webpack:///./src/Routes/ImageManager/ImagesToolbar.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTab.js","webpack:///./src/Routes/ImageManagerDetail/ImagePackagesTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTabs.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/constants.js","webpack:///./src/api/index.js","webpack:///./src/constants.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js"],"names":["GeneralInformation","lazy","SystemCard","OperatingSystemCard","CollectionCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","runningVersion","systemProfile","running_rpm_os_tree_version","stagedVersion","staged_rpm_os_tree_version","nonActiveVersion","non_active_rpm_os_tree_version","heathCheck","health_check","rhcHealth","rhc_health","Suspense","fallback","store","useStore","ConfigurationCardWrapper","SystemCardWrapper","props","hasSAP","OperatingSystemCardWrapper","hasKernelModules","extra","title","value","length","plural","singular","onClick","_e","handleClick","generalMapper","statusHelper","toUpperCase","Tooltip","content","className","CollectionCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","hideBack","hideInvDrawer","Main","Grid","gutter","GridItem","span","AppInfo","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Card","CardTitle","CardBody","Stack","hasGutter","StackItem","Button","isDisabled","isInline","variant","propTypes","PropTypes","deviceSummaryReducer","isLoading","undefined","hasError","data","shallowEqual","Bullseye","Spinner","Tiles","dispatch","useDispatch","registered","imagesReducer","loadImages","loadDeviceSummary","Flex","FlexItem","onNewImageClick","DeviceStatus","console","debug","rpm_ostree_deployments","Split","SplitItem","color","booted","checksum","isRequired","CreateImageWizard","React","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","useState","getEntities","setGetEntities","isOpen","setIsOpen","activeFilters","setActiveFilters","inventory","useRef","history","useHistory","URLSearchParams","location","search","get","cleanEntities","Fragment","PageHeaderTitle","push","pathname","create_image","toString","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","columns","defaultColumns","newColumns","filter","column","includes","key","renderFunc","sysProf","width","isStatic","_i","config","system_profile","host_type","fields","hideFilters","registeredWith","filterConfig","items","type","filterValues","onChange","event","hasCheckbox","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onDelete","itemsToRemove","isAll","onDeleteFilter","onRowClick","id","mergeWithEntities","api","navigateBack","getFilterDep","chips","map","chip","join","ImageTable","pagination","clearFilters","openCreateWizard","openUpdateWizard","index","direction","sortBy","setSortBy","edgeImagesReducer","transforms","toShowSort","sortable","hasFilters","loadEdgeImages","reduce","acc","chipKey","transformFilters","perPage","limit","offset","page","transformPaginationParams","sort_by","Object","keys","some","filterKey","rows","heightAuto","cells","colSpan","EmptyState","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","SearchIcon","EmptyStateSecondaryActions","image","ID","paths","Name","Version","distributionMapper","Distribution","imageTypeMapper","ImageType","DateFormat","date","CreatedAt","StatusLabel","status","Status","imageStatus","isoURL","Installer","ImageBuildISOURL","Table","aria-label","onSort","_event","actionResolver","rowData","actionsArray","SimpleListItem","href","rel","target","_rowId","TableHeader","TableBody","ImageToolbar","setPagination","dispatchActiveFilters","PrimaryToolbar","itemCount","onSetPage","_evt","newPage","onPerPageSelect","newPerPage","payload","dedicatedAction","distribution","UpdateImageWizard","activeFilterMapper","UPDATE_FILTER","action","property","DELETE_FILTER","_state","activeFilterReducer","isCreateWizardOpen","setIsCreateWizardOpen","imageId","UpdateWizard","setUpdateWizard","useReducer","placeholder","composeStatus","update_image","prevState","updateImageID","imageStatusReducer","TextContent","TextList","TextListItem","T","imageDetailReducer","labelsToValueMapper","Created","Release","Commit","Packages","Dependancies","TextListVariants","entries","TextListItemVariants","setPerPage","setPage","setRows","imageName","flatten","pack","rowArray","Text","TextVariants","isCompact","ariaLabel","sortedRows","sort","a","b","SortByDirection","reverse","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","tabIndex","Tab","eventKey","TabTitleText","loadImageStatus","loadImageDetail","Description","statusIcons","statusColors","text","imageStatusMapper","charAt","slice","toLowerCase","DEFAULT_RELEASE","unknown","CREATED","BUILDING","ERROR","SUCCESS","releaseMapper","IMAGE_BUILDER_API","EDGE_API","fetchActiveImages","instance","fetchImageStatus","fetchImage","fetchDeviceSummary","client","HostsApi","Promise","all","apiHostGetHostList","query","generateFilter","inventoryFields","then","resp","curr","deviceSummaryMapper","total","getPackages","architecture","params","createImage","version","description","release","OSTreeParentCommit","imageTypes","imageType","packages","commit","arch","fetchEdgeImages","q","multiVals","val","getEdgeImageStatus","imageUpdateRepoURL","updates","update","CommitID","found","UpdateRepoURL","statusMapper","statusToIcon","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","values","getLabel","category","Array","isArray","currItem","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","POLLING_IMAGES","asyncActions","flatMap","CLEAN_ENTITIES","keyBy","k","meta","notifications","rejected","createNewImage","addImageToPoll","groups","results","threshold","devicesInfo","canariesInfo","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","defaultProps","devices"],"mappings":"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","file":"js/GroupsDetailPage.8fcb991bd9b111425fc4.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nimport {\n  generalMapper,\n  statusHelper,\n} from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const {\n    runningVersion,\n    stagedVersion,\n    nonActiveVersion,\n    heathCheck,\n    rhcHealth,\n  } = useSelector(({ systemProfileStore }) => ({\n    runningVersion:\n      systemProfileStore?.systemProfile?.running_rpm_os_tree_version,\n    stagedVersion:\n      systemProfileStore?.systemProfile?.staged_rpm_os_tree_version,\n    nonActiveVersion:\n      systemProfileStore?.systemProfile?.non_active_rpm_os_tree_version || [],\n    heathCheck: systemProfileStore?.systemProfile?.health_check,\n    rhcHealth: systemProfileStore?.systemProfile?.rhc_health,\n  }));\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        ConfigurationCardWrapper={false}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard {...props} hasSAP={false} />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard\n              {...props}\n              hasKernelModules={false}\n              extra={[\n                { title: 'Running rpm-ostree version', value: runningVersion },\n                {\n                  title: 'Staged rpm-ostree version',\n                  value: stagedVersion,\n                },\n                {\n                  title: 'Non-active (available rollback version(s))',\n                  value: nonActiveVersion?.length,\n                  plural: 'versions',\n                  singular: 'version',\n                  onClick: (_e, handleClick) =>\n                    handleClick(\n                      'Non-active (available rollback version(s))',\n                      generalMapper(nonActiveVersion || [], 'Version'),\n                      'small'\n                    ),\n                },\n                {\n                  title: 'Health check status',\n                  value: statusHelper[heathCheck?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  AppInfo,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={uuid ? `/groups` : '/fleet-management'}>\n              {uuid ? 'Groups' : 'Fleet management'}\n            </Link>\n          </BreadcrumbItem>\n          {uuid && (\n            <BreadcrumbItem>\n              {groupName ? (\n                <Link to={`/groups/${uuid}`}>{groupName}</Link>\n              ) : (\n                <Skeleton size={SkeletonSize.xs} />\n              )}\n            </BreadcrumbItem>\n          )}\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead fallback=\"\" hideBack showTags hideInvDrawer />\n      </PageHeader>\n      <Main className=\"edge-c-device--detail\">\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <AppInfo showTags fallback=\"\" />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary</CardTitle>\n    <CardBody>\n      <Grid>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {active}\n              </Button>{' '}\n              Active\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {orphaned}\n              </Button>{' '}\n              Orphaned\n            </StackItem>\n          </Stack>\n        </GridItem>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {noReports}\n              </Button>\n              Stale\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {neverReported}\n              </Button>\n              Registered but never reported\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\nimport PropTypes from 'prop-types';\n\nconst DeviceStatus = ({ systemProfile }) => {\n  console.debug('system profile is', systemProfile);\n  const { rpm_ostree_deployments } = systemProfile;\n  if (rpm_ostree_deployments?.length === undefined) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <QuestionCircleIcon color=\"grey\" />\n        </SplitItem>\n        <SplitItem>Unspecified</SplitItem>\n      </Split>\n    );\n  }\n  const current_deployment = rpm_ostree_deployments[0];\n  if (!current_deployment.booted) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color=\"blue\" />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    );\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">\n        <CheckCircleIcon color=\"green\" />\n      </SplitItem>\n      <SplitItem>Running</SplitItem>\n    </Split>\n  );\n};\n\nDeviceStatus.propTypes = {\n  systemProfile: PropTypes.shape({\n    rpm_ostree_deployments: PropTypes.arrayOf(\n      PropTypes.shape({\n        booted: PropTypes.bool,\n        checksum: PropTypes.string,\n      })\n    ),\n  }).isRequired,\n};\n\nexport default DeviceStatus;\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport DeviceStatus from './DeviceStatus';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [getEntities, setGetEntities] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('create_image') === 'true') {\n      setIsOpen(() => true);\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles\n          onNewImageClick={() => {\n            history.push({\n              pathname: history.location.pathname,\n              search: new URLSearchParams({\n                create_image: true,\n              }).toString(),\n            });\n            setIsOpen(true);\n          }}\n        />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n          }}\n          columns={(defaultColumns) => {\n            const newColumns = defaultColumns.filter((column) =>\n              ['display_name', 'updated'].includes(column.key)\n            );\n            return [\n              ...newColumns,\n              {\n                key: 'system_profile',\n                title: 'Status',\n                // eslint-disable-next-line react/display-name\n                renderFunc: (sysProf) => (\n                  <DeviceStatus systemProfile={sysProf} />\n                ),\n                props: { width: 20, isStatic: true },\n              },\n            ];\n          }}\n          getEntities={async (_i, config) => {\n            const data = await getEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                  'operating_system',\n                  'greenboot_status',\n                  'greenboot_fallback_detected',\n                  'rpm_ostree_deployments',\n                ],\n              },\n            });\n            return data;\n          }}\n          hideFilters={{ registeredWith: true }}\n          filterConfig={{\n            items: [\n              {\n                label: activeFilters?.deviceStatus?.label,\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value) => {\n                    setActiveFilters(() => ({\n                      ...(activeFilters || {}),\n                      deviceStatus: {\n                        ...(activeFilters?.deviceStatus || {}),\n                        value,\n                      },\n                    }));\n                    inventory.current.onRefreshData();\n                  },\n                  items: deviceStatusMapper,\n                  value: activeFilters?.deviceStatus?.value || [],\n                },\n              },\n            ],\n          }}\n          hasCheckbox={false}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            onDelete: (event, itemsToRemove, isAll) => {\n              if (isAll) {\n                setActiveFilters(defaultFilters);\n              } else {\n                setActiveFilters(() =>\n                  onDeleteFilter(activeFilters, itemsToRemove)\n                );\n              }\n              inventory.current.onRefreshData();\n            },\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities, api }) => {\n            setGetEntities(() => api?.getEntities);\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","export const transformPaginationParams = ({ perPage, page }) => {\n  return {\n    limit: perPage,\n    offset: (page - 1) * perPage,\n  };\n};\n\nexport const transformFilters = (filters) => {\n  const f = filters.reduce((acc, filter) => {\n    if (!filter.chipKey || filter.chips.length === 0) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [filter.chipKey]: filter.chips.map((chip) => chip.value),\n    };\n  }, {});\n  return f;\n};\n\nexport const transformSort = ({ direction, name }) => {\n  return {\n    sort_by: direction === 'asc' ? name : `-${name}`,\n  };\n};\n\nexport const getFilterDep = (filter = undefined) => {\n  return filter?.chips?.map((chip) => chip.value).join('.') || undefined;\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Title,\n  Button,\n  Spinner,\n  Bullseye,\n  SimpleListItem,\n} from '@patternfly/react-core';\nimport {\n  imageTypeMapper,\n  distributionMapper,\n} from '../ImageManagerDetail/constants';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImages } from '../../store/actions';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { PlusCircleIcon, SearchIcon } from '@patternfly/react-icons';\nimport { routes as paths } from '../../../package.json';\nimport {\n  transformFilters,\n  transformPaginationParams,\n  transformSort,\n  getFilterDep,\n} from './constants';\nimport PropTypes from 'prop-types';\n\nconst ImageTable = ({\n  filters,\n  pagination,\n  clearFilters,\n  openCreateWizard,\n  openUpdateWizard,\n}) => {\n  const [sortBy, setSortBy] = useState({ index: 4, direction: 'desc' });\n  const dispatch = useDispatch();\n  const { data, isLoading, hasError } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      data: edgeImagesReducer?.data || null,\n      isLoading:\n        edgeImagesReducer?.isLoading === undefined\n          ? true\n          : edgeImagesReducer.isLoading,\n      hasError: edgeImagesReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const columns = [\n    {\n      title: 'Name',\n      type: 'name',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    'Version',\n    {\n      title: 'Distribution',\n      type: 'distribution',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    {\n      title: 'Type',\n      type: 'image_type',\n      transforms: [],\n    },\n    {\n      title: 'Created',\n      type: 'created_at',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    {\n      title: 'Status',\n      type: 'status',\n      transforms: toShowSort ? [] : [sortable],\n    },\n  ];\n  const toShowSort = isLoading || hasError || (!data?.length && hasFilters);\n  useEffect(() => {\n    loadEdgeImages(dispatch, {\n      ...transformFilters(filters),\n      ...transformPaginationParams(pagination),\n      ...transformSort({\n        direction: sortBy.direction,\n        name: columns[sortBy.index].type,\n      }),\n    });\n  }, [\n    pagination.perPage,\n    pagination.page,\n    sortBy.index,\n    sortBy.direction,\n    // We have 3 different filters in the primary toolbar (status, name, distribution):\n    getFilterDep(filters[0]),\n    getFilterDep(filters[1]),\n    getFilterDep(filters[2]),\n  ]);\n  const hasFilters = Object.keys(filters).some((filterKey) => filterKey);\n\n  let rows = [\n    {\n      heightAuto: true,\n      cells: [\n        {\n          props: { colSpan: 8 },\n          title: (\n            <Bullseye>\n              <EmptyState variant=\"small\">\n                <EmptyStateIcon icon={Spinner} />\n              </EmptyState>\n            </Bullseye>\n          ),\n        },\n      ],\n    },\n  ];\n\n  if (isLoading === false && hasError === false) {\n    if (!data?.length && !hasFilters) {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant=\"small\">\n                    <EmptyStateIcon icon={PlusCircleIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      No images found\n                    </Title>\n                    <Button\n                      onClick={openCreateWizard}\n                      isDisabled={isLoading !== false}\n                    >\n                      Create new images\n                    </Button>\n                  </EmptyState>\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    }\n    if (!data?.length && hasFilters) {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant=\"small\">\n                    <EmptyStateIcon icon={SearchIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      No match found\n                    </Title>\n                    <EmptyStateSecondaryActions>\n                      <Button onClick={clearFilters} variant=\"link\">\n                        Clear all filters\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  </EmptyState>\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    }\n\n    if (data?.length) {\n      rows = data.map((image) => ({\n        id: image.ID,\n        cells: [\n          {\n            title: (\n              <Link to={`${paths['manage-images']}/${image.ID}`}>\n                {image.Name}\n              </Link>\n            ),\n          },\n          image?.Version,\n          {\n            title: distributionMapper[image?.Distribution],\n          },\n          {\n            title: imageTypeMapper[image?.ImageType],\n          },\n          {\n            title: <DateFormat date={image?.CreatedAt} />,\n          },\n          {\n            title: <StatusLabel status={image?.Status} />,\n          },\n        ],\n        imageStatus: image?.Status,\n        isoURL: image?.Installer?.ImageBuildISOURL,\n      }));\n    }\n  }\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData?.isoURL) {\n      actionsArray.push({\n        title: (\n          <SimpleListItem\n            component=\"a\"\n            href={rowData.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </SimpleListItem>\n        ),\n      });\n    }\n\n    if (rowData?.imageStatus === 'SUCCESS') {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.id);\n        },\n      });\n    }\n\n    return actionsArray;\n  };\n\n  return (\n    <Table\n      variant=\"compact\"\n      aria-label=\"Manage Images table\"\n      sortBy={sortBy}\n      onSort={handleSort}\n      actionResolver={actionResolver}\n      cells={columns}\n      rows={rows}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  openUpdateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageTable;\n","import React from 'react';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Button } from '@patternfly/react-core';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst ImageToolbar = ({\n  setPagination,\n  pagination,\n  filterConfig,\n  activeFilters,\n  dispatchActiveFilters,\n  defaultFilters,\n  openCreateWizard,\n}) => {\n  const { isLoading } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      isLoading:\n        edgeImagesReducer?.isLoading === undefined\n          ? true\n          : edgeImagesReducer.isLoading,\n    }),\n    shallowEqual\n  );\n\n  return (\n    <PrimaryToolbar\n      filterConfig={filterConfig}\n      pagination={{\n        itemCount: 100,\n        ...pagination,\n        onSetPage: (_evt, newPage) => setPagination({ page: newPage }),\n        onPerPageSelect: (_evt, newPerPage) =>\n          setPagination({ page: 1, perPage: newPerPage }),\n      }}\n      activeFiltersConfig={{\n        filters: isEmptyFilters(activeFilters)\n          ? constructActiveFilters(activeFilters)\n          : [],\n        onDelete: (_event, itemsToRemove, isAll) => {\n          if (isAll) {\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: defaultFilters,\n            });\n          } else {\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: onDeleteFilter(activeFilters, itemsToRemove),\n            });\n          }\n        },\n      }}\n      dedicatedAction={\n        <Button onClick={openCreateWizard} isDisabled={isLoading !== false}>\n          Create new image\n        </Button>\n      }\n    />\n  );\n};\n\nImageToolbar.propTypes = {\n  setPagination: PropTypes.func.isRequired,\n  filterConfig: PropTypes.shape({ items: PropTypes.array }),\n  defaultFilters: PropTypes.shape({\n    name: PropTypes.object,\n    distribution: PropTypes.object,\n    status: PropTypes.object,\n  }),\n  activeFilters: PropTypes.shape({\n    name: PropTypes.object,\n    distribution: PropTypes.object,\n    status: PropTypes.object,\n  }),\n  dispatchActiveFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageToolbar;\n","import React, {\n  Fragment,\n  useState,\n  useReducer,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport ImageTable from './ImageTable';\nimport ImageToolbar from './ImagesToolbar';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { composeStatus } from '../ImageManagerDetail/constants';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { isEmptyFilters, constructActiveFilters } from '../../constants';\nimport { RegistryContext } from '../../store';\nimport { edgeImagesReducer } from '../../store/reducers';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    key: 'name',\n    value: '',\n  },\n  distribution: {\n    label: 'Distribution',\n    key: 'distribution',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    key: 'status',\n    value: [],\n  },\n};\n\nconst updateFilter = (state, action) => ({\n  ...state,\n  [action.property]: {\n    ...(state[action.property] || {}),\n    value: action.value,\n  },\n});\n\nconst deleteFilter = (_state, action) => action.payload;\n\nconst activeFilterMapper = {\n  UPDATE_FILTER: updateFilter,\n  DELETE_FILTER: deleteFilter,\n};\n\nconst activeFilterReducer = applyReducerHash(\n  activeFilterMapper,\n  defaultFilters\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [pagination, setPagination] = useState({ page: 1, perPage: 100 });\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n  const [activeFilters, dispatchActiveFilters] = useReducer(\n    activeFilterReducer,\n    defaultFilters\n  );\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        create_image: true,\n      }).toString(),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: defaultFilters.name.label,\n        type: 'text',\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'name',\n              value,\n            }),\n          value: activeFilters?.name?.value || '',\n          placeholder: 'Filter by name',\n        },\n      },\n      {\n        label: defaultFilters.distribution.label,\n        type: 'text',\n        filterValues: {\n          key: 'distribution-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'distribution',\n              value,\n            }),\n          value: activeFilters?.distribution?.value || '',\n        },\n      },\n      {\n        label: defaultFilters.status.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'status-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'status',\n              value,\n            }),\n          items: composeStatus.map((item) => ({\n            value: item,\n            label: item,\n          })),\n          value: activeFilters?.status?.value || [],\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImagesReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageToolbar\n          setPagination={setPagination}\n          pagination={pagination}\n          filterConfig={filterConfig}\n          activeFilters={activeFilters}\n          dispatchActiveFilters={dispatchActiveFilters}\n          defaultFilters={defaultFilters}\n          openCreateWizard={openCreateWizard}\n        />\n        <ImageTable\n          clearFilters={() =>\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: defaultFilters,\n            })\n          }\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n          filters={\n            isEmptyFilters(activeFilters)\n              ? constructActiveFilters(activeFilters)\n              : []\n          }\n          pagination={pagination}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport {\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n  Breadcrumb,\n  BreadcrumbItem,\n} from '@patternfly/react-core';\nimport StatusLabel from './StatusLabel';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { routes as paths } from '../../../package.json';\n\nconst DetailsHead = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ imageStatusReducer }) => ({\n      isLoading:\n        imageStatusReducer?.isLoading !== undefined\n          ? imageStatusReducer?.isLoading\n          : true,\n      hasError: imageStatusReducer?.hasError || false,\n      data: imageStatusReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  const status = !isLoading && !hasError ? data.Status : null;\n\n  return (\n    <>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={paths['manage-images']}>Manage Images</Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{data?.Name}</BreadcrumbItem>\n      </Breadcrumb>\n\n      <TextContent>\n        <TextList component=\"dl\">\n          <TextListItem component=\"h1\" className=\"grid-align-center\">\n            {data?.Name}\n          </TextListItem>\n          <TextListItem className=\"pf-u-pt-xs\" component=\"dd\">\n            {isLoading ? <Skeleton /> : <StatusLabel status={status} />}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </>\n  );\n};\n\nexport default DetailsHead;\n","import React from 'react';\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper, imageTypeMapper } from './constants';\n\nconst ImageDetailTab = () => {\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  const dateFormat = () => <DateFormat date={data['CreatedAt']} />;\n  const labelsToValueMapper = {\n    'Image name': 'Name',\n    Version: 'Version',\n    Created: () => dateFormat(),\n    Release: () => distributionMapper[data['Distribution']],\n    'Output type': () => imageTypeMapper[data['ImageType']],\n    'Added packages': () => data.Commit.Packages.length,\n    'Base Packages': () => 0,\n    Dependancies: () => 0,\n  };\n\n  return (\n    <TextContent className=\"pf-u-ml-lg pf-u-mt-md\">\n      <TextList component={TextListVariants.dl}>\n        {data\n          ? Object.entries(labelsToValueMapper).map(([label, value]) => {\n              return (\n                <>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {label}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    {typeof value === 'function' ? value() : data[value]}\n                  </TextListItem>\n                </>\n              );\n            })\n          : null}\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport default ImageDetailTab;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  EmptyState,\n  Title,\n  Bullseye,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport flatten from 'lodash/flatten';\n\nconst ImagePackagesTab = () => {\n  const [perPage, setPerPage] = useState(100);\n  const [page, setPage] = useState(1);\n  const [sortBy, setSortBy] = useState({});\n  const [rows, setRows] = useState([]);\n  const { data, imageName } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data?.Commit?.Packages || null,\n      imageName: imageDetailReducer?.data?.Name || null,\n    }),\n    shallowEqual\n  );\n\n  const columns = [\n    {\n      title: 'Name',\n      type: 'name',\n      transforms: [sortable],\n    },\n  ];\n\n  useEffect(() => {\n    setRows(\n      data !== null && data.length > 0\n        ? flatten(\n            data.map((pack) => [\n              {\n                id: pack?.ID,\n                rowArray: [pack.Name],\n                cells: [\n                  {\n                    title: (\n                      <TextContent>\n                        <Text component={TextVariants.p}>{pack?.Name}</Text>\n                      </TextContent>\n                    ),\n                  },\n                ],\n              },\n            ])\n          )\n        : [\n            {\n              heightAuto: true,\n              cells: [\n                {\n                  props: { colSpan: 8 },\n                  title: (\n                    <Bullseye>\n                      <EmptyState variant=\"small\">\n                        <Title headingLevel=\"h2\" size=\"lg\">\n                          {imageName} has no packages\n                        </Title>\n                      </EmptyState>\n                    </Bullseye>\n                  ),\n                },\n              ],\n            },\n          ]\n    );\n  }, [data]);\n\n  const handleSort = (_event, index, direction) => {\n    const sortedRows = rows.sort((a, b) =>\n      a.rowArray[index] < b.rowArray[index]\n        ? -1\n        : a.rowArray[index] > b.rowArray[index]\n        ? 1\n        : 0\n    );\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      direction === SortByDirection.asc ? sortedRows : sortedRows.reverse()\n    );\n  };\n\n  return (\n    <Fragment>\n      {data ? (\n        <PrimaryToolbar\n          pagination={{\n            itemCount: data?.length || 0,\n            page,\n            perPage,\n            onSetPage: (_evt, newPage) => setPage(newPage),\n            onPerPageSelect: (_evt, newPerPage) => setPerPage(newPerPage),\n            isCompact: true,\n          }}\n        />\n      ) : null}\n      <Table\n        aria-label=\"Image packages table\"\n        ariaLabel=\"packages table\"\n        variant=\"compact\"\n        sortBy={sortBy}\n        onSort={handleSort}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Fragment>\n  );\n};\n\nexport default ImagePackagesTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nimport ImageDetailTab from './ImageDetailTab';\nimport ImagePackagesTab from './ImagePackagesTab';\n\nconst ImageDetailTabs = () => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <ImageDetailTab />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Packages</TabTitleText>}>\n          <ImagePackagesTab />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ImageDetailTabs;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useParams } from 'react-router-dom';\nimport { Stack, StackItem, Text } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { loadImageStatus, loadImageDetail } from '../../store/actions';\nimport { imageStatusReducer, imageDetailReducer } from '../../store/reducers';\nimport DetailsHead from './DetailsHeader';\nimport ImageDetailTabs from './ImageDetailTabs';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst ImageDetail = () => {\n  const { imageId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageStatusReducer,\n      imageDetailReducer,\n    });\n    loadImageStatus(dispatch, imageId);\n    loadImageDetail(dispatch, imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Stack hasGutter>\n          <StackItem>\n            <DetailsHead />\n          </StackItem>\n        </Stack>\n        <StackItem>\n          <Text>{data?.Description}</Text>\n        </StackItem>\n      </PageHeader>\n      <ImageDetailTabs />\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">{icon(color)}</SplitItem>\n      <SplitItem>{text}</SplitItem>\n    </Split>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = ['CREATED', 'BUILDING', 'ERROR', 'SUCCESS'];\n\nexport const DEFAULT_RELEASE = 'rhel-84';\n\n//For this object, it's need to sisable lint once this is not a react component\nexport const statusIcons = {\n  // eslint-disable-next-line react/display-name\n  unknown: (color) => <QuestionCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  CREATED: (color) => <CheckCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  BUILDING: (color) => <InProgressIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  ERROR: (color) => <TimesCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  SUCCESS: (color) => <CheckCircleIcon color={color} />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  CREATED: 'green',\n  BUILDING: 'blue',\n  ERROR: 'red',\n  SUCCESS: 'green',\n};\n\nexport const imageStatusMapper = {\n  CREATED: 'CREATED',\n  BUILDING: 'Image build in progress',\n  ERROR: 'ERROR',\n  SUCCESS: 'SUCCESS',\n};\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n};\n\nexport const releaseMapper = {\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const imageTypeMapper = {\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n};\n","import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchImage = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  OSTreeParentCommit,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    commit: {\n      arch: architecture,\n      packages: packages.map((item) => ({ name: item.name })),\n    },\n  };\n\n  if (OSTreeParentCommit) payload.OSTreeParentCommit = OSTreeParentCommit;\n\n  return instance.post(`${EDGE_API}/images`, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const imageUpdateRepoURL = (id) => {\n  return instance.get(`${EDGE_API}/commits/updates`).then((updates) => {\n    const [found] = updates.filter((update) => update.CommitID === id);\n    return found ? found.UpdateRepoURL : '';\n  });\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    CREATE_NEW_IMAGE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n  fetchImage,\n  fetchEdgeImages,\n  createImage,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: fetchImage({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n"],"sourceRoot":""}