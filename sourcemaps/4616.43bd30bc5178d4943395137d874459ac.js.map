{"version":3,"file":"js/4616.a6c06e933f956e29c33b.js","mappings":"y8BAyBA,IAAMA,EAAc,SAAHC,GAMX,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EALJC,EAAYf,EAAZe,aACAC,EAAahB,EAAbgB,cACAC,EAAMjB,EAANiB,OACAC,EAAgBlB,EAAhBkB,iBACAC,EAAYnB,EAAZmB,aAEAC,GAAwBC,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACdI,GAAWC,EAAAA,EAAAA,eACXC,EAAc,WAClBb,IACAE,GAAUA,GACZ,GAEAY,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAAC,IAAAA,MAAC,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACS,QAARH,EAAAI,gBAAQ,IAAAJ,GAAQ,QAARA,EAARA,EAAUK,cAAM,IAAAL,GAAM,QAANA,EAAhBA,EAAkBM,YAAI,IAAAN,GAAtBA,EACIO,UACDC,MAAK,SAACC,GAAM,OAAKjB,EAAkBkB,MAAVD,EAAsBA,EAAS,CAAC,EAAE,IAAE,wBAAAR,EAAAU,OAAA,GAAAZ,EAAA,IAHlEF,EAKF,GAAG,IAEH,IAAAe,GAAmBC,EAAAA,EAAAA,GAAO,CACxBC,IAAKC,EAAAA,GACLC,GAAIjC,IAFCkC,GAGL3B,EAAAA,EAAAA,GAAAsB,EAAA,GAHa,GAKPM,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,UAERC,GAAwBC,EAAAA,EAAAA,GAC5B,uCAGIC,GAAyBD,EAAAA,EAAAA,GAC7B,mCAGIE,EAAiB,CACrBC,UAAW,CACTC,MAAO,qCAETC,QAAS,CAAED,MAAO,QAASE,YAAa,2BAG1C,OAAOpC,GAAQ2B,IAASC,EACtBS,IAAAA,cAACC,EAAAA,EAAY,CACXC,QAASnC,EACToC,sBAAuB,CACrBC,OAAQC,EAAAA,GAEVC,SAAU,SAAAC,GAA6B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAA1BC,EAAMN,EAANM,QACXC,EAD8BP,EAAXO,cACP,kBAAM,CAAI,IACtB,IAAMC,EAAOC,EAAAA,EAAA,GACRH,GAAM,IACTI,GAAI3B,SAAW,QAAPkB,EAAJlB,EAAM4B,aAAK,IAAAV,OAAA,EAAXA,EAAaW,GACjBC,KAAM9B,SAAW,QAAPmB,EAAJnB,EAAM4B,aAAK,IAAAT,OAAA,EAAXA,EAAaY,KACnBC,SAAShC,SAAW,QAAPoB,EAAJpB,EAAM4B,aAAK,IAAAR,OAAA,EAAXA,EAAaa,SAAU,EAChCC,aAAc,SACdC,YAAaZ,EAAOY,YAChBZ,EAAOY,YACPnC,SAAW,QAAPqB,EAAJrB,EAAM4B,aAAK,IAAAP,OAAA,EAAXA,EAAae,UAAUC,OAC3BC,SAAUf,EAAOe,SACbf,EAAOe,SACPtC,SAAW,QAAPsB,EAAJtB,EAAM4B,aAAK,IAAAN,OAAA,EAAXA,EAAac,UAAUG,YAG7BC,EAAAA,EAAAA,GACEjE,GACA,kBAAMkE,EAAAA,EAAAA,IAAYhB,EAAQ,GAC1BpB,EACAtC,GAEFU,GACF,EACAiE,YAAY,SACZC,cAAe,CACbC,QAAS5C,aAAI,EAAJA,EAAM4B,MAAMC,GACrBC,KAAM9B,SAAW,QAAPlD,EAAJkD,EAAM4B,aAAK,IAAA9E,OAAA,EAAXA,EAAaiF,KACnBc,UAAU,EACVpC,YAAaT,SAAW,QAAPjD,EAAJiD,EAAM4B,aAAK,IAAA7E,OAAA,EAAXA,EAAa+F,YAC1BX,YAAanC,SAAW,QAAPhD,EAAJgD,EAAM4B,aAAK,IAAA5E,OAAA,EAAXA,EAAaoF,UAAUC,OACpCC,SAAUtC,SAAW,QAAP/C,EAAJ+C,EAAM4B,aAAK,IAAA3E,OAAA,EAAXA,EAAamF,UAAUG,SACjCP,QAAShC,SAAW,QAAP9C,EAAJ8C,EAAM4B,aAAK,IAAA1E,OAAA,EAAXA,EAAa+E,QACtBc,cAAe/C,SAAW,QAAP7C,EAAJ6C,EAAM4B,aAAK,IAAAzE,OAAA,EAAXA,EAAa4F,cAC5BC,QAAShD,SAAW,QAAP5C,EAAJ4C,EAAM4B,aAAK,IAAAxE,OAAA,EAAXA,EAAa6F,aACtBC,gBAAiBhD,GACbiD,EAAAA,EAAAA,IAAYnD,SAAW,QAAP3C,EAAJ2C,EAAM4B,aAAK,IAAAvE,OAAA,EAAXA,EAAa4F,aAAc,GAAFG,QAAAC,EAAAA,EAAAA,GAChCC,EAAAA,KAAiBD,EAAAA,EAAAA,GACjBE,EAAAA,OAELJ,EAAAA,EAAAA,IAAYnD,SAAW,QAAP1C,EAAJ0C,EAAM4B,aAAK,IAAAtE,OAAA,EAAXA,EAAa2F,cAC7BO,UAAW,CAAC,oBACZ,oBAAqBxD,SAAW,QAAPzC,EAAJyC,EAAM4B,aAAK,IAAArE,GAAU,QAAVA,EAAXA,EAAakG,gBAAQ,IAAAlG,OAAA,EAArBA,EAAuBmG,KAAI,SAACC,GAAG,OAAAjC,EAAAA,EAAA,GAC/CiC,GAAG,IACN7B,KAAM6B,EAAI5B,MAAI,IAEhB,2BAA4B/B,SAAW,QAAPxC,EAAJwC,EAAM4B,aAAK,IAAApE,GAAwB,QAAxBA,EAAXA,EAAaoG,8BAAsB,IAAApG,OAAA,EAAnCA,EAAqCkG,KAC/D,SAACG,GAAI,OAAAnC,EAAA,CACH5B,GAAI+D,EAAKhC,GACTC,KAAM+B,EAAK9B,MACR8B,EAAI,IAGX,8BAA+B7D,SAAW,QAAPvC,EAAJuC,EAAM4B,aAAK,IAAAnE,GAAwB,QAAxBA,EAAXA,EAAamG,8BAAsB,IAAAnG,OAAA,EAAnCA,EAAqCiG,KAClE,SAACG,GAAI,OAAAnC,EAAA,CACH5B,GAAI+D,EAAKhC,GACTC,KAAM+B,EAAK9B,MACR8B,EAAI,IAGX,kBAAmB7D,SAAW,QAAPtC,EAAJsC,EAAM4B,aAAK,IAAAlE,GAAgB,QAAhBA,EAAXA,EAAaoG,sBAAc,IAAApG,OAAA,EAA3BA,EAA6BgG,KAAI,SAACC,GAAG,OAAAjC,EAAAA,EAAA,GACnDiC,GAAG,IACN7B,KAAM6B,EAAI5B,MAAI,KAGlBgC,KAAK,GACLC,OAAQ,CACNC,OAAQ,CACN,CACEC,UAAWC,EAAAA,EAAeC,OAC1BtC,KAAM,uBACNuC,UAAW,gBACXC,WAAW,EACXC,SAAS,EACTC,aAAc,CACZC,OAAQ,gBAEVC,YAAY,EACZnE,MAAO,iBAAF6C,OAAmBpD,SAAW,QAAPrC,EAAJqC,EAAM4B,aAAK,IAAAjE,OAAA,EAAXA,EAAaoE,MACrC4C,WAAY,CACV,qBACA,UACA,YACA,4BAIFV,OAAQ,CACNW,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IACAC,EAAAA,EAAAA,IAAa3E,EAAwBpC,GACrCgH,EAAAA,GACAC,EAAAA,GACAnE,EAAAA,GACAoE,EAAAA,GACAnC,EAAAA,SAOVrC,IAAAA,cAACyE,EAAAA,EAAQ,KACPzE,IAAAA,cAAC0E,EAAAA,EAAQ,KACP1E,IAAAA,cAAC2E,EAAAA,EAAO,CAACC,SAAS,WAI1B,EAEA1I,EAAY2I,UAAY,CACtB3H,aAAc4H,IAAAA,KACd3H,cAAe2H,IAAAA,OACf1H,OAAQ0H,IAAAA,KACRzH,iBAAkByH,IAAAA,OAClBxH,aAAcwH,IAAAA,QAEhB5I,EAAY6I,aAAe,CACzB7H,aAAc,WAAe,GAG/B,S,kcCxKM8H,EAAgB,SAAC1F,EAAM2F,EAAcC,EAAQC,GAAqB,IAAAC,EAChEC,EAAYJ,IAA8B3F,aAAI,EAAJA,EAAMgG,kBAEhDC,EAAe,GA2BrB,OAzBAF,SAAgB,QAAPD,EAATC,EAAWnE,aAAK,IAAAkE,OAAA,EAAhBA,EAAkBjE,KAChBoE,EAAaC,KACXxF,IAAAA,cAACyF,EAAAA,EAAY,CACXC,IAAI,4BACJlC,UAAU,SACVmC,QAAS,eAAAC,EAAA,OAAMT,EAAiBE,SAAgB,QAAPO,EAATP,EAAWnE,aAAK,IAAA0E,OAAA,EAAhBA,EAAkBzE,GAAG,GACtD,uBAKL+D,GACEK,EAAaC,KACXxF,IAAAA,cAACyF,EAAAA,EAAY,CAACC,IAAI,kBAAkBlC,UAAU,UAC5CxD,IAAAA,cAAC6F,EAAAA,EAAI,CACHlC,UAAU,oCACVH,UAAU,IACVsC,KAAMZ,EACNa,IAAI,sBACJC,OAAO,UACR,gDAKAT,CACT,EAEMU,EAAc,SAAH9J,GAQX,IAAA+J,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAPJC,EAAU9K,EAAV8K,WACAC,EAAO/K,EAAP+K,QACAC,EAAWhL,EAAXgL,YACAC,EAAYjL,EAAZiL,aACA/B,EAASlJ,EAATkJ,UACAJ,EAAY9I,EAAZ8I,aACAE,EAAgBhJ,EAAhBgJ,iBAEA5H,GAA4BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApC8J,EAAM5J,EAAA,GAAE6J,EAAS7J,EAAA,GACxB8J,GAAwB/J,EAAAA,EAAAA,UAAS,CAAC,GAAEgK,GAAA9J,EAAAA,EAAAA,GAAA6J,EAAA,GAA7BjI,EAAIkI,EAAA,GAAEC,GAAOD,EAAA,GAEdE,GAAUP,EACZA,IACAQ,EAAAA,IACAA,EAAAA,EAAAA,MACA,KACEC,GAAWR,EACbA,IACAS,EAAAA,aACAA,EAAAA,EAAAA,eACA,MAEJ7J,EAAAA,EAAAA,YAAU,WACRyJ,GAAQpC,aAAS,EAATA,EAAW/F,KACrB,GAAG,CAAC+F,IAEJ,IAAMyC,GAAe,qCACfC,GAAa,6BACbC,IAAUC,EAAAA,EAAAA,GAA4B,OAADvF,OAClCwF,EAAAA,EAAMC,cACblB,EACAC,GAGF,OACElH,IAAAA,cAAAA,IAAAA,SAAA,MACIqF,EAAU9F,WAAa8F,EAAU+C,SACjCpI,IAAAA,cAACqI,EAAAA,EAAU,KACTrI,IAAAA,cAACsI,EAAAA,EAAc,MACZC,EAAAA,EAAAA,GAAW,CACVC,SAAUR,GACVS,SAAU,wBACVf,QAAAA,GACAE,SAAAA,OAKN5H,IAAAA,cAAAA,IAAAA,SAAA,KACEA,IAAAA,cAACqI,EAAAA,EAAU,KACTrI,IAAAA,cAACsI,EAAAA,EAAc,MACZC,EAAAA,EAAAA,GAAW,CACVC,SAAUR,GACVS,SAAU,gBACVf,QAAAA,GACAE,SAAAA,MAGH3C,EACCjF,IAAAA,cAACsI,EAAAA,EAAc,MACZC,EAAAA,EAAAA,GAAW,CACVC,SAAU,GAAF9F,OAAKsF,GAAO,KAAAtF,OAAIpD,SAAc,QAAV4G,EAAJ5G,EAAMoJ,gBAAQ,IAAAxC,OAAA,EAAdA,EAAgB/E,IACxCsH,SAAUnJ,SAAc,QAAV6G,EAAJ7G,EAAMoJ,gBAAQ,IAAAvC,OAAA,EAAdA,EAAgB9E,KAC1BqG,QAAAA,GACAE,SAAAA,MAIJ5H,IAAAA,cAACsI,EAAAA,EAAc,CAACK,UAAQ,IACrBrJ,SAAc,QAAV8G,EAAJ9G,EAAMoJ,gBAAQ,IAAAtC,OAAA,EAAdA,EAAgB/E,OAAQrB,IAAAA,cAAC4I,EAAAA,EAAQ,CAACC,MAAM,WAG5C5D,GACCjF,IAAAA,cAACsI,EAAAA,EAAc,CAACK,UAAQ,GACrB1D,SAAmB,QAAPoB,EAAZpB,EAAc/D,aAAK,IAAAmF,OAAA,EAAnBA,EAAqB9E,UAK5BvB,IAAAA,cAAC8I,EAAAA,EAAW,KACV9I,IAAAA,cAAC+I,EAAAA,EAAK,KACJ/I,IAAAA,cAACgJ,EAAAA,EAAS,KACRhJ,IAAAA,cAACiJ,EAAAA,EAAQ,CAACzF,UAAU,MAClBxD,IAAAA,cAACkJ,EAAAA,EAAY,CACX1F,UAAU,KACVG,UAAU,gCAETrE,SAAc,QAAVgH,EAAJhH,EAAMoJ,gBAAQ,IAAApC,OAAA,EAAdA,EAAgBjF,OAAQrB,IAAAA,cAAC4I,EAAAA,EAAQ,CAACC,MAAM,WAE3C7I,IAAAA,cAACkJ,EAAAA,EAAY,CAACvF,UAAU,aAAaH,UAAU,MAC5CyB,SAAmB,QAAPsB,EAAZtB,EAAc/D,aAAK,IAAAqF,GAAnBA,EAAqB4C,QACtB7J,SAAsB,QAAlBkH,EAAJlH,EAAMgG,wBAAgB,IAAAkB,GAAO,QAAPA,EAAtBA,EAAwBtF,aAAK,IAAAsF,GAA7BA,EAA+B2C,OAC7BnJ,IAAAA,cAACmJ,EAAAA,EAAM,CACLC,KACEnE,EACIA,SAAmB,QAAPwB,EAAZxB,EAAc/D,aAAK,IAAAuF,OAAA,EAAnBA,EAAqB0C,OAAOE,cAC5B/J,SAAsB,QAAlBoH,EAAJpH,EAAMgG,wBAAgB,IAAAoB,GAAO,QAAPA,EAAtBA,EAAwBxF,aAAK,IAAAwF,OAAA,EAA7BA,EAA+ByC,OAAOE,gBAI9CrJ,IAAAA,cAAC4I,EAAAA,EAAQ,CAACC,MAAM,WAGnB5D,SAAmB,QAAP0B,EAAZ1B,EAAc/D,aAAK,IAAAyF,GAAnBA,EAAqB2C,WACtBhK,SAAsB,QAAlBsH,EAAJtH,EAAMgG,wBAAgB,IAAAsB,GAAO,QAAPA,EAAtBA,EAAwB1F,aAAK,IAAA0F,GAA7BA,EAA+B0C,UAC7BtJ,IAAAA,cAACkJ,EAAAA,EAAY,CAAC1F,UAAU,KAAG,gBAEzBxD,IAAAA,cAACuJ,EAAAA,EAAU,CACTC,KACEvE,EACIA,SAAmB,QAAP4B,EAAZ5B,EAAc/D,aAAK,IAAA2F,OAAA,EAAnBA,EAAqByC,UACrBhK,SAAsB,QAAlBwH,EAAJxH,EAAMgG,wBAAgB,IAAAwB,GAAO,QAAPA,EAAtBA,EAAwB5F,aAAK,IAAA4F,OAAA,EAA7BA,EAA+BwC,aAKzCtJ,IAAAA,cAAC4I,EAAAA,EAAQ,CAACC,MAAM,YAItB7I,IAAAA,cAACgJ,EAAAA,EAAS,CAACS,UAAQ,IACnBzJ,IAAAA,cAACgJ,EAAAA,EAAS,KACRhJ,IAAAA,cAAC0J,EAAAA,EAAQ,CACPC,SAAUC,EAAAA,GAAiBC,MAC3BC,OACE9J,IAAAA,cAAC+J,EAAAA,EAAc,CACb3K,GAAI2I,GACJiC,gBAAiBC,EAAAA,GACjBC,SAAU,SAACC,EAAQC,GAAQ,OAAK9C,EAAU8C,EAAS,EACnDC,WAII,cAHDpF,EACGA,SAAmB,QAAP8B,EAAZ9B,EAAc/D,aAAK,IAAA6F,OAAA,EAAnBA,EAAqBoC,OACrB7J,SAAsB,QAAlB0H,EAAJ1H,EAAMgG,wBAAgB,IAAA0B,OAAA,EAAtBA,EAAwB9F,MAAMiI,UAClB,EAElB,aAAYrB,IAEZ9H,IAAAA,cAACsK,EAAAA,EAAO,CACNC,QAASzC,GACT0C,WAAY,kBAAMC,SAASC,eAAe3C,GAAW,IACrD,WAINV,OAAQA,EACRrC,cAAeA,EACb1F,EACA2F,EACA3F,aAAI,EAAJA,EAAMqL,iBACNxF,SAUpB,EAEAc,EAAYpB,UAAY,CACtBoC,WAAYnC,IAAAA,OACZoC,QAASpC,IAAAA,OACTqC,YAAarC,IAAAA,KACbsC,aAActC,IAAAA,KACdO,UAAWP,IAAAA,OACXG,aAAcH,IAAAA,OACdK,iBAAkBL,IAAAA,MAGpB,U,2FCpNM8F,EAAiB,SAAHzO,GAOd,IAAAM,EAAAE,EANJsK,EAAU9K,EAAV8K,WACAC,EAAO/K,EAAP+K,QACAC,EAAWhL,EAAXgL,YACAC,EAAYjL,EAAZiL,aACA/B,EAASlJ,EAATkJ,UACAJ,EAAY9I,EAAZ8I,aAEA1H,GAAwBC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7B+B,EAAI7B,EAAA,GAAEgK,EAAOhK,EAAA,GACduK,GAAUC,EAAAA,EAAAA,GAA4B,OAADvF,OAClCwF,EAAAA,EAAMC,cACblB,EACAC,GAEIQ,EAAUP,EACZA,IACAQ,EAAAA,IACAA,EAAAA,EAAAA,MACA,KACEC,EAAWR,EACbA,IACAS,EAAAA,aACAA,EAAAA,EAAAA,eACA,MAEJ7J,EAAAA,EAAAA,YAAU,WAAM,IAAA6M,EAEVpD,EADJxC,IAEYI,SAAe,QAANwF,EAATxF,EAAW/F,YAAI,IAAAuL,OAAA,EAAfA,EAAiBvF,kBAC/B,GAAG,CAACD,EAAWJ,IAEf,IAAM6F,EAAiB,SAACC,GAAI,OAC1BpI,EAAAA,EAAAA,GAAIqI,MAAa,EAAPD,IAAW/H,KAAI,SAACiI,EAAGvF,GAAG,OAAK1F,IAAAA,cAAC4I,EAAAA,EAAQ,CAACC,MAAM,QAAQnD,IAAKA,GAAO,GAAC,EAItEwF,EAAgB,CACpB3J,QAAS,UACT4J,QAAS,kBAJcnL,IAAAA,cAACuJ,EAAAA,EAAU,CAACC,KAAMlK,SAAW,QAAPkB,EAAJlB,EAAM4B,aAAK,IAAAV,OAAA,EAAXA,EAAyB,YAAjD,IAAHA,CAIa,EAC3B,UAAW,eAAAC,EAAA,OACTnB,SAAW,QAAPmB,EAAJnB,EAAM4B,aAAK,IAAAT,GAAiB,QAAjBA,EAAXA,EAA2B,mBAAC,IAAAA,OAAA,EAA5BA,EAA8BuC,KAAI,SAACoI,EAAYC,GAAK,OAClDrL,IAAAA,cAAA,OAAK0F,IAAK2F,GAAQD,EAAiB,GACnC,EACJE,QAAS,eAAA5K,EAAA,OAAwB,OAAlB6K,EAAAA,SAAkB,IAAlBA,EAAAA,QAAkB,EAAlBA,EAAAA,GAAqBjM,SAAW,QAAPoB,EAAJpB,EAAM4B,aAAK,IAAAR,OAAA,EAAXA,EAA4B,aAAE,EAElE0B,YAAa,eAEToJ,EAAsB,CAC1B,iBAAkB,eAAA7K,EAAA,OAAMrB,SAAW,QAAPqB,EAAJrB,EAAM4B,aAAK,IAAAP,OAAA,EAAXA,EAAa0B,aAAa,GAE9CoJ,EAAiB,CACrB5J,SAAU,eAAAjB,EAAA,OAAMtB,SAAW,QAAPsB,EAAJtB,EAAM4B,aAAK,IAAAN,GAAW,QAAXA,EAAXA,EAAac,iBAAS,IAAAd,OAAA,EAAtBA,EAAwBiB,QAAQ,EAChD,UAAW,eAAAzF,EAAA,OAAMkD,SAAW,QAAPlD,EAAJkD,EAAM4B,aAAK,IAAA9E,GAAW,QAAXA,EAAXA,EAAasF,iBAAS,IAAAtF,OAAA,EAAtBA,EAAwBuF,MAAM,GAoB3C+J,EAAgB,CACpB,4BAnBkC,WAAM,IAAArP,EAAAC,EACxC,OAAOiM,EAAAA,EAAAA,GAAW,CAChBC,SAAU,GAAF9F,OAAKsF,EAAO,KAAAtF,OAAIpD,SAAW,QAAPjD,EAAJiD,EAAM4B,aAAK,IAAA7E,OAAA,EAAXA,EAAasP,WAAU,cAAAjJ,OAAapD,SAAW,QAAPhD,EAAJgD,EAAM4B,aAAK,IAAA5E,OAAA,EAAXA,EAAa6E,GAAE,wBAC3EsH,SAAUnJ,aAAI,EAAJA,EAAMsM,oBAChBlE,QAAAA,EACAE,SAAAA,GAEJ,EAaE,iBAX6B,WAAM,IAAArL,EAAAC,EACnC,OAAO+L,EAAAA,EAAAA,GAAW,CAChBC,SAAU,GAAF9F,OAAKsF,EAAO,KAAAtF,OAAIpD,SAAW,QAAP/C,EAAJ+C,EAAM4B,aAAK,IAAA3E,OAAA,EAAXA,EAAaoP,WAAU,cAAAjJ,OAAapD,SAAW,QAAP9C,EAAJ8C,EAAM4B,aAAK,IAAA1E,OAAA,EAAXA,EAAa2E,GAAE,iBAC3EsH,SAAUnJ,aAAI,EAAJA,EAAMgF,SAChBoD,QAAAA,EACAE,SAAAA,GAEJ,GAOMiE,EAAoB,CACxBC,MAAO,kBAAMxM,aAAI,EAAJA,EAAMyM,YAAY,EAC/BC,QAAS,kBAAM1M,aAAI,EAAJA,EAAM2M,cAAc,EACnCC,QAAS,kBAAM5M,aAAI,EAAJA,EAAM6M,cAAc,GAGjC7M,SAAW,QAAP7C,EAAJ6C,EAAM4B,aAAK,IAAAzE,GAAW,QAAXA,EAAXA,EAAaiF,iBAAS,IAAAjF,GAAtBA,EAAwB2P,WAC1BlB,EAAc,oBAAsB,eAAAxO,EAAA,OAAM4C,SAAW,QAAP5C,EAAJ4C,EAAM4B,aAAK,IAAAxE,GAAW,QAAXA,EAAXA,EAAagF,iBAAS,IAAAhF,OAAA,EAAtBA,EAAwB0P,QAAQ,GAGxE9M,SAAW,QAAP3C,EAAJ2C,EAAM4B,aAAK,IAAAvE,GAAQ,QAARA,EAAXA,EAAa0P,cAAM,IAAA1P,GAAnBA,EAAqB2P,eACvBpB,EAAc,sBAAwB,eAAAtO,EAAA,OACpC0C,SAAW,QAAP1C,EAAJ0C,EAAM4B,aAAK,IAAAtE,GAAQ,QAARA,EAAXA,EAAayP,cAAM,IAAAzP,OAAA,EAAnBA,EAAqB0P,YAAY,GAGrC,IAAMC,EAAgB,SAACC,GAAmB,OACxClN,EACImN,OAAOC,QAAQF,GAAqBxJ,KAAI,SAAA2J,EAAiBtB,GAAU,IAAAxO,EAAAC,EAAAyD,GAAA7C,EAAAA,EAAAA,GAAAiP,EAAA,GAAzBC,EAAKrM,EAAA,GAAEsM,EAAKtM,EAAA,GACpD,OACEP,IAAAA,cAAC8M,EAAAA,SAAQ,CAACpH,IAAK2F,GACbrL,IAAAA,cAACkJ,EAAAA,EAAY,CACXvF,UAAU,gBACVH,UAAWuJ,EAAAA,EAAqBC,IAE/BJ,GAEQ,qBAAVA,GACS,uBAAVA,GACW,YAAVA,GAAuBC,IACtB7M,IAAAA,cAACkJ,EAAAA,EAAY,CAAC1F,UAAWuJ,EAAAA,EAAqBE,IAC5CjN,IAAAA,cAACkN,EAAAA,GAAa,CACZC,SAAS,OACTC,SAAS,SACTC,QAAQ,YACR1J,UAAU,uBACVvE,GAAE,GAAAsD,OAAKkK,EACJU,QAAQ,OAAQ,KAChBjE,cAAa,oBAEE,mBAAVwD,EACJA,KAAW,eACXvN,SAAW,QAAPzC,EAAJyC,EAAM4B,aAAK,IAAArE,OAAA,EAAXA,EAAcgQ,KAAU,gBAIhC7M,IAAAA,cAACkJ,EAAAA,EAAY,CACXvF,UAAU,uBACVH,UAAWuJ,EAAAA,EAAqBE,IAEd,mBAAVJ,EACQ,IAAZA,IACE,EACAA,KAAW,eACbvN,SAAW,QAAPxC,EAAJwC,EAAM4B,aAAK,IAAApE,OAAA,EAAXA,EAAc+P,KAAU,eAKtC,IACA,IAAI,EAEV,OACE7M,IAAAA,cAAC8I,EAAAA,EAAW,CAACnF,UAAU,yBACrB3D,IAAAA,cAACuN,EAAAA,EAAI,CAACC,KAAM,IACVxN,IAAAA,cAACyN,EAAAA,EAAQ,CAACD,KAAM,GACdxN,IAAAA,cAAC6F,EAAAA,EAAI,CAACrC,UAAWkK,EAAAA,EAAaC,IAC3B1I,EAAe,UAAY,qBAE9BjF,IAAAA,cAACiJ,EAAAA,EAAQ,CAACzF,UAAWoK,EAAAA,EAAiBC,IACnCtB,EAAcrB,IAAkBJ,EAAe,IAElD9K,IAAAA,cAAC6F,EAAAA,EAAI,CAACrC,UAAWkK,EAAAA,EAAaC,IAAI,qBAClC3N,IAAAA,cAACiJ,EAAAA,EAAQ,CAACzF,UAAWoK,EAAAA,EAAiBC,IACnCtB,EAAcd,IAAmBX,EAAe,IAEnD9K,IAAAA,cAACiJ,EAAAA,EAAQ,CAACzF,UAAWoK,EAAAA,EAAiBC,IACnCtB,EAAcf,IAAwBV,EAAe,KAG1D9K,IAAAA,cAACyN,EAAAA,EAAQ,CAACD,KAAM,IAChBxN,IAAAA,cAACyN,EAAAA,EAAQ,CAACD,KAAM,GACdxN,IAAAA,cAAC6F,EAAAA,EAAI,CAACrC,UAAWkK,EAAAA,EAAaC,IAAI,aAClC3N,IAAAA,cAACiJ,EAAAA,EAAQ,CAACzF,UAAWoK,EAAAA,EAAiBC,IACnCtB,EAAcb,IAAkBZ,EAAe,IAElD9K,IAAAA,cAAC6F,EAAAA,EAAI,CAACrC,UAAWkK,EAAAA,EAAaC,IAAI,iCAClC3N,IAAAA,cAACiJ,EAAAA,EAAQ,CAACzF,UAAWoK,EAAAA,EAAiBC,IACnCtB,EAAcV,IAAsBf,EAAe,MAMhE,EAEAF,EAAe/F,UAAY,CACzBoC,WAAYnC,IAAAA,OACZoC,QAASpC,IAAAA,OACTqC,YAAarC,IAAAA,KACbsC,aAActC,IAAAA,KACdO,UAAWP,IAAAA,OACXG,aAAcH,IAAAA,QAGhB,U,kDC5LMgJ,GAAiB,CACrB,CACElB,MAAO,SACPxD,KAAM,WACN2E,QAAS,CACP,CAAEC,OAAQ,WAAYnB,MAAO,YAC7B,CAAEmB,OAAQ,UAAWnB,MAAO,WAC5B,CAAEmB,OAAQ,QAASnB,MAAO,SAC1B,CAAEmB,OAAQ,QAASnB,MAAO,cAK1BoB,GAAc,CAClB,CACEpO,MAAO,UACPuJ,KAAM,UACN8E,MAAM,EACNC,iBAAkB,EAACC,EAAAA,GAAAA,WAAU,MAE/B,CACEvO,MAAO,SACPuJ,KAAM,aACN8E,MAAM,EACNC,iBAAkB,EAACC,EAAAA,GAAAA,WAAU,MAE/B,CACEvO,MAAO,qBACPuJ,KAAM,qBACN8E,MAAM,EACNC,iBAAkB,EAACC,EAAAA,GAAAA,WAAU,MAE/B,CACEvO,MAAO,UACPuJ,KAAM,aACN8E,MAAM,EACNC,iBAAkB,EAACC,EAAAA,GAAAA,WAAU,MAE/B,CACEvO,MAAO,SACPuJ,KAAM,SACN8E,MAAM,EACNC,iBAAkB,EAACC,EAAAA,GAAAA,WAAU,OAI3BC,GAAa,SACjB/O,EACAgP,EACAC,EACAtH,EACAC,EACAQ,EACAE,GAEA,IAAMI,GAAUC,EAAAA,EAAAA,GAA4B,OAADvF,OAClCwF,EAAAA,EAAMC,cACblB,EACAC,GAGF,OAAO5H,aAAI,EAAJA,EAAM0D,KAAI,SAAC9B,GAAK,MAAM,CAC3BsN,QAAS,CACPpP,GAAI8B,aAAK,EAALA,EAAOC,GACXsN,YAAavN,aAAK,EAALA,EAAOiI,OACpBjE,OAAQhE,aAAK,EAALA,EAAOyJ,iBACf4D,mBAAAA,EACAG,oBAAqBxN,EAAMK,SAE7BoN,gBAAiB,CACfzN,aAAK,EAALA,EAAOK,QACPqN,EAAAA,GAAgB1N,aAAK,EAALA,EAAO2N,WACvB3N,aAAK,EAALA,EAAO4N,UACP5N,aAAK,EAALA,EAAOiI,QAET4F,MAAO,CACL,CACElP,OAAO0I,EAAAA,EAAAA,GAAW,CAChBC,SAAU,GAAF9F,OAAKsF,EAAO,KAAAtF,OAAI4L,EAAU,cAAA5L,OAAaxB,EAAMC,GAAE,YACvDsH,SAAUvH,aAAK,EAALA,EAAOK,QACjBmG,QAAAA,EACAE,SAAAA,KAGJ,CACE/H,MAAO+O,EAAAA,GAAgB1N,aAAK,EAALA,EAAO2N,YAEhC,CACEhP,MAAOqB,SAAAA,EAAO8N,eACZhP,IAAAA,cAACsK,EAAAA,EAAO,CAACC,QAASvK,IAAAA,cAAA,WAAMkB,EAAM8N,iBAC5BhP,IAAAA,cAAA,aAAOiP,EAAAA,EAAAA,IAAe/N,EAAM8N,eAAgB,EAAG,KAGjDhP,IAAAA,cAAC6F,EAAAA,EAAI,KAAC,gBAGV,CACEhG,MAAOG,IAAAA,cAACuJ,EAAAA,EAAU,CAACC,KAAMtI,aAAK,EAALA,EAAO4N,aAElC,CACEjP,MAAOG,IAAAA,cAACmJ,EAAAA,EAAM,CAACC,KAAMlI,aAAK,EAALA,EAAOiI,OAAOE,kBAGxC,GACH,EAEM6F,GAAmB,SAAH/S,GAQhB,IAAA0O,EAAAsE,EAPJlI,EAAU9K,EAAV8K,WACAC,EAAO/K,EAAP+K,QACAE,EAAYjL,EAAZiL,aACAD,EAAWhL,EAAXgL,YACA7J,EAAYnB,EAAZmB,aACA+H,EAASlJ,EAATkJ,UACAF,EAAgBhJ,EAAhBgJ,iBAEMiK,EAAa/J,SAAe,QAANwF,EAATxF,EAAW/F,YAAI,IAAAuL,GAAU,QAAVA,EAAfA,EAAiBnC,gBAAQ,IAAAmC,OAAA,EAAzBA,EAA2B1J,GACxCoN,EAAqBlJ,SAAe,QAAN8J,EAAT9J,EAAW/F,YAAI,IAAA6P,GAAU,QAAVA,EAAfA,EAAiBzG,gBAAQ,IAAAyG,OAAA,EAAzBA,EAA2B5N,QAEhDmG,EAAUP,EACZA,IACAQ,EAAAA,IACAA,EAAAA,EAAAA,MACA,KACEC,EAAWR,EACbA,IACAS,EAAAA,aACAA,EAAAA,EAAAA,eACA,KAEJ7I,GAA0CC,EAAAA,GAAAA,GAAO,CAC/CC,IAAK,SAAAyN,GAAA,IAAG0C,EAAK1C,EAAL0C,MAAK,OACXC,EAAAA,EAAAA,IAAwB,CACtBF,WAAYA,EACZC,MAAAA,GACA,EACJE,aAAa,IACbC,GAAA9R,EAAAA,EAAAA,GAAAsB,EAAA,GAPKK,EAAQmQ,EAAA,GAAEC,EAAqBD,EAAA,GAS9BlQ,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,UAAW6I,EAAa/I,EAAb+I,SAuCzB,OACEpI,IAAAA,cAAA,WAAS2D,UAAU,6DACjB3D,IAAAA,cAAC0P,EAAAA,EAAY,CACXtI,aAAcA,EACdD,YAAaA,EACb7J,aAAcA,EACdqS,eAAe,EACfC,UAAU,EACVC,QAAS/B,GACTgC,cAAeL,EACfM,UAAW,CACTC,MAAO1Q,aAAI,EAAJA,EAAM0Q,MACb1Q,KAAMA,aAAI,EAAJA,EAAMA,KACZC,UAAAA,EACA6I,SAAAA,GAEF6F,YAAaA,GACblD,KAAMsD,GACJ/O,aAAI,EAAJA,EAAMA,KACN8P,EACAb,EACAtH,EACAC,EACAQ,EACAE,GAEFqI,eA/DiB,SAACC,GAAY,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAchCC,EAAAC,EAbIlL,EAAe,GA+BrB,OA9BmB,QAAnB4K,EAAID,EAAQ1B,eAAO,IAAA2B,GAAfA,EAAiBjL,QACnBK,EAAaC,KAAK,CAChB3F,MAAO,WACP8F,QAAS,SAACwE,EAAQuG,EAAQR,GACxBS,OAAOC,KAAKV,EAAQ1B,QAAQtJ,OAC9B,KAK+B,aAAlB,QAAfkL,EAAAF,EAAQ1B,eAAO,IAAA4B,OAAA,EAAfA,EAAiB3B,cACgB,WAAlB,QAAf4B,EAAAH,EAAQ1B,eAAO,IAAA6B,OAAA,EAAfA,EAAiB5B,eAEjBlJ,EAAaC,KAAK,CAChB3F,MAAO,eACP8F,QAAS,SAACwE,EAAQuG,EAAQR,GACxB/K,EAAiB+K,EAAQ1B,QAAQpP,GACnC,EACAiL,YACE6F,SAAgB,QAATM,EAAPN,EAAS1B,eAAO,IAAAgC,OAAA,EAAhBA,EAAkBjC,uBAClB2B,SAAgB,QAATO,EAAPP,EAAS1B,eAAO,IAAAiC,OAAA,EAAhBA,EAAkB/B,uBAIa,cAAlB,QAAf4B,EAAAJ,EAAQ1B,eAAO,IAAA8B,OAAA,EAAfA,EAAiB7B,cAA6C,QAAnB8B,EAAIL,EAAQ1B,eAAO,IAAA+B,GAAfA,EAAiBnR,IAClEmG,EAAaC,KAAK,CAChB3F,MAAO,KAIJ0F,CACT,EA+BMsL,mBA9BqB,SAACX,GAAO,IAAAY,EAAA,MACA,cAAlB,QAAfA,EAAAZ,EAAQ1B,eAAO,IAAAsC,OAAA,EAAfA,EAAiBrC,YAA0B,EA8BvCsC,YAAa,CAAE1F,MAAO,EAAG2F,UAAW,UAI5C,EACA9B,GAAiBrK,UAAY,CAC3BoC,WAAYnC,IAAAA,OACZoC,QAASpC,IAAAA,OACTsC,aAActC,IAAAA,KACdqC,YAAarC,IAAAA,KACbxH,aAAcwH,IAAAA,KACdO,UAAWP,IAAAA,OACXmM,SAAUnM,IAAAA,OACVsK,WAAYtK,IAAAA,OACZuJ,WAAYvJ,IAAAA,KACZK,iBAAkBL,IAAAA,MAGpB,Y,wCCpOMgJ,GAAiB,CAAC,CAAElB,MAAO,OAAQxD,KAAM,SAEzC6E,GAAc,CAClB,CACEpO,MAAO,OACPuJ,KAAM,OACN8E,MAAM,EACNC,iBAAkB,EAACC,EAAAA,GAAAA,WAAU,MAE/B,CACEvO,MAAO,UACPuJ,KAAM,UACN8E,MAAM,EACNC,iBAAkB,EAACC,EAAAA,GAAAA,WAAU,MAE/B,CACEvO,MAAO,UACPuJ,KAAM,UACN8E,MAAM,EACNC,iBAAkB,EAACC,EAAAA,GAAAA,WAAU,OAK3BC,GAAa,SAAHlS,GAKV,IAJJ+U,EAAY/U,EAAZ+U,aACAC,EAAiBhV,EAAjBgV,kBACAC,EAAajV,EAAbiV,cAWA,OAPc,IAHPjV,EAAPkV,QAIMF,EAAkBG,QAChB,SAACC,GAAI,OACHH,aAAa,EAAbA,EAAeE,QAAO,SAACpQ,GAAK,OAAKqQ,EAAKnQ,OAASF,EAAMG,IAAI,IAAEmQ,QAC3D,CAAC,IAELL,GACSnO,KAAI,SAACyO,GAAW,MAAM,CACnC9C,gBAAiB,CACf8C,aAAW,EAAXA,EAAarQ,KACbqQ,aAAW,EAAXA,EAAanQ,QACbmQ,aAAW,EAAXA,EAAanP,SAGfyM,MAAO,CACL0C,aAAW,EAAXA,EAAarQ,KACbqQ,aAAW,EAAXA,EAAanQ,QACbmQ,aAAW,EAAXA,EAAanP,QAEb,CACEzC,MACEG,IAAAA,cAAA,KACE8F,KAAI,sDAAApD,OAAwDwO,EAAY,iBAAAxO,OAAgB+O,aAAW,EAAXA,EAAarQ,KAAI,KAAAsB,OAAI+O,aAAW,EAAXA,EAAanQ,QAAO,KAAAoB,OAAI+O,aAAW,EAAXA,EAAanP,QAAO,KAAAI,OAAI+O,aAAW,EAAXA,EAAaC,KAAI,qBAC9K1L,OAAO,SACPD,IAAI,uBAEJ/F,IAAAA,cAAC2R,GAAAA,GAAM,CACLtE,QAAQ,OACRuE,KAAK,KACLC,KAAM7R,IAAAA,cAAC8R,GAAAA,GAAmB,MAC1BC,aAAa,SACd,uBAOV,GACH,EAEMC,GAAc,CAClB,EAAG,aACH,EAAG,OAGCC,GAAc,CAClBC,WAAY,EACZC,IAAK,GAGDC,GAAmB,SAAHzF,GAMhB,IAAAtG,EAAAE,EAAA8L,EAAAC,EAAAC,EALJtL,EAAU0F,EAAV1F,WACAE,EAAWwF,EAAXxF,YACA7J,EAAYqP,EAAZrP,aACA8J,EAAYuF,EAAZvF,aACAnC,EAAY0H,EAAZ1H,aAEMyC,EAAUP,EACZA,IACAQ,EAAAA,IACAA,EAAAA,EAAAA,MACA,KACIa,GAAalL,EAAeA,KAAiBkV,EAAAA,EAAAA,OAA7ChK,SACFZ,EAAWR,EACbA,IACAS,EAAAA,aACAA,EAAAA,EAAAA,eACA,KACA4K,EAAkBjK,EAClBvB,GAAcuB,EAASkK,WAAWzL,KAEpCwL,EAAkBjK,EAASmK,MAAM1L,EAAWuK,SAG9C,IAAMoB,EAAWH,EAAgBI,MAAM,KACjCC,EAAoC,IAApBF,EAASpB,OAAeS,GAAYW,EAAS,IAAM,EAEnE1B,EAAejM,SAAmB,QAAPoB,EAAZpB,EAAc/D,aAAK,IAAAmF,GAAc,QAAdA,EAAnBA,EAAqB9D,oBAAY,IAAA8D,OAAA,EAAjCA,EAAmCwM,MAAM,KAAK,GAAGF,MACpE,GACC,GAGHpV,GAAsCC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CkU,EAAWhU,EAAA,GAAEsV,EAActV,EAAA,GAClC8J,GAAsC/J,EAAAA,EAAAA,UAASsV,GAActL,GAAA9J,EAAAA,EAAAA,GAAA6J,EAAA,GAAtDyL,EAAWxL,EAAA,GAAEyL,EAAczL,EAAA,GA4BlC,OA1BAxJ,EAAAA,EAAAA,YAAU,WACR+U,EAAe9N,EACjB,GAAG,CAACA,KAEJjH,EAAAA,EAAAA,YAAU,WACR4U,EAAS,KAAOZ,GAAYgB,IAAgBC,EAAeH,EAC7D,GAAG,CAACF,IAoB2C,aAAxC3N,SAAmB,QAAPsB,EAAZtB,EAAc/D,aAAK,IAAAqF,GAAQ,QAARA,EAAnBA,EAAqB8F,cAAM,IAAA9F,OAAA,EAA3BA,EAA6B4C,QAClCnJ,IAAAA,cAAA,WAAS2D,UAAU,6DACjB3D,IAAAA,cAAC0P,EAAAA,EAAY,CACXtI,aAAcA,EACdD,YAAaA,EACb7J,aAAcA,EACdqS,eAAe,EACfE,QAAS/B,GACTiC,UAAW,CACTC,MACkB,IAAhBgD,EACIvB,aAAW,EAAXA,EAAa7F,oBACb6F,aAAW,EAAXA,EAAanN,SACnB/E,WAAW,EACX6I,UAAU,GAEZ6F,YAAaA,GACblD,KACE0G,SAAkB,QAAPY,EAAXZ,EAAavQ,aAAK,IAAAmR,GAAQ,QAARA,EAAlBA,EAAoBhG,cAAM,IAAAgG,GAA1BA,EAA4Ba,kBACxB7E,GAAW,CACT6C,aAAcA,EACdC,kBACEM,SAAkB,QAAPa,EAAXb,EAAavQ,aAAK,IAAAoR,GAAQ,QAARA,EAAlBA,EAAoBjG,cAAM,IAAAiG,OAAA,EAA1BA,EAA4BY,kBAC9B9B,cAAeK,SAAkB,QAAPc,EAAXd,EAAavQ,aAAK,IAAAqR,OAAA,EAAlBA,EAAoBxP,SACnCsO,QAAS2B,IAEX,GAEN/C,eAAgB,iBAAM,EAAE,EACxBY,mBAAoB,kBAAM,CAAI,EAC9BE,YAAa,CAAE1F,MAAO,EAAG2F,UAAW,OACpCmC,aAAc,CACZ,CAAEtT,MAAO,aAAc6F,IAAK,GAC5B,CAAE7F,MAAO,MAAO6F,IAAK,IAEvB0N,aArDoB,SAACC,GAAgB,IAAAC,EACnCC,EAAwB,QAAdD,EAAGV,EAAS,UAAE,IAAAU,OAAA,EAAXA,EAAajK,cAEhC,GADA4J,EAAeI,GACI,aAAfE,EAA2B,CACL,IAApBX,EAASpB,OACXoB,EAAS,GAAKZ,GAAYqB,GAE1BT,EAASpN,KAAKwM,GAAYqB,IAE5B,IAAMG,GAAMC,EAAAA,EAAAA,GAAiBb,EAASc,KAAK,KAAMzM,GAC7CG,EACFQ,EAAS4L,GAET9L,EAAQlC,KAAKgO,EAEjB,CACF,EAsCMG,YAAaX,EACbY,iBAAkB,CAChB/B,KAAM,SACNhS,MAAO,6BAKbG,IAAAA,cAAA,WAAS2D,UAAU,6DACjB3D,IAAAA,cAAC6T,GAAAA,EAAK,CACJC,QAAQ,QACRjU,MAAM,qCACNkU,KAAK,2EACLC,cAAe,KACfC,iBAAkB,KAI1B,EAEA7B,GAAiBvN,UAAY,CAC3BoC,WAAYnC,IAAAA,OACZqC,YAAarC,IAAAA,KACbxH,aAAcwH,IAAAA,KACdsC,aAActC,IAAAA,KACdG,aAAcH,IAAAA,QAGhB,YC1MA,IAAMoP,GAAO,CACXC,QAAS,EACT7P,SAAU,EACV8P,SAAU,GAGNC,GAAkB,SAAHlY,GAUf,IATJ8K,EAAU9K,EAAV8K,WACAC,EAAO/K,EAAP+K,QACAC,EAAWhL,EAAXgL,YACA7J,EAAYnB,EAAZmB,aACA8J,EAAYjL,EAAZiL,aACA/B,EAASlJ,EAATkJ,UACAF,EAAgBhJ,EAAhBgJ,iBACAF,EAAY9I,EAAZ8I,aACA1F,EAASpD,EAAToD,UAEMmI,EAAUP,EACZA,IACAQ,EAAAA,IACAA,EAAAA,EAAAA,MACA,KACIa,GAAalL,EAAeA,KAAiBkV,EAAAA,EAAAA,OAA7ChK,SACJiK,EAAkBjK,EAClBvB,GAAcuB,EAASkK,WAAWzL,KAEpCwL,EAAkBjK,EAASmK,MAAM1L,EAAWuK,SAG9C,IAAM5J,EAAWR,EACbA,IACAS,EAAAA,aACAA,EAAAA,EAAAA,eACA,KACJtK,GAAwCC,EAAAA,EAAAA,UAAS0W,GAAKC,SAAQ1W,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvD+W,EAAY7W,EAAA,GAAE8W,EAAe9W,EAAA,GAC9B+W,EAAYvP,EAAe,WAAa,cAUxCwP,GAAiBC,EAAAA,EAAAA,IAAYjC,EARtB,CACX,UACA,kBACA,cACA,eACA,WACA,mBA2BF,OANAzU,EAAAA,EAAAA,YAAU,WACRyW,EAAyB,SACrBF,EAAgBL,GAAKO,EAAyB,WAC9CF,EAAgBL,GAAKO,EAA4B,aACvD,GAAG,CAACjM,IAGFxI,IAAAA,cAAAA,IAAAA,SAAA,MACIqF,EAAU9F,WAAa8F,EAAU+C,SACjCpI,IAAAA,cAAC2U,GAAAA,EAAU,CACT9C,KAAK,WACLhS,MAAM,kBACNkU,KAAK,oEACLC,cAAe,CACbY,KAAM,wBACN9O,KAAMoC,EAAAA,EAAMC,cAEd8L,iBAAkB,KAGpBjU,IAAAA,cAAA,OAAK2D,UAAU,mCACb3D,IAAAA,cAAC6U,EAAAA,EAAI,CACHlR,UAAU,aACVmR,UAAWR,EACXS,SAzCa,SAAC5K,EAAQ6K,GAC9B,IAAMC,EACS,IAAbD,EAAiB,UAAY/P,EAAe,WAAa,WAE3DwP,EAAeD,GAAaS,EAE5B,IAAMzB,GAAMC,EAAAA,EAAAA,GAAiBgB,EAAeS,WAAYjO,GAEpDG,EACFQ,EAAS4L,GAET9L,EAAQlC,KAAKgO,GAGfe,EAAgBS,EAClB,GA4BUhV,IAAAA,cAACmV,EAAAA,EAAG,CACFC,SAAUlB,GAAKC,QACftU,MAAOG,IAAAA,cAACqV,EAAAA,EAAY,KAAC,YAErBrV,IAAAA,cAAC4K,EAAc,CACb3D,WAAYA,EACZC,QAASA,EACTC,YAAaA,EACbC,aAAcA,EACd/B,UAAWA,EACXJ,aAAcA,KAGjB1F,EACCS,IAAAA,cAACmV,EAAAA,EAAG,CACFtV,MACEG,IAAAA,cAACqV,EAAAA,EAAY,KACXrV,IAAAA,cAAC4I,EAAAA,EAAQ,CAACC,MAAM,YAIpB5D,EACFjF,IAAAA,cAACmV,EAAAA,EAAG,CACFC,SAAUlB,GAAK5P,SACfzE,MAAOG,IAAAA,cAACqV,EAAAA,EAAY,KAAC,aAErBrV,IAAAA,cAACoS,GAAgB,CACfnL,WAAYA,EACZC,QAASA,EACTE,aAAcA,EACdD,YAAaA,EACb7J,aAAcA,EACd2H,aAAcA,KAIlBjF,IAAAA,cAACmV,EAAAA,EAAG,CACFC,SAAUlB,GAAKE,SACfvU,MAAOG,IAAAA,cAACqV,EAAAA,EAAY,KAAC,aAErBrV,IAAAA,cAACsV,GAAe,CACdrO,WAAYA,EACZC,QAASA,EACTE,aAAcA,EACdD,YAAaA,EACb7J,aAAcA,EACd+H,UAAWA,EACXF,iBAAkBA,OASpC,EAEAkP,GAAgBxP,UAAY,CAC1BoC,WAAYnC,IAAAA,OACZoC,QAASpC,IAAAA,OACTqC,YAAarC,IAAAA,KACbxH,aAAcwH,IAAAA,KACdsC,aAActC,IAAAA,KACdO,UAAWP,IAAAA,OACXG,aAAcH,IAAAA,OACdK,iBAAkBL,IAAAA,KAClBvF,UAAWuF,IAAAA,MAGb,Y,ylBC9JA,IAAMyQ,GAAc,SAAHpZ,GAQX,IAPJ8K,EAAU9K,EAAV8K,WACAC,EAAO/K,EAAP+K,QACAsO,EAAUrZ,EAAVqZ,WACArO,EAAWhL,EAAXgL,YACA7J,EAAYnB,EAAZmB,aACA8J,EAAYjL,EAAZiL,aACA/J,EAAgBlB,EAAhBkB,iBAEAsP,EAAoC6I,EAChCA,IACAC,EAAAA,GACAA,EAAAA,EAAAA,KACA,KAJIC,EAAO/I,EAAP+I,QAASC,EAAchJ,EAAdgJ,eAKXjO,EAAUP,EACZA,IACAQ,EAAAA,IACAA,EAAAA,EAAAA,MACA,KACJpH,EAA6BjD,EACzBA,IACAkV,EAAAA,IACAA,EAAAA,EAAAA,MACA,KAJIhK,EAAQjI,EAARiI,SAAUoN,EAAMrV,EAANqV,OAKZhO,EAAWR,EACbA,IACAS,EAAAA,aACAA,EAAAA,EAAAA,eACA,KACJtK,GAAwCC,EAAAA,EAAAA,UAAS,CAC/C6J,QAAQ,EACRwO,SAAU,OACVpY,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAHKuY,EAAYrY,EAAA,GAAEsY,EAAetY,EAAA,GAIpC8J,GAAwC/J,EAAAA,EAAAA,UAAS,MAAKgK,GAAA9J,EAAAA,EAAAA,GAAA6J,EAAA,GAA/CtC,EAAYuC,EAAA,GAAEwO,EAAexO,EAAA,GAEpCxI,GAAyCC,EAAAA,GAAAA,GAAO,CAC9CC,IAAK+W,EAAAA,GACL7W,GAAIuW,EAAiB,GAAHjT,OAAMgT,EAAO,cAAAhT,OAAaiT,GAAc,GAAAjT,OAAQgT,GAClEnG,aAAa,IACbC,GAAA9R,EAAAA,EAAAA,GAAAsB,EAAA,GAJKK,EAAQmQ,EAAA,GAAE0G,EAAoB1G,EAAA,GAM7BlQ,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,UAER4W,EAAmB,CACvB3N,SAAAA,EACAoN,QAAQQ,EAAAA,EAAAA,IAAiB,qBAAqB,EAAMR,IAGhDzQ,EAAmB,SAAC/F,GACpBgI,EACFQ,EAAQ5G,GAAAA,GAAC,CAAC,EAAImV,GAAgB,IAAE7I,SAAS,KAEzC5F,EAAQlC,KAAIxE,GAAC,CAAC,EAAImV,IAEpBJ,GAAgB,SAACM,GAAS,OAAArV,GAAAA,GAAA,GACrBqV,GAAS,IACZhP,QAASgP,EAAU9W,UACnBsW,SAAUzW,GAAE,GAEhB,GAEApB,EAAAA,EAAAA,YAAU,WAEJgY,EADJL,EACoBrW,aAAI,EAAJA,EAAMgX,aACN,KACtB,GAAG,CAACjX,EAAUsW,KAEd3X,EAAAA,EAAAA,YAAU,WACRkY,GACF,GAAG,CAACR,EAASC,IAEb,IAAMvY,EAAM,eAAAmZ,GAAAtY,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,OAAAD,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACP2X,IAAsB,wBAAA7X,EAAAU,OAAA,GAAAZ,EAAA,KAC7B,kBAFW,OAAAoY,EAAAC,MAAA,KAAAC,UAAA,KAIZ,OACEzW,IAAAA,cAAC8M,EAAAA,SAAQ,KACP9M,IAAAA,cAAC0W,EAAAA,EAAU,CAAC/S,UAAU,cACpB3D,IAAAA,cAAC2W,EAAAA,EAAK,CAACC,WAAS,GACd5W,IAAAA,cAAC6W,EAAAA,EAAS,KACR7W,IAAAA,cAACiG,EAAW,CACVgB,WAAYA,EACZC,QAASA,EACTC,YAAaA,EACbC,aAAcA,EACd/B,UAAWhG,EACX4F,aAAcA,EACdE,iBAAkBA,OAK1BnF,IAAAA,cAACqU,GAAe,CACdpN,WAAYA,EACZC,QAASA,EACTC,YAAaA,EACb7J,aAAcA,EACd8J,aAAcA,EACd/B,UAAWhG,EACX4R,SAAUyE,EACVzQ,aAAcA,EACdE,iBAAkBA,EAClB5F,UAAWA,IAEZuW,EAAazO,QACZrH,IAAAA,cAAC8W,EAAAA,SAAQ,CACPC,SACE/W,IAAAA,cAAC0E,EAAAA,EAAQ,KACP1E,IAAAA,cAAC2E,EAAAA,EAAO,QAIZ3E,IAAAA,cAACgX,GAAAA,QAAiB,CAChB9Z,aAAc,WACRkK,EACFQ,EAAS,CAAEY,SAAAA,IAEXd,EAAQlC,KAAK,CAAEgD,SAAAA,IAEjBuN,GAAgB,SAACM,GAAS,OAAArV,GAAAA,GAAA,GAAWqV,GAAS,IAAEhP,QAAQ,GAAK,GAC/D,EACAlK,cAAe2Y,EAAaD,SAC5BzY,OAAQA,EACRC,iBAAkBA,EAClBC,aAAcA,KAM1B,EAEAiY,GAAY1Q,UAAY,CACtBoC,WAAYnC,IAAAA,OACZoC,QAASpC,IAAAA,OACT0Q,WAAY1Q,IAAAA,KACZqC,YAAarC,IAAAA,KACbxH,aAAcwH,IAAAA,KACdsC,aAActC,IAAAA,KACdzH,iBAAkByH,IAAAA,QAGpB,W,wDC/JA,IAAMmD,EAA8B,SAACgP,EAAgBhQ,EAAYC,GAC/D,IAAIc,EAAUiP,EACd,GAAIhQ,GAAcC,EAAS,CACzB,IAAIgQ,EAAW,GACXjQ,GACFiQ,EAAS1R,KAAKyB,GAEZC,GACFgQ,EAAS1R,KAAK0B,GAEhBc,EAAUkP,EAASxD,KAAK,IAC1B,CACA,OAAO1L,CACT,EAEMyL,EAAmB,SAACD,EAAKvM,GAE7B,OAAKA,GAAcuM,EAAId,WAAWzL,GACzBuM,EAELvM,EAAWkQ,SAJG,MAIoB3D,EAAId,WAJxB,KAKT,CAACzL,EAAYuM,GAAKE,KAAK,IAEzB,CAACzM,EAAYuM,GAAKE,KAPP,IAQpB,C,0JCtBa0D,EAAe,CAC1BC,QAAS,CACPzC,KAAM,UACN0C,KAAMC,EAAAA,GAAWC,YACjBC,MAAOC,EAAAA,GAAYC,MACnBC,WAAY,SAEdC,SAAU,CACRjD,KAAM,0BACN0C,KAAMC,EAAAA,GAAWO,WACjBL,MAAOC,EAAAA,GAAYK,KACnBH,WAAY,QAEdI,QAAS,CACPpD,KAAM,0BACN0C,KAAMC,EAAAA,GAAWO,WACjBL,MAAOC,EAAAA,GAAYK,KACnBH,WAAY,QAEdK,SAAU,CACRrD,KAAM,aACN0C,KAAMC,EAAAA,GAAWC,YACjBC,MAAOC,EAAAA,GAAYC,MACnBC,WAAY,SAEdM,QAAS,CACPtD,KAAM,QACN0C,KAAMC,EAAAA,GAAWC,YACjBC,MAAOC,EAAAA,GAAYC,MACnBC,WAAY,SAEdO,OAAQ,CACNvD,KAAM,SACN0C,KAAMC,EAAAA,GAAWC,YACjBC,MAAOC,EAAAA,GAAYC,MACnBC,WAAY,SAEdQ,gBAAiB,CACfxD,KAAM,mBACN0C,KAAMC,EAAAA,GAAWc,oBACjBZ,MAAOC,EAAAA,GAAYY,OACnBV,WAAY,UAEdW,SAAU,CACR3D,KAAM,WACN0C,KAAMC,EAAAA,GAAWO,WACjBL,MAAOC,EAAAA,GAAYK,KACnBH,WAAY,QAEdY,MAAO,CACL5D,KAAM,QACN0C,KAAMC,EAAAA,GAAWkB,YACjBhB,MAAOC,EAAAA,GAAYgB,IACnBd,WAAY,OAEde,QAAS,CACP/D,KAAM,UACN0C,KAAMC,EAAAA,GAAWqB,SAEnBC,YAAa,CACXjE,KAAM,0BACN0C,KAAMC,EAAAA,GAAWO,WACjBL,MAAOC,EAAAA,GAAYK,KACnBH,WAAY,QAEdkB,aAAc,CACZlE,KAAM,eACN0C,KAAMC,EAAAA,GAAWwB,kBACjBtB,MAAOC,EAAAA,GAAYgB,IACnBd,WAAY,OAEdoB,2BAA4B,CAC1BpE,KAAM,QACN0C,KAAMC,EAAAA,GAAWwB,kBACjBtB,MAAOC,EAAAA,GAAYgB,IACnBd,WAAY,QCxEHqB,EAAkB,SAC7BC,EACAC,EACAC,GAAgB,MAEK,UAArBA,EACI,QACqB,iBAArBA,EACA,eACiB,aAAjBF,EACA,WACAC,EACA,kBACA,UAAU,EAEVhQ,EAAS,SAAHhN,GAON,IANJiD,EAAEjD,EAAFiD,GACAgK,EAAIjN,EAAJiN,KAAIiQ,EAAAld,EACJmd,QAAAA,OAAO,IAAAD,GAAQA,EAAAE,EAAApd,EACfqd,eAAAA,OAAc,IAAAD,EAAG,GAAEA,EAAAE,EAAAtd,EACnBwH,UAAAA,OAAS,IAAA8V,EAAG,GAAEA,EACdC,EAAMvd,EAANud,OAEA/M,EACEF,OAAOkN,UAAUC,eAAeC,KAAKzC,EAAchO,GAC/CgO,EAAahO,GACbgO,EAAsB,QAHpBxC,EAAIjI,EAAJiI,KAAM0C,EAAI3K,EAAJ2K,KAAMG,EAAK9K,EAAL8K,MAAOG,EAAUjL,EAAViL,WAK3B,OACE5X,IAAAA,cAAAA,IAAAA,SAAA,KACGsZ,EACCtZ,IAAAA,cAAC8Z,EAAAA,EAAK,CAAC1a,GAAIA,EAAIqY,MAAOG,EAAY/F,KAAM7R,IAAAA,cAACsX,EAAI,MAAK3T,UAAWA,GAC1DiR,GAGH5U,IAAAA,cAAC+I,EAAAA,EAAK,CAAC3J,GAAIA,EAAI2a,MAAO,CAAEtC,MAAAA,GAAS9T,UAAWA,GAC1C3D,IAAAA,cAACgJ,EAAAA,EAAS,CAACrF,UAAU,cAClB6V,EACCxZ,IAAAA,cAACsK,EAAAA,EAAO,CAACC,QAAQ,UACfvK,IAAAA,cAACsX,EAAI,OAGPtX,IAAAA,cAACsX,EAAI,OAGTtX,IAAAA,cAACgJ,EAAAA,EAAS,KACRhJ,IAAAA,cAAA,KACE+Z,MACEL,EACI,CACEM,eAAgB,yBAChBC,OAAQ,WAEV,CAAC,GAGNrF,KAOf,EAEA,UAEAzL,EAAOtE,UAAY,CACjBzF,GAAI0F,IAAAA,OACJsE,KAAMtE,IAAAA,OACNwU,QAASxU,IAAAA,KACT0U,eAAgB1U,IAAAA,OAChBnB,UAAWmB,IAAAA,OACX4U,OAAQ5U,IAAAA,MAGVqE,EAAOpE,aAAe,CACpB3F,GAAI,S,8sBCpBN,QA1De,SAAHjD,GAAgE,IAAA+d,EAA1Dhb,EAAG/C,EAAH+C,IAAGib,EAAAhe,EAAEiD,GAAAA,OAAE,IAAA+a,EAAG,KAAIA,EAAExa,EAAcxD,EAAdwD,eAAcya,EAAAje,EAAEoT,YAAAA,OAAW,IAAA6K,GAAQA,EAC7Dvc,GAAWC,EAAAA,EAAAA,eACjBP,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7B+B,EAAI7B,EAAA,GAAEgK,EAAOhK,EAAA,GACpB8J,GAAkC/J,EAAAA,EAAAA,WAAS,GAAKgK,GAAA9J,EAAAA,EAAAA,GAAA6J,EAAA,GAAzChI,EAASiI,EAAA,GAAE6S,EAAY7S,EAAA,GAC9B8S,GAAgC9c,EAAAA,EAAAA,WAAS,GAAM+c,GAAA7c,EAAAA,EAAAA,GAAA4c,EAAA,GAAxClS,EAAQmS,EAAA,GAAEC,EAAWD,EAAA,GAC5BE,GAA8Bjd,EAAAA,EAAAA,WAAS,kBAAM0B,CAAG,IAACwb,GAAAhd,EAAAA,EAAAA,GAAA+c,EAAA,GAA1CE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAEpBG,EAA2B,QAAjBX,EAAGva,SAAc,IAAAua,OAAA,EAAdA,EAAgBta,UAC9BD,IACHA,EAAiB,CACfC,UAAW,CACTC,MAAO,UACPE,YAAa,0CAEfD,QAAS,CACPD,MAAO,QACPE,YAAa,0CAKnB,IAAM+a,EAAS,eAAAnO,GAAA1O,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAkR,EAAA0L,EAAAC,EAAAvE,UAAA,OAAAvY,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACG,OADI8Q,EAAK2L,EAAAxJ,OAAA,QAAA1S,IAAAkc,EAAA,GAAAA,EAAA,GAAG,GAC/BX,GAAa,GAAMhc,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEEoc,EAAQ,CAAEvb,GAAAA,EAAIiQ,MAAAA,IAAQ,OAAnC/P,EAAIjB,EAAA4c,KACVxT,EAAQnI,GAEJub,GACFhd,EAAQmD,EAAC,CAAC,GACLka,EAAAA,EAAAA,IAAela,EAAC,CACjBqM,QAAS,WACN1N,EAAeC,cAGvBvB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA8c,GAAA9c,EAAA,SAEDmc,GAAY,GAEZ3c,EAAQmD,EAAC,CAAC,GACLka,EAAAA,EAAAA,IAAela,EAAC,CACjBqM,QAAS,UACN1N,EAAeG,YAEnB,QAEiB,OAFjBzB,EAAAC,KAAA,GAEH+b,GAAa,GAAOhc,EAAA+c,OAAA,6BAAA/c,EAAAU,OAAA,GAAAZ,EAAA,yBAEvB,kBA1Bc,OAAAwO,EAAA6J,MAAA,KAAAC,UAAA,KAkCf,OANAzY,EAAAA,EAAAA,YAAU,WACHuR,GACHuL,GAEJ,GAAG,IAEI,CAAC,CAAExb,KAAAA,EAAMC,UAAAA,EAAW6I,SAAAA,GAAY0S,EAAWH,EAASC,EAC7D,C","sources":["webpack:///./src/Routes/ImageManager/UpdateImageWizard.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageVersionsTab.js","webpack:///./src/Routes/ImageManagerDetail/ImagePackagesTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTabs.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/utils.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  review,\n  packages,\n  updateDetails,\n  registration,\n  activationKey,\n  repositories,\n  imageOutput,\n  customPackages,\n  additionalCustomPackages,\n} from './steps';\nimport { Bullseye, Backdrop, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { useDispatch } from 'react-redux';\nimport { getImageById, createImage } from '../../api/images';\nimport { useFeatureFlags, getReleases } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\n\nimport { temporaryReleases, supportedReleases } from '../../constants';\nimport useApi from '../../hooks/useApi';\n\nconst UpdateImage = ({\n  navigateBack,\n  updateImageID,\n  reload,\n  notificationProp,\n  locationProp,\n}) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  const [response] = useApi({\n    api: getImageById,\n    id: updateImageID,\n  });\n\n  const { data, isLoading } = response;\n\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const imageWizardFeatureFlag = useFeatureFlags(\n    'edge-management.image_wizard_ui'\n  );\n\n  const statusMessages = {\n    onSuccess: {\n      title: `Successfully started image update`,\n    },\n    onError: { title: 'Error', description: 'Failed to create image' },\n  };\n\n  return user && data && !isLoading ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          Id: data?.image?.ID,\n          name: data?.image?.Name,\n          version: data?.image?.Version + 1,\n          architecture: 'x86_64',\n          credentials: values.credentials\n            ? values.credentials\n            : data?.image?.Installer.SshKey,\n          username: values.username\n            ? values.username\n            : data?.image?.Installer.Username,\n        };\n\n        apiWithToast(\n          dispatch,\n          () => createImage(payload),\n          statusMessages,\n          notificationProp\n        );\n        closeAction();\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        imageID: data?.image.ID,\n        name: data?.image?.Name,\n        isUpdate: true,\n        description: data?.image?.Description,\n        credentials: data?.image?.Installer.SshKey,\n        username: data?.image?.Installer.Username,\n        version: data?.image?.Version,\n        activationKey: data?.image?.activationKey,\n        release: data?.image?.Distribution,\n        release_options: temporaryReleasesFlag\n          ? getReleases(data?.image?.Distribution, [\n              ...supportedReleases,\n              ...temporaryReleases,\n            ])\n          : getReleases(data?.image?.Distribution),\n        imageType: ['rhel-edge-commit'],\n        'selected-packages': data?.image?.Packages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n        'third-party-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'initial-custom-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'custom-packages': data?.image?.CustomPackages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n      }}\n      test=\"\"\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Update image',\n            },\n            showTitles: true,\n            title: `Update image: ${data?.image?.Name}`,\n            crossroads: [\n              'target-environment',\n              'release',\n              'imageType',\n              'third-party-repositories',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              updateDetails,\n              imageOutput,\n              registration,\n              repositories(imageWizardFeatureFlag, locationProp),\n              packages,\n              additionalCustomPackages,\n              review,\n              customPackages,\n              activationKey,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  updateImageID: PropTypes.number,\n  reload: PropTypes.func,\n  notificationProp: PropTypes.object,\n  locationProp: PropTypes.object,\n};\nUpdateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default UpdateImage;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useNavigate } from 'react-router-dom';\nimport { createLink } from '../../utils';\nimport PropTypes from 'prop-types';\n\nimport {\n  Text,\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n} from '@patternfly/react-core/deprecated';\nimport Status from '../../components/Status';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { getBaseURLFromPrefixAndName } from './utils';\n\nconst dropdownItems = (data, imageVersion, isoURL, openUpdateWizard) => {\n  const imageData = imageVersion ? imageVersion : data?.LastImageDetails;\n\n  const actionsArray = [];\n\n  imageData?.image?.ID &&\n    actionsArray.push(\n      <DropdownItem\n        key=\"create-new-version-button\"\n        component=\"button\"\n        onClick={() => openUpdateWizard(imageData?.image?.ID)}\n      >\n        Create new version\n      </DropdownItem>\n    );\n\n  isoURL &&\n    actionsArray.push(\n      <DropdownItem key=\"download-button\" component=\"button\">\n        <Text\n          className=\"force-text-black remove-underline\"\n          component=\"a\"\n          href={isoURL}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Download installable .iso for newest image\n        </Text>\n      </DropdownItem>\n    );\n  return actionsArray;\n};\n\nconst DetailsHead = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  navigateProp,\n  imageData,\n  imageVersion,\n  openUpdateWizard,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [data, setData] = useState({});\n\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n\n  useEffect(() => {\n    setData(imageData?.data);\n  }, [imageData]);\n\n  const actionsLabel = 'Actions for image set details view';\n  const dropdownId = 'image-set-details-dropdown';\n  const baseURL = getBaseURLFromPrefixAndName(\n    `edge${paths.manageImages}`,\n    pathPrefix,\n    urlName\n  );\n\n  return (\n    <>\n      {!imageData.isLoading && imageData.hasError ? (\n        <Breadcrumb>\n          <BreadcrumbItem>\n            {createLink({\n              pathname: baseURL,\n              linkText: 'Back to Manage Images',\n              history,\n              navigate,\n            })}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        <>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              {createLink({\n                pathname: baseURL,\n                linkText: 'Manage Images',\n                history,\n                navigate,\n              })}\n            </BreadcrumbItem>\n            {imageVersion ? (\n              <BreadcrumbItem>\n                {createLink({\n                  pathname: `${baseURL}/${data?.ImageSet?.ID}`,\n                  linkText: data?.ImageSet?.Name,\n                  history,\n                  navigate,\n                })}\n              </BreadcrumbItem>\n            ) : (\n              <BreadcrumbItem isActive>\n                {data?.ImageSet?.Name || <Skeleton width=\"100px\" />}\n              </BreadcrumbItem>\n            )}\n            {imageVersion && (\n              <BreadcrumbItem isActive>\n                {imageVersion?.image?.Version}\n              </BreadcrumbItem>\n            )}\n          </Breadcrumb>\n\n          <TextContent>\n            <Split>\n              <SplitItem>\n                <TextList component=\"dl\">\n                  <TextListItem\n                    component=\"h1\"\n                    className=\"grid-align-center pf-u-mb-0\"\n                  >\n                    {data?.ImageSet?.Name || <Skeleton width=\"150px\" />}\n                  </TextListItem>\n                  <TextListItem className=\"pf-u-pt-sm\" component=\"dd\">\n                    {imageVersion?.image?.Status ||\n                    data?.LastImageDetails?.image?.Status ? (\n                      <Status\n                        type={\n                          imageVersion\n                            ? imageVersion?.image?.Status.toLowerCase()\n                            : data?.LastImageDetails?.image?.Status.toLowerCase()\n                        }\n                      />\n                    ) : (\n                      <Skeleton width=\"100px\" />\n                    )}\n                  </TextListItem>\n                  {imageVersion?.image?.UpdatedAt ||\n                  data?.LastImageDetails?.image?.UpdatedAt ? (\n                    <TextListItem component=\"p\">\n                      {`Last updated `}\n                      <DateFormat\n                        date={\n                          imageVersion\n                            ? imageVersion?.image?.UpdatedAt\n                            : data?.LastImageDetails?.image?.UpdatedAt\n                        }\n                      />\n                    </TextListItem>\n                  ) : (\n                    <Skeleton width=\"200px\" />\n                  )}\n                </TextList>\n              </SplitItem>\n              <SplitItem isFilled></SplitItem>\n              <SplitItem>\n                <Dropdown\n                  position={DropdownPosition.right}\n                  toggle={\n                    <DropdownToggle\n                      id={dropdownId}\n                      toggleIndicator={CaretDownIcon}\n                      onToggle={(_event, newState) => setIsOpen(newState)}\n                      isDisabled={\n                        (imageVersion\n                          ? imageVersion?.image?.Status\n                          : data?.LastImageDetails?.image.Status) ===\n                          'BUILDING' || false\n                      }\n                      aria-label={actionsLabel}\n                    >\n                      <Tooltip\n                        content={actionsLabel}\n                        triggerRef={() => document.getElementById(dropdownId)}\n                      />\n                      Actions\n                    </DropdownToggle>\n                  }\n                  isOpen={isOpen}\n                  dropdownItems={dropdownItems(\n                    data,\n                    imageVersion,\n                    data?.ImageBuildIsoURL,\n                    openUpdateWizard\n                  )}\n                />\n              </SplitItem>\n            </Split>\n          </TextContent>\n        </>\n      )}\n    </>\n  );\n};\n\nDetailsHead.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n  openUpdateWizard: PropTypes.func,\n};\n\nexport default DetailsHead;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  Text,\n  TextVariants,\n  Grid,\n  GridItem,\n  ClipboardCopy,\n  Skeleton,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { createLink } from '../../utils';\nimport { getBaseURLFromPrefixAndName } from './utils';\nimport { useHistory, useNavigate } from 'react-router-dom';\n\nconst ImageDetailTab = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  navigateProp,\n  imageData,\n  imageVersion,\n}) => {\n  const [data, setData] = useState({});\n  const baseURL = getBaseURLFromPrefixAndName(\n    `edge${paths.manageImages}`,\n    pathPrefix,\n    urlName\n  );\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n\n  useEffect(() => {\n    imageVersion\n      ? setData(imageVersion)\n      : setData(imageData?.data?.LastImageDetails);\n  }, [imageData, imageVersion]);\n\n  const createSkeleton = (rows) =>\n    [...Array(rows * 2)].map((_, key) => <Skeleton width=\"180px\" key={key} />);\n\n  const dateFormat = () => <DateFormat date={data?.image?.['CreatedAt']} />;\n\n  const detailsMapper = {\n    Version: 'Version',\n    Created: () => dateFormat(),\n    'Type(s)': () =>\n      data?.image?.['OutputTypes']?.map((outputType, index) => (\n        <div key={index}>{outputType}</div>\n      )),\n    Release: () => distributionMapper?.[data?.image?.['Distribution']],\n    //Size: 'Size',\n    Description: 'Description',\n  };\n  const activationKeyMapper = {\n    'Activation Key': () => data?.image?.activationKey,\n  };\n  const userInfoMapper = {\n    Username: () => data?.image?.Installer?.Username,\n    'SSH key': () => data?.image?.Installer?.SshKey,\n  };\n  const renderAdditionalPackageLink = () => {\n    return createLink({\n      pathname: `${baseURL}/${data?.image?.ImageSetID}/versions/${data?.image?.ID}/packages/additional`,\n      linkText: data?.additional_packages,\n      history,\n      navigate,\n    });\n  };\n\n  const renderTotalPackageLink = () => {\n    return createLink({\n      pathname: `${baseURL}/${data?.image?.ImageSetID}/versions/${data?.image?.ID}/packages/all`,\n      linkText: data?.packages,\n      history,\n      navigate,\n    });\n  };\n\n  const packageMapper = {\n    'Total additional packages': renderAdditionalPackageLink,\n    'Total packages': renderTotalPackageLink,\n  };\n\n  const packageDiffMapper = {\n    Added: () => data?.update_added,\n    Removed: () => data?.update_removed,\n    Updated: () => data?.update_updated,\n  };\n\n  if (data?.image?.Installer?.Checksum) {\n    detailsMapper['SHA-256 checksum'] = () => data?.image?.Installer?.Checksum;\n  }\n\n  if (data?.image?.Commit?.OSTreeCommit) {\n    detailsMapper['Ostree commit hash'] = () =>\n      data?.image?.Commit?.OSTreeCommit;\n  }\n\n  const buildTextList = (labelsToValueMapper) =>\n    data\n      ? Object.entries(labelsToValueMapper).map(([label, value], index) => {\n          return (\n            <Fragment key={index}>\n              <TextListItem\n                className=\"details-label\"\n                component={TextListItemVariants.dt}\n              >\n                {label}\n              </TextListItem>\n              {label === 'SHA-256 checksum' ||\n              label === 'Ostree commit hash' ||\n              (label === 'SSH key' && value()) ? (\n                <TextListItem component={TextListItemVariants.dd}>\n                  <ClipboardCopy\n                    hoverTip=\"Copy\"\n                    clickTip=\"Copied\"\n                    variant=\"expansion\"\n                    className=\"pf-u-text-break-word\"\n                    id={`${label\n                      .replace(/\\s+/g, '-')\n                      .toLowerCase()}-clipboard-copy`}\n                  >\n                    {typeof value === 'function'\n                      ? value() || 'Unavailable'\n                      : data?.image?.[value] || 'Unavailable'}\n                  </ClipboardCopy>\n                </TextListItem>\n              ) : (\n                <TextListItem\n                  className=\"pf-u-text-break-word\"\n                  component={TextListItemVariants.dd}\n                >\n                  {typeof value === 'function'\n                    ? value() === 0\n                      ? 0\n                      : value() || 'Unavailable'\n                    : data?.image?.[value] || 'Unavailable'}\n                </TextListItem>\n              )}\n            </Fragment>\n          );\n        })\n      : null;\n\n  return (\n    <TextContent className=\"pf-u-ml-lg pf-u-mt-md\">\n      <Grid span={12}>\n        <GridItem span={5}>\n          <Text component={TextVariants.h2}>\n            {imageVersion ? 'Details' : 'Most recent image'}\n          </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(detailsMapper) || createSkeleton(6)}\n          </TextList>\n          <Text component={TextVariants.h2}>User information </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(userInfoMapper) || createSkeleton(2)}\n          </TextList>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(activationKeyMapper) || createSkeleton(2)}\n          </TextList>\n        </GridItem>\n        <GridItem span={1} />\n        <GridItem span={6}>\n          <Text component={TextVariants.h2}>Packages </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(packageMapper) || createSkeleton(3)}\n          </TextList>\n          <Text component={TextVariants.h2}>Changes from previous version</Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(packageDiffMapper) || createSkeleton(3)}\n          </TextList>\n        </GridItem>\n      </Grid>\n    </TextContent>\n  );\n};\n\nImageDetailTab.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n};\n\nexport default ImageDetailTab;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { useHistory, useNavigate } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Status from '../../components/Status';\nimport { imageTypeMapper } from '../../constants';\nimport { getImageSetViewVersions } from '../../api/images';\nimport { cellWidth } from '@patternfly/react-table';\nimport { createLink, truncateString } from '../../utils';\nimport useApi from '../../hooks/useApi';\nimport { getBaseURLFromPrefixAndName } from './utils';\n\nconst defaultFilters = [\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Version',\n    type: 'version',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Output',\n    type: 'image_type',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Ostree commit hash',\n    type: 'ostree_commit_hash',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Created',\n    type: 'created_at',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(35)],\n  },\n];\n\nconst createRows = (\n  data,\n  imageSetId,\n  latestImageVersion,\n  pathPrefix,\n  urlName,\n  history,\n  navigate\n) => {\n  const baseURL = getBaseURLFromPrefixAndName(\n    `edge${paths.manageImages}`,\n    pathPrefix,\n    urlName\n  );\n\n  return data?.map((image) => ({\n    rowInfo: {\n      id: image?.ID,\n      imageStatus: image?.Status,\n      isoURL: image?.ImageBuildIsoURL,\n      latestImageVersion,\n      currentImageVersion: image.Version,\n    },\n    noApiSortFilter: [\n      image?.Version,\n      imageTypeMapper[image?.ImageType],\n      image?.CreatedAt,\n      image?.Status,\n    ],\n    cells: [\n      {\n        title: createLink({\n          pathname: `${baseURL}/${imageSetId}/versions/${image.ID}/details`,\n          linkText: image?.Version,\n          history,\n          navigate,\n        }),\n      },\n      {\n        title: imageTypeMapper[image?.ImageType],\n      },\n      {\n        title: image?.CommitCheckSum ? (\n          <Tooltip content={<div>{image.CommitCheckSum}</div>}>\n            <span>{truncateString(image.CommitCheckSum, 5, 5)}</span>\n          </Tooltip>\n        ) : (\n          <Text>Unavailable</Text>\n        ),\n      },\n      {\n        title: <DateFormat date={image?.CreatedAt} />,\n      },\n      {\n        title: <Status type={image?.Status.toLowerCase()} />,\n      },\n    ],\n  }));\n};\n\nconst ImageVersionsTab = ({\n  pathPrefix,\n  urlName,\n  navigateProp,\n  historyProp,\n  locationProp,\n  imageData,\n  openUpdateWizard,\n}) => {\n  const imageSetID = imageData?.data?.ImageSet?.ID;\n  const latestImageVersion = imageData?.data?.ImageSet?.Version;\n\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n\n  const [response, fetchImageSetVersions] = useApi({\n    api: ({ query }) =>\n      getImageSetViewVersions({\n        imageSetID: imageSetID,\n        query,\n      }),\n    tableReload: true,\n  });\n\n  const { data, isLoading, hasError } = response;\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: 'Download',\n        onClick: (_event, _rowId, rowData) => {\n          window.open(rowData.rowInfo.isoURL);\n        },\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo.id);\n        },\n        isDisabled:\n          rowData?.rowInfo?.latestImageVersion !==\n          rowData?.rowInfo?.currentImageVersion,\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <GeneralTable\n        navigateProp={navigateProp}\n        historyProp={historyProp}\n        locationProp={locationProp}\n        apiFilterSort={true}\n        isUseApi={true}\n        filters={defaultFilters}\n        loadTableData={fetchImageSetVersions}\n        tableData={{\n          count: data?.count,\n          data: data?.data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columnNames}\n        rows={createRows(\n          data?.data,\n          imageSetID,\n          latestImageVersion,\n          pathPrefix,\n          urlName,\n          history,\n          navigate\n        )}\n        actionResolver={actionResolver}\n        areActionsDisabled={areActionsDisabled}\n        defaultSort={{ index: 3, direction: 'desc' }}\n      />\n    </section>\n  );\n};\nImageVersionsTab.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  navigateProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  imageSetID: PropTypes.number,\n  createRows: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n};\n\nexport default ImageVersionsTab;\n","import React, { useState, useEffect } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { cellWidth } from '@patternfly/react-table';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport Empty from '../../components/Empty';\nimport { restorePrefixURL } from './utils';\n\nconst defaultFilters = [{ label: 'Name', type: 'text' }];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Release',\n    type: 'release',\n    sort: false,\n    columnTransforms: [cellWidth(35)],\n  },\n  //{ title: 'Type', type: 'type', sort: false, columnTransforms: [cellWidth(35)] },\n];\n\nconst createRows = ({\n  distribution,\n  installedPackages,\n  addedPackages,\n  showAll,\n}) => {\n  const rowData =\n    showAll === 0\n      ? installedPackages.filter(\n          (pack) =>\n            addedPackages?.filter((image) => pack.name === image.Name).length >\n            0\n        )\n      : installedPackages;\n  return rowData.map((packageData) => ({\n    noApiSortFilter: [\n      packageData?.name,\n      packageData?.version,\n      packageData?.release,\n      //packageData?.type,\n    ],\n    cells: [\n      packageData?.name,\n      packageData?.version,\n      packageData?.release,\n      //packageData?.type,\n      {\n        title: (\n          <a\n            href={`https://access.redhat.com/downloads/content/rhel---${distribution}/x86_64/7416/${packageData?.name}/${packageData?.version}-${packageData?.release}/${packageData?.arch}/fd431d51/package`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Button\n              variant=\"link\"\n              size=\"sm\"\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n            >\n              More information\n            </Button>\n          </a>\n        ),\n      },\n    ],\n  }));\n};\n\nconst indexToTabs = {\n  0: 'additional',\n  1: 'all',\n};\n\nconst tabsToIndex = {\n  additional: 0,\n  all: 1,\n};\n\nconst ImagePackagesTab = ({\n  pathPrefix,\n  historyProp,\n  locationProp,\n  navigateProp,\n  imageVersion,\n}) => {\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname } = locationProp ? locationProp() : useLocation();\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  let currentPathName = pathname;\n  if (pathPrefix && pathname.startsWith(pathPrefix)) {\n    // remove the prefix from pathname\n    currentPathName = pathname.slice(pathPrefix.length);\n  }\n\n  const splitUrl = currentPathName.split('/');\n  const defaultToggle = splitUrl.length === 7 ? tabsToIndex[splitUrl[6]] : 1;\n  // Distribution examples would be: rhel-86, rhel-90, and rhel-100\n  const distribution = imageVersion?.image?.Distribution?.split('-')[1].slice(\n    0,\n    -1\n  );\n\n  const [packageData, setPackageData] = useState({});\n  const [toggleTable, setToggleTable] = useState(defaultToggle);\n\n  useEffect(() => {\n    setPackageData(imageVersion);\n  }, [imageVersion]);\n\n  useEffect(() => {\n    splitUrl[5] !== indexToTabs[toggleTable] && setToggleTable(defaultToggle);\n  }, [splitUrl]);\n\n  const handleToggleTable = (toggleIndex) => {\n    const currentTab = splitUrl[5]?.toLowerCase();\n    setToggleTable(toggleIndex);\n    if (currentTab === 'packages') {\n      if (splitUrl.length === 7) {\n        splitUrl[6] = indexToTabs[toggleIndex];\n      } else {\n        splitUrl.push(indexToTabs[toggleIndex]);\n      }\n      const url = restorePrefixURL(splitUrl.join('/'), pathPrefix);\n      if (navigateProp) {\n        navigate(url);\n      } else {\n        history.push(url);\n      }\n    }\n  };\n\n  return imageVersion?.image?.Commit?.Status === 'SUCCESS' ? (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <GeneralTable\n        navigateProp={navigateProp}\n        historyProp={historyProp}\n        locationProp={locationProp}\n        apiFilterSort={false}\n        filters={defaultFilters}\n        tableData={{\n          count:\n            toggleTable === 0\n              ? packageData?.additional_packages\n              : packageData?.packages,\n          isLoading: false,\n          hasError: false,\n        }}\n        columnNames={columnNames}\n        rows={\n          packageData?.image?.Commit?.InstalledPackages\n            ? createRows({\n                distribution: distribution,\n                installedPackages:\n                  packageData?.image?.Commit?.InstalledPackages,\n                addedPackages: packageData?.image?.Packages,\n                showAll: toggleTable,\n              })\n            : []\n        }\n        actionResolver={() => []}\n        areActionsDisabled={() => true}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        toggleButton={[\n          { title: 'Additional', key: 0 },\n          { title: 'All', key: 1 },\n        ]}\n        toggleAction={handleToggleTable}\n        toggleState={toggleTable}\n        emptyFilterState={{\n          icon: 'search',\n          title: 'No packages to display',\n        }}\n      />\n    </section>\n  ) : (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <Empty\n        bgColor=\"white\"\n        title=\"Package data currently unavailable\"\n        body=\"Packages will be displayed as soon as the image is finished being built.\"\n        primaryAction={null}\n        secondaryActions={[]}\n      />\n    </section>\n  );\n};\n\nImagePackagesTab.propTypes = {\n  pathPrefix: PropTypes.string,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  imageVersion: PropTypes.object,\n};\n\nexport default ImagePackagesTab;\n","import React, { useState, useEffect } from 'react';\nimport { Tabs, Tab, TabTitleText, Skeleton } from '@patternfly/react-core';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\n\nimport ImageDetailTab from './ImageDetailTab';\nimport ImageVersionTab from './ImageVersionsTab';\nimport ImagePackagesTab from './ImagePackagesTab';\nimport PropTypes from 'prop-types';\nimport EmptyState from '../../components/Empty';\n\nimport { mapUrlToObj } from '../../utils';\nimport { restorePrefixURL } from './utils';\n\n// conditional render for same index\nconst tabs = {\n  details: 0,\n  packages: 1,\n  versions: 1,\n};\n\nconst ImageDetailTabs = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  locationProp,\n  navigateProp,\n  imageData,\n  openUpdateWizard,\n  imageVersion,\n  isLoading,\n}) => {\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname } = locationProp ? locationProp() : useLocation();\n  let currentPathName = pathname;\n  if (pathPrefix && pathname.startsWith(pathPrefix)) {\n    // remove the prefix from pathname\n    currentPathName = pathname.slice(pathPrefix.length);\n  }\n\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const [activeTabKey, setActiveTabkey] = useState(tabs.details);\n  const activeTab = imageVersion ? 'imageTab' : 'imageSetTab';\n\n  const keys = [\n    'baseURL',\n    'imageSetVersion',\n    'imageSetTab',\n    'imageVersion',\n    'imageTab',\n    'packagesToggle',\n  ];\n  const imageUrlMapper = mapUrlToObj(currentPathName, keys);\n\n  const handleTabClick = (_event, tabIndex) => {\n    const selectedTab =\n      tabIndex === 0 ? 'details' : imageVersion ? 'packages' : 'versions';\n\n    imageUrlMapper[activeTab] = selectedTab;\n\n    const url = restorePrefixURL(imageUrlMapper.buildUrl(), pathPrefix);\n\n    if (navigateProp) {\n      navigate(url);\n    } else {\n      history.push(url);\n    }\n\n    setActiveTabkey(tabIndex);\n  };\n\n  useEffect(() => {\n    imageUrlMapper['imageTab']\n      ? setActiveTabkey(tabs[imageUrlMapper['imageTab']])\n      : setActiveTabkey(tabs[imageUrlMapper['imageSetTab']]);\n  }, [pathname]);\n\n  return (\n    <>\n      {!imageData.isLoading && imageData.hasError ? (\n        <EmptyState\n          icon=\"question\"\n          title=\"Image not found\"\n          body=\"Please check you have the correct link with the correct image Id.\"\n          primaryAction={{\n            text: 'Back to Manage Images',\n            href: paths.manageImages,\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <div className=\"edge-c-device--detail add-100vh\">\n          <Tabs\n            className=\"pf-u-ml-md\"\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n          >\n            <Tab\n              eventKey={tabs.details}\n              title={<TabTitleText>Details</TabTitleText>}\n            >\n              <ImageDetailTab\n                pathPrefix={pathPrefix}\n                urlName={urlName}\n                historyProp={historyProp}\n                navigateProp={navigateProp}\n                imageData={imageData}\n                imageVersion={imageVersion}\n              />\n            </Tab>\n            {isLoading ? (\n              <Tab\n                title={\n                  <TabTitleText>\n                    <Skeleton width=\"75px\" />\n                  </TabTitleText>\n                }\n              ></Tab>\n            ) : imageVersion ? (\n              <Tab\n                eventKey={tabs.packages}\n                title={<TabTitleText>Packages</TabTitleText>}\n              >\n                <ImagePackagesTab\n                  pathPrefix={pathPrefix}\n                  urlName={urlName}\n                  navigateProp={navigateProp}\n                  historyProp={historyProp}\n                  locationProp={locationProp}\n                  imageVersion={imageVersion}\n                />\n              </Tab>\n            ) : (\n              <Tab\n                eventKey={tabs.versions}\n                title={<TabTitleText>Versions</TabTitleText>}\n              >\n                <ImageVersionTab\n                  pathPrefix={pathPrefix}\n                  urlName={urlName}\n                  navigateProp={navigateProp}\n                  historyProp={historyProp}\n                  locationProp={locationProp}\n                  imageData={imageData}\n                  openUpdateWizard={openUpdateWizard}\n                />\n              </Tab>\n            )}\n          </Tabs>\n        </div>\n      )}\n    </>\n  );\n};\n\nImageDetailTabs.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n  openUpdateWizard: PropTypes.func,\n  isLoading: PropTypes.bool,\n};\n\nexport default ImageDetailTabs;\n","import React, { Fragment, Suspense, useEffect, useState } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Stack, StackItem, Spinner, Bullseye } from '@patternfly/react-core';\nimport {\n  useParams,\n  useHistory,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport DetailsHead from './DetailsHeader';\nimport ImageDetailTabs from './ImageDetailTabs';\nimport UpdateImageWizard from '../ImageManager/UpdateImageWizard';\nimport useApi from '../../hooks/useApi';\nimport { getImageSetView } from '../../api/images';\nimport { stateToUrlSearch } from '../../utils';\n\nconst ImageDetail = ({\n  pathPrefix,\n  urlName,\n  paramsProp,\n  historyProp,\n  locationProp,\n  navigateProp,\n  notificationProp,\n}) => {\n  const { imageId, imageVersionId } = paramsProp\n    ? paramsProp()\n    : useParams\n    ? useParams()\n    : null;\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname, search } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const [updateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    updateId: null,\n  });\n  const [imageVersion, setImageVersion] = useState(null);\n\n  const [response, fetchImageSetDetails] = useApi({\n    api: getImageSetView,\n    id: imageVersionId ? `${imageId}/versions/${imageVersionId}` : `${imageId}`,\n    tableReload: true,\n  });\n\n  const { data, isLoading } = response;\n\n  const updateHistoryObj = {\n    pathname,\n    search: stateToUrlSearch('update_image=true', true, search),\n  };\n\n  const openUpdateWizard = (id) => {\n    if (navigateProp) {\n      navigate({ ...updateHistoryObj, replace: true });\n    } else {\n      history.push({ ...updateHistoryObj });\n    }\n    setUpdateWizard((prevState) => ({\n      ...prevState,\n      isOpen: !prevState.isLoading,\n      updateId: id,\n    }));\n  };\n\n  useEffect(() => {\n    imageVersionId\n      ? setImageVersion(data?.ImageDetails)\n      : setImageVersion(null);\n  }, [response, imageVersionId]);\n\n  useEffect(() => {\n    fetchImageSetDetails();\n  }, [imageId, imageVersionId]);\n\n  const reload = async () => {\n    await fetchImageSetDetails();\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Stack hasGutter>\n          <StackItem>\n            <DetailsHead\n              pathPrefix={pathPrefix}\n              urlName={urlName}\n              historyProp={historyProp}\n              navigateProp={navigateProp}\n              imageData={response}\n              imageVersion={imageVersion}\n              openUpdateWizard={openUpdateWizard}\n            />\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <ImageDetailTabs\n        pathPrefix={pathPrefix}\n        urlName={urlName}\n        historyProp={historyProp}\n        locationProp={locationProp}\n        navigateProp={navigateProp}\n        imageData={response}\n        urlParam={imageId}\n        imageVersion={imageVersion}\n        openUpdateWizard={openUpdateWizard}\n        isLoading={isLoading}\n      />\n      {updateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              if (navigateProp) {\n                navigate({ pathname });\n              } else {\n                history.push({ pathname });\n              }\n              setUpdateWizard((prevState) => ({ ...prevState, isOpen: false }));\n            }}\n            updateImageID={updateWizard.updateId}\n            reload={reload}\n            notificationProp={notificationProp}\n            locationProp={locationProp}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nImageDetail.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  paramsProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  notificationProp: PropTypes.object,\n};\n\nexport default ImageDetail;\n","const getBaseURLFromPrefixAndName = (defaultBaseURL, pathPrefix, urlName) => {\n  let baseURL = defaultBaseURL;\n  if (pathPrefix || urlName) {\n    let urlNames = [];\n    if (pathPrefix) {\n      urlNames.push(pathPrefix);\n    }\n    if (urlName) {\n      urlNames.push(urlName);\n    }\n    baseURL = urlNames.join('/');\n  }\n  return baseURL;\n};\n\nconst restorePrefixURL = (url, pathPrefix) => {\n  const separator = '/';\n  if (!pathPrefix || url.startsWith(pathPrefix)) {\n    return url;\n  }\n  if (pathPrefix.endsWith(separator) || url.startsWith(separator)) {\n    return [pathPrefix, url].join('');\n  }\n  return [pathPrefix, url].join(separator);\n};\n\nexport { getBaseURLFromPrefixAndName, restorePrefixURL };\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n"],"names":["UpdateImage","_ref","_data$image6","_data$image7","_data$image8","_data$image9","_data$image10","_data$image11","_data$image12","_data$image13","_data$image14","_data$image15","_data$image16","_data$image17","_data$image18","_data$image19","navigateBack","updateImageID","reload","notificationProp","locationProp","_useState","useState","_useState2","_slicedToArray","user","setUser","dispatch","useDispatch","closeAction","useEffect","_asyncToGenerator","_regeneratorRuntime","_callee","_insights","_context","prev","next","insights","chrome","auth","getUser","then","result","undefined","stop","_useApi","useApi","api","getImageById","id","response","data","isLoading","temporaryReleasesFlag","useFeatureFlags","imageWizardFeatureFlag","statusMessages","onSuccess","title","onError","description","React","ImageCreator","onClose","customComponentMapper","review","ReviewStep","onSubmit","_ref3","_data$image","_data$image2","_data$image3","_data$image4","_data$image5","values","setIsSaving","payload","_objectSpread","Id","image","ID","name","Name","version","Version","architecture","credentials","Installer","SshKey","username","Username","apiWithToast","createImage","defaultArch","initialValues","imageID","isUpdate","Description","activationKey","release","Distribution","release_options","getReleases","concat","_toConsumableArray","supportedReleases","temporaryReleases","imageType","Packages","map","pkg","ThirdPartyRepositories","repo","CustomPackages","test","schema","fields","component","componentTypes","WIZARD","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","updateDetails","imageOutput","registration","repositories","packages","additionalCustomPackages","customPackages","Backdrop","Bullseye","Spinner","diameter","propTypes","PropTypes","defaultProps","dropdownItems","imageVersion","isoURL","openUpdateWizard","_imageData$image","imageData","LastImageDetails","actionsArray","push","DropdownItem","key","onClick","_imageData$image2","Text","href","rel","target","DetailsHead","_data$ImageSet","_data$ImageSet2","_data$ImageSet3","_imageVersion$image","_data$ImageSet4","_imageVersion$image2","_data$LastImageDetail","_imageVersion$image3","_data$LastImageDetail2","_imageVersion$image4","_data$LastImageDetail3","_imageVersion$image5","_data$LastImageDetail4","_imageVersion$image6","_data$LastImageDetail5","pathPrefix","urlName","historyProp","navigateProp","isOpen","setIsOpen","_useState3","_useState4","setData","history","useHistory","navigate","useNavigate","actionsLabel","dropdownId","baseURL","getBaseURLFromPrefixAndName","paths","manageImages","hasError","Breadcrumb","BreadcrumbItem","createLink","pathname","linkText","ImageSet","isActive","Skeleton","width","TextContent","Split","SplitItem","TextList","TextListItem","Status","type","toLowerCase","UpdatedAt","DateFormat","date","isFilled","Dropdown","position","DropdownPosition","right","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","onToggle","_event","newState","isDisabled","Tooltip","content","triggerRef","document","getElementById","ImageBuildIsoURL","ImageDetailTab","_imageData$data","createSkeleton","rows","Array","_","detailsMapper","Created","outputType","index","Release","distributionMapper","activationKeyMapper","userInfoMapper","packageMapper","ImageSetID","additional_packages","packageDiffMapper","Added","update_added","Removed","update_removed","Updated","update_updated","Checksum","Commit","OSTreeCommit","buildTextList","labelsToValueMapper","Object","entries","_ref2","label","value","Fragment","TextListItemVariants","dt","dd","ClipboardCopy","hoverTip","clickTip","variant","replace","Grid","span","GridItem","TextVariants","h2","TextListVariants","dl","defaultFilters","options","option","columnNames","sort","columnTransforms","cellWidth","createRows","imageSetId","latestImageVersion","rowInfo","imageStatus","currentImageVersion","noApiSortFilter","imageTypeMapper","ImageType","CreatedAt","cells","CommitCheckSum","truncateString","ImageVersionsTab","_imageData$data2","imageSetID","query","getImageSetViewVersions","tableReload","_useApi2","fetchImageSetVersions","GeneralTable","apiFilterSort","isUseApi","filters","loadTableData","tableData","count","actionResolver","rowData","_rowData$rowInfo","_rowData$rowInfo2","_rowData$rowInfo3","_rowData$rowInfo6","_rowData$rowInfo7","_rowData$rowInfo4","_rowData$rowInfo5","_rowId","window","open","areActionsDisabled","_rowData$rowInfo8","defaultSort","direction","urlParam","distribution","installedPackages","addedPackages","showAll","filter","pack","length","packageData","arch","Button","size","icon","ExternalLinkAltIcon","iconPosition","indexToTabs","tabsToIndex","additional","all","ImagePackagesTab","_packageData$image","_packageData$image2","_packageData$image3","useLocation","currentPathName","startsWith","slice","splitUrl","split","defaultToggle","setPackageData","toggleTable","setToggleTable","InstalledPackages","toggleButton","toggleAction","toggleIndex","_splitUrl$","currentTab","url","restorePrefixURL","join","toggleState","emptyFilterState","Empty","bgColor","body","primaryAction","secondaryActions","tabs","details","versions","ImageDetailTabs","activeTabKey","setActiveTabkey","activeTab","imageUrlMapper","mapUrlToObj","EmptyState","text","Tabs","activeKey","onSelect","tabIndex","selectedTab","buildUrl","Tab","eventKey","TabTitleText","ImageVersionTab","ImageDetail","paramsProp","useParams","imageId","imageVersionId","search","updateId","updateWizard","setUpdateWizard","setImageVersion","getImageSetView","fetchImageSetDetails","updateHistoryObj","stateToUrlSearch","prevState","ImageDetails","_ref4","apply","arguments","PageHeader","Stack","hasGutter","StackItem","Suspense","fallback","UpdateImageWizard","defaultBaseURL","urlNames","endsWith","statusMapper","booting","Icon","iconMapper","checkCircle","color","colorMapper","green","labelColor","building","inProgress","blue","created","upToDate","success","passed","updateAvailable","exclamationTriangle","yellow","updating","error","timesCircle","red","default","unknown","interrupted","unresponsive","exclamationCircle","errorWithExclamationCircle","getDeviceStatus","deviceStatus","isUpdateAvailable","dispatcherStatus","_ref$isLabel","isLabel","_ref$toolTipContent","toolTipContent","_ref$className","isLink","prototype","hasOwnProperty","call","Label","style","textDecoration","cursor","_statusMessages","_ref$id","_ref$tableReload","setIsLoading","_useState5","_useState6","setHasError","_useState7","_useState8","apiFunc","setAPIFunc","hasSuccess","fetchData","_data","_args","sent","addNotification","t0","finish"],"sourceRoot":""}