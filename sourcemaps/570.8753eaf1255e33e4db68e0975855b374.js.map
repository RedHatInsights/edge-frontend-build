{"version":3,"file":"js/570.7f296633f7b235d9e24f.js","mappings":"+SA+FA,QApF6B,WAAM,0BAC3BA,GAAWC,EAAAA,EAAAA,cACf,kBAAGC,EAAH,EAAGA,cAAH,OAAuBA,MAAAA,GAAvB,UAAuBA,EAAeC,cAAtC,aAAuB,EAAuBC,MAEhD,GAAoDC,EAAAA,EAAAA,WAAS,GAA7D,eAAOC,EAAP,KAA2BC,EAA3B,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEA,GAAkCJ,EAAAA,EAAAA,UAAS,MAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAaA,OAZAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,8GAEsBC,EAAAA,EAAAA,IAAqBb,GAF3C,OAESc,EAFT,OAGGH,EAAaG,GAHhB,gDAKGL,GAAY,GALf,QAOCF,GAAsB,GAPvB,wDAAD,KASC,IAGD,kBAAC,IAAD,CACEQ,MAAM,oBACNC,WAAW,EACXC,MAAO,CACL,CACEF,MAAO,gBACPG,MAAOZ,EACL,kBAAC,IAAD,CAAUa,KAAMC,EAAAA,EAAAA,KACdV,EACF,kBAAC,EAAAW,KAAD,CAAMC,GAAE,UAAKC,EAAAA,GAAAA,GAAL,YAA+Bb,MAAAA,GAA/B,UAA+BA,EAAWc,aAA1C,aAA+B,EAAkBC,KACtDf,MAAAA,GADH,UACGA,EAAWc,aADd,aACG,EAAkBE,MAGrB,eAGJ,CACEX,MAAO,kBACPG,MAAOZ,EACL,kBAAC,IAAD,CAAUa,KAAMC,EAAAA,EAAAA,KACdV,EACF,kBAAC,EAAAW,KAAD,CAAMC,GAAE,UAAKC,EAAAA,GAAAA,GAAL,YAA+Bb,MAAAA,GAA/B,UAA+BA,EAAWc,aAA1C,aAA+B,EAAkBC,KACtDf,MAAAA,GADH,UACGA,EAAWc,aADd,aACG,EAAkBG,SAGrB,eAGJ,CACEZ,MAAO,iBACPG,MAAOZ,EACL,kBAAC,IAAD,CAAUa,KAAMC,EAAAA,EAAAA,KACdV,MAAAA,GAAAA,EAAWkB,iBACb,kBAAC,EAAAP,KAAD,CACEC,GAAE,UAAKC,EAAAA,GAAAA,GAAL,YAA+Bb,MAAAA,GAA/B,UAA+BA,EAAWkB,iBAAiB,UAA3D,iBAA+B,EAAgCJ,aAA/D,aAA+B,EAAuCC,KAEvEf,MAAAA,GAHH,UAGGA,EAAWkB,iBAAiB,UAH/B,iBAGG,EAAgCJ,aAHnC,aAGG,EAAuCG,SAExCnB,EACF,cAEA,mBAGJ,CACEO,MAAO,mBACPG,MAAOZ,EACL,kBAAC,IAAD,CAAUa,KAAMC,EAAAA,EAAAA,KACdV,MAAAA,GAAA,UAAAA,EAAWmB,gBAAX,SAAqBC,SACvB,kBAAC,EAAAT,KAAD,CAAMC,GAAE,UAAKC,EAAAA,GAAAA,GAAL,YAA+Bb,MAAAA,GAA/B,UAA+BA,EAAWmB,gBAA1C,aAA+B,EAAqBJ,KACzDf,MAAAA,GADH,UACGA,EAAWmB,gBADd,aACG,EAAqBF,SAEtBnB,EACF,cAEA","sources":["webpack:///./src/components/ImageInformationCard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport LoadingCard from '@redhat-cloud-services/frontend-components-inventory-general-info/LoadingCard';\nimport { getImageDataOnDevice } from '../api/index';\nimport { routes as paths } from '../../package.json';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\n\nconst ImageInformationCard = () => {\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n  const [isImageInfoLoading, setIsImageInfoLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const [imageData, setImageData] = useState(null);\n  useEffect(() => {\n    (async () => {\n      try {\n        const data = await getImageDataOnDevice(deviceId);\n        setImageData(data);\n      } catch (err) {\n        setHasError(true);\n      }\n      setIsImageInfoLoading(false);\n    })();\n  }, []);\n\n  return (\n    <LoadingCard\n      title=\"Image Information\"\n      isLoading={false}\n      items={[\n        {\n          title: 'Running image',\n          value: isImageInfoLoading ? (\n            <Skeleton size={SkeletonSize.sm} />\n          ) : imageData ? (\n            <Link to={`${paths['manage-images']}/${imageData?.Image?.ID}`}>\n              {imageData?.Image?.Name}\n            </Link>\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title: 'Running version',\n          value: isImageInfoLoading ? (\n            <Skeleton size={SkeletonSize.sm} />\n          ) : imageData ? (\n            <Link to={`${paths['manage-images']}/${imageData?.Image?.ID}`}>\n              {imageData?.Image?.Version}\n            </Link>\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title: 'Target version',\n          value: isImageInfoLoading ? (\n            <Skeleton size={SkeletonSize.sm} />\n          ) : imageData?.UpdatesAvailable ? (\n            <Link\n              to={`${paths['manage-images']}/${imageData?.UpdatesAvailable[0]?.Image?.ID}`}\n            >\n              {imageData?.UpdatesAvailable[0]?.Image?.Version}\n            </Link>\n          ) : hasError ? (\n            'unavailable'\n          ) : (\n            'Same as running'\n          ),\n        },\n        {\n          title: 'Rollback version',\n          value: isImageInfoLoading ? (\n            <Skeleton size={SkeletonSize.sm} />\n          ) : imageData?.Rollback?.ParentId ? (\n            <Link to={`${paths['manage-images']}/${imageData?.Rollback?.ID}`}>\n              {imageData?.Rollback?.Version}\n            </Link>\n          ) : hasError ? (\n            'unavailable'\n          ) : (\n            'None'\n          ),\n        },\n      ]}\n    />\n  );\n};\n\nexport default ImageInformationCard;\n"],"names":["deviceId","useSelector","entityDetails","entity","id","useState","isImageInfoLoading","setIsImageInfoLoading","hasError","setHasError","imageData","setImageData","useEffect","getImageDataOnDevice","data","title","isLoading","items","value","size","SkeletonSize","Link","to","paths","Image","ID","Name","Version","UpdatesAvailable","Rollback","ParentId"],"sourceRoot":""}