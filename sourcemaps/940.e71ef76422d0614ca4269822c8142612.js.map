{"version":3,"file":"js/940.1666640151409.a1bb209da92f2828c2b1.js","mappings":"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","sources":["webpack:///./src/components/BuildModalReview.js","webpack:///./src/Routes/Devices/UpdateDeviceModal.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextListItemVariants,\n  TextListVariants,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BuildModalReview = ({ reviewObject, key }) => {\n  return (\n    <TextContent>\n      <Title headingLevel=\"h3\">\n        <Text component={'b'}>{reviewObject.title}</Text>\n      </Title>\n      <TextList component={TextListVariants.dl}>\n        {reviewObject.rows.map((row) => (\n          <Fragment key={row.title + key}>\n            <TextListItem component={TextListItemVariants.dt}>\n              {row.title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {row.value}\n            </TextListItem>\n          </Fragment>\n        ))}\n      </TextList>\n    </TextContent>\n  );\n};\n\nBuildModalReview.propTypes = {\n  reviewObject: PropTypes.object,\n  key: PropTypes.string,\n};\n\nexport default BuildModalReview;\n","import React, { useEffect, useState } from 'react';\nimport {\n  TextContent,\n  Text,\n  Bullseye,\n  Backdrop,\n  Spinner,\n  Alert,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { getImageById, getImageSet } from '../../api/images';\nimport { updateDeviceLatestImage } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Modal from '../../components/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport BuildModalReview from '../../components/BuildModalReview';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\n\nconst getImageData = (imageId) =>\n  getImageById({ id: imageId }).then((imageSetId) =>\n    getImageSet({\n      id: imageSetId?.image?.ImageSetID,\n      q: {\n        limit: 1,\n        sort_by: '-created_at',\n      },\n    })\n  );\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const [imageData, setImageData] = useState(null);\n  const dispatch = useDispatch();\n  const isMultiple = updateModal.deviceData.length > 1;\n  const deviceId = updateModal.deviceData.map((device) => device.id);\n  const deviceName = isMultiple\n    ? updateModal.deviceData.map((device) => device.display_name)\n    : updateModal?.deviceData[0]?.display_name;\n\n  useEffect(() => {\n    updateModal?.imageSetId\n      ? getImageSet({\n          id: updateModal.imageSetId,\n          q: {\n            limit: 1,\n            sort_by: '-created_at',\n            status: 'SUCCESS',\n          },\n        }).then((data) => setImageData(data.Data.images[0]))\n      : getImageData(updateModal.imageId).then((data) =>\n          setImageData(data.Data.images[0])\n        );\n  }, []);\n\n  const handleUpdateModal = async () => {\n    try {\n      await updateDeviceLatestImage({\n        DevicesUUID: deviceId,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating system',\n          description: isMultiple\n            ? ` ${deviceName.length} systems were added to the queue.`\n            : ` ${deviceName} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a system was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  const WarningText = () => (\n    <TextContent className=\"pf-u-pt-md\">\n      <Text\n        style={{ color: 'var(--pf-global--warning-color--200' }}\n        component=\"small\"\n      >\n        <ExclamationTriangleIcon\n          style={{ color: 'var(--pf-global--warning-color--100' }}\n        />{' '}\n        After the update is installed, the system will apply the changes.\n      </Text>\n    </TextContent>\n  );\n\n  const Description = () => (\n    <TextContent>\n      <Text>\n        Update{' '}\n        <span className=\"pf-u-font-weight-bold pf-u-font-size-md\">\n          {isMultiple ? `${deviceName.length} systems` : deviceName}\n        </span>{' '}\n        to latest version of the image linked to it.\n      </Text>\n      {updateModal.deviceData.some(\n        (device) =>\n          device.deviceStatus !== 'updateAvailable' &&\n          device.deviceStatus !== 'error'\n      ) && (\n        <Alert\n          variant=\"info\"\n          isInline\n          title=\"Some systems will not be updated. This action will update only systems with an update available.\"\n          style={{ '--pf-c-content--h4--MarginTop': 0 }}\n        />\n      )}\n    </TextContent>\n  );\n\n  const updateToDetails = {\n    title: `Update to version ${imageData?.image.Version}`,\n    rows: [\n      { title: 'Image Name', value: imageData?.image.Name },\n      { title: 'Version', value: imageData?.image.Version },\n      {\n        title: 'Created',\n        value: <DateFormat date={imageData?.image.CreatedAt} />,\n      },\n      {\n        title: 'Release',\n        value: distributionMapper[imageData?.image.Distribution],\n      },\n    ],\n  };\n\n  const packageDetails = {\n    title: `Changes from version ${imageData?.image.Version - 1}`,\n    rows: [\n      { title: 'Added', value: imageData?.update_added || 0 },\n      { title: 'Removed', value: imageData?.update_removed || 0 },\n      { title: 'Updated', value: imageData?.update_updated || 0 },\n    ],\n  };\n\n  const updateSchema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: Description(),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({\n          reviewObject: updateToDetails,\n          key: 'update-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'package-details',\n        label: BuildModalReview({\n          reviewObject: packageDetails,\n          key: 'package-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-text',\n        label: WarningText(),\n      },\n    ],\n  };\n\n  return (\n    <>\n      {imageData ? (\n        <Modal\n          size=\"medium\"\n          title={`Update system${\n            isMultiple ? 's' : ''\n          } to latest image version`}\n          isOpen={updateModal.isOpen}\n          closeModal={() =>\n            setUpdateModal((prevState) => ({ ...prevState, isOpen: false }))\n          }\n          submitLabel=\"Update system\"\n          schema={updateSchema}\n          onSubmit={handleUpdateModal}\n          reloadData={refreshTable}\n        />\n      ) : (\n        <Backdrop>\n          <Bullseye>\n            <Spinner isSVG diameter=\"100px\" />\n          </Bullseye>\n        </Backdrop>\n      )}\n    </>\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.array.isRequired,\n    imageData: PropTypes.object,\n    imageId: PropTypes.number,\n    imageSetId: PropTypes.number,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n"],"names":["BuildModalReview","reviewObject","key","TextContent","Title","headingLevel","Text","component","title","TextList","TextListVariants","rows","map","row","Fragment","TextListItem","T","TextListItemVariants","value","propTypes","PropTypes","UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","useState","imageData","setImageData","dispatch","useDispatch","isMultiple","deviceData","length","deviceId","device","id","deviceName","display_name","useEffect","imageId","imageSetId","getImageSet","q","limit","sort_by","status","then","data","Data","images","getImageById","image","ImageSetID","handleUpdateModal","updateDeviceLatestImage","DevicesUUID","addNotification","variant","description","statusText","handleClose","prevState","isOpen","updateToDetails","Version","Name","DateFormat","date","CreatedAt","distributionMapper","Distribution","packageDetails","update_added","update_removed","update_updated","updateSchema","fields","componentTypes","name","label","className","some","deviceStatus","Alert","isInline","style","color","Modal","size","closeModal","submitLabel","schema","onSubmit","reloadData","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired"],"sourceRoot":""}