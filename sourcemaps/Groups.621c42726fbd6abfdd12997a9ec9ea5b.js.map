{"version":3,"file":"js/Groups.23bc396dd9417de502cf.js","mappings":"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","sources":["webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/constants/features.js","webpack:///./src/hooks/useInventoryGroups.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  createInventoryGroup,\n  addDevicesToGroup,\n  validateGroupName,\n  validateInventoryGroupName,\n  addDevicesToInventoryGroup,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport useInventoryGroups from '../../hooks/useInventoryGroups';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst asyncInventoryGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateInventoryGroupName(value);\n  if (resp.results.length > 0 && resp.results[0].name === value) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst inventoryValidatorMapper = {\n  groupName: () => asyncInventoryGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const inventoryGroupsEnabled = useInventoryGroups(false);\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n\n    let createGroupFunc;\n    if (inventoryGroupsEnabled) {\n      createGroupFunc = () => createInventoryGroup(values);\n    } else {\n      createGroupFunc = () => createGroup(values);\n    }\n    return apiWithToast(dispatch, createGroupFunc, statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    let addDevicesToGroupFunc;\n    if (inventoryGroupsEnabled) {\n      const { id } = await handleCreateGroup(values);\n      addDevicesToGroupFunc = () => addDevicesToInventoryGroup(id, deviceIds);\n    } else {\n      const { ID } = await handleCreateGroup(values);\n      addDevicesToGroupFunc = () => addDevicesToGroup(parseInt(ID), deviceIds);\n    }\n    apiWithToast(dispatch, addDevicesToGroupFunc, statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={\n        inventoryGroupsEnabled ? inventoryValidatorMapper : validatorMapper\n      }\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\nimport { useFeatureFlags } from '../../utils';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchGroups,\n}) => {\n  const hideCreateGroupsEnabled = useFeatureFlags(\n    'edge-management.hide-create-group'\n  );\n\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData.rowInfo;\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled:\n            devices.length > 0\n              ? !(rowData?.rowInfo?.hasValidUpdate && hasUpdate)\n              : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n        hasValidUpdate: rowData?.DeviceGroup?.ValidUpdate,\n      },\n      cells: [\n        {\n          title: <Link to={`${paths.fleetManagement}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={\n          hideCreateGroupsEnabled\n            ? []\n            : [\n                {\n                  title: 'Create group',\n                  click: handleCreateModal,\n                },\n              ]\n        }\n        hasModalSubmitted={hasModalSubmitted}\n        setHasModalSubmitted={setHasModalSubmitted}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={async () => {\n              await fetchGroups();\n              setHasModalSubmitted(true);\n            }}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  closeModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React, { useEffect, useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/groups';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { useLocation } from 'react-router-dom';\nimport { emptyStateNoFilters, useFeatureFlags } from '../../utils';\n\nconst Groups = () => {\n  const hideCreateGroupsEnabled = useFeatureFlags(\n    'edge-management.hide-create-group'\n  );\n  const { search } = useLocation();\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const chrome = useChrome();\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const reloadData = async () => {\n    await fetchGroups();\n    setHasModalSubmitted(true);\n  };\n\n  useEffect(() => {\n    chrome?.updateDocumentTitle?.('Groups - Inventory | Edge management');\n  }, [chrome]);\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <section className=\"edge-groups pf-l-page__main-section pf-c-page__main-section\">\n        {!emptyStateNoFilters(isLoading, data?.count, search) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            {hideCreateGroupsEnabled}?{}:\n            <Empty\n              icon=\"plus\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n            {}\n          </Flex>\n        )}\n      </section>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={reloadData}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","export const FEATURE_PARITY_INVENTORY_GROUPS =\n  'edgeParity.inventory-groups-enabled';\n\nexport const FEATURE_HIDE_GROUP_ACTIONS = 'edge-management.hide_groups_actions';\n","import { useState, useEffect } from 'react';\nimport { useFeatureFlags } from '../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../constants/features';\nimport { getEnforceEdgeGroups } from '../api/groups';\n\nconst useInventoryGroups = (value) => {\n  const [data, setData] = useState(value);\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  useEffect(() => {\n    (async () => {\n      const response = await getEnforceEdgeGroups();\n      const enforceEdgeGroups = response?.enforce_edge_groups;\n      setData(!enforceEdgeGroups && inventoryGroupsEnabled);\n    })();\n  }, []);\n\n  return data;\n};\n\nexport default useInventoryGroups;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["asyncGroupNameValidation","value","length","undefined","validateGroupName","data","isValid","asyncInventoryGroupNameValidation","validateInventoryGroupName","resp","results","name","validatorMapper","groupName","inventoryValidatorMapper","createGroupSchema","fields","component","componentTypes","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","CreateGroupModal","isModalOpen","setIsModalOpen","deviceIds","reloadData","dispatch","useDispatch","inventoryGroupsEnabled","useInventoryGroups","handleCreateGroup","values","createGroupFunc","statusMessages","onSuccess","title","description","onError","createInventoryGroup","createGroup","apiWithToast","handleAddDevicesToNewGroup","id","addDevicesToGroupFunc","addDevicesToInventoryGroup","ID","addDevicesToGroup","parseInt","isOpen","closeModal","submitLabel","schema","onSubmit","propTypes","PropTypes","UpdateDeviceModal","React","filters","columns","sort","GroupTable","count","isLoading","hasError","handleCreateModal","handleRenameModal","handleDeleteModal","hasModalSubmitted","setHasModalSubmitted","fetchGroups","hideCreateGroupsEnabled","useFeatureFlags","history","useHistory","pathname","useLocation","useState","deviceData","imageData","updateModal","setUpdateModal","buildRows","map","rowData","DeviceGroup","Name","Devices","DevicesImageInfo","systems","image","Tooltip","content","device","index","key","rowInfo","devicesImageInfo","devices","hasValidUpdate","ValidUpdate","cells","to","paths","GeneralTable","apiFilterSort","isUseApi","loadTableData","tableData","columnNames","rows","actionResolver","hasUpdate","some","UpdateAvailable","onClick","prevState","UUID","display_name","imageId","find","ImageID","isDisabled","areActionsDisabled","defaultSort","direction","emptyFilterState","body","toolbarButtons","click","Suspense","fallback","Bullseye","Spinner","navigateBack","push","refreshTable","search","useApi","api","getGroups","tableReload","response","chrome","useChrome","modalState","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","useEffect","updateDocumentTitle","PageHeader","className","PageHeaderTitle","emptyStateNoFilters","Flex","justifyContent","default","Empty","icon","primaryAction","text","secondaryActions","link","RenameGroupModal","DeleteGroupModal","FEATURE_PARITY_INVENTORY_GROUPS","FEATURE_HIDE_GROUP_ACTIONS","setData","getEnforceEdgeGroups","enforceEdgeGroups","enforce_edge_groups","notificationProp","hasSuccess","hasInfo","onInfo","hasWarning","onWarning","fetchData","addNotification","variant","err","Title"],"sourceRoot":""}