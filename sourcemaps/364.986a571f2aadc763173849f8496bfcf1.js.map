{"version":3,"file":"js/364.903db7cc9d5fa0d0007a.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManager/UpdateImageWizard.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageVersionsTab.js","webpack:///./src/Routes/ImageManagerDetail/ImagePackagesTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTabs.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/api/images/index.js","webpack:///./src/api/index.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  review,\n  packages,\n  updateDetails,\n  registration,\n  repositories,\n  imageOutput,\n  customPackages,\n  additionalCustomPackages,\n} from './steps';\nimport { Bullseye, Backdrop, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { useDispatch } from 'react-redux';\nimport { getImageById, createImage } from '../../api/images';\nimport { useFeatureFlags, getReleases } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\n\nimport { temporaryReleases, supportedReleases } from '../../constants';\nimport useApi from '../../hooks/useApi';\n\nconst UpdateImage = ({\n  navigateBack,\n  updateImageID,\n  reload,\n  notificationProp,\n}) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  const [response] = useApi({\n    api: getImageById,\n    id: updateImageID,\n  });\n\n  const { data, isLoading } = response;\n\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const imageWizardFeatureFlag = useFeatureFlags(\n    'edge-management.image_wizard_ui'\n  );\n\n  const statusMessages = {\n    onSuccess: {\n      title: 'Success',\n      description: `Successfully started image update`,\n    },\n    onError: { title: 'Error', description: 'Failed to create image' },\n  };\n\n  return user && data && !isLoading ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          Id: data?.image?.ID,\n          name: data?.image?.Name,\n          version: data?.image?.Version + 1,\n          architecture: 'x86_64',\n          credentials: values.credentials\n            ? values.credentials\n            : data?.image?.Installer.SshKey,\n          username: values.username\n            ? values.username\n            : data?.image?.Installer.Username,\n        };\n\n        apiWithToast(\n          dispatch,\n          () => createImage(payload),\n          statusMessages,\n          notificationProp\n        );\n        closeAction();\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        imageID: data?.image.ID,\n        name: data?.image?.Name,\n        isUpdate: true,\n        description: data?.image?.Description,\n        credentials: data?.image?.Installer.SshKey,\n        username: data?.image?.Installer.Username,\n        version: data?.image?.Version,\n        release: data?.image?.Distribution,\n        release_options: temporaryReleasesFlag\n          ? getReleases(data?.image?.Distribution, [\n              ...supportedReleases,\n              ...temporaryReleases,\n            ])\n          : getReleases(data?.image?.Distribution),\n        imageType: ['rhel-edge-commit'],\n        'selected-packages': data?.image?.Packages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n        'third-party-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'initial-custom-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'custom-packages': data?.image?.CustomPackages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n      }}\n      test=\"\"\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Update image',\n            },\n            showTitles: true,\n            title: `Update image: ${data?.image?.Name}`,\n            crossroads: [\n              'target-environment',\n              'release',\n              'imageType',\n              'third-party-repositories',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              updateDetails,\n              imageOutput,\n              registration,\n              repositories(imageWizardFeatureFlag),\n              packages,\n              additionalCustomPackages,\n              review,\n              customPackages,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  updateImageID: PropTypes.number,\n  reload: PropTypes.func,\n  notificationProp: PropTypes.object,\n};\nUpdateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default UpdateImage;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  Text,\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Tooltip,\n} from '@patternfly/react-core';\nimport Status from '../../components/Status';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nconst dropdownItems = (data, imageVersion, isoURL, openUpdateWizard) => {\n  const imageData = imageVersion ? imageVersion : data?.LastImageDetails;\n\n  const actionsArray = [];\n\n  imageData?.image?.ID &&\n    actionsArray.push(\n      <DropdownItem\n        key=\"create-new-version-button\"\n        component=\"button\"\n        onClick={() => openUpdateWizard(imageData?.image?.ID)}\n      >\n        Create new version\n      </DropdownItem>\n    );\n\n  isoURL &&\n    actionsArray.push(\n      <DropdownItem key=\"download-button\" component=\"button\">\n        <Text\n          className=\"force-text-black remove-underline\"\n          component=\"a\"\n          href={isoURL}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Download installable .iso for newest image\n        </Text>\n      </DropdownItem>\n    );\n  return actionsArray;\n};\n\nconst DetailsHead = ({ imageData, imageVersion, openUpdateWizard }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    setData(imageData?.data);\n  }, [imageData]);\n\n  const actionsLabel = 'Actions for image set details view';\n  const dropdownId = 'image-set-details-dropdown';\n\n  return (\n    <>\n      {!imageData.isLoading && imageData.hasError ? (\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={paths.manageImages}>Back to Manage Images</Link>\n          </BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        <>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={paths.manageImages}>Manage Images</Link>\n            </BreadcrumbItem>\n            {imageVersion ? (\n              <BreadcrumbItem>\n                <Link to={`${paths.manageImages}/${data?.ImageSet?.ID}`}>\n                  {data?.ImageSet?.Name}\n                </Link>\n              </BreadcrumbItem>\n            ) : (\n              <BreadcrumbItem isActive>\n                {data?.ImageSet?.Name || <Skeleton width=\"100px\" />}\n              </BreadcrumbItem>\n            )}\n            {imageVersion && (\n              <BreadcrumbItem isActive>\n                {imageVersion?.image?.Version}\n              </BreadcrumbItem>\n            )}\n          </Breadcrumb>\n\n          <TextContent>\n            <Split>\n              <SplitItem>\n                <TextList component=\"dl\">\n                  <TextListItem\n                    component=\"h1\"\n                    className=\"grid-align-center pf-u-mb-0\"\n                  >\n                    {data?.ImageSet?.Name || <Skeleton width=\"150px\" />}\n                  </TextListItem>\n                  <TextListItem className=\"pf-u-pt-sm\" component=\"dd\">\n                    {imageVersion?.image?.Status ||\n                    data?.LastImageDetails?.image?.Status ? (\n                      <Status\n                        type={\n                          imageVersion\n                            ? imageVersion?.image?.Status.toLowerCase()\n                            : data?.LastImageDetails?.image?.Status.toLowerCase()\n                        }\n                      />\n                    ) : (\n                      <Skeleton width=\"100px\" />\n                    )}\n                  </TextListItem>\n                  {imageVersion?.image?.UpdatedAt ||\n                  data?.LastImageDetails?.image?.UpdatedAt ? (\n                    <TextListItem component=\"p\">\n                      {`Last updated `}\n                      <DateFormat\n                        date={\n                          imageVersion\n                            ? imageVersion?.image?.UpdatedAt\n                            : data?.LastImageDetails?.image?.UpdatedAt\n                        }\n                      />\n                    </TextListItem>\n                  ) : (\n                    <Skeleton width=\"200px\" />\n                  )}\n                </TextList>\n              </SplitItem>\n              <SplitItem isFilled></SplitItem>\n              <SplitItem>\n                <Dropdown\n                  position={DropdownPosition.right}\n                  toggle={\n                    <DropdownToggle\n                      id={dropdownId}\n                      toggleIndicator={CaretDownIcon}\n                      onToggle={(newState) => setIsOpen(newState)}\n                      isDisabled={\n                        (imageVersion\n                          ? imageVersion?.image?.Status\n                          : data?.LastImageDetails?.image.Status) ===\n                          'BUILDING' || false\n                      }\n                      aria-label={actionsLabel}\n                    >\n                      <Tooltip\n                        content={actionsLabel}\n                        reference={() => document.getElementById(dropdownId)}\n                      />\n                      Actions\n                    </DropdownToggle>\n                  }\n                  isOpen={isOpen}\n                  dropdownItems={dropdownItems(\n                    data,\n                    imageVersion,\n                    data?.ImageBuildIsoURL,\n                    openUpdateWizard\n                  )}\n                />\n              </SplitItem>\n            </Split>\n          </TextContent>\n        </>\n      )}\n    </>\n  );\n};\n\nDetailsHead.propTypes = {\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n  openUpdateWizard: PropTypes.func,\n};\n\nexport default DetailsHead;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  Text,\n  TextVariants,\n  Grid,\n  GridItem,\n  ClipboardCopy,\n  Skeleton,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\n\nconst ImageDetailTab = ({ imageData, imageVersion }) => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    imageVersion\n      ? setData(imageVersion)\n      : setData(imageData?.data?.LastImageDetails);\n  }, [imageData, imageVersion]);\n\n  const createSkeleton = (rows) =>\n    [...Array(rows * 2)].map((_, key) => <Skeleton width=\"180px\" key={key} />);\n\n  const dateFormat = () => <DateFormat date={data?.image?.['CreatedAt']} />;\n\n  const detailsMapper = {\n    Version: 'Version',\n    Created: () => dateFormat(),\n    'Type(s)': () =>\n      data?.image?.['OutputTypes']?.map((outputType, index) => (\n        <div key={index}>{outputType}</div>\n      )),\n    Release: () => distributionMapper?.[data?.image?.['Distribution']],\n    //Size: 'Size',\n    Description: 'Description',\n  };\n\n  const userInfoMapper = {\n    Username: () => data?.image?.Installer?.Username,\n    'SSH key': () => data?.image?.Installer?.SshKey,\n  };\n  const renderAdditionalPackageLink = () => {\n    return (\n      <Link\n        to={`${paths.manageImages}/${data?.image?.ImageSetID}/versions/${data?.image?.ID}/packages/additional`}\n      >\n        {data?.additional_packages}\n      </Link>\n    );\n  };\n\n  const renderTotalPackageLink = () => {\n    return (\n      <Link\n        to={`${paths.manageImages}/${data?.image?.ImageSetID}/versions/${data?.image?.ID}/packages/all`}\n      >\n        {data?.packages}\n      </Link>\n    );\n  };\n\n  const packageMapper = {\n    'Total additional packages': renderAdditionalPackageLink,\n    'Total packages': renderTotalPackageLink,\n  };\n\n  const packageDiffMapper = {\n    Added: () => data?.update_added,\n    Removed: () => data?.update_removed,\n    Updated: () => data?.update_updated,\n  };\n\n  if (data?.image?.Installer?.Checksum) {\n    detailsMapper['SHA-256 checksum'] = () => data?.image?.Installer?.Checksum;\n  }\n\n  if (data?.image?.Commit?.OSTreeCommit) {\n    detailsMapper['Ostree commit hash'] = () =>\n      data?.image?.Commit?.OSTreeCommit;\n  }\n\n  const buildTextList = (labelsToValueMapper) =>\n    data\n      ? Object.entries(labelsToValueMapper).map(([label, value], index) => {\n          return (\n            <Fragment key={index}>\n              <TextListItem\n                className=\"details-label\"\n                component={TextListItemVariants.dt}\n              >\n                {label}\n              </TextListItem>\n              {label === 'SHA-256 checksum' ||\n              label === 'Ostree commit hash' ||\n              (label === 'SSH key' && value()) ? (\n                <TextListItem component={TextListItemVariants.dd}>\n                  <ClipboardCopy\n                    hoverTip=\"Copy\"\n                    clickTip=\"Copied\"\n                    variant=\"expansion\"\n                    className=\"pf-u-text-break-word\"\n                    id={`${label\n                      .replace(/\\s+/g, '-')\n                      .toLowerCase()}-clipboard-copy`}\n                  >\n                    {typeof value === 'function'\n                      ? value() || 'Unavailable'\n                      : data?.image?.[value] || 'Unavailable'}\n                  </ClipboardCopy>\n                </TextListItem>\n              ) : (\n                <TextListItem\n                  className=\"pf-u-text-break-word\"\n                  component={TextListItemVariants.dd}\n                >\n                  {typeof value === 'function'\n                    ? value() === 0\n                      ? 0\n                      : value() || 'Unavailable'\n                    : data?.image?.[value] || 'Unavailable'}\n                </TextListItem>\n              )}\n            </Fragment>\n          );\n        })\n      : null;\n\n  return (\n    <TextContent className=\"pf-u-ml-lg pf-u-mt-md\">\n      <Grid span={12}>\n        <GridItem span={5}>\n          <Text component={TextVariants.h2}>\n            {imageVersion ? 'Details' : 'Most recent image'}\n          </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(detailsMapper) || createSkeleton(6)}\n          </TextList>\n          <Text component={TextVariants.h2}>User information </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(userInfoMapper) || createSkeleton(2)}\n          </TextList>\n        </GridItem>\n        <GridItem span={1} />\n        <GridItem span={6}>\n          <Text component={TextVariants.h2}>Packages </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(packageMapper) || createSkeleton(3)}\n          </TextList>\n          <Text component={TextVariants.h2}>Changes from previous version</Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(packageDiffMapper) || createSkeleton(3)}\n          </TextList>\n        </GridItem>\n      </Grid>\n    </TextContent>\n  );\n};\n\nImageDetailTab.propTypes = {\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n};\n\nexport default ImageDetailTab;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Status from '../../components/Status';\nimport { imageTypeMapper } from '../../constants';\nimport { getImageSetViewVersions } from '../../api/images';\nimport { cellWidth } from '@patternfly/react-table';\nimport { truncateString } from '../../utils';\nimport useApi from '../../hooks/useApi';\n\nconst defaultFilters = [\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Version',\n    type: 'version',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Output',\n    type: 'image_type',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Ostree commit hash',\n    type: 'ostree_commit_hash',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Created',\n    type: 'created_at',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(35)],\n  },\n];\n\nconst createRows = (data, imageSetId, latestImageVersion) => {\n  return data?.map((image) => ({\n    rowInfo: {\n      id: image?.ID,\n      imageStatus: image?.Status,\n      isoURL: image?.ImageBuildIsoURL,\n      latestImageVersion,\n      currentImageVersion: image.Version,\n    },\n    noApiSortFilter: [\n      image?.Version,\n      imageTypeMapper[image?.ImageType],\n      image?.CreatedAt,\n      image?.Status,\n    ],\n    cells: [\n      {\n        title: (\n          <Link\n            to={`${paths.manageImages}/${imageSetId}/versions/${image.ID}/details`}\n          >\n            {image?.Version}\n          </Link>\n        ),\n      },\n      {\n        title: imageTypeMapper[image?.ImageType],\n      },\n      {\n        title: image?.CommitCheckSum ? (\n          <Tooltip content={<div>{image.CommitCheckSum}</div>}>\n            <span>{truncateString(image.CommitCheckSum, 5, 5)}</span>\n          </Tooltip>\n        ) : (\n          <Text>Unavailable</Text>\n        ),\n      },\n      {\n        title: <DateFormat date={image?.CreatedAt} />,\n      },\n      {\n        title: <Status type={image?.Status.toLowerCase()} />,\n      },\n    ],\n  }));\n};\n\nconst ImageVersionsTab = ({ imageData, openUpdateWizard }) => {\n  const imageSetID = imageData?.data?.ImageSet?.ID;\n  const latestImageVersion = imageData?.data?.ImageSet?.Version;\n\n  const [response, fetchImageSetVersions] = useApi({\n    api: ({ query }) =>\n      getImageSetViewVersions({\n        imageSetID: imageSetID,\n        query,\n      }),\n    tableReload: true,\n  });\n\n  const { data, isLoading, hasError } = response;\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: 'Download',\n        onClick: (_event, _rowId, rowData) => {\n          window.open(rowData.rowInfo.isoURL);\n        },\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo.id);\n        },\n        isDisabled:\n          rowData?.rowInfo?.latestImageVersion !==\n          rowData?.rowInfo?.currentImageVersion,\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        filters={defaultFilters}\n        loadTableData={fetchImageSetVersions}\n        tableData={{\n          count: data?.count,\n          data: data?.data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columnNames}\n        rows={createRows(data?.data, imageSetID, latestImageVersion)}\n        actionResolver={actionResolver}\n        areActionsDisabled={areActionsDisabled}\n        defaultSort={{ index: 3, direction: 'desc' }}\n      />\n    </section>\n  );\n};\nImageVersionsTab.propTypes = {\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  imageSetID: PropTypes.number,\n  createRows: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n};\n\nexport default ImageVersionsTab;\n","import React, { useState, useEffect } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { cellWidth } from '@patternfly/react-table';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Empty from '../../components/Empty';\n\nconst defaultFilters = [{ label: 'Name', type: 'text' }];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Release',\n    type: 'release',\n    sort: false,\n    columnTransforms: [cellWidth(35)],\n  },\n  //{ title: 'Type', type: 'type', sort: false, columnTransforms: [cellWidth(35)] },\n];\n\nconst createRows = ({\n  distribution,\n  installedPackages,\n  addedPackages,\n  showAll,\n}) => {\n  const rowData =\n    showAll === 0\n      ? installedPackages.filter(\n          (pack) =>\n            addedPackages?.filter((image) => pack.name === image.Name).length >\n            0\n        )\n      : installedPackages;\n  return rowData.map((packageData) => ({\n    noApiSortFilter: [\n      packageData?.name,\n      packageData?.version,\n      packageData?.release,\n      //packageData?.type,\n    ],\n    cells: [\n      packageData?.name,\n      packageData?.version,\n      packageData?.release,\n      //packageData?.type,\n      {\n        title: (\n          <a\n            href={`https://access.redhat.com/downloads/content/rhel---${distribution}/x86_64/7416/${packageData?.name}/${packageData?.version}-${packageData?.release}/${packageData?.arch}/fd431d51/package`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Button\n              variant=\"link\"\n              isSmall\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n            >\n              More information\n            </Button>\n          </a>\n        ),\n      },\n    ],\n  }));\n};\n\nconst indexToTabs = {\n  0: 'additional',\n  1: 'all',\n};\n\nconst tabsToIndex = {\n  additional: 0,\n  all: 1,\n};\n\nconst ImagePackagesTab = ({ imageVersion }) => {\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  const splitUrl = pathname.split('/');\n  const defaultToggle = splitUrl.length === 7 ? tabsToIndex[splitUrl[6]] : 1;\n  // Distribution examples would be: rhel-86, rhel-90, and rhel-100\n  const distribution = imageVersion?.image?.Distribution?.split('-')[1].slice(\n    0,\n    -1\n  );\n\n  const [packageData, setPackageData] = useState({});\n  const [toggleTable, setToggleTable] = useState(defaultToggle);\n\n  useEffect(() => {\n    setPackageData(imageVersion);\n  }, [imageVersion]);\n\n  useEffect(() => {\n    splitUrl[5] !== indexToTabs[toggleTable] && setToggleTable(defaultToggle);\n  }, [splitUrl]);\n\n  const handleToggleTable = (toggleIndex) => {\n    const currentTab = splitUrl[5]?.toLowerCase();\n    setToggleTable(toggleIndex);\n    if (currentTab === 'packages') {\n      if (splitUrl.length === 7) {\n        splitUrl[6] = indexToTabs[toggleIndex];\n      } else {\n        splitUrl.push(indexToTabs[toggleIndex]);\n      }\n\n      history.push(splitUrl.join('/'));\n    }\n  };\n\n  return imageVersion?.image?.Commit?.Status === 'SUCCESS' ? (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <GeneralTable\n        apiFilterSort={false}\n        filters={defaultFilters}\n        tableData={{\n          count:\n            toggleTable === 0\n              ? packageData?.additional_packages\n              : packageData?.packages,\n          isLoading: false,\n          hasError: false,\n        }}\n        columnNames={columnNames}\n        rows={\n          packageData?.image?.Commit?.InstalledPackages\n            ? createRows({\n                distribution: distribution,\n                installedPackages:\n                  packageData?.image?.Commit?.InstalledPackages,\n                addedPackages: packageData?.image?.Packages,\n                showAll: toggleTable,\n              })\n            : []\n        }\n        actionResolver={() => []}\n        areActionsDisabled={() => true}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        toggleButton={[\n          { title: 'Additional', key: 0 },\n          { title: 'All', key: 1 },\n        ]}\n        toggleAction={handleToggleTable}\n        toggleState={toggleTable}\n        emptyFilterState={{\n          icon: 'search',\n          title: 'No packages to display',\n        }}\n      />\n    </section>\n  ) : (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <Empty\n        bgColor=\"white\"\n        title=\"Package data currently unavailable\"\n        body=\"Packages will be displayed as soon as the image is finished being built.\"\n        primaryAction={null}\n        secondaryActions={[]}\n      />\n    </section>\n  );\n};\n\nImagePackagesTab.propTypes = {\n  imageVersion: PropTypes.object,\n};\n\nexport default ImagePackagesTab;\n","import React, { useState, useEffect } from 'react';\nimport { Tabs, Tab, TabTitleText, Skeleton } from '@patternfly/react-core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\n\nimport ImageDetailTab from './ImageDetailTab';\nimport ImageVersionTab from './ImageVersionsTab';\nimport ImagePackagesTab from './ImagePackagesTab';\nimport PropTypes from 'prop-types';\nimport EmptyState from '../../components/Empty';\n\nimport { mapUrlToObj } from '../../utils';\n\n// conditional render for same index\nconst tabs = {\n  details: 0,\n  packages: 1,\n  versions: 1,\n};\n\nconst ImageDetailTabs = ({\n  imageData,\n  openUpdateWizard,\n  imageVersion,\n  isLoading,\n}) => {\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const [activeTabKey, setActiveTabkey] = useState(tabs.details);\n  const activeTab = imageVersion ? 'imageTab' : 'imageSetTab';\n\n  const keys = [\n    'baseURL',\n    'imageSetVersion',\n    'imageSetTab',\n    'imageVersion',\n    'imageTab',\n    'packagesToggle',\n  ];\n  const imageUrlMapper = mapUrlToObj(pathname, keys);\n\n  const handleTabClick = (_event, tabIndex) => {\n    const selectedTab =\n      tabIndex === 0 ? 'details' : imageVersion ? 'packages' : 'versions';\n\n    imageUrlMapper[activeTab] = selectedTab;\n\n    history.push(imageUrlMapper.buildUrl());\n\n    setActiveTabkey(tabIndex);\n  };\n\n  useEffect(() => {\n    imageUrlMapper['imageTab']\n      ? setActiveTabkey(tabs[imageUrlMapper['imageTab']])\n      : setActiveTabkey(tabs[imageUrlMapper['imageSetTab']]);\n  }, [pathname]);\n\n  return (\n    <>\n      {!imageData.isLoading && imageData.hasError ? (\n        <EmptyState\n          icon=\"question\"\n          title=\"Image not found\"\n          body=\"Please check you have the correct link with the correct image Id.\"\n          primaryAction={{\n            text: 'Back to Manage Images',\n            href: paths.manageImages,\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <div className=\"edge-c-device--detail add-100vh\">\n          <Tabs\n            className=\"pf-u-ml-md\"\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n          >\n            <Tab\n              eventKey={tabs.details}\n              title={<TabTitleText>Details</TabTitleText>}\n            >\n              <ImageDetailTab\n                imageData={imageData}\n                imageVersion={imageVersion}\n              />\n            </Tab>\n            {isLoading ? (\n              <Tab\n                title={\n                  <TabTitleText>\n                    <Skeleton width=\"75px\" />\n                  </TabTitleText>\n                }\n              ></Tab>\n            ) : imageVersion ? (\n              <Tab\n                eventKey={tabs.packages}\n                title={<TabTitleText>Packages</TabTitleText>}\n              >\n                <ImagePackagesTab imageVersion={imageVersion} />\n              </Tab>\n            ) : (\n              <Tab\n                eventKey={tabs.versions}\n                title={<TabTitleText>Versions</TabTitleText>}\n              >\n                <ImageVersionTab\n                  imageData={imageData}\n                  openUpdateWizard={openUpdateWizard}\n                />\n              </Tab>\n            )}\n          </Tabs>\n        </div>\n      )}\n    </>\n  );\n};\n\nImageDetailTabs.propTypes = {\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n  openUpdateWizard: PropTypes.func,\n  isLoading: PropTypes.bool,\n};\n\nexport default ImageDetailTabs;\n","import React, { Fragment, Suspense, useEffect, useState } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Stack, StackItem, Spinner, Bullseye } from '@patternfly/react-core';\nimport { useParams, useHistory, useLocation } from 'react-router-dom';\nimport DetailsHead from './DetailsHeader';\nimport ImageDetailTabs from './ImageDetailTabs';\nimport UpdateImageWizard from '../ImageManager/UpdateImageWizard';\nimport useApi from '../../hooks/useApi';\nimport { getImageSetView } from '../../api/images';\n\nconst ImageDetail = () => {\n  const { imageId, imageVersionId } = useParams();\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const [updateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    updateId: null,\n  });\n  const [imageVersion, setImageVersion] = useState(null);\n\n  const [response, fetchImageSetDetails] = useApi({\n    api: getImageSetView,\n    id: imageVersionId ? `${imageId}/versions/${imageVersionId}` : `${imageId}`,\n    tableReload: true,\n  });\n\n  const { data, isLoading } = response;\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard((prevState) => ({\n      ...prevState,\n      isOpen: !prevState.isLoading,\n      updateId: id,\n    }));\n  };\n\n  useEffect(() => {\n    imageVersionId\n      ? setImageVersion(data?.ImageDetails)\n      : setImageVersion(null);\n  }, [response, imageVersionId]);\n\n  useEffect(() => {\n    fetchImageSetDetails();\n  }, [imageId, imageVersionId]);\n\n  const reload = async () => {\n    await fetchImageSetDetails();\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Stack hasGutter>\n          <StackItem>\n            <DetailsHead\n              imageData={response}\n              imageVersion={imageVersion}\n              openUpdateWizard={openUpdateWizard}\n            />\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <ImageDetailTabs\n        imageData={response}\n        urlParam={imageId}\n        imageVersion={imageVersion}\n        openUpdateWizard={openUpdateWizard}\n        isLoading={isLoading}\n      />\n      {updateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateWizard((prevState) => ({ ...prevState, isOpen: false }));\n            }}\n            updateImageID={updateWizard.updateId}\n            reload={reload}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const EDGE_API = '/api/edge/v1';\nexport const CONTENT_SOURCES_API = '/api/content-sources/v1';\n\nexport const getTableParams = (q) => {\n  if (q === undefined) {\n    return '';\n  }\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n"],"names":["UpdateImage","navigateBack","updateImageID","reload","notificationProp","useState","user","setUser","dispatch","useDispatch","closeAction","useEffect","insights","chrome","auth","getUser","then","result","undefined","useApi","api","getImageById","id","response","data","isLoading","temporaryReleasesFlag","useFeatureFlags","imageWizardFeatureFlag","statusMessages","onSuccess","title","description","onError","onClose","customComponentMapper","review","ReviewStep","onSubmit","values","setIsSaving","payload","Id","image","ID","name","Name","version","Version","architecture","credentials","Installer","SshKey","username","Username","apiWithToast","createImage","defaultArch","initialValues","imageID","isUpdate","Description","release","Distribution","release_options","getReleases","supportedReleases","temporaryReleases","imageType","Packages","map","pkg","ThirdPartyRepositories","repo","CustomPackages","test","schema","fields","component","componentTypes","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","updateDetails","imageOutput","registration","repositories","packages","additionalCustomPackages","customPackages","isSVG","diameter","propTypes","PropTypes","defaultProps","dropdownItems","imageVersion","isoURL","openUpdateWizard","imageData","LastImageDetails","actionsArray","push","DropdownItem","key","onClick","Text","href","rel","target","DetailsHead","isOpen","setIsOpen","setData","actionsLabel","dropdownId","hasError","Breadcrumb","BreadcrumbItem","Link","to","paths","ImageSet","isActive","Skeleton","width","TextContent","Split","SplitItem","TextList","TextListItem","T","Status","type","toLowerCase","UpdatedAt","DateFormat","date","isFilled","Dropdown","position","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","onToggle","newState","isDisabled","Tooltip","content","reference","document","getElementById","ImageBuildIsoURL","ImageDetailTab","createSkeleton","rows","Array","_","detailsMapper","Created","outputType","index","Release","distributionMapper","userInfoMapper","packageMapper","ImageSetID","additional_packages","packageDiffMapper","Added","update_added","Removed","update_removed","Updated","update_updated","Checksum","Commit","OSTreeCommit","buildTextList","labelsToValueMapper","Object","entries","label","value","Fragment","TextListItemVariants","ClipboardCopy","hoverTip","clickTip","variant","replace","Grid","span","GridItem","TextVariants","TextListVariants","defaultFilters","options","option","columnNames","sort","columnTransforms","cellWidth","createRows","imageSetId","latestImageVersion","rowInfo","imageStatus","currentImageVersion","noApiSortFilter","imageTypeMapper","ImageType","CreatedAt","cells","CommitCheckSum","truncateString","ImageVersionsTab","imageSetID","query","getImageSetViewVersions","tableReload","fetchImageSetVersions","GeneralTable","apiFilterSort","isUseApi","filters","loadTableData","tableData","count","actionResolver","rowData","_event","_rowId","window","open","areActionsDisabled","defaultSort","direction","urlParam","distribution","installedPackages","addedPackages","showAll","filter","pack","length","packageData","arch","Button","isSmall","icon","iconPosition","indexToTabs","tabsToIndex","additional","all","ImagePackagesTab","history","useHistory","splitUrl","useLocation","pathname","split","defaultToggle","slice","setPackageData","toggleTable","setToggleTable","InstalledPackages","toggleButton","toggleAction","toggleIndex","currentTab","join","toggleState","emptyFilterState","Empty","bgColor","body","primaryAction","secondaryActions","tabs","details","versions","ImageDetailTabs","activeTabKey","setActiveTabkey","activeTab","imageUrlMapper","mapUrlToObj","text","Tabs","activeKey","onSelect","tabIndex","selectedTab","buildUrl","Tab","eventKey","TabTitleText","useParams","imageId","imageVersionId","updateId","updateWizard","setUpdateWizard","setImageVersion","getImageSetView","fetchImageSetDetails","search","URLSearchParams","update_image","toString","prevState","ImageDetails","PageHeader","Stack","hasGutter","StackItem","Suspense","fallback","Bullseye","Spinner","UpdateImageWizard","checkImageName","instance","EDGE_API","imageTypes","thirdPartyRepositories","item","outputTypes","commit","installer","sshkey","URL","uuid","endpoint","getImageSet","q","limit","offset","sort_by","getTableParams","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","params","IMAGE_BUILDER_API","getImageSets","postRpmsNames","urls","CONTENT_SOURCES_API","keys","reduce","acc","curr","multiVals","val","includes","statusMapper","booting","Icon","iconMapper","color","colorMapper","labelColor","building","created","upToDate","success","passed","updateAvailable","updating","error","default","interrupted","unresponsive","errorWithExclamationCircle","getDeviceStatus","deviceStatus","isUpdateAvailable","dispatcherStatus","isLabel","toolTipContent","isLink","prototype","hasOwnProperty","call","Label","style","textDecoration","cursor","setIsLoading","setHasError","hasSuccess","fetchData","addNotification"],"sourceRoot":""}