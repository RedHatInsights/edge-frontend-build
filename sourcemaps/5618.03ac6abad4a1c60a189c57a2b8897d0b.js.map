{"version":3,"file":"js/5618.47380c722f357e3fdb50.js","mappings":"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","sources":["webpack:///./src/Routes/Devices/DevicesView.js","webpack:///./src/constants/routeMapper.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React from 'react';\nimport DeviceTable from './DeviceTable';\nimport useApi from '../../hooks/useApi';\nimport PropTypes from 'prop-types';\nimport { getInventory, getInventoryByGroup } from '../../api/devices';\n\nconst DevicesView = (props) => {\n  const [response, fetchDevices] = useApi({\n    api: props?.groupUUID ? getInventoryByGroup : getInventory,\n    id: props?.groupUUID ? props?.groupUUID.toString() : '',\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  return (\n    <DeviceTable\n      isLoading={isLoading}\n      hasError={hasError}\n      count={data?.count}\n      data={data?.data?.devices || []}\n      fetchDevices={fetchDevices}\n      enforceEdgeGroups={data?.data?.enforce_edge_groups}\n      {...props}\n    />\n  );\n};\n\nDevicesView.propTypes = {\n  groupUUID: PropTypes.string,\n};\n\nexport default DevicesView;\n","export const routes = {\n  groups: '/groups',\n  groupsDetail: '/groups/:uuid',\n  deviceDetail: '/groups/:uuid/:inventoryId',\n  canaries: '/canaries',\n  fleetManagement: '/fleet-management',\n  fleetManagementDetail: '/fleet-management/:groupId',\n  fleetManagementSystemDetail: '/fleet-management/:groupId/systems/:deviceId',\n  fleetManagementSystemDetailUpdate:\n    '/fleet-management/:groupId/systems/:deviceId/update',\n  inventory: '/inventory',\n  insightsInventory: '/insights/inventory/manage-edge-inventory',\n  inventoryDetail: '/inventory/:deviceId',\n  inventoryDetailModal: '/inventory/:deviceId/:modalId',\n  inventoryDetailUpdate: '/inventory/:deviceId/update',\n  insightsInventoryDetailUpdate: '/insights/inventory/:deviceId/update',\n  manageImages: '/manage-images',\n  manageImagesDetail: '/manage-images/:imageId',\n  manageImagesDetailVersion: '/manage-images/:imageId/versions/:imageVersionId',\n  repositories: '/repositories',\n  learningResources: '/learning-resources',\n  contentSourcesRepositories: '/preview/insights/content',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n"],"names":["DevicesView","props","_data$data","_data$data2","_useApi","useApi","api","groupUUID","getInventoryByGroup","getInventory","id","toString","tableReload","_useApi2","_slicedToArray","response","fetchDevices","data","isLoading","hasError","React","DeviceTable","_extends","count","devices","enforceEdgeGroups","enforce_edge_groups","propTypes","PropTypes","routes","groups","groupsDetail","deviceDetail","canaries","fleetManagement","fleetManagementDetail","fleetManagementSystemDetail","fleetManagementSystemDetailUpdate","inventory","insightsInventory","inventoryDetail","inventoryDetailModal","inventoryDetailUpdate","insightsInventoryDetailUpdate","manageImages","manageImagesDetail","manageImagesDetailVersion","repositories","learningResources","contentSourcesRepositories","_ref","_statusMessages","_ref$id","statusMessages","_ref$tableReload","dispatch","useDispatch","_useState","useState","_useState2","setData","_useState3","_useState4","setIsLoading","_useState5","_useState6","setHasError","_useState7","_useState8","apiFunc","setAPIFunc","hasSuccess","onSuccess","title","description","onError","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","query","_data","_args","arguments","_context","prev","next","length","undefined","sent","_objectSpread","addNotification","variant","t0","finish","stop","apply","useEffect"],"sourceRoot":""}