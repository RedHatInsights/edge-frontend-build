{"version":3,"file":"js/2805.19ccb53655bf27150589.js","mappings":"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","sources":["webpack:///./src/Routes/Devices/UpdateSystem.js","webpack:///./src/api/devices/index.js","webpack:///./src/api/index.js","webpack:///./src/hooks/useApi.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React, { useState } from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Card,\n  CardBody,\n  Divider,\n  Page,\n  PageSection,\n  Skeleton,\n  Text,\n  TextContent,\n  Title,\n} from '@patternfly/react-core';\nimport { getDeviceUpdates, updateSystem } from '../../api/devices';\nimport { distributionMapper } from '../../constants';\nimport { useDispatch } from 'react-redux';\nimport { routes as paths } from '../../constants/routeMapper';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useApi from '../../hooks/useApi';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  headerCol,\n} from '@patternfly/react-table';\nimport {\n  useParams,\n  useHistory,\n  useLocation,\n  useRouteMatch,\n} from 'react-router-dom';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { createLink } from '../../utils';\n\nconst filters = [\n  { label: 'Version', type: 'text' },\n  { label: 'Release', type: 'text' },\n  { label: 'Additional packages', type: 'text' },\n  { label: 'All packages', type: 'text' },\n  { label: 'Systems running', type: 'text' },\n  { label: 'Created', type: 'text' },\n];\n\nconst columns = [\n  {\n    title: 'Version',\n    cellTransforms: [headerCol('selectable-radio')],\n  },\n  { title: 'Release' },\n  { title: 'Additional packages' },\n  { title: 'All packages' },\n  { title: 'Systems running' },\n  { title: 'Created' },\n];\n\nconst CurrentVersion = ({ image }) => {\n  const current_version = [\n    {\n      version: image.cells[0],\n      release: image.cells[1],\n      additionalPackages: image.cells[2],\n      allPackages: image.cells[3],\n      systemsRunning: image.cells[4],\n      created: image.cells[5],\n    },\n  ];\n  const columnNames = {\n    version: 'Version',\n    release: 'Release',\n    additionalPackages: 'Additional packages',\n    allPackages: 'All packages',\n    systemsRunning: 'Systems running',\n    created: 'Created',\n  };\n\n  return (\n    <>\n      <TextContent>\n        <Title headingLevel=\"h2\">\n          <Text>Current version</Text>\n        </Title>\n      </TextContent>\n      <TableComposable\n        aria-label=\"Current version table\"\n        variant={'compact'}\n        borders={false}\n      >\n        <Thead>\n          <Tr style={{ borderBottomStyle: 'hidden' }}>\n            <Th style={{ width: '3%' }}></Th>\n            <Th>{columnNames.version}</Th>\n            <Th>{columnNames.release}</Th>\n            <Th>{columnNames.additionalPackages}</Th>\n            <Th>{columnNames.allPackages}</Th>\n            <Th>{columnNames.systemsRunning}</Th>\n            <Th>{columnNames.created}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {current_version.map((version, index) => (\n            <Tr key={index}>\n              <Td></Td>\n              <Td dataLabel={columnNames.version}>{version.version}</Td>\n              <Td dataLabel={columnNames.release}>{version.release}</Td>\n              <Td dataLabel={columnNames.additionalPackages}>\n                {version.additionalPackages}\n              </Td>\n              <Td dataLabel={columnNames.allPackages}>{version.allPackages}</Td>\n              <Td dataLabel={columnNames.systemsRunning}>\n                {version.systemsRunning}\n              </Td>\n              <Td dataLabel={columnNames.created}>{version.created}</Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </>\n  );\n};\n\nCurrentVersion.propTypes = {\n  image: PropTypes.object,\n};\n\nconst UpdateSystemMain = ({\n  data,\n  fetchDevices,\n  isLoading,\n  hasError,\n  historyProp,\n  locationProp,\n  routeMatchProp,\n}) => {\n  const device = data?.Device;\n  const [selectedVersion, setSelectedVersion] = useState(null);\n  const [selectedCommitID, setSelectedCommitID] = useState(null);\n  const [isUpdateSubmitted, setIsUpdateSubmitted] = useState(false);\n  const dispatch = useDispatch();\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname, search } = locationProp ? locationProp() : useLocation();\n  const match = routeMatchProp ? routeMatchProp() : useRouteMatch();\n  const setUpdateEvent = (value) => {\n    setSelectedVersion(value.cells[0]);\n    setSelectedCommitID(value);\n  };\n\n  const handleUpdateEvent = async () => {\n    setIsUpdateSubmitted(true);\n    const statusMessages = {\n      onInfo: {\n        title: 'Updating system',\n        description: ` ${selectedCommitID.deviceName} was added to the queue.`,\n      },\n      onError: {\n        title: 'Error',\n        description: `Failed to update the selected system(s)`,\n      },\n    };\n\n    await apiWithToast(\n      dispatch,\n      () =>\n        updateSystem({\n          CommitID: selectedCommitID.commitID,\n          DevicesUUID: [selectedCommitID.deviceUUID],\n        }),\n      statusMessages\n    );\n\n    handleClose();\n    setIsUpdateSubmitted(false);\n  };\n\n  const handleClose = () => {\n    // Return either to the system detail, group detail, or inventory page,\n    // depending on path and from_details param\n    let destPath = paths.inventory;\n    if (match.path === paths.inventoryDetailUpdate) {\n      destPath = search.includes('from_details=true')\n        ? paths.inventoryDetail\n        : paths.inventory;\n    }\n    if (match.path === paths.fleetManagementSystemDetailUpdate) {\n      destPath = search.includes('from_details=true')\n        ? paths.fleetManagementSystemDetail\n        : paths.fleetManagementDetail;\n    }\n\n    // Construct destination path\n    const pathLen = destPath.split('/').length;\n    const dest = pathname.split('/').slice(0, pathLen).join('/');\n\n    history.push({ pathname: dest });\n  };\n\n  const buildRow = (image) => {\n    const version = image?.Version;\n    const release = distributionMapper[image?.Distribution];\n    const additionalPackages = image?.Packages?.length || 0;\n    const allPackages = image?.TotalPackages;\n    const systemsRunning = image?.SystemsRunning;\n    const created = (\n      <span>\n        <DateFormat type=\"relative\" date={image?.CreatedAt} />\n      </span>\n    );\n    const commitID = image?.CommitID;\n    const deviceUUID = device?.UUID;\n    const deviceName = device?.DeviceName;\n    return {\n      cells: [\n        version,\n        release,\n        additionalPackages,\n        allPackages,\n        systemsRunning,\n        created,\n      ],\n      commitID,\n      deviceUUID,\n      deviceName,\n      selected: selectedVersion === version,\n    };\n  };\n  const currentImage = buildRow(data?.ImageInfo?.Image);\n  const newImages = data?.ImageInfo?.UpdatesAvailable?.map((update) =>\n    buildRow(update?.Image)\n  );\n\n  return (\n    <Page>\n      <PageSection isWidthLimited>\n        <Card>\n          <CardBody>\n            <CurrentVersion image={currentImage} />\n            <TextContent>\n              <Title headingLevel=\"h2\">\n                <Text className=\"pf-u-mt-md\">Select version to update to</Text>\n              </Title>\n            </TextContent>\n            <>\n              <GeneralTable\n                historyProp={historyProp}\n                locationProp={locationProp}\n                className=\"pf-u-mt-sm\"\n                apiFilterSort={true}\n                isUseApi={true}\n                loadTableData={fetchDevices}\n                filters={filters}\n                tableData={{\n                  count: data?.ImageInfo?.Count,\n                  isLoading,\n                  hasError,\n                }}\n                columnNames={columns}\n                rows={newImages}\n                defaultSort={{ index: 0, direction: 'desc' }}\n                hasRadio={true}\n                setRadioSelection={setUpdateEvent}\n                isFooterFixed={true}\n              />\n              <div\n                style={{\n                  background: 'white',\n                  left: '200px',\n                  position: 'fixed',\n                  height: '90px',\n                  width: '100%',\n                  bottom: '0px',\n                  paddingLeft: '80px',\n                  paddingBottom: '0px',\n                }}\n              >\n                <Divider\n                  style={{\n                    paddingBottom: '25px',\n                    width: '100%',\n                    paddingLeft: 0,\n                  }}\n                />\n\n                <Button\n                  style={{ left: '60px' }}\n                  key=\"confirm\"\n                  variant=\"primary\"\n                  isDisabled={!selectedVersion || isUpdateSubmitted}\n                  onClick={() => handleUpdateEvent()}\n                >\n                  Update system\n                </Button>\n                <Button\n                  style={{ left: '70px' }}\n                  key=\"cancel\"\n                  variant=\"link\"\n                  onClick={handleClose}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </>\n          </CardBody>\n        </Card>\n      </PageSection>\n    </Page>\n  );\n};\n\nUpdateSystemMain.propTypes = {\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  routeMatchProp: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n};\n\nconst UpdateSystem = ({\n  inventoryId,\n  historyProp,\n  locationProp,\n  routeMatchProp,\n  paramsProp,\n}) => {\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { deviceId, groupId } = paramsProp\n    ? paramsProp()\n    : useParams\n    ? useParams()\n    : null;\n  const currentId = inventoryId ? inventoryId : deviceId;\n  const currentInventoryPath = historyProp ? '/edge' : paths.inventory;\n  const [{ data, isLoading, hasError }, fetchDevices] = useApi({\n    api: getDeviceUpdates,\n    id: currentId,\n    tableReload: true,\n  });\n\n  const device = data?.Device;\n  const groupName = groupId\n    ? device?.DevicesGroups?.find((group) => group.ID.toString() === groupId)\n        ?.Name\n    : null;\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {!groupName ? (\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              {createLink({\n                pathname:\n                  currentInventoryPath === '/edge' ? '/' : currentInventoryPath,\n                linkText: 'Systems',\n                history,\n              })}\n            </BreadcrumbItem>\n            <BreadcrumbItem>\n              {createLink({\n                pathname: `${currentInventoryPath}/${currentId}/`,\n                linkText: device?.DeviceName || <Skeleton width=\"100px\" />,\n                history,\n              })}\n            </BreadcrumbItem>\n            <BreadcrumbItem>Update</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb ouiaId=\"groups-list\">\n            <BreadcrumbItem>\n              {createLink({\n                pathname: paths.fleetManagement,\n                linkText: 'Groups',\n                history,\n              })}\n            </BreadcrumbItem>\n            <BreadcrumbItem>\n              {createLink({\n                pathname: `${paths.fleetManagement}/${groupId}`,\n                linkText: groupName || <Skeleton width=\"100px\" />,\n                history,\n              })}\n            </BreadcrumbItem>\n            <BreadcrumbItem>\n              {createLink({\n                pathname: `${paths.fleetManagement}/${groupId}/systems/${currentId}/`,\n                linkText: device?.DeviceName,\n                history,\n              })}\n            </BreadcrumbItem>\n            <BreadcrumbItem>Update</BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <PageHeaderTitle title=\"Update\" />\n        <TextContent className=\"pf-u-mt-md\">\n          {device?.DeviceName ? (\n            <Text>\n              {'Update '}\n              <strong>{device?.DeviceName}</strong>\n              {' to a newer version of '}\n              <strong>{data?.ImageInfo?.Image?.Name}</strong>\n              {' by selecting a new version from the table below.'}\n            </Text>\n          ) : (\n            <Skeleton width=\"100px\" />\n          )}\n        </TextContent>\n      </PageHeader>\n      <section className=\"edge-devices pf-l-page__main-section pf-c-page__main-section\">\n        <UpdateSystemMain\n          data={data}\n          fetchDevices={fetchDevices}\n          isLoading={isLoading}\n          hasError={hasError}\n          historyProp={historyProp}\n          locationProp={locationProp}\n          routeMatchProp={routeMatchProp}\n        />\n      </section>\n    </>\n  );\n};\n\nUpdateSystem.propTypes = {\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  routeMatchProp: PropTypes.func,\n  paramsProp: PropTypes.func,\n  inventoryId: PropTypes.string,\n};\n\nexport default UpdateSystem;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDevice = (id) => {\n  return instance.get(`${EDGE_API}/devices/${id}`);\n};\n\nexport const getDeviceUpdates = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/${id}?${q}`);\n};\n\nexport const updateSystem = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const EDGE_API = '/api/edge/v1';\nexport const CONTENT_SOURCES_API = '/api/content-sources/v1';\n\nexport const getTableParams = (q) => {\n  if (q === undefined) {\n    return '';\n  }\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["filters","label","type","columns","title","cellTransforms","headerCol","CurrentVersion","image","current_version","version","cells","release","additionalPackages","allPackages","systemsRunning","created","columnNames","headingLevel","TableComposable","variant","borders","Thead","Tr","style","borderBottomStyle","Th","width","Tbody","map","index","key","Td","dataLabel","propTypes","PropTypes","UpdateSystemMain","data","fetchDevices","isLoading","hasError","historyProp","locationProp","routeMatchProp","device","Device","useState","selectedVersion","setSelectedVersion","selectedCommitID","setSelectedCommitID","isUpdateSubmitted","setIsUpdateSubmitted","dispatch","useDispatch","history","useHistory","useLocation","pathname","search","match","useRouteMatch","handleUpdateEvent","statusMessages","onInfo","description","deviceName","onError","apiWithToast","updateSystem","CommitID","commitID","DevicesUUID","deviceUUID","handleClose","destPath","paths","path","includes","pathLen","split","length","dest","slice","join","push","buildRow","Version","distributionMapper","Distribution","Packages","TotalPackages","SystemsRunning","date","CreatedAt","UUID","DeviceName","selected","currentImage","ImageInfo","Image","newImages","UpdatesAvailable","update","isWidthLimited","className","apiFilterSort","isUseApi","loadTableData","tableData","count","Count","rows","defaultSort","direction","hasRadio","setRadioSelection","value","isFooterFixed","background","left","position","height","bottom","paddingLeft","paddingBottom","isDisabled","onClick","UpdateSystem","inventoryId","paramsProp","useParams","deviceId","groupId","currentId","currentInventoryPath","useApi","api","getDeviceUpdates","id","tableReload","groupName","DevicesGroups","find","group","ID","toString","Name","ouiaId","createLink","linkText","getInventory","query","q","getTableParams","instance","EDGE_API","getDevice","payload","IMAGE_BUILDER_API","CONTENT_SOURCES_API","undefined","Object","keys","reduce","acc","curr","multiVals","val","setData","setIsLoading","setHasError","hasSuccess","onSuccess","fetchData","addNotification","useEffect","notificationProp","hasInfo","response","err","Title"],"sourceRoot":""}