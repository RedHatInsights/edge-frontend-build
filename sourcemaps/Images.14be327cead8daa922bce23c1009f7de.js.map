{"version":3,"file":"js/Images.3ad71f7960fb1babfd42.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/api/images/index.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React, { Fragment, useEffect, useState, Suspense } from 'react';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport ImageSetsTable from './ImageSetsTable';\nimport { stateToUrlSearch } from '../../utils';\nimport { getImageSets } from '../../api/images';\nimport useApi from '../../hooks/useApi';\nimport PropTypes from 'prop-types';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  locationProp,\n  navigateProp,\n  docLinkProp,\n  notificationProp,\n  showHeaderProp,\n}) => {\n  const chrome = useChrome();\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const { pathname, search } = locationProp ? locationProp() : useLocation();\n  const showHeader = showHeaderProp === undefined ? true : showHeaderProp;\n  const [response, fetchImageSets] = useApi({\n    api: getImageSets,\n    tableReload: true,\n  });\n\n  const { data, isLoading, hasError } = response;\n\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const createHistoryObj = {\n    pathname,\n    search: stateToUrlSearch('create_image=true', true, search),\n  };\n  const updateHistoryObj = {\n    pathname,\n    search: stateToUrlSearch('update_image=true', true, search),\n  };\n\n  const openCreateWizard = () => {\n    if (navigateProp) {\n      navigate({ ...createHistoryObj, replace: true });\n    } else {\n      history.push({ ...createHistoryObj });\n    }\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    if (navigateProp) {\n      navigate({ ...updateHistoryObj, replace: true });\n    } else {\n      history.push({ ...updateHistoryObj });\n    }\n\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  const reload = async () => {\n    await fetchImageSets();\n    setHasModalSubmitted(true);\n  };\n\n  useEffect(() => {\n    chrome?.updateDocumentTitle?.('Images - Manage Images | Edge management');\n  }, [chrome]);\n\n  return (\n    <Fragment>\n      {showHeader && (\n        <PageHeader className=\"pf-m-light\">\n          <PageHeaderTitle title=\"Images\" />\n        </PageHeader>\n      )}\n      <section className=\"edge-images pf-l-page__main-section pf-c-page__main-section\">\n        <ImageSetsTable\n          pathPrefix={pathPrefix}\n          urlName={urlName}\n          historyProp={historyProp}\n          locationProp={locationProp}\n          navigateProp={navigateProp}\n          data={data?.data || []}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          fetchImageSets={fetchImageSets}\n          docLinkProp={docLinkProp}\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      </section>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              if (navigateProp) {\n                navigate({ ...createHistoryObj, replace: true });\n              } else {\n                history.push({\n                  pathname,\n                  search: stateToUrlSearch('create_image=true', false, search),\n                });\n              }\n              setIsCreateWizardOpen(false);\n            }}\n            reload={reload}\n            notificationProp={notificationProp}\n            locationProp={locationProp}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              if (navigateProp) {\n                navigate({ ...updateHistoryObj, replace: true });\n              } else {\n                history.push({\n                  pathname,\n                  search: stateToUrlSearch('update_image=true', false, search),\n                });\n              }\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            reload={reload}\n            updateImageID={UpdateWizard.imageId}\n            notificationProp={notificationProp}\n            locationProp={locationProp}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nImages.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  notificationProp: PropTypes.object,\n  showHeaderProp: PropTypes.bool,\n  docLinkProp: PropTypes.string,\n};\nexport default Images;\n","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n"],"names":["CreateImageWizard","React","UpdateImageWizard","Images","pathPrefix","urlName","historyProp","locationProp","navigateProp","docLinkProp","notificationProp","showHeaderProp","chrome","useChrome","history","useHistory","navigate","useNavigate","useLocation","pathname","search","showHeader","undefined","useApi","api","getImageSets","tableReload","response","fetchImageSets","data","isLoading","hasError","useState","isCreateWizardOpen","setIsCreateWizardOpen","isOpen","imageId","UpdateWizard","setUpdateWizard","hasModalSubmitted","setHasModalSubmitted","createHistoryObj","stateToUrlSearch","updateHistoryObj","reload","useEffect","updateDocumentTitle","Fragment","className","title","count","openCreateWizard","replace","push","openUpdateWizard","id","Suspense","fallback","navigateBack","prevState","updateImageID","propTypes","PropTypes","checkImageName","name","payload","instance","EDGE_API","createImage","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","length","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","Name","URL","uuid","endpoint","getImageSet","q","limit","offset","sort_by","query","getTableParams","getImageSetViewVersions","imageSetID","getImageSetView","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","params","URLSearchParams","IMAGE_BUILDER_API","toString","getImageById","postRpmsNames","urls","CONTENT_SOURCES_API","statusMessages","dispatch","useDispatch","setData","setIsLoading","setHasError","hasSuccess","onSuccess","onError","fetchData","addNotification","variant"],"sourceRoot":""}