{"version":3,"file":"js/GroupsDetailPage.97f32cbfa273687f9b21.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/DeviceStatus.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/constants.js","webpack:///./src/Routes/ImageManager/ImageTable.js","webpack:///./src/Routes/ImageManager/ImagesToolbar.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailActions.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTab.js","webpack:///./src/Routes/ImageManagerDetail/ImagePackagesTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTabs.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/constants.js","webpack:///./src/api/index.js","webpack:///./src/constants.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" /> Success\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" /> Failed\n      </>\n    );\n  }\n  return (\n    <>\n      <ExclamationCircleIcon color=\"red\" /> Unknown\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\n//const ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const {\n    //runningVersion,\n    //stagedVersion,\n    //rollbackVersion,\n    greenbootStatus,\n    rhcHealth,\n  } = useSelector(({ systemProfileStore }) => ({\n    runningVersion: null,\n    stagedVersion: null,\n    nonActiveVersion: null,\n    greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n    rhcHealth: null,\n  }));\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={false}\n        // replace above with below when image data available\n        //BiosCardWrapper={(props) => (\n        //  <Suspense fallback=''>\n        //    {' '}\n        //    <ImageInformationCard {...props} />\n        //  </Suspense>\n        //)}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst DeviceDetailTabs = () => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md pf-u-mb-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default DeviceDetailTabs;\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={uuid ? `/groups` : '/fleet-management'}>\n              {uuid ? 'Groups' : 'Fleet management'}\n            </Link>\n          </BreadcrumbItem>\n          {uuid && (\n            <BreadcrumbItem>\n              {groupName ? (\n                <Link to={`/groups/${uuid}`}>{groupName}</Link>\n              ) : (\n                <Skeleton size={SkeletonSize.xs} />\n              )}\n            </BreadcrumbItem>\n          )}\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead fallback=\"\" hideBack showTags hideInvDrawer />\n      </PageHeader>\n      <Main className=\"edge-c-device--detail\">\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <DeviceDetailTabs />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary</CardTitle>\n    <CardBody>\n      <Grid>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {active}\n              </Button>{' '}\n              Active\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {orphaned}\n              </Button>{' '}\n              Orphaned\n            </StackItem>\n          </Stack>\n        </GridItem>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {noReports}\n              </Button>\n              Stale\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {neverReported}\n              </Button>\n              Registered but never reported\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { getDeviceHasUpdate } from '../../api/index';\nimport PropTypes from 'prop-types';\n\nconst DeviceStatus = ({ id, systemProfile }) => {\n  const [status, setStatus] = useState(undefined);\n  useEffect(() => {\n    (async () => {\n      const imageInfo = (await getDeviceHasUpdate(id)) || { data: null };\n      setStatus(\n        Object.prototype.hasOwnProperty.call(imageInfo, 'data')\n          ? null\n          : imageInfo\n      );\n    })();\n  }, []);\n  const { rpm_ostree_deployments } = systemProfile;\n  if (rpm_ostree_deployments?.length === undefined) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <QuestionCircleIcon color=\"grey\" />\n        </SplitItem>\n        <SplitItem>Unspecified</SplitItem>\n      </Split>\n    );\n  }\n  const current_deployment = rpm_ostree_deployments[0];\n  if (!current_deployment.booted) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color=\"blue\" />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    );\n  }\n  if (status !== null && status !== undefined) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon color={warningColor.value} />\n        </SplitItem>\n        <SplitItem className=\"pf-u-warning-color-200\">\n          Update Available\n        </SplitItem>\n      </Split>\n    );\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">\n        <CheckCircleIcon color=\"green\" />\n      </SplitItem>\n      <SplitItem>Running</SplitItem>\n    </Split>\n  );\n};\n\nDeviceStatus.propTypes = {\n  id: PropTypes.string,\n  systemProfile: PropTypes.shape({\n    rpm_ostree_deployments: PropTypes.arrayOf(\n      PropTypes.shape({\n        booted: PropTypes.bool,\n        checksum: PropTypes.string,\n      })\n    ),\n  }).isRequired,\n};\n\nexport default DeviceStatus;\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport DeviceStatus from './DeviceStatus';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [getEntities, setGetEntities] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('create_image') === 'true') {\n      setIsOpen(() => true);\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles\n          onNewImageClick={() => {\n            history.push({\n              pathname: history.location.pathname,\n              search: new URLSearchParams({\n                create_image: true,\n              }).toString(),\n            });\n            setIsOpen(true);\n          }}\n        />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n            variant: 'compact',\n          }}\n          columns={(defaultColumns) => {\n            const newColumns = defaultColumns.filter((column) =>\n              ['display_name', 'updated'].includes(column.key)\n            );\n            newColumns.filter((col) => col.key === 'updated')[0].props = {\n              width: 20,\n            };\n\n            return [\n              ...newColumns,\n              {\n                key: 'system_profile',\n                title: 'Status',\n                // eslint-disable-next-line react/display-name\n                renderFunc: (sysProf, id) => (\n                  <DeviceStatus id={id} systemProfile={sysProf} />\n                ),\n                props: { width: 20, isStatic: true },\n              },\n            ];\n          }}\n          getEntities={async (_i, config) => {\n            const data = await getEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                  'operating_system',\n                  'greenboot_status',\n                  'greenboot_fallback_detected',\n                  'rpm_ostree_deployments',\n                ],\n              },\n            });\n            return data;\n          }}\n          hideFilters={{ registeredWith: true }}\n          filterConfig={{\n            items: [\n              {\n                label: activeFilters?.deviceStatus?.label,\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value) => {\n                    setActiveFilters(() => ({\n                      ...(activeFilters || {}),\n                      deviceStatus: {\n                        ...(activeFilters?.deviceStatus || {}),\n                        value,\n                      },\n                    }));\n                    inventory.current.onRefreshData();\n                  },\n                  items: deviceStatusMapper,\n                  value: activeFilters?.deviceStatus?.value || [],\n                },\n              },\n            ],\n          }}\n          hasCheckbox={false}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            onDelete: (event, itemsToRemove, isAll) => {\n              if (isAll) {\n                setActiveFilters(defaultFilters);\n              } else {\n                setActiveFilters(() =>\n                  onDeleteFilter(activeFilters, itemsToRemove)\n                );\n              }\n              inventory.current.onRefreshData();\n            },\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities, api }) => {\n            setGetEntities(() => api?.getEntities);\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","export const transformPaginationParams = ({ perPage, page }) => ({\n  limit: perPage,\n  offset: (page - 1) * perPage,\n});\n\nexport const transformFilters = (filters) => {\n  const f = filters.reduce((acc, filter) => {\n    if (!filter.chipKey || filter.chips.length === 0) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [filter.chipKey]: filter.chips.map((chip) => chip.value),\n    };\n  }, {});\n  return f;\n};\n\nexport const transformSort = ({ direction, name }) => {\n  return {\n    sort_by: direction === 'asc' ? name : `-${name}`,\n  };\n};\n\nexport const getFilterDep = (filter = undefined) => {\n  return filter?.chips?.map((chip) => chip.value).join('.') || undefined;\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Title,\n  Button,\n  Spinner,\n  Bullseye,\n  Text,\n} from '@patternfly/react-core';\nimport {\n  imageTypeMapper,\n  distributionMapper,\n} from '../ImageManagerDetail/constants';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImages } from '../../store/actions';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { PlusCircleIcon, SearchIcon } from '@patternfly/react-icons';\nimport { routes as paths } from '../../../package.json';\nimport {\n  transformFilters,\n  transformPaginationParams,\n  transformSort,\n  getFilterDep,\n} from './constants';\nimport PropTypes from 'prop-types';\n\nconst ImageTable = ({\n  filters,\n  pagination,\n  clearFilters,\n  openCreateWizard,\n  openUpdateWizard,\n}) => {\n  const [sortBy, setSortBy] = useState({ index: 4, direction: 'desc' });\n  const dispatch = useDispatch();\n  const { data, isLoading, hasError } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      data: edgeImagesReducer?.data || null,\n      isLoading:\n        edgeImagesReducer?.isLoading === undefined\n          ? true\n          : edgeImagesReducer.isLoading,\n      hasError: edgeImagesReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const columns = [\n    {\n      title: 'Name',\n      type: 'name',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    'Version',\n    {\n      title: 'Distribution',\n      type: 'distribution',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    {\n      title: 'Type',\n      type: 'image_type',\n      transforms: [],\n    },\n    {\n      title: 'Created',\n      type: 'created_at',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    {\n      title: 'Status',\n      type: 'status',\n      transforms: toShowSort ? [] : [sortable],\n    },\n  ];\n  const toShowSort = isLoading || hasError || (!data?.length && hasFilters);\n  useEffect(() => {\n    loadEdgeImages(dispatch, {\n      ...transformFilters(filters),\n      ...transformPaginationParams(pagination),\n      ...transformSort({\n        direction: sortBy.direction,\n        name: columns[sortBy.index].type,\n      }),\n    });\n  }, [\n    pagination.perPage,\n    pagination.page,\n    sortBy.index,\n    sortBy.direction,\n    // We have 3 different filters in the primary toolbar (status, name, distribution):\n    getFilterDep(filters[0]),\n    getFilterDep(filters[1]),\n    getFilterDep(filters[2]),\n  ]);\n  const hasFilters = Object.keys(filters).some((filterKey) => filterKey);\n\n  let rows = [\n    {\n      heightAuto: true,\n      cells: [\n        {\n          props: { colSpan: 8 },\n          title: (\n            <Bullseye>\n              <EmptyState variant=\"small\">\n                <EmptyStateIcon icon={Spinner} />\n              </EmptyState>\n            </Bullseye>\n          ),\n        },\n      ],\n    },\n  ];\n\n  if (isLoading === false && hasError === false) {\n    if (!data?.length && !hasFilters) {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant=\"small\">\n                    <EmptyStateIcon icon={PlusCircleIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      No images found\n                    </Title>\n                    <Button\n                      onClick={openCreateWizard}\n                      isDisabled={isLoading !== false}\n                    >\n                      Create new images\n                    </Button>\n                  </EmptyState>\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    }\n    if (!data?.length && hasFilters) {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant=\"small\">\n                    <EmptyStateIcon icon={SearchIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      No match found\n                    </Title>\n                    <EmptyStateSecondaryActions>\n                      <Button onClick={clearFilters} variant=\"link\">\n                        Clear all filters\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  </EmptyState>\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    }\n\n    if (data?.data?.length) {\n      rows = data.data.map((image) => ({\n        id: image.ID,\n        cells: [\n          {\n            title: (\n              <Link to={`${paths['manage-images']}/${image.ID}`}>\n                {image.Name}\n              </Link>\n            ),\n          },\n          image?.Version,\n          {\n            title: distributionMapper[image?.Distribution],\n          },\n          {\n            title: imageTypeMapper[image?.ImageType],\n          },\n          {\n            title: <DateFormat date={image?.CreatedAt} />,\n          },\n          {\n            title: <StatusLabel status={image?.Status} />,\n          },\n        ],\n        imageStatus: image?.Status,\n        isoURL: image?.Installer?.ImageBuildISOURL,\n      }));\n    }\n  }\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (rowData?.imageStatus === 'SUCCESS') {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.id);\n        },\n      });\n    }\n\n    return actionsArray;\n  };\n\n  return (\n    <Table\n      variant=\"compact\"\n      aria-label=\"Manage Images table\"\n      sortBy={sortBy}\n      onSort={handleSort}\n      actionResolver={actionResolver}\n      cells={columns}\n      rows={rows}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  openUpdateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageTable;\n","import React from 'react';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Button } from '@patternfly/react-core';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst ImageToolbar = ({\n  setPagination,\n  pagination,\n  filterConfig,\n  activeFilters,\n  dispatchActiveFilters,\n  defaultFilters,\n  openCreateWizard,\n}) => {\n  const { count, isLoading } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      isLoading:\n        edgeImagesReducer?.isLoading === undefined\n          ? true\n          : edgeImagesReducer.isLoading,\n      count: edgeImagesReducer?.data?.count || 0,\n    }),\n    shallowEqual\n  );\n\n  return (\n    <PrimaryToolbar\n      filterConfig={filterConfig}\n      pagination={{\n        itemCount: count,\n        ...pagination,\n        onSetPage: (_evt, newPage) =>\n          setPagination({ ...pagination, page: newPage }),\n        onPerPageSelect: (_evt, newPerPage) =>\n          setPagination({ page: 1, perPage: newPerPage }),\n      }}\n      activeFiltersConfig={{\n        filters: isEmptyFilters(activeFilters)\n          ? constructActiveFilters(activeFilters)\n          : [],\n        onDelete: (_event, itemsToRemove, isAll) => {\n          if (isAll) {\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: defaultFilters,\n            });\n          } else {\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: onDeleteFilter(activeFilters, itemsToRemove),\n            });\n          }\n        },\n      }}\n      dedicatedAction={\n        <Button onClick={openCreateWizard} isDisabled={isLoading !== false}>\n          Create new image\n        </Button>\n      }\n    />\n  );\n};\n\nImageToolbar.propTypes = {\n  setPagination: PropTypes.func.isRequired,\n  filterConfig: PropTypes.shape({ items: PropTypes.array }),\n  defaultFilters: PropTypes.shape({\n    name: PropTypes.object,\n    distribution: PropTypes.object,\n    status: PropTypes.object,\n  }),\n  activeFilters: PropTypes.shape({\n    name: PropTypes.object,\n    distribution: PropTypes.object,\n    status: PropTypes.object,\n  }),\n  dispatchActiveFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageToolbar;\n","import React, {\n  Fragment,\n  useState,\n  useReducer,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport ImageTable from './ImageTable';\nimport ImageToolbar from './ImagesToolbar';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport {\n  composeStatus,\n  distributionMapper,\n} from '../ImageManagerDetail/constants';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { isEmptyFilters, constructActiveFilters } from '../../constants';\nimport { RegistryContext } from '../../store';\nimport { edgeImagesReducer } from '../../store/reducers';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    key: 'name',\n    value: '',\n  },\n  distribution: {\n    label: 'Distribution',\n    key: 'distribution',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    key: 'status',\n    value: [],\n  },\n};\n\nconst updateFilter = (state, action) => ({\n  ...state,\n  [action.property]: {\n    ...(state[action.property] || {}),\n    value: action.value,\n  },\n});\n\nconst deleteFilter = (_state, action) => action.payload;\n\nconst activeFilterMapper = {\n  UPDATE_FILTER: updateFilter,\n  DELETE_FILTER: deleteFilter,\n};\n\nconst activeFilterReducer = applyReducerHash(\n  activeFilterMapper,\n  defaultFilters\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [pagination, setPagination] = useState({ page: 1, perPage: 100 });\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n  const [activeFilters, dispatchActiveFilters] = useReducer(\n    activeFilterReducer,\n    defaultFilters\n  );\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        create_image: true,\n      }).toString(),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: defaultFilters.name.label,\n        type: 'text',\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'name',\n              value,\n            }),\n          value: activeFilters?.name?.value || '',\n          placeholder: 'Filter by name',\n        },\n      },\n      {\n        label: defaultFilters.distribution.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'distribution-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'distribution',\n              value,\n            }),\n          items: Object.entries(distributionMapper).map(([value, label]) => ({\n            label,\n            value,\n          })),\n          value: activeFilters?.distribution?.value || '',\n        },\n      },\n      {\n        label: defaultFilters.status.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'status-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'status',\n              value,\n            }),\n          items: composeStatus.map((item) => ({\n            label: item,\n            value: item,\n          })),\n          value: activeFilters?.status?.value || [],\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImagesReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageToolbar\n          setPagination={setPagination}\n          pagination={pagination}\n          filterConfig={filterConfig}\n          activeFilters={activeFilters}\n          dispatchActiveFilters={dispatchActiveFilters}\n          defaultFilters={defaultFilters}\n          openCreateWizard={openCreateWizard}\n        />\n        <ImageTable\n          clearFilters={() =>\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: defaultFilters,\n            })\n          }\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n          filters={\n            isEmptyFilters(activeFilters)\n              ? constructActiveFilters(activeFilters)\n              : []\n          }\n          pagination={pagination}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Text,\n  Button,\n  SplitItem,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n} from '@patternfly/react-core';\n\nconst ImageActions = ({ imageData, openUpdateWizard }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const dropdownItems = [\n    <DropdownItem href={imageData?.Installer?.ImageBuildISOURL} key=\"link\">\n      <Text className=\"force-text-black\">Download</Text>\n    </DropdownItem>,\n  ];\n\n  const handleToggle = (isOpen) => setIsOpen(isOpen);\n\n  const handleSelect = () => {\n    setIsOpen((prevState) => !prevState);\n  };\n\n  const handleUpdate = () => {\n    openUpdateWizard(imageData.ID);\n  };\n\n  return (\n    <>\n      <SplitItem>\n        <Button onClick={handleUpdate} variant=\"secondary\">\n          Update\n        </Button>\n        {imageData?.Installer?.ImageBuildISOURL ? (\n          <Dropdown\n            position=\"right\"\n            onSelect={handleSelect}\n            toggle={\n              <KebabToggle onToggle={handleToggle} id=\"image-detail-kebab\" />\n            }\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n          />\n        ) : null}\n      </SplitItem>\n    </>\n  );\n};\n\nImageActions.propTypes = {\n  openUpdateWizard: PropTypes.func,\n  imageData: PropTypes.shape({\n    ID: PropTypes.number,\n    Name: PropTypes.string,\n    Status: PropTypes.string,\n    Installer: PropTypes.shape({\n      ImageBuildISOURL: PropTypes.string,\n    }),\n  }),\n};\n\nexport default ImageActions;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport StatusLabel from './StatusLabel';\nimport ImageDetailActions from './ImageDetailActions';\nimport { routes as paths } from '../../../package.json';\n\nconst DetailsHead = ({ imageData, openUpdateWizard }) => {\n  return (\n    <>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={paths['manage-images']}>Manage Images</Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{imageData?.Name}</BreadcrumbItem>\n      </Breadcrumb>\n\n      <TextContent>\n        <Split>\n          <SplitItem>\n            <TextList component=\"dl\">\n              <TextListItem component=\"h1\" className=\"grid-align-center\">\n                {imageData?.Name}\n              </TextListItem>\n              <TextListItem component=\"dd\">\n                {imageData?.Status ? (\n                  <StatusLabel status={imageData?.Status} />\n                ) : (\n                  <Skeleton />\n                )}\n              </TextListItem>\n            </TextList>\n          </SplitItem>\n          <SplitItem isFilled></SplitItem>\n          {imageData?.Status === 'SUCCESS' ? (\n            <ImageDetailActions\n              imageData={imageData}\n              openUpdateWizard={openUpdateWizard}\n            />\n          ) : null}\n        </Split>\n      </TextContent>\n    </>\n  );\n};\n\nDetailsHead.propTypes = {\n  openUpdateWizard: PropTypes.func,\n  imageData: PropTypes.shape({\n    ID: PropTypes.number,\n    Name: PropTypes.string,\n    Status: PropTypes.string,\n  }),\n};\n\nexport default DetailsHead;\n","import React from 'react';\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper, imageTypeMapper } from './constants';\n\nconst ImageDetailTab = () => {\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  const dateFormat = () => <DateFormat date={data['CreatedAt']} />;\n  const labelsToValueMapper = {\n    'Image name': 'Name',\n    Version: 'Version',\n    Created: () => dateFormat(),\n    Release: () => distributionMapper[data['Distribution']],\n    'Output type': () => imageTypeMapper[data['ImageType']],\n    'Added packages': () => data.Commit.Packages.length,\n  };\n\n  return (\n    <TextContent className=\"pf-u-ml-lg pf-u-mt-md\">\n      <TextList component={TextListVariants.dl}>\n        {data\n          ? Object.entries(labelsToValueMapper).map(([label, value]) => {\n              return (\n                <>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {label}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    {typeof value === 'function' ? value() : data[value]}\n                  </TextListItem>\n                </>\n              );\n            })\n          : null}\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport default ImageDetailTab;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  EmptyState,\n  Title,\n  Bullseye,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport flatten from 'lodash/flatten';\n\nconst ImagePackagesTab = () => {\n  const [perPage, setPerPage] = useState(10);\n  const [page, setPage] = useState(1);\n  const [sortBy, setSortBy] = useState({});\n  const [rows, setRows] = useState([]);\n  const { data, imageName } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data?.Commit?.Packages || null,\n      imageName: imageDetailReducer?.data?.Name || null,\n    }),\n    shallowEqual\n  );\n\n  const columns = [\n    {\n      title: 'Name',\n      type: 'name',\n      transforms: [sortable],\n    },\n  ];\n\n  const parserRows = (rows) => {\n    return rows.map((pack) => [\n      {\n        id: pack?.ID,\n        rowArray: [pack.Name],\n        cells: [\n          {\n            title: (\n              <TextContent>\n                <Text component={TextVariants.p}>{pack?.Name}</Text>\n              </TextContent>\n            ),\n          },\n        ],\n      },\n    ]);\n  };\n\n  const handleSetPage = (_evt, newPage, perPage, startIdx, endIdx) => {\n    setPage(newPage);\n    setRows(flatten(parserRows(data.slice(startIdx, endIdx))));\n  };\n\n  const handlePerPage = (_evt, newPerPage, newPage, startIdx, endIdx) => {\n    setPerPage(newPerPage);\n    setPage(newPage);\n    setRows(flatten(parserRows(data.slice(startIdx, endIdx))));\n  };\n\n  useEffect(() => {\n    setRows(\n      data !== null && data.length > 0\n        ? flatten(parserRows(data.slice(0, perPage)))\n        : [\n            {\n              heightAuto: true,\n              cells: [\n                {\n                  props: { colSpan: 8 },\n                  title: (\n                    <Bullseye>\n                      <EmptyState variant=\"small\">\n                        <Title headingLevel=\"h2\" size=\"lg\">\n                          {imageName} has no packages\n                        </Title>\n                      </EmptyState>\n                    </Bullseye>\n                  ),\n                },\n              ],\n            },\n          ]\n    );\n  }, [data]);\n\n  const handleSort = (_event, index, direction) => {\n    const sortedRows = data.sort((a, b) =>\n      a.Name < b.Name ? -1 : a.Name > b.Name ? 1 : 0\n    );\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      flatten(\n        parserRows(\n          direction === SortByDirection.asc ? sortedRows : sortedRows.reverse()\n        ).slice(0, perPage)\n      )\n    );\n    setPage(0);\n  };\n\n  return (\n    <Fragment>\n      {data ? (\n        <PrimaryToolbar\n          pagination={{\n            itemCount: data?.length || 0,\n            page,\n            perPage,\n            onSetPage: handleSetPage,\n            onPerPageSelect: handlePerPage,\n            isCompact: true,\n          }}\n        />\n      ) : null}\n      <Table\n        aria-label=\"Image packages table\"\n        ariaLabel=\"packages table\"\n        variant=\"compact\"\n        sortBy={sortBy}\n        onSort={handleSort}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Fragment>\n  );\n};\n\nexport default ImagePackagesTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nimport ImageDetailTab from './ImageDetailTab';\nimport ImagePackagesTab from './ImagePackagesTab';\n\nconst ImageDetailTabs = () => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <ImageDetailTab />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Packages</TabTitleText>}>\n          <ImagePackagesTab />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ImageDetailTabs;\n","import React, {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  Suspense,\n} from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useParams } from 'react-router-dom';\nimport {\n  Stack,\n  StackItem,\n  Text,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { loadImageDetail } from '../../store/actions';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { useHistory } from 'react-router-dom';\nimport DetailsHead from './DetailsHeader';\nimport ImageDetailTabs from './ImageDetailTabs';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst ImageDetail = () => {\n  const { imageId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [isUpdateWizardOpen, setIsUpdateWizardOpen] = useState(false);\n  const [imageData, setImageData] = useState({});\n\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    setImageData(data);\n  }, [data]);\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    loadImageDetail(dispatch, imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const openUpdateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setIsUpdateWizardOpen(true);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Stack hasGutter>\n          <StackItem>\n            <DetailsHead\n              imageData={imageData}\n              openUpdateWizard={openUpdateWizard}\n            />\n          </StackItem>\n        </Stack>\n        <StackItem>\n          <Text>{data?.Description}</Text>\n        </StackItem>\n      </PageHeader>\n      <ImageDetailTabs />\n      {isUpdateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsUpdateWizardOpen(false);\n            }}\n            updateImageID={data?.ID}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">{icon(color)}</SplitItem>\n      <SplitItem>{text}</SplitItem>\n    </Split>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = ['CREATED', 'BUILDING', 'ERROR', 'SUCCESS'];\n\nexport const DEFAULT_RELEASE = 'rhel-84';\n\n//For this object, it's need to sisable lint once this is not a react component\nexport const statusIcons = {\n  // eslint-disable-next-line react/display-name\n  unknown: (color) => <QuestionCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  CREATED: (color) => <CheckCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  BUILDING: (color) => <InProgressIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  ERROR: (color) => <TimesCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  SUCCESS: (color) => <CheckCircleIcon color={color} />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  CREATED: 'green',\n  BUILDING: 'blue',\n  ERROR: 'red',\n  SUCCESS: 'green',\n};\n\nexport const imageStatusMapper = {\n  CREATED: 'CREATED',\n  BUILDING: 'Image build in progress',\n  ERROR: 'ERROR',\n  SUCCESS: 'SUCCESS',\n};\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n};\n\nexport const releaseMapper = {\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const imageTypeMapper = {\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n};\n","import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchImage = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n      packages: packages.map((item) => ({ name: item.name })),\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/updates/device/${id}/updates`);\n  } catch (err) {\n    console.log('get device update error', err);\n  }\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    CREATE_NEW_IMAGE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n  fetchImage,\n  fetchEdgeImages,\n  createImage,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: fetchImage({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","runningVersion","stagedVersion","nonActiveVersion","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","useState","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","T","AppInfo","showTags","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","useEffect","insights","chrome","registerModule","hideGlobalFilter","appAction","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","hideBack","hideInvDrawer","Main","Grid","gutter","GridItem","span","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Card","CardTitle","CardBody","Stack","hasGutter","StackItem","isDisabled","isInline","deviceSummaryReducer","isLoading","undefined","hasError","data","shallowEqual","Bullseye","Spinner","Tiles","dispatch","useDispatch","registered","imagesReducer","loadImages","loadDeviceSummary","Flex","FlexItem","onNewImageClick","DeviceStatus","id","setStatus","getDeviceHasUpdate","imageInfo","Object","prototype","hasOwnProperty","call","rpm_ostree_deployments","length","Split","SplitItem","booted","warningColor","checksum","isRequired","CreateImageWizard","React","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","getEntities","setGetEntities","isOpen","setIsOpen","activeFilters","setActiveFilters","inventory","useRef","history","useHistory","URLSearchParams","location","search","get","cleanEntities","Fragment","PageHeaderTitle","push","pathname","create_image","toString","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","columns","defaultColumns","newColumns","filter","column","includes","key","col","width","renderFunc","sysProf","isStatic","_i","config","system_profile","host_type","fields","hideFilters","registeredWith","filterConfig","items","type","filterValues","onChange","event","hasCheckbox","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onDelete","itemsToRemove","isAll","onDeleteFilter","onRowClick","_e","mergeWithEntities","api","navigateBack","getFilterDep","chips","map","chip","join","ImageTable","pagination","clearFilters","openCreateWizard","openUpdateWizard","index","direction","sortBy","setSortBy","edgeImagesReducer","transforms","toShowSort","sortable","hasFilters","loadEdgeImages","reduce","acc","chipKey","transformFilters","perPage","limit","offset","page","transformPaginationParams","sort_by","keys","some","filterKey","rows","heightAuto","cells","colSpan","EmptyState","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","onClick","SearchIcon","EmptyStateSecondaryActions","image","ID","paths","Name","Version","distributionMapper","Distribution","imageTypeMapper","ImageType","DateFormat","date","CreatedAt","StatusLabel","Status","imageStatus","isoURL","Installer","ImageBuildISOURL","Table","onSort","actionResolver","rowData","actionsArray","Text","href","rel","target","_rowId","TableHeader","TableBody","ImageToolbar","setPagination","dispatchActiveFilters","count","PrimaryToolbar","itemCount","onSetPage","_evt","newPage","onPerPageSelect","newPerPage","payload","dedicatedAction","distribution","UpdateImageWizard","activeFilterMapper","UPDATE_FILTER","action","property","DELETE_FILTER","_state","activeFilterReducer","isCreateWizardOpen","setIsCreateWizardOpen","imageId","UpdateWizard","setUpdateWizard","useReducer","placeholder","entries","composeStatus","update_image","prevState","updateImageID","ImageActions","imageData","dropdownItems","DropdownItem","Dropdown","position","toggle","KebabToggle","onToggle","isPlain","DetailsHead","TextContent","TextList","TextListItem","isFilled","ImageDetailActions","imageDetailReducer","labelsToValueMapper","Created","Release","Commit","Packages","TextListVariants","TextListItemVariants","setPerPage","setPage","setRows","imageName","parserRows","pack","rowArray","TextVariants","flatten","slice","startIdx","endIdx","isCompact","ariaLabel","sortedRows","sort","a","b","SortByDirection","reverse","isUpdateWizardOpen","setIsUpdateWizardOpen","setImageData","loadImageDetail","Description","statusIcons","statusColors","text","imageStatusMapper","charAt","toLowerCase","DEFAULT_RELEASE","unknown","CREATED","BUILDING","ERROR","SUCCESS","releaseMapper","IMAGE_BUILDER_API","EDGE_API","fetchActiveImages","instance","fetchImage","fetchDeviceSummary","client","HostsApi","Promise","all","apiHostGetHostList","query","generateFilter","inventoryFields","then","resp","curr","deviceSummaryMapper","total","getPackages","architecture","params","createImage","Id","version","description","release","username","credentials","imageTypes","imageType","packages","outputTypes","commit","arch","installer","sshkey","endpoint","fetchEdgeImages","q","multiVals","val","getEdgeImageStatus","console","log","statusMapper","statusToIcon","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","UnknownIcon","warning","ExclamationTriangleIcon","notification","BellIcon","infoColor","values","getLabel","category","Array","isArray","currItem","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","POLLING_IMAGES","asyncActions","flatMap","CLEAN_ENTITIES","keyBy","k","meta","notifications","rejected","createNewImage","addImageToPoll","groups","results","threshold","devicesInfo","canariesInfo","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","defaultProps","devices"],"sourceRoot":""}