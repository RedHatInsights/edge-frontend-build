{"version":3,"file":"js/5294.47380c722f357e3fdb50.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/bell-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/notifications.js","webpack:///./src/api/images/index.js","webpack:///./src/constants/routeMapper.js","webpack:///./src/store/polling.js","webpack:///./src/store/index.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const BellIconConfig = {\n  name: 'BellIcon',\n  height: 1024,\n  width: 896,\n  svgPath: 'M448,0 C465.333333,0 480.333333,6.33333333 493,19 C505.666667,31.6666667 512,46.6666667 512,64 L512,106 L514.23,106.45 C587.89,121.39 648.48,157.24 696,214 C744,271.333333 768,338.666667 768,416 C768,500 780,568.666667 804,622 C818.666667,652.666667 841.333333,684 872,716 C873.773676,718.829136 875.780658,721.505113 878,724 C890,737.333333 896,752.333333 896,769 C896,785.666667 890,800.333333 878,813 C866,825.666667 850.666667,832 832,832 L63.3,832 C44.9533333,831.84 29.8533333,825.506667 18,813 C6,800.333333 0,785.666667 0,769 C0,752.333333 6,737.333333 18,724 L24,716 L25.06,714.9 C55.1933333,683.28 77.5066667,652.313333 92,622 C116,568.666667 128,500 128,416 C128,338.666667 152,271.333333 200,214 C248,156.666667 309.333333,120.666667 384,106 L384,63.31 C384.166667,46.27 390.5,31.5 403,19 C415.666667,6.33333333 430.666667,0 448,0 Z M576,896 L576,897.08 C575.74,932.6 563.073333,962.573333 538,987 C512.666667,1011.66667 482.666667,1024 448,1024 C413.333333,1024 383.333333,1011.66667 358,987 C332.666667,962.333333 320,932 320,896 L576,896 Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const BellIcon = createIcon(BellIconConfig);\n\nexport default BellIcon;","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from './action-types';\nfunction generateID(type) {\n    return 'cloud-services' + type + '-' + new Date().getTime() + Math.random().toString(36).slice(2);\n}\nexport var addNotification = function (notification) { return ({\n    type: ADD_NOTIFICATION,\n    payload: __assign({ id: generateID('notification') }, notification),\n}); };\nexport var removeNotification = function (index) { return ({\n    type: REMOVE_NOTIFICATION,\n    payload: index,\n}); };\nexport var clearNotifications = function () { return ({\n    type: CLEAR_NOTIFICATIONS,\n}); };\nexport default {\n    addNotification: addNotification,\n    removeNotification: removeNotification,\n    clearNotifications: clearNotifications,\n};\n//# sourceMappingURL=notifications.js.map","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  RHSM_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchActivationKeys = ({ limit = 10, offset = 0 } = {}) => {\n  return instance.get(\n    `${RHSM_API}/activation_keys?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n  activationKey,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n    activationKey: activationKey,\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","export const routes = {\n  groups: '/groups',\n  groupsDetail: '/groups/:uuid',\n  deviceDetail: '/groups/:uuid/:inventoryId',\n  canaries: '/canaries',\n  fleetManagement: '/fleet-management',\n  fleetManagementDetail: '/fleet-management/:groupId',\n  fleetManagementSystemDetail: '/fleet-management/:groupId/systems/:deviceId',\n  fleetManagementSystemDetailUpdate:\n    '/fleet-management/:groupId/systems/:deviceId/update',\n  inventory: '/inventory',\n  insightsInventory: '/insights/inventory/manage-edge-inventory',\n  inventoryDetail: '/inventory/:deviceId',\n  inventoryDetailModal: '/inventory/:deviceId/:modalId',\n  inventoryDetailUpdate: '/inventory/:deviceId/update',\n  insightsInventoryDetailUpdate: '/insights/inventory/:deviceId/update',\n  manageImages: '/manage-images',\n  manageImagesDetail: '/manage-images/:imageId',\n  manageImagesDetailVersion: '/manage-images/:imageId/versions/:imageVersionId',\n  repositories: '/repositories',\n  learningResources: '/learning-resources',\n  contentSourcesRepositories: '/preview/insights/content',\n};\n","const POLLING_SUFFIX = 'POLLING';\n\nconst hasPollingData = (polling = {}) => {\n  return polling?.id && polling?.fetcher && polling?.condition;\n};\n\nconst ofPollingType = (type) => type.endsWith(`_${POLLING_SUFFIX}`);\n\nexport const polling =\n  (pollHash = {}) =>\n  ({ dispatch }) =>\n  (next) =>\n  (action) => {\n    const { type, payload, meta } = action;\n    if (ofPollingType(type) && hasPollingData(payload)) {\n      const { id, fetcher, condition, onEvent } = payload;\n      if (pollHash[id]) {\n        return;\n      }\n      pollHash[id] = true;\n      setTimeout(() => {\n        dispatch({\n          type: id,\n          payload: fetcher().then((resp) => {\n            pollHash[id] = false;\n            const [toContinue, stateName] = condition(resp);\n            const nextActions = onEvent?.[stateName] || [];\n            nextActions.forEach((action) => action(dispatch));\n            if (toContinue) {\n              dispatch(action);\n            }\n          }),\n        }).catch(() => null);\n      }, 15 * 1000);\n      return;\n    }\n\n    if (hasPollingData(meta?.polling)) {\n      const { id, fetcher, condition, onEvent } = meta.polling;\n      dispatch({\n        type: `${id}_POLLING`,\n        payload: {\n          id,\n          fetcher,\n          condition,\n          onEvent,\n        },\n      });\n    }\n\n    next(action);\n  };\n","import { createContext } from 'react';\nimport { ReducerRegistry } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { polling } from './polling';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  return new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorDescriptionKey: ['detail', 'stack'],\n    }),\n    polling(),\n    ...middleware,\n  ]);\n}\n"],"names":["name","height","width","svgPath","yOffset","xOffset","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","addNotification","notification","type","payload","id","Date","getTime","Math","random","toString","slice","removeNotification","index","clearNotifications","checkImageName","instance","post","concat","EDGE_API","fetchActivationKeys","_ref3","undefined","_ref3$limit","limit","_ref3$offset","offset","get","RHSM_API","createImage","_ref4","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","activationKey","_ref5","_slicedToArray","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","Name","URL","uuid","endpoint","getImageSet","_ref7","_ref7$q","q","sort_by","query","getTableParams","getImageSetViewVersions","_ref8","imageSetID","_ref8$query","getImageSetView","_ref9","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","_ref10","_asyncToGenerator","_regeneratorRuntime","_callee","search","params","_context","prev","next","URLSearchParams","abrupt","IMAGE_BUILDER_API","stop","_x","_x2","_x3","getImageById","_ref11","getImageSets","_ref12","postRpmsNames","urls","CONTENT_SOURCES_API","routes","groups","groupsDetail","deviceDetail","canaries","fleetManagement","fleetManagementDetail","fleetManagementSystemDetail","fleetManagementSystemDetailUpdate","inventory","insightsInventory","inventoryDetail","inventoryDetailModal","inventoryDetailUpdate","insightsInventoryDetailUpdate","manageImages","manageImagesDetail","manageImagesDetailVersion","repositories","learningResources","contentSourcesRepositories","hasPollingData","polling","fetcher","condition","pollHash","_ref","dispatch","action","meta","endsWith","ofPollingType","onEvent","setTimeout","then","resp","_condition","_condition2","toContinue","stateName","forEach","_meta$polling","RegistryContext","createContext","getRegistry","init","_len","middleware","Array","_key","ReducerRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}