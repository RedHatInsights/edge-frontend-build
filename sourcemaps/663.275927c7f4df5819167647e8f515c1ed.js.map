{"version":3,"file":"js/663.0ae1028cf80ff6da9e22.js","mappings":"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","sources":["webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/constants/features.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { createLink, emptyStateNoFilters, useFeatureFlags } from '../../utils';\nimport DeviceStatus, { getDeviceStatus } from '../../components/Status';\nimport RetryUpdatePopover from './RetryUpdatePopover';\nimport {\n  FEATURE_HIDE_GROUP_ACTIONS,\n  FEATURE_PARITY_INVENTORY_GROUPS,\n} from '../../constants/features';\n\nconst insightsInventoryManageEdgeUrlName = 'manage-edge-inventory';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      // { option: 'Booting', value: 'booting' },\n      // { option: 'Running', value: 'running' },\n      { option: 'Update available', value: 'updateAvailable' },\n      // { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst GetColumnNames = (inventoryGroupsEnabled, isDataAvailable) => {\n  return [\n    {\n      title: 'Name',\n      type: 'name',\n      sort: isDataAvailable,\n      columnTransforms: [cellWidth(30)],\n    },\n    {\n      title: 'Image',\n      type: 'image',\n      sort: false,\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: inventoryGroupsEnabled ? 'Group' : 'Groups',\n      type: 'groups',\n      sort: false,\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: 'Last seen',\n      type: 'last_seen',\n      sort: isDataAvailable,\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: 'Status',\n      type: 'status',\n      sort: false,\n      columnTransforms: [cellWidth(25)],\n    },\n  ];\n};\n\nconst createRows = (\n  devices,\n  hasLinks,\n  fetchDevices,\n  deviceBaseUrl,\n  history,\n  navigate,\n  inventoryGroupsEnabled\n) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n      DispatcherStatus,\n      GroupName,\n      GroupUUID,\n    } = device;\n    const deviceStatus = getDeviceStatus(\n      Status,\n      UpdateAvailable,\n      DispatcherStatus\n    );\n\n    // const currentInventoryPath = history ? '/edge' : paths.inventory;\n\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (inventoryGroupsEnabled) {\n      if (GroupName && GroupUUID) {\n        DeviceGroups = [{ ID: GroupUUID, Name: GroupName }];\n      } else {\n        DeviceGroups = [];\n      }\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n    const pathToDevice =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.inventory}/${DeviceUUID}`\n        : `insights/inventory/${DeviceUUID}`;\n    const pathToImage =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.manageImages}/${ImageSetID}`\n        : `insights/image-builder/manage-edge-images/${ImageSetID}`;\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(\n          Status,\n          UpdateAvailable,\n          DispatcherStatus\n        ),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: hasLinks\n            ? createLink({\n                pathname: pathToDevice,\n                linkText: DeviceName,\n                navigate,\n              })\n            : DeviceName,\n        },\n        {\n          title: ImageName\n            ? hasLinks\n              ? createLink({\n                  pathname: pathToImage,\n                  linkText: ImageName,\n                  navigate,\n                })\n              : ImageName\n            : 'unavailable',\n        },\n        {\n          title:\n            DeviceGroups.length === 0\n              ? '-'\n              : DeviceGroups.length === 1\n              ? DeviceGroups[0].Name\n              : deviceGroupTooltip,\n        },\n        {\n          title: LastSeen ? <DateFormat date={LastSeen} /> : 'Unknown',\n        },\n        {\n          title:\n            deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n              <RetryUpdatePopover\n                lastSeen={LastSeen}\n                fetchDevices={fetchDevices}\n                device={device}\n              >\n                <DeviceStatus\n                  type={\n                    deviceStatus === 'error'\n                      ? 'errorWithExclamationCircle'\n                      : deviceStatus\n                  }\n                  isLink={true}\n                />\n              </RetryUpdatePopover>\n            ) : (\n              <DeviceStatus\n                type={\n                  deviceStatus === 'error'\n                    ? 'errorWithExclamationCircle'\n                    : deviceStatus\n                }\n              />\n            ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  navigateProp,\n  historyProp,\n  locationProp,\n  hasCheckbox = false,\n  selectedItems,\n  selectedItemsUpdateable,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  handleEditNameSystem,\n  handleDeleteSystem,\n  handleUpdateSelected,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n  isSystemsView = false,\n  isAddSystemsView = false,\n  urlName,\n  enforceEdgeGroups,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const canBeUpdated = isSystemsView;\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const { pathname, search } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n\n  const useInventorGroups = useFeatureFlags(FEATURE_PARITY_INVENTORY_GROUPS);\n  const inventoryGroupsEnabled = !enforceEdgeGroups && useInventorGroups;\n\n  // Create base URL path for system detail link\n  const deviceBaseUrl = navigateProp\n    ? 'federated'\n    : pathname === paths.inventory\n    ? pathname\n    : pathname === '/'\n    ? ''\n    : `${pathname}/systems`;\n\n  const hideGroupsActions = useFeatureFlags(FEATURE_HIDE_GROUP_ACTIONS);\n\n  const actionResolver = (rowData) => {\n    const getUpdatePathname = (updateRowData) =>\n      navigateProp\n        ? `/insights/inventory/${updateRowData.rowInfo.id}/update`\n        : `/inventory/${updateRowData.rowInfo.id}/update`;\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup && !hideGroupsActions) {\n      actions.push({\n        title: 'Add to group',\n        isDisabled: inventoryGroupsEnabled\n          ? rowData?.rowInfo?.deviceGroups.length !== 0 // disable the action item if the system has a group assigned\n          : false,\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleEditNameSystem) {\n      actions.push({\n        title: 'Edit',\n        onClick: () =>\n          handleEditNameSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleDeleteSystem) {\n      actions.push({\n        title: 'Delete',\n        onClick: () =>\n          handleDeleteSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                display_name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup && !hideGroupsActions) {\n      actions.push({\n        title: 'Remove from group',\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData) && handleUpdateSelected) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          if (navigateProp) {\n            const pathProp = getUpdatePathname(rowData);\n            navigate(pathProp, { replace: true });\n          } else {\n            history.push({\n              pathname: getUpdatePathname(rowData),\n              // pathname: `${deviceBaseUrl}/${rowData.rowInfo.id}/update`,\n            });\n          }\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: 'Remove from group',\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    !rowData.rowInfo?.UpdateAvailable &&\n    (rowData.rowInfo?.deviceStatus === 'updating' ||\n      rowData.rowInfo?.deviceStatus === 'upToDate');\n\n  // some filters and columns titles/labels have different values when shown in insights inventory\n  let tableFilters = [];\n  let tableColumnNames = [];\n  const isDataAvailable = data ? data.length > 0 : false;\n  const columnNames = GetColumnNames(inventoryGroupsEnabled, isDataAvailable);\n\n  if (urlName === insightsInventoryManageEdgeUrlName) {\n    for (let ind = 0; ind < defaultFilters.length; ind++) {\n      let filterElement = defaultFilters[ind];\n      if (filterElement['label'] === 'Status') {\n        filterElement['label'] = 'Image status';\n      }\n      tableFilters.push(filterElement);\n    }\n    for (let ind = 0; ind < columnNames.length; ind++) {\n      let columnElement = columnNames[ind];\n      if (columnElement['title'] === 'Status') {\n        columnElement['title'] = 'Image status';\n      }\n      tableColumnNames.push(columnElement);\n    }\n  } else {\n    tableFilters = defaultFilters;\n    tableColumnNames = columnNames;\n  }\n\n  return (\n    <>\n      {isSystemsView &&\n      emptyStateNoFilters(isLoading, count, search) &&\n      !historyProp ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Connect edge systems'}\n          body={\n            'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n          }\n          secondaryActions={[\n            {\n              title:\n                'Create RHEL for Edge images and configure automated management',\n              link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n              type: 'link',\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          historyProp={historyProp}\n          navigateProp={navigateProp}\n          locationProp={locationProp}\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={tableFilters}\n          loadTableData={fetchDevices}\n          tableData={{\n            count: count,\n            isLoading: isLoading,\n            hasError: hasError,\n          }}\n          columnNames={tableColumnNames}\n          rows={createRows(\n            data || [],\n            isAddSystemsView || isSystemsView,\n            fetchDevices,\n            deviceBaseUrl,\n            history,\n            navigate,\n            inventoryGroupsEnabled\n          )}\n          actionResolver={actionResolver}\n          defaultSort={{ index: 3, direction: 'desc' }}\n          toolbarButtons={\n            (canBeAdded\n              ? [\n                  {\n                    title: 'Add systems',\n                    click: () => setIsAddModalOpen(true),\n                  },\n                ]\n              : [],\n            canBeUpdated\n              ? [\n                  {\n                    isDisabled: !selectedItemsUpdateable,\n                    title: 'Update',\n                    id: 'toolbar-update-button',\n                    click: () => handleUpdateSelected(),\n                  },\n                ]\n              : [])\n          }\n          hasCheckbox={hasCheckbox}\n          selectedItems={selectedItems}\n          skeletonRowQuantity={skeletonRowQuantity}\n          kebabItems={kebabItems}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\n\nDeviceTable.propTypes = {\n  navigateProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.func,\n  selectedItemsUpdateable: PropTypes.bool,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  handleEditNameSystem: PropTypes.func,\n  handleDeleteSystem: PropTypes.func,\n  handleUpdateSelected: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isSystemsView: PropTypes.bool,\n  isAddSystemsView: PropTypes.bool,\n  urlName: PropTypes.string,\n  groupUUID: PropTypes.string,\n  enforceEdgeGroups: PropTypes.bool,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","export const FEATURE_PARITY_INVENTORY_GROUPS =\n  'edgeParity.inventory-groups-enabled';\n\nexport const FEATURE_HIDE_GROUP_ACTIONS = 'edge-management.hide_groups_actions';\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["defaultFilters","label","type","options","option","value","createRows","devices","hasLinks","fetchDevices","deviceBaseUrl","history","navigate","inventoryGroupsEnabled","map","device","DeviceName","DeviceGroups","DeviceID","DeviceUUID","UpdateAvailable","LastSeen","ImageName","ImageSetID","Status","DispatcherStatus","GroupName","GroupUUID","deviceStatus","getDeviceStatus","ID","Name","deviceGroupTooltip","content","group","index","key","pathToDevice","paths","pathToImage","rowInfo","deviceID","id","display_name","updateImageData","imageSetId","imageName","deviceGroups","noApiSortFilter","cells","title","createLink","pathname","linkText","length","date","lastSeen","isLink","DeviceTable","navigateProp","historyProp","locationProp","hasCheckbox","selectedItems","selectedItemsUpdateable","skeletonRowQuantity","data","count","isLoading","hasError","kebabItems","setRemoveModal","handleAddDevicesToGroup","setIsAddModalOpen","handleRemoveDevicesFromGroup","handleEditNameSystem","handleDeleteSystem","handleUpdateSelected","hasModalSubmitted","setHasModalSubmitted","isSystemsView","isAddSystemsView","urlName","enforceEdgeGroups","canBeRemoved","canBeUpdated","useHistory","useNavigate","useLocation","search","useInventorGroups","useFeatureFlags","FEATURE_PARITY_INVENTORY_GROUPS","hideGroupsActions","FEATURE_HIDE_GROUP_ACTIONS","tableFilters","tableColumnNames","isDataAvailable","columnNames","sort","columnTransforms","cellWidth","GetColumnNames","ind","filterElement","push","columnElement","emptyStateNoFilters","icon","body","secondaryActions","link","apiFilterSort","isUseApi","filters","loadTableData","tableData","rows","actionResolver","rowData","getUpdatePathname","updateRowData","actions","isDisabled","onClick","name","UUID","areActionsDisabled","_event","_rowId","pathProp","replace","isOpen","deviceId","defaultSort","direction","toolbarButtons","click","propTypes","PropTypes","imageData","urlParam","openUpdateWizard","temp","setIsModalOpen","reload","setReload","handleSingleDeviceRemoval","groupUUID","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","status","className","RetryUpdatePopover","position","children","useState","isVisible","setIsVisible","dispatch","useDispatch","statusMessages","onSuccess","variant","description","shouldOpen","shouldClose","alertseverityvariant","headerContent","style","color","size","DispatcherReason","headerComponent","bodyContent","footerContent","isInline","apiWithToast","updateSystem","DevicesUUID","defaultProps","statusMapper","booting","text","Icon","iconMapper","colorMapper","labelColor","building","created","upToDate","success","passed","updateAvailable","updating","error","default","interrupted","unresponsive","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","isLabel","toolTipContent","Object","prototype","hasOwnProperty","call","Label","Split","SplitItem","Tooltip","textDecoration","cursor","api","notificationProp","hasSuccess","hasInfo","onInfo","hasWarning","onWarning","onError","fetchData","response","addNotification","err","Title"],"sourceRoot":""}