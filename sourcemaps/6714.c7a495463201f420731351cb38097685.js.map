{"version":3,"file":"js/6714.10fcd7a290ca84d99555.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/AsyncComponent/index.js","webpack:///./src/components/SearchInputApi.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/hooks/useApi.js","webpack:///./src/hooks/useInventoryGroups.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./node_modules/lodash/flatMap.js","webpack:///./node_modules/lodash/keyBy.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { ScalprumComponent } from '@scalprum/react-core';\nimport { Bullseye } from \"@patternfly/react-core/dist/dynamic/layouts/Bullseye\";\nimport { Spinner } from \"@patternfly/react-core/dist/dynamic/components/Spinner\";\nimport classNames from 'classnames';\nvar BaseAsyncComponent = function (_a) {\n    var appName = _a.appName, scope = _a.scope, module = _a.module, _b = _a.fallback, fallback = _b === void 0 ? (_jsx(Bullseye, { children: _jsx(Spinner, { size: \"xl\" }) })) : _b, innerRef = _a.innerRef, className = _a.className, _c = _a.component, Cmp = _c === void 0 ? 'section' : _c, props = __rest(_a, [\"appName\", \"scope\", \"module\", \"fallback\", \"innerRef\", \"className\", \"component\"]);\n    var SCProps = __assign({ className: className, appName: appName, module: module, scope: scope !== null && scope !== void 0 ? scope : appName, ref: innerRef, fallback: fallback }, props);\n    return (_jsx(Cmp, { className: classNames(className, appName), children: _jsx(ScalprumComponent, __assign({}, SCProps)) }));\n};\nexport var AsyncComponent = React.forwardRef(function (props, ref) { return _jsx(BaseAsyncComponent, __assign({ innerRef: ref }, props)); });\nexport default AsyncComponent;\n//# sourceMappingURL=index.js.map","import React, { useEffect, useState } from 'react';\nimport { HelperText, HelperTextItem } from '@patternfly/react-core';\nimport { Select, SelectOption } from '@patternfly/react-core/deprecated';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useApi from '../hooks/useApi';\nimport { getGroups, getInventoryGroups } from '../api/groups';\nimport { debounce } from 'lodash';\nimport useInventoryGroups from '../hooks/useInventoryGroups';\nimport { useFeatureFlags } from '../utils';\nimport { FEATURE_INVENTORY_WORKSPACES_RENAME } from '../constants/features';\n\nconst SelectInput = (props) => {\n  useFieldApi(props);\n  const [inventoryGroupsEnabled] = useInventoryGroups(false);\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [{ data, isLoading }, fetchGroups, apiFunc, setAPIFunc] = useApi({\n    api: inventoryGroupsEnabled ? getInventoryGroups : getGroups,\n    tableReload: true,\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  const updateSelection = (value) => {\n    // Update state when an option has been selected.\n    setSelected(value);\n    setIsOpen(false);\n    change('group', value);\n  };\n\n  const onSelect = (_event, selection) => {\n    if (_event) updateSelection(selection);\n  };\n\n  const clearSelection = () => {\n    setSearchTerm('');\n    fetchGroups();\n    updateSelection(null);\n  };\n\n  useEffect(() => {\n    // set the new api function when inventoryGroupsEnabled value change\n    setAPIFunc(() => (inventoryGroupsEnabled ? getInventoryGroups : getGroups));\n  }, [inventoryGroupsEnabled]);\n\n  useEffect(() => {\n    // re-initiate the search widget data when api function change\n    clearSelection();\n  }, [apiFunc]);\n\n  const onFilter = (_event, value) => {\n    /* This handler is called on input changes as well as when children change.\n       _event is null when the children change. Only update searchTerm state\n       and fetch results from the API only if there was an actual input change.\n    */\n    if (_event && value != searchTerm) {\n      setSearchTerm(value);\n      fetchGroups({ name: encodeURIComponent(value) });\n    }\n  };\n\n  const options = (inventoryGroupsEnabled ? data?.results : data?.data) || [];\n  const totalCount = (inventoryGroupsEnabled ? data?.total : data?.count) || 0;\n\n  return (\n    <>\n      <HelperText>\n        {!isLoading && !selected && isOpen && totalCount > options.length ? (\n          <HelperTextItem variant=\"warning\" className=\"pf-u-font-weight-bold\">\n            Over {options.length} results found. Refine your search.\n          </HelperTextItem>\n        ) : (\n          <HelperTextItem className=\"pf-u-font-weight-bold\">\n            Select a{' '}\n            {inventoryGroupsEnabled && useWorkspacesRename\n              ? 'workspace'\n              : 'group'}\n          </HelperTextItem>\n        )}\n      </HelperText>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel={`Select a ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`}\n        onToggle={(_event, isOpen) => onToggle(isOpen)}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected ? selected : searchTerm}\n        isOpen={isOpen}\n        onFilter={debounce(onFilter, 300)}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText={`Type or click to select a ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`}\n        noResultsFoundText={isLoading ? 'Loading...' : 'No results found'}\n        isInputValuePersisted={true}\n        maxHeight={'180px'}\n      >\n        {isLoading\n          ? []\n          : options?.map(({ id, name, DeviceGroup }) => (\n              // note: the schema is different when fetching groups from inventory or from edge-api\n              <SelectOption\n                key={inventoryGroupsEnabled ? id : DeviceGroup.ID}\n                value={{\n                  toString: () =>\n                    inventoryGroupsEnabled ? name : DeviceGroup.Name,\n                  groupId: inventoryGroupsEnabled ? id : DeviceGroup.ID,\n                }}\n              />\n            ))}\n      </Select>\n    </>\n  );\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInputApi from '../../components/SearchInputApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport {\n  addDevicesToGroup,\n  addDevicesToInventoryGroup,\n} from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Button, Text } from '@patternfly/react-core';\nimport useInventoryGroups from '../../hooks/useInventoryGroups';\nimport { useFeatureFlags } from '../../utils';\nimport { FEATURE_INVENTORY_WORKSPACES_RENAME } from '../../constants/features';\n\nconst CreateGroupButton = ({ closeModal, workspaceRename }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={closeModal}>\n      Create {workspaceRename ? 'Workspace' : 'Group'}\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  closeModal: PropTypes.func,\n  workspaceRename: PropTypes.bool,\n};\n\nconst createDescription = (deviceIds, workspaceRename) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a {workspaceRename ? 'workspace' : 'group'} to add{' '}\n      <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds, workspaceRename) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds, workspaceRename),\n    },\n    {\n      component: 'search-input',\n      name: 'group',\n      label: `Select a ${workspaceRename ? 'workspace' : 'group'}`,\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n\n  const [inventoryGroupsEnabled] = useInventoryGroups(false);\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `Failed to add system to ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n      },\n    };\n\n    let addDevicesToGroupFunc;\n    if (inventoryGroupsEnabled) {\n      addDevicesToGroupFunc = () =>\n        addDevicesToInventoryGroup(group.groupId, deviceIds);\n    } else {\n      addDevicesToGroupFunc = () =>\n        addDevicesToGroup(parseInt(group.groupId), deviceIds);\n    }\n    apiWithToast(dispatch, addDevicesToGroupFunc, statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title={`Add to ${\n        inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n      }`}\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInputApi,\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          closeModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n          workspaceRename: inventoryGroupsEnabled && useWorkspacesRename,\n        },\n      }}\n      schema={createSchema(\n        deviceIds,\n        inventoryGroupsEnabled && useWorkspacesRename\n      )}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api/devices';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { editDisplayName, deleteEntity } from '../../store/actions';\nimport { useDispatch } from 'react-redux';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useFeatureFlags } from '../../utils';\nimport {\n  FEATURE_HIDE_GROUP_ACTIONS,\n  FEATURE_PARITY_INVENTORY_GROUPS,\n  FEATURE_INVENTORY_WORKSPACES_RENAME,\n} from '../../constants/features';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"UpdateDeviceModal\" */ './UpdateDeviceModal')\n);\n\nconst TextInputModal = (props) => (\n  <AsyncComponent appName=\"inventory\" module=\"./TextInputModal\" {...props} />\n);\n\nconst DeleteModal = (props) => (\n  <AsyncComponent appName=\"inventory\" module=\"./DeleteModal\" {...props} />\n);\n\nconst Inventory = ({\n  historyProp,\n  navigateProp,\n  locationProp,\n  showHeaderProp,\n  notificationProp,\n  urlName,\n}) => {\n  const chrome = useChrome();\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const showHeader = showHeaderProp === undefined ? true : showHeaderProp;\n  const { data, isLoading, hasError } = response;\n  const enforceEdgeGroups = data?.data?.enforce_edge_groups;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [isEditNameModalOpen, setIsEditNameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const useInventorGroups = useFeatureFlags(FEATURE_PARITY_INVENTORY_GROUPS);\n  const inventoryGroupsEnabled = !enforceEdgeGroups && useInventorGroups;\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleEditNameSystem = (ids, isRow) => {\n    setIsEditNameModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleDeleteSystem = (ids, isRow) => {\n    setIsDeleteModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const canBeUpdated = () => {\n    let canBeUpdated = false;\n    if (checkedDeviceIds.length > 0) {\n      let initialImage = checkedDeviceIds[0].imageSetId;\n      for (let device of checkedDeviceIds) {\n        if (device.imageSetId !== initialImage) {\n          canBeUpdated = false;\n          break;\n        }\n        if (\n          (!canBeUpdated &&\n            device.updateImageData &&\n            device.deviceStatus === 'updateAvailable') ||\n          device.deviceStatus === 'unresponsive' ||\n          device.deviceStatus === 'error'\n        ) {\n          canBeUpdated = true;\n        }\n      }\n    }\n    return canBeUpdated;\n  };\n\n  const handleUpdateSelected = () => {\n    setUpdateModal((prevState) => ({\n      ...prevState,\n      deviceData: checkedDeviceIds.map((device) => ({\n        id: device.id,\n        display_name: device.display_name,\n        deviceStatus: device.deviceStatus,\n      })),\n      imageData: { imageName: checkedDeviceIds[0].imageName },\n      imageSetId: checkedDeviceIds[0].imageSetId,\n      isOpen: true,\n    }));\n  };\n\n  const reloadData = async () => {\n    await fetchDevices();\n    setHasModalSubmitted(true);\n  };\n  let classNameMain = '';\n  if (showHeaderProp !== undefined && showHeader) {\n    classNameMain =\n      'edge-devices pf-l-page__main-section pf-c-page__main-section';\n  } else if (!showHeader) {\n    classNameMain = 'pf-c-toolbar';\n  }\n\n  function handleOnSubmitEditName(value) {\n    const uuid = isRowSelected ? deviceId[0].UUID : checkedDeviceIds[0].UUID;\n    const name = isRowSelected ? deviceId[0].name : checkedDeviceIds[0].name;\n    const statusMessages = {\n      onSuccess: {\n        title: `Display name for entity with ID ${uuid} has been changed to ${value}`,\n      },\n      onError: { title: 'Error', description: 'Failed to update device name' },\n    };\n    if (notificationProp) {\n      apiWithToast(\n        dispatch,\n        () => editDisplayName(uuid, value, name),\n        statusMessages,\n        notificationProp\n      );\n    } else {\n      dispatch(editDisplayName(uuid, value, name));\n    }\n    setIsEditNameModalOpen(false);\n  }\n\n  function handleOnConfirmDeleteSystem() {\n    const systemInstance = isRowSelected ? deviceId[0] : checkedDeviceIds[0];\n\n    let displayName = systemInstance.display_name;\n    let removeSystems = [systemInstance.UUID];\n    const statusInitialMessages = {\n      onWarning: {\n        title: 'Delete operation initiated',\n        description: `Removal of ${displayName} started.`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to initial delete device',\n      },\n    };\n    const statusMessages = {\n      onSuccess: {\n        title: 'Delete operation finished',\n        description: `${displayName} has been successfully removed.`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete device' },\n    };\n\n    if (notificationProp) {\n      apiWithToast(\n        dispatch,\n        () =>\n          addNotification({\n            id: 'remove-initiated',\n            variant: 'warning',\n          }),\n        statusInitialMessages,\n        notificationProp\n      );\n      apiWithToast(\n        dispatch,\n        () => deleteEntity(removeSystems, displayName),\n        statusMessages,\n        notificationProp\n      );\n    } else {\n      dispatch(\n        addNotification({\n          id: 'remove-initiated',\n          variant: 'warning',\n          title: 'Delete operation initiated',\n          description: `Removal of ${displayName} started.`,\n          dismissable: false,\n        })\n      );\n      dispatch(deleteEntity(removeSystems, displayName));\n    }\n    setIsDeleteModalOpen(false);\n  }\n\n  useEffect(() => {\n    chrome?.updateDocumentTitle?.('Systems - Inventory');\n  }, [chrome]);\n\n  const hideGroupsActions = useFeatureFlags(FEATURE_HIDE_GROUP_ACTIONS);\n  const kebabMenuItems = [];\n  if (!hideGroupsActions) {\n    const groupsKebabMenuItems = [\n      {\n        isDisabled: inventoryGroupsEnabled\n          ? !(checkedDeviceIds.length > 0) ||\n            checkedDeviceIds.filter((device) => device.deviceGroups?.length > 0)\n              .length > 0 // The action menu item is disabled if one of the systems items belongs to a group\n          : !(checkedDeviceIds.length > 0),\n        title: `Add to ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        onClick: () =>\n          handleAddDevicesToGroup(\n            checkedDeviceIds.map((device) => ({\n              ID: device.deviceID,\n              name: device.display_name,\n              UUID: device.id,\n            })),\n            false\n          ),\n      },\n    ];\n\n    if (inventoryGroupsEnabled) {\n      groupsKebabMenuItems.push({\n        isDisabled:\n          !(checkedDeviceIds.length > 0) || // disable if no system checked\n          checkedDeviceIds.filter(\n            // disable if any checked systems has no groups assigned\n            (device) =>\n              device.deviceGroups === undefined ||\n              device.deviceGroups.length === 0\n          ).length > 0 ||\n          checkedDeviceIds.reduce((acc, device) => {\n            // disable if the checked systems has different groups assigned\n            const groupIDS = device.deviceGroups\n              ? device.deviceGroups.map((group) => group.ID)\n              : [];\n            const newGroupIDS = groupIDS.filter(\n              (groupID) => !acc.includes(groupID)\n            );\n            acc.push(...newGroupIDS);\n            return acc;\n          }, []).length !== 1,\n        title: `Remove from ${useWorkspacesRename ? 'workspace' : 'group'}`,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            checkedDeviceIds.map((device) => ({\n              ID: device.deviceID,\n              name: device.display_name,\n              UUID: device.id,\n              deviceGroups: device.deviceGroups,\n            })),\n            false\n          ),\n      });\n    }\n    kebabMenuItems.push(...groupsKebabMenuItems);\n  }\n\n  return (\n    <>\n      {showHeader && (\n        <PageHeader className=\"pf-m-light\">\n          <PageHeaderTitle title=\"Systems\" />\n        </PageHeader>\n      )}\n      {showHeader}\n      <section className={classNameMain}>\n        <DeviceTable\n          historyProp={historyProp}\n          navigateProp={navigateProp}\n          locationProp={locationProp}\n          isSystemsView={true}\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          updateModal={updateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          handleEditNameSystem={handleEditNameSystem}\n          handleDeleteSystem={handleDeleteSystem}\n          handleUpdateSelected={handleUpdateSelected}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          selectedItemsUpdateable={canBeUpdated()}\n          kebabItems={kebabMenuItems.length > 0 ? kebabMenuItems : undefined}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n          urlName={urlName}\n          enforceEdgeGroups={enforceEdgeGroups}\n        />\n      </section>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                console.log('Click modal');\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            notificationProp={notificationProp}\n            refreshTable={reloadData}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={reloadData}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isEditNameModalOpen && (\n        <TextInputModal\n          isOpen={isEditNameModalOpen}\n          title=\"Edit display name\"\n          value={isRowSelected ? deviceId[0].name : checkedDeviceIds[0].name}\n          ariaLabel=\"Host inventory display name\"\n          modalOuiaId=\"edit-display-name-modal\"\n          cancelOuiaId=\"cancel-edit-display-name\"\n          confirmOuiaId=\"confirm-edit-display-name\"\n          inputOuiaId=\"input-edit-display-name\"\n          onCancel={() => setIsEditNameModalOpen(false)}\n          onSubmit={handleOnSubmitEditName}\n          className=\"sentry-mask data-hj-suppress\"\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteModal\n          className=\"sentry-mask data-hj-suppress\"\n          handleModalToggle={setIsDeleteModalOpen}\n          isModalOpen={isDeleteModalOpen}\n          currentSytems={isRowSelected ? deviceId[0] : checkedDeviceIds[0]}\n          onConfirm={handleOnConfirmDeleteSystem}\n        />\n      )}\n    </>\n  );\n};\n\nInventory.propTypes = {\n  historyProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  showHeaderProp: PropTypes.bool,\n  notificationProp: PropTypes.object,\n  urlName: PropTypes.string,\n};\n\nexport default Inventory;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core/deprecated';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInputApi = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    change('group', null);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={(_event, isOpen) => onToggle(isOpen)}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {props.defaultOptions.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </>\n  );\n};\n\nSelectInputApi.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInputApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport {\n  removeDeviceFromGroupById,\n  removeDevicesFromInventoryGroup,\n} from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text, Icon } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport useInventoryGroups from '../../hooks/useInventoryGroups';\nimport { useFeatureFlags } from '../../utils';\nimport { FEATURE_INVENTORY_WORKSPACES_RENAME } from '../../constants/features';\n\nconst removeDescription = (deviceInfo, inventoryGroupsEnabled) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n\n  if (inventoryGroupsEnabled) {\n    return (\n      <Text>\n        <strong>{systemText} </strong> will no longer be part of{' '}\n        <strong>{groupText}</strong> and its configuration will be impacted.\n      </Text>\n    );\n  }\n\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <Icon status=\"warning\">\n    <ExclamationTriangleIcon />\n  </Icon>\n);\n\nconst createSchema = (deviceInfo, inventoryGroupsEnabled) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo, inventoryGroupsEnabled),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n\n  const [inventoryGroupsEnabled] = useInventoryGroups(false);\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n    const systemText =\n      deviceInfo.length > 1\n        ? `${deviceInfo.length} systems`\n        : deviceInfo[0].name;\n\n    const errorMessageDescription = inventoryGroupsEnabled\n      ? deviceInfo.length > 1\n        ? `Failed to remove ${deviceInfo.length} systems from ${groupName}`\n        : `Failed to remove 1 system from ${groupName}`\n      : 'Failed to remove system from group';\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${systemText} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: errorMessageDescription,\n      },\n    };\n\n    let removeDeviceGroupFunc;\n    if (inventoryGroupsEnabled) {\n      removeDeviceGroupFunc = () =>\n        removeDevicesFromInventoryGroup(\n          groupId,\n          deviceInfo.map((device) => device.UUID)\n        );\n    } else {\n      removeDeviceGroupFunc = () =>\n        removeDeviceFromGroupById(groupId, deviceInfo[0].ID);\n    }\n\n    apiWithToast(dispatch, removeDeviceGroupFunc, statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      closeModal={() => setIsModalOpen(false)}\n      title={`Remove from ${\n        inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n      }`}\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo, inventoryGroupsEnabled)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  createInventoryGroup,\n  addDevicesToGroup,\n  validateGroupName,\n  validateInventoryGroupName,\n  addDevicesToInventoryGroup,\n} from '../../api/groups';\nimport { nameValidator, useFeatureFlags } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport useInventoryGroups from '../../hooks/useInventoryGroups';\nimport { FEATURE_INVENTORY_WORKSPACES_RENAME } from '../../constants/features';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst asyncInventoryGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateInventoryGroupName(value);\n  if (resp.results.length > 0 && resp.results[0].name === value) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst inventoryValidatorMapper = {\n  groupName: () => asyncInventoryGroupNameValidation,\n};\n\nconst createGroupSchema = (workspaceRename) => ({\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: `${workspaceRename ? 'Workspace' : 'Group'} name`,\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n});\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const [inventoryGroupsEnabled] = useInventoryGroups(false);\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `Failed to create ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n      },\n    };\n\n    let createGroupFunc;\n    if (inventoryGroupsEnabled) {\n      createGroupFunc = () => createInventoryGroup(values);\n    } else {\n      createGroupFunc = () => createGroup(values);\n    }\n    return apiWithToast(dispatch, createGroupFunc, statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `Failed to add system to ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n      },\n    };\n\n    let addDevicesToGroupFunc;\n    if (inventoryGroupsEnabled) {\n      const { id } = await handleCreateGroup(values);\n      addDevicesToGroupFunc = () => addDevicesToInventoryGroup(id, deviceIds);\n    } else {\n      const { ID } = await handleCreateGroup(values);\n      addDevicesToGroupFunc = () => addDevicesToGroup(parseInt(ID), deviceIds);\n    }\n    apiWithToast(dispatch, addDevicesToGroupFunc, statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title={`Create ${\n        inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n      }`}\n      submitLabel=\"Create\"\n      schema={createGroupSchema(inventoryGroupsEnabled && useWorkspacesRename)}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={\n        inventoryGroupsEnabled ? inventoryValidatorMapper : validatorMapper\n      }\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import { EDGE_API, INVENTORY_API_BASE, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const createInventoryGroup = (payload) => {\n  return instance.post(`${INVENTORY_API_BASE}/groups`, { name: payload.name });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getInventoryGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${INVENTORY_API_BASE}/groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const addDevicesToInventoryGroup = (groupId, devices) => {\n  const devicesIDS = [];\n  devices.forEach((device) => devicesIDS.push(device.UUID));\n\n  return instance.post(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts`,\n    devicesIDS\n  );\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDevicesFromInventoryGroup = (groupId, devices) => {\n  return instance.delete(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts/` + devices.join(',')\n  );\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n\nexport const getEnforceEdgeGroups = () => {\n  return instance.get(`${EDGE_API}/device-groups/enforce-edge-groups`);\n};\n\nexport const validateInventoryGroupName = (name) => {\n  return instance.get(\n    `${INVENTORY_API_BASE}/groups?name=${name}&order_by=name&order_how=ASC`\n  );\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n","import { useState, useEffect } from 'react';\nimport { useFeatureFlags } from '../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../constants/features';\nimport { getEnforceEdgeGroups } from '../api/groups';\n\nconst useInventoryGroups = (value) => {\n  const [data, setData] = useState(value);\n  const [ready, setReady] = useState(false);\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  useEffect(() => {\n    (async () => {\n      const response = await getEnforceEdgeGroups();\n      const enforceEdgeGroups = response?.enforce_edge_groups;\n      setData(!enforceEdgeGroups && inventoryGroupsEnabled);\n      setReady(true);\n    })();\n  }, []);\n\n  return [data, ready];\n};\n\nexport default useInventoryGroups;\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\nexport const UPDATE_DISPLAY_NAME = 'UPDATE_DISPLAY_NAME';\nexport const REMOVE_ENTITY = 'REMOVE_ENTITY';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n    UPDATE_DISPLAY_NAME,\n    REMOVE_ENTITY,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  ACTION_TYPES,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\nimport { hosts } from '../api';\nimport { deleteSystemsById } from '../utils';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show system summary data',\n          description: 'Failed receiving system summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n\nexport const editDisplayName = (id, value, origValue) => ({\n  type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n  payload: hosts.apiHostPatchHostById([id], { display_name: value }),\n  meta: {\n    id,\n    value,\n    origValue,\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: `Display name for entity with ID ${id} has been changed to ${value}`,\n        dismissable: true,\n      },\n    },\n  },\n});\n\nexport const deleteEntity = (systems, displayName) => ({\n  type: ACTION_TYPES.REMOVE_ENTITY,\n  payload: deleteSystemsById(systems),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Delete operation finished',\n        description: `${displayName} has been successfully removed.`,\n        dismissable: true,\n      },\n    },\n    systems,\n  },\n});\n","var baseFlatten = require('./_baseFlatten'),\n    map = require('./map');\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nmodule.exports = flatMap;\n","var baseAssignValue = require('./_baseAssignValue'),\n    createAggregator = require('./_createAggregator');\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * var array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * _.keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * _.keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n */\nvar keyBy = createAggregator(function(result, value, key) {\n  baseAssignValue(result, key, value);\n});\n\nmodule.exports = keyBy;\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","BaseAsyncComponent","_a","appName","scope","module","_b","fallback","children","size","innerRef","className","_c","component","Cmp","props","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","SCProps","ref","ScalprumComponent","useFieldApi","_useInventoryGroups","useInventoryGroups","inventoryGroupsEnabled","_slicedToArray","useWorkspacesRename","useFeatureFlags","FEATURE_INVENTORY_WORKSPACES_RENAME","change","useFormApi","_useState","useState","_useState2","isOpen","setIsOpen","_useState3","_useState4","selected","setSelected","_useApi","useApi","api","getInventoryGroups","getGroups","tableReload","_useApi2","_useApi2$","data","isLoading","fetchGroups","apiFunc","setAPIFunc","_useState5","_useState6","searchTerm","setSearchTerm","updateSelection","value","clearSelection","useEffect","options","results","totalCount","total","count","React","HelperText","HelperTextItem","variant","Select","typeAheadAriaLabel","concat","onToggle","_event","onSelect","selection","onClear","selections","onFilter","_debounce","name","encodeURIComponent","placeholderText","noResultsFoundText","isInputValuePersisted","maxHeight","map","_ref","id","DeviceGroup","SelectOption","key","ID","toString","Name","groupId","CreateGroupButton","closeModal","workspaceRename","Text","Button","onClick","propTypes","PropTypes","createDescription","deviceIds","systemText","createSchema","fields","componentTypes","PLAIN_TEXT","label","isRequired","validate","type","validatorTypes","REQUIRED","AddDeviceModal","_ref2","isModalOpen","setIsModalOpen","setIsCreateGroupModalOpen","reloadData","dispatch","useDispatch","Modal","title","submitLabel","additionalMappers","SearchInputApi","schema","onSubmit","values","addDevicesToGroupFunc","group","statusMessages","onSuccess","description","onError","addDevicesToInventoryGroup","addDevicesToGroup","parseInt","apiWithToast","UpdateDeviceModal","TextInputModal","AsyncComponent","_extends","DeleteModal","Inventory","_data$data","_data$data2","historyProp","navigateProp","locationProp","showHeaderProp","notificationProp","urlName","chrome","useChrome","history","useHistory","pathname","useLocation","getInventory","response","fetchDevices","showHeader","undefined","hasError","enforceEdgeGroups","enforce_edge_groups","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","isEditNameModalOpen","setIsEditNameModalOpen","_useState7","_useState8","isDeleteModalOpen","setIsDeleteModalOpen","_useState9","_useState10","deviceId","setDeviceId","_useState11","_useState12","checkedDeviceIds","setCheckedDeviceIds","_useState13","_useState14","isRowSelected","setIsRowSelected","_useState15","_useState16","hasModalSubmitted","setHasModalSubmitted","_useState17","_useState18","isCreateGroupModalOpen","_useState19","deviceData","imageData","_useState20","updateModal","setUpdateModal","useInventorGroups","FEATURE_PARITY_INVENTORY_GROUPS","handleAddDevicesToGroup","ids","isRow","handleRemoveDevicesFromGroup","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","stop","classNameMain","_chrome$updateDocumen","updateDocumentTitle","kebabMenuItems","FEATURE_HIDE_GROUP_ACTIONS","groupsKebabMenuItems","isDisabled","filter","device","_device$deviceGroups","deviceGroups","deviceID","display_name","UUID","push","reduce","acc","newGroupIDS","groupID","includes","_toConsumableArray","PageHeader","PageHeaderTitle","DeviceTable","isSystemsView","devices","handleEditNameSystem","handleDeleteSystem","handleUpdateSelected","prevState","_objectSpread","deviceStatus","imageName","imageSetId","hasCheckbox","selectedItems","selectedItemsUpdateable","canBeUpdated","_step","initialImage","_iterator","_createForOfIteratorHelper","done","updateImageData","err","f","kebabItems","Suspense","Bullseye","Spinner","navigateBack","console","log","refreshTable","CreateGroupModal","RemoveDeviceModal","deviceInfo","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","onCancel","uuid","editDisplayName","handleModalToggle","currentSytems","onConfirm","systemInstance","displayName","removeSystems","statusInitialMessages","onWarning","addNotification","deleteEntity","dismissable","SelectInputApi","isPlaceholder","defaultOptions","index","removeDescription","groupText","WarningIcon","Icon","status","ExclamationTriangleIcon","titleIconVariant","SearchInput","removeDeviceGroupFunc","hasManyGroups","groupName","errorMessageDescription","removeDevicesFromInventoryGroup","removeDeviceFromGroupById","asyncGroupNameValidation","_args","abrupt","validateGroupName","sent","isValid","asyncInventoryGroupNameValidation","_callee2","resp","_args2","_context2","validateInventoryGroupName","validatorMapper","inventoryValidatorMapper","handleCreateGroup","createGroupFunc","createInventoryGroup","createGroup","handleAddDevicesToNewGroup","_ref4","_callee3","_yield$handleCreateGr","_yield$handleCreateGr2","_context3","_x","TEXT_FIELD","helperText","autoFocus","MAX_LENGTH","threshold","nameValidator","payload","instance","post","EDGE_API","Type","INVENTORY_API_BASE","query","q","getTableParams","get","getGroupById","updateGroupById","put","deleteGroupById","Devices","devicesIDS","forEach","removeDevicesFromGroup","join","getEnforceEdgeGroups","RepoModal","initialValues","onClose","FormRenderer","FormTemplate","_FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","_statusMessages","_ref$id","_ref$tableReload","setData","setIsLoading","setHasError","hasSuccess","fetchData","_data","t0","finish","ready","setReady","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","POLLING_IMAGES","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","ACTION_TYPES","keyBy","k","loadImageDetail","imageId","getImageById","createNewImage","callback","createImage","then","loadEdgeImageSets","fetchEdgeImageSets","addImageToPoll","origValue","UPDATE_DISPLAY_NAME","hosts","apiHostPatchHostById","meta","notifications","fulfilled","systems","REMOVE_ENTITY","deleteSystemsById","baseFlatten","exports","collection","iteratee","baseAssignValue","createAggregator","result"],"sourceRoot":""}