{"version":3,"file":"js/4425.1667875404201.87f2b6fa333f59c6f97b.js","mappings":"qKAEO,MAAMA,EAAiB,CAC5BC,KAAM,WACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,kWACTC,QAAS,EACTC,QAAS,GAGEC,GAAW,QAAWP,GAEnC,G,wDCZA,SACE,OAAU,cACV,cAAiB,sBACjB,qBAAwB,+BACxB,yBAA4B,oCAC5B,+BAAkC,0CAClC,mBAAsB,6BACtB,kBAAqB,4BACrB,wBAA2B,mCAC3B,UAAa,CACX,SAAY,gBACZ,OAAU,cACV,MAAS,aACT,KAAQ,aAEV,UAAa,gB,g5BCUf,IAAMQ,EAAc,SAAH,GAAgD,sCAA1CC,EAAY,EAAZA,aAAcC,EAAa,EAAbA,cAAeC,EAAM,EAANA,OAClD,GAAwBC,EAAAA,EAAAA,YAAU,eAA3BC,EAAI,KAAEC,EAAO,KACdC,GAAWC,EAAAA,EAAAA,MACXC,EAAc,WAClBR,IACAE,GAAUA,GACZ,EACMO,GAAwBC,EAAAA,EAAAA,IAC5B,uCAGMC,GAAgBC,EAAAA,EAAAA,YAAWC,EAAAA,GAA3BF,YACAG,GAASC,EAAAA,EAAAA,KACf,gBAAGC,EAAkB,EAAlBA,mBAAkB,MAAQ,CAC3BF,MAAME,aAAkB,EAAlBA,EAAoBF,OAAQ,KACnC,GACDG,EAAAA,IAJMH,KAuBR,OAhBAI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAaR,IAAcS,SAAS,CACxCJ,mBAAAA,EAAAA,KAGF,OADAf,IAAiBoB,EAAAA,EAAAA,IAAgBf,EAAUL,GACpC,kBAAMkB,GAAY,CAC3B,GAAG,CAACb,KAEJY,EAAAA,EAAAA,YAAU,YACR,iBAAC,wFACS,QAAR,EAAAI,gBAAQ,OAAQ,QAAR,EAAR,EAAUC,cAAM,OAAM,QAAN,EAAhB,EAAkBC,YAAI,OAAtB,EACIC,UACDC,MAAK,SAACC,GAAM,OAAKtB,EAAkBuB,MAAVD,EAAsBA,EAAS,CAAC,EAAE,IAAE,0CAHlE,EAKF,GAAG,IAEIvB,GAAQU,EACb,kBAAC,IAAY,CACXe,QAASrB,EACTsB,sBAAuB,CACrBC,OAAQC,EAAAA,GAEVC,SAAU,YAA6B,cAA1BC,EAAM,EAANA,QACXC,EAD8B,EAAXA,cACP,kBAAM,CAAI,IACtB,IAAMC,EAAU,EAAH,KACRF,GAAM,IACTG,GAAIvB,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaC,GACjB/C,KAAMsB,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaE,KACnBC,SAAS3B,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaI,SAAU,EAChCC,aAAc,SACdC,YAAaV,EAAOU,YAChBV,EAAOU,YACP9B,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaO,UAAUC,OAC3BC,SAAUb,EAAOa,SACbb,EAAOa,SACPjC,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaO,UAAUG,YAG7BC,EAAAA,EAAAA,IAAe3C,EAAU8B,GAAS,SAACc,GACjC5C,EAAS,EAAD,MACH6C,EAAAA,EAAAA,IAAgB,CACjBC,QAAS,OACTC,MAAO,eACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMf,KAAI,qCAC/B,IACFgB,KAAM,CACJC,QAAS,CACPC,GAAI,eAAF,OAAiBR,EAAKK,MAAMhB,GAAE,iBAChCoB,QAAS,kBAAMC,EAAAA,EAAAA,IAAmBV,EAAKK,MAAMhB,GAAG,EAChDsB,UAAW,SAACX,GACV,OAAQA,EAAKY,QACX,IAAK,WACH,MAAO,EAAC,EAAM,IAChB,IAAK,QACH,MAAO,EAAC,EAAO,WACjB,QACE,MAAO,EAAC,EAAO,WAErB,EACAC,QAAS,CACPC,QAAS,CACP,SAAC1D,GAAQ,OACPA,GACE6C,EAAAA,EAAAA,IAAgB,CACdC,QAAS,SACTC,MAAO,qBACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMf,KAAI,8CAElC,GAELyB,QAAS,CACP,SAAC3D,GAAQ,OACPA,GACE6C,EAAAA,EAAAA,IAAgB,CACdC,QAAS,UACTC,MAAO,iBACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMf,KAAI,+BAElC,SAMbhC,IACAF,GACE4D,EAAAA,EAAAA,IAAe,CAAE1E,KAAMsB,EAAKyC,MAAMf,KAAMkB,GAAI5C,EAAKyC,MAAMhB,KAE3D,GACF,EACA4B,YAAY,SACZC,cAAe,CACbC,QAASvD,aAAI,EAAJA,EAAMwB,MAAMC,GACrB/C,KAAMsB,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaE,KACnB8B,UAAU,EACVhB,YAAaxC,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaiC,YAC1B3B,YAAa9B,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaO,UAAUC,OACpCC,SAAUjC,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaO,UAAUG,SACjCP,QAAS3B,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaI,QACtB8B,QAAS1D,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAamC,aACtBC,gBAAiBjE,GACbkE,EAAAA,EAAAA,IAAY7D,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAamC,aAAc,GAAF,eAChCG,EAAAA,KAAiB,OACjBC,EAAAA,OAELF,EAAAA,EAAAA,IAAY7D,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAamC,cAC7BK,UAAW,CAAC,oBACZ,oBAAqBhE,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAU,QAAV,EAAX,EAAayC,gBAAQ,WAAjB,EAAJ,EAAuBC,KAAI,SAACC,GAAG,cAC/CA,GAAG,IACNzF,KAAMyF,EAAIzC,MAAI,IAEhB,2BAA4B1B,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAwB,QAAxB,EAAX,EAAa4C,8BAAsB,WAA/B,EAAJ,EAAqCF,KAC/D,SAACG,GAAI,UACHzB,GAAIyB,EAAK5C,GACT/C,KAAM2F,EAAK3C,MACR2C,EAAI,IAGX,8BAA+BrE,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAwB,QAAxB,EAAX,EAAa4C,8BAAsB,WAA/B,EAAJ,EAAqCF,KAClE,SAACG,GAAI,UACHzB,GAAIyB,EAAK5C,GACT/C,KAAM2F,EAAK3C,MACR2C,EAAI,IAGX,kBAAmBrE,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAgB,QAAhB,EAAX,EAAa8C,sBAAc,WAAvB,EAAJ,EAA6BJ,KAAI,SAACC,GAAG,cACnDA,GAAG,IACNzF,KAAMyF,EAAIzC,MAAI,KAGlB6C,KAAK,GACLC,OAAQ,CACNC,OAAQ,CACN,CACEC,UAAWC,EAAAA,EAAAA,OACXjG,KAAM,uBACNkG,UAAW,gBACXC,WAAW,EACXC,SAAS,EACTC,aAAc,CACZC,OAAQ,gBAEVC,YAAY,EACZ1C,MAAO,iBAAF,OAAmBvC,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaE,MACrCwD,WAAY,CACV,qBACA,UACA,YACA,4BAIFT,OAAQ,CACNU,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAD,EAAAA,GACArE,EAAAA,GACAuE,EAAAA,SAOV,kBAAC,IAAQ,KACP,kBAAC,IAAQ,KACP,kBAAC,IAAO,CAACC,OAAK,EAACC,SAAS,WAIhC,EAEAzG,EAAY0G,UAAY,CACtBzG,aAAc0G,IAAAA,KACdzG,cAAeyG,IAAAA,OACfxG,OAAQwG,IAAAA,MAEV3G,EAAY4G,aAAe,CACzB3G,aAAc,WAAe,GAG/B,S,oYC5MM4G,EAAgB,SAAC9F,EAAM+F,EAAcC,EAAQC,GAAqB,MAChEC,EAAYH,IAA8B/F,aAAI,EAAJA,EAAMmG,kBAEhDC,EAAe,GA2BrB,OAzBAF,SAAgB,QAAP,EAATA,EAAW1E,aAAK,WAAP,EAAT,EAAkBC,KAChB2E,EAAaC,KACX,kBAACC,EAAA,EAAY,CACXC,IAAI,4BACJ7B,UAAU,SACV8B,QAAS,wBAAMP,EAAiBC,SAAgB,QAAP,EAATA,EAAW1E,aAAK,WAAP,EAAT,EAAkBC,GAAG,GAAC,uBAM5DuE,GACEI,EAAaC,KACX,kBAACC,EAAA,EAAY,CAACC,IAAI,kBAAkB7B,UAAU,UAC5C,kBAAC+B,EAAA,EAAI,CACH7B,UAAU,oCACVF,UAAU,IACVgC,KAAMV,EACNW,IAAI,sBACJC,OAAO,UAAQ,gDAMhBR,CACT,EAEMS,EAAc,SAAH,GAAsD,0CAAhDX,EAAS,EAATA,UAAWH,EAAY,EAAZA,aAAcE,EAAgB,EAAhBA,iBAC9C,GAA4B5G,EAAAA,EAAAA,WAAS,GAAM,eAApCyH,EAAM,KAAEC,EAAS,KACxB,GAAwB1H,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA7BW,EAAI,KAAEgH,EAAO,MAEpB5G,EAAAA,EAAAA,YAAU,WACR4G,EAAQd,aAAS,EAATA,EAAWlG,KACrB,GAAG,CAACkG,IAEJ,IAAMe,EAAe,qCACfC,EAAa,6BAEnB,OACE,qCACIhB,EAAUiB,WAAajB,EAAUkB,SACjC,kBAACC,EAAA,EAAU,KACT,kBAACC,EAAA,EAAc,KACb,kBAAC,EAAAC,KAAI,CAACC,GAAIC,EAAAA,EAAAA,kBAAuB,2BAIrC,oCACE,kBAACJ,EAAA,EAAU,KACT,kBAACC,EAAA,EAAc,KACb,kBAAC,EAAAC,KAAI,CAACC,GAAIC,EAAAA,EAAAA,kBAAuB,kBAElC1B,EACC,kBAACuB,EAAA,EAAc,KACb,kBAAC,EAAAC,KAAI,CAACC,GAAE,UAAKC,EAAAA,EAAAA,iBAAsB,YAAIzH,SAAc,QAAV,EAAJA,EAAM0H,gBAAQ,WAAV,EAAJ,EAAgBjG,KACpDzB,SAAc,QAAV,EAAJA,EAAM0H,gBAAQ,WAAV,EAAJ,EAAgBhG,OAIrB,kBAAC4F,EAAA,EAAc,CAACK,UAAQ,IACrB3H,SAAc,QAAV,EAAJA,EAAM0H,gBAAQ,WAAV,EAAJ,EAAgBhG,OAAQ,kBAACkG,EAAA,EAAQ,CAAChJ,MAAM,WAG5CmH,GACC,kBAACuB,EAAA,EAAc,CAACK,UAAQ,GACrB5B,SAAmB,QAAP,EAAZA,EAAcvE,aAAK,WAAP,EAAZ,EAAqBI,UAK5B,kBAACiG,EAAA,EAAW,KACV,kBAACC,EAAA,EAAK,KACJ,kBAACC,EAAA,EAAS,KACR,kBAACC,EAAA,EAAQ,CAACtD,UAAU,MAClB,kBAACuD,EAAAC,EAAY,CACXxD,UAAU,KACVE,UAAU,gCAET5E,SAAc,QAAV,EAAJA,EAAM0H,gBAAQ,WAAV,EAAJ,EAAgBhG,OAAQ,kBAACkG,EAAA,EAAQ,CAAChJ,MAAM,WAE3C,kBAACqJ,EAAAC,EAAY,CAACtD,UAAU,aAAaF,UAAU,MAC5CqB,SAAmB,QAAP,EAAZA,EAAcvE,aAAK,OAAnB,EAAqBwB,QACtBhD,SAAsB,QAAlB,EAAJA,EAAMmG,wBAAgB,OAAO,QAAP,EAAtB,EAAwB3E,aAAK,OAA7B,EAA+BwB,OAC7B,kBAACA,EAAA,EAAM,CACLmF,KACEpC,EACIA,SAAmB,QAAP,EAAZA,EAAcvE,aAAK,WAAP,EAAZ,EAAqBwB,OAAOoF,cAC5BpI,SAAsB,QAAlB,EAAJA,EAAMmG,wBAAgB,OAAO,QAAP,EAAtB,EAAwB3E,aAAK,WAAzB,EAAJ,EAA+BwB,OAAOoF,gBAI9C,kBAACR,EAAA,EAAQ,CAAChJ,MAAM,WAGnBmH,SAAmB,QAAP,EAAZA,EAAcvE,aAAK,OAAnB,EAAqB6G,WACtBrI,SAAsB,QAAlB,EAAJA,EAAMmG,wBAAgB,OAAO,QAAP,EAAtB,EAAwB3E,aAAK,OAA7B,EAA+B6G,UAC7B,kBAACJ,EAAAC,EAAY,CAACxD,UAAU,KAAG,gBAEzB,kBAAC4D,EAAA,EAAU,CACTC,KACExC,EACIA,SAAmB,QAAP,EAAZA,EAAcvE,aAAK,WAAP,EAAZ,EAAqB6G,UACrBrI,SAAsB,QAAlB,EAAJA,EAAMmG,wBAAgB,OAAO,QAAP,EAAtB,EAAwB3E,aAAK,WAAzB,EAAJ,EAA+B6G,aAKzC,kBAACT,EAAA,EAAQ,CAAChJ,MAAM,YAItB,kBAACmJ,EAAA,EAAS,CAACS,UAAQ,IACnB,kBAACT,EAAA,EAAS,KACR,kBAACU,EAAA,EAAQ,CACPC,SAAUC,EAAAA,GAAAA,MACVC,OACE,kBAACC,EAAA,EAAc,CACbjG,GAAIsE,EACJ4B,gBAAiBC,EAAAA,GACjBC,SAAU,SAACC,GAAQ,OAAKlC,EAAUkC,EAAS,EAC3CC,WAII,cAHDnD,EACGA,SAAmB,QAAP,EAAZA,EAAcvE,aAAK,WAAP,EAAZ,EAAqBwB,OACrBhD,SAAsB,QAAlB,EAAJA,EAAMmG,wBAAgB,WAAlB,EAAJ,EAAwB3E,MAAMwB,UAClB,EAElB,aAAYiE,GAEZ,kBAACkC,EAAA,EAAO,CACNC,QAASnC,EACToC,UAAW,kBAAMC,SAASC,eAAerC,EAAW,IACpD,WAINJ,OAAQA,EACRhB,cAAeA,EACb9F,EACA+F,EACA/F,aAAI,EAAJA,EAAMwJ,iBACNvD,SAUpB,EAEAY,EAAYlB,UAAY,CACtBO,UAAWN,IAAAA,OACXG,aAAcH,IAAAA,OACdK,iBAAkBL,IAAAA,MAGpB,U,4FCzKM6D,EAAiB,SAAH,GAAoC,YAA9BvD,EAAS,EAATA,UAAWH,EAAY,EAAZA,aACnC,GAAwB1G,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA7BW,EAAI,KAAEgH,EAAO,MAEpB5G,EAAAA,EAAAA,YAAU,WAAM,MAEV4G,EADJjB,IAEYG,SAAe,QAAN,EAATA,EAAWlG,YAAI,WAAN,EAAT,EAAiBmG,kBAC/B,GAAG,CAACD,EAAWH,IAEf,IAAM2D,EAAiB,SAACC,GAAI,OAC1B,OAAIC,MAAa,EAAPD,IAAWzF,KAAI,SAAC2F,EAAGtD,GAAG,OAAK,kBAACqB,EAAA,EAAQ,CAAChJ,MAAM,QAAQ2H,IAAKA,GAAO,GAAC,EAItEuD,EAAgB,CACpBlI,QAAS,UACTmI,QAAS,kBAJc,kBAACzB,EAAA,EAAU,CAACC,KAAMvI,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAyB,YAAjD,IAAH,CAIa,EAC3B,UAAW,0BACTxB,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAiB,QAAjB,EAAX,EAA2B,mBAAC,WAAxB,EAAJ,EAA8B0C,KAAI,SAAC8F,EAAYC,GAAK,OAClD,yBAAK1D,IAAK0D,GAAQD,EAAiB,GACnC,EACJE,QAAS,wBAAwB,OAAlBC,EAAAA,SAAkB,IAAlBA,EAAAA,QAAkB,EAAlBA,EAAAA,GAAqBnK,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAA4B,aAAE,EAElEiC,YAAa,eAGT2G,EAAiB,CACrBlI,SAAU,0BAAMlC,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAW,QAAX,EAAX,EAAaO,iBAAS,WAAlB,EAAJ,EAAwBG,QAAQ,EAChD,UAAW,0BAAMlC,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAW,QAAX,EAAX,EAAaO,iBAAS,WAAlB,EAAJ,EAAwBC,MAAM,GAsB3CqI,EAAgB,CACpB,4BArBkC,WAAM,QACxC,OACE,kBAAC,EAAA9C,KAAI,CACHC,GAAE,UAAKC,EAAAA,EAAAA,iBAAsB,YAAIzH,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAa8I,WAAU,qBAAatK,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaC,GAAE,yBAEnFzB,aAAI,EAAJA,EAAMuK,oBAGb,EAcE,iBAZ6B,WAAM,QACnC,OACE,kBAAC,EAAAhD,KAAI,CACHC,GAAE,UAAKC,EAAAA,EAAAA,iBAAsB,YAAIzH,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAa8I,WAAU,qBAAatK,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAaC,GAAE,kBAEnFzB,aAAI,EAAJA,EAAMuF,SAGb,GAOMiF,EAAoB,CACxBC,MAAO,kBAAMzK,aAAI,EAAJA,EAAM0K,YAAY,EAC/BC,QAAS,kBAAM3K,aAAI,EAAJA,EAAM4K,cAAc,EACnCC,QAAS,kBAAM7K,aAAI,EAAJA,EAAM8K,cAAc,GAGjC9K,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAW,QAAX,EAAX,EAAaO,iBAAS,OAAtB,EAAwBgJ,WAC1BjB,EAAc,oBAAsB,0BAAM9J,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAW,QAAX,EAAX,EAAaO,iBAAS,WAAlB,EAAJ,EAAwBgJ,QAAQ,GAGxE/K,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAQ,QAAR,EAAX,EAAawJ,cAAM,OAAnB,EAAqBC,eACvBnB,EAAc,sBAAwB,0BACpC9J,SAAW,QAAP,EAAJA,EAAMwB,aAAK,OAAQ,QAAR,EAAX,EAAawJ,cAAM,WAAf,EAAJ,EAAqBC,YAAY,GAGrC,IAAMC,EAAgB,SAACC,GAAmB,OACxCnL,EACIoL,OAAOC,QAAQF,GAAqBjH,KAAI,WAAiB+F,GAAU,uBAAzBqB,EAAK,KAAE7I,EAAK,KACpD,OACE,kBAAC,EAAA8I,SAAQ,CAAChF,IAAK0D,GACb,kBAAChC,EAAAC,EAAY,CACXtD,UAAU,gBACVF,UAAW8G,EAAAA,EAAAA,IAEVF,GAEQ,qBAAVA,GACS,uBAAVA,GACW,YAAVA,GAAuB7I,IACtB,kBAACwF,EAAAC,EAAY,CAACxD,UAAW8G,EAAAA,EAAAA,IACvB,kBAACC,EAAA,GAAa,CACZC,SAAS,OACTC,SAAS,SACTrJ,QAAQ,YACRsC,UAAU,uBACVhC,GAAE,UAAK0I,EACJM,QAAQ,OAAQ,KAChBxD,cAAa,oBAEE,mBAAV3F,EACJA,KAAW,eACXzC,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAciB,KAAU,gBAIhC,kBAACwF,EAAAC,EAAY,CACXtD,UAAU,uBACVF,UAAW8G,EAAAA,EAAAA,IAEO,mBAAV/I,EACQ,IAAZA,IACE,EACAA,KAAW,eACbzC,SAAW,QAAP,EAAJA,EAAMwB,aAAK,WAAP,EAAJ,EAAciB,KAAU,eAKtC,IACA,IAAI,EAEV,OACE,kBAACoF,EAAA,EAAW,CAACjD,UAAU,yBACrB,kBAACiH,EAAA,EAAI,CAACC,KAAM,IACV,kBAACC,EAAA,EAAQ,CAACD,KAAM,GACd,kBAACrF,EAAA,EAAI,CAAC/B,UAAWsH,EAAAA,EAAAA,IACdjG,EAAe,UAAY,qBAE9B,kBAACiC,EAAA,EAAQ,CAACtD,UAAWuH,EAAAA,EAAAA,IAClBf,EAAcpB,IAAkBJ,EAAe,IAElD,kBAACjD,EAAA,EAAI,CAAC/B,UAAWsH,EAAAA,EAAAA,IAAgB,qBACjC,kBAAChE,EAAA,EAAQ,CAACtD,UAAWuH,EAAAA,EAAAA,IAClBf,EAAcd,IAAmBV,EAAe,KAGrD,kBAACqC,EAAA,EAAQ,CAACD,KAAM,IAChB,kBAACC,EAAA,EAAQ,CAACD,KAAM,GACd,kBAACrF,EAAA,EAAI,CAAC/B,UAAWsH,EAAAA,EAAAA,IAAgB,aACjC,kBAAChE,EAAA,EAAQ,CAACtD,UAAWuH,EAAAA,EAAAA,IAClBf,EAAcb,IAAkBX,EAAe,IAElD,kBAACjD,EAAA,EAAI,CAAC/B,UAAWsH,EAAAA,EAAAA,IAAgB,iCACjC,kBAAChE,EAAA,EAAQ,CAACtD,UAAWuH,EAAAA,EAAAA,IAClBf,EAAcV,IAAsBd,EAAe,MAMhE,EAEAD,EAAe9D,UAAY,CACzBO,UAAWN,IAAAA,OACXG,aAAcH,IAAAA,QAGhB,U,sEC7JMsG,EAAiB,CACrB,CACEZ,MAAO,SACPnD,KAAM,WACNgE,QAAS,CACP,CAAEC,OAAQ,WAAY3J,MAAO,YAC7B,CAAE2J,OAAQ,UAAW3J,MAAO,WAC5B,CAAE2J,OAAQ,QAAS3J,MAAO,SAC1B,CAAE2J,OAAQ,QAAS3J,MAAO,cAK1B4J,EAAc,CAClB,CACE9J,MAAO,UACP4F,KAAM,UACNmE,MAAM,EACNC,iBAAkB,EAACC,EAAAA,EAAAA,WAAU,MAE/B,CACEjK,MAAO,SACP4F,KAAM,aACNmE,MAAM,EACNC,iBAAkB,EAACC,EAAAA,EAAAA,WAAU,MAE/B,CACEjK,MAAO,qBACP4F,KAAM,qBACNmE,MAAM,EACNC,iBAAkB,EAACC,EAAAA,EAAAA,WAAU,MAE/B,CACEjK,MAAO,UACP4F,KAAM,aACNmE,MAAM,EACNC,iBAAkB,EAACC,EAAAA,EAAAA,WAAU,MAE/B,CACEjK,MAAO,SACP4F,KAAM,SACNmE,MAAM,EACNC,iBAAkB,EAACC,EAAAA,EAAAA,WAAU,OAI3BC,GAAa,SAACzM,EAAM0M,EAAYC,GACpC,OAAO3M,aAAI,EAAJA,EAAMkE,KAAI,SAAC1C,GAAK,MAAM,CAC3BoL,QAAS,CACPhK,GAAIpB,aAAK,EAALA,EAAOC,GACXoL,YAAarL,aAAK,EAALA,EAAOwB,OACpBgD,OAAQxE,aAAK,EAALA,EAAOgI,iBACfmD,mBAAAA,EACAG,oBAAqBtL,EAAMI,SAE7BmL,gBAAiB,CACfvL,aAAK,EAALA,EAAOI,QACPoL,EAAAA,GAAgBxL,aAAK,EAALA,EAAOyL,WACvBzL,aAAK,EAALA,EAAO0L,UACP1L,aAAK,EAALA,EAAOwB,QAETmK,MAAO,CACL,CACE5K,MACE,kBAAC,EAAAgF,KAAI,CACHC,GAAE,UAAKC,EAAAA,EAAAA,iBAAsB,YAAIiF,EAAU,qBAAalL,EAAMC,GAAE,aAE/DD,aAAK,EAALA,EAAOI,UAId,CACEW,MAAOyK,EAAAA,GAAgBxL,aAAK,EAALA,EAAOyL,YAEhC,CACE1K,MAAOf,SAAAA,EAAO4L,eACZ,kBAACjE,EAAA,EAAO,CAACC,QAAS,6BAAM5H,EAAM4L,iBAC5B,+BAAOC,EAAAA,EAAAA,IAAe7L,EAAM4L,eAAgB,EAAG,KAGjD,kBAAC3G,EAAA,EAAI,qBAGT,CACElE,MAAO,kBAAC+F,EAAA,EAAU,CAACC,KAAM/G,aAAK,EAALA,EAAO0L,aAElC,CACE3K,MAAO,kBAACS,EAAA,EAAM,CAACmF,KAAM3G,aAAK,EAALA,EAAOwB,OAAOoF,kBAGxC,GACH,EAEMkF,GAAmB,SAAH,GAAwC,YAAlCpH,EAAS,EAATA,UAAWD,EAAgB,EAAhBA,iBAC/BsH,EAAarH,SAAe,QAAN,EAATA,EAAWlG,YAAI,OAAU,QAAV,EAAf,EAAiB0H,gBAAQ,WAAhB,EAAT,EAA2BjG,GACxCkL,EAAqBzG,SAAe,QAAN,EAATA,EAAWlG,YAAI,OAAU,QAAV,EAAf,EAAiB0H,gBAAQ,WAAhB,EAAT,EAA2B9F,QAEtD,GAA0C4L,EAAAA,EAAAA,GAAO,CAC/CC,IAAK,gBAAGC,EAAK,EAALA,MAAK,OACXC,EAAAA,EAAAA,IAAwB,CACtBJ,WAAYA,EACZG,MAAAA,GACA,EACJE,aAAa,IACb,eAPKC,EAAQ,KAAEC,EAAqB,KAS9B9N,EAA8B6N,EAA9B7N,KAAMmH,EAAwB0G,EAAxB1G,UAAWC,EAAayG,EAAbzG,SA8CzB,OACE,kBAAC2G,EAAA,EAAI,CAACnJ,UAAU,aACd,kBAACoJ,EAAA,EAAY,CACXC,eAAe,EACfC,UAAU,EACVC,QAASjC,EACTkC,cAAeN,EACfO,UAAW,CACTC,MAAOtO,aAAI,EAAJA,EAAMsO,MACbtO,KAAMA,aAAI,EAAJA,EAAMA,KACZmH,UAAAA,EACAC,SAAAA,GAEFiF,YAAaA,EACb1C,KAAM8C,GAAWzM,aAAI,EAAJA,EAAMA,KAAMuN,EAAYZ,GACzC4B,eA3DiB,SAACC,GAAY,cAqBhC,IApBIpI,EAAe,GAsCrB,OArCmB,QAAnB,EAAIoI,EAAQ5B,eAAO,OAAf,EAAiB5G,QACnBI,EAAaC,KAAK,CAChB9D,MACE,kBAACkE,EAAA,EAAI,CACH7B,UAAU,oCACVF,UAAU,IACVgC,KAAM8H,EAAQ5B,QAAQ5G,OACtBW,IAAI,sBACJC,OAAO,UAAQ,eASY,aAAlB,QAAf,EAAA4H,EAAQ5B,eAAO,aAAf,EAAiBC,cACgB,WAAlB,QAAf,EAAA2B,EAAQ5B,eAAO,aAAf,EAAiBC,eAEjBzG,EAAaC,KAAK,CAChB9D,MAAO,eACPiE,QAAS,SAACiI,EAAQC,EAAQF,GACxBvI,EAAiBuI,EAAQ5B,QAAQhK,GACnC,EACAsG,YACEsF,SAAgB,QAAT,EAAPA,EAAS5B,eAAO,WAAT,EAAP,EAAkBD,uBAClB6B,SAAgB,QAAT,EAAPA,EAAS5B,eAAO,WAAT,EAAP,EAAkBE,uBAIa,cAAlB,QAAf,EAAA0B,EAAQ5B,eAAO,aAAf,EAAiBC,cAA6C,QAAnB,EAAI2B,EAAQ5B,eAAO,OAAf,EAAiBhK,IAClEwD,EAAaC,KAAK,CAChB9D,MAAO,KAIJ6D,CACT,EAoBMuI,mBAnBqB,SAACH,GAAO,YACA,cAAlB,QAAf,EAAAA,EAAQ5B,eAAO,aAAf,EAAiBC,YAA0B,EAmBvC+B,YAAa,CAAE3E,MAAO,EAAG4E,UAAW,UAI5C,EACAvB,GAAiB3H,UAAY,CAC3BO,UAAWN,IAAAA,OACXkJ,SAAUlJ,IAAAA,OACV2H,WAAY3H,IAAAA,OACZ6G,WAAY7G,IAAAA,KACZK,iBAAkBL,IAAAA,MAGpB,Y,uCC3LMsG,GAAiB,CAAC,CAAEZ,MAAO,OAAQnD,KAAM,SAEzCkE,GAAc,CAClB,CACE9J,MAAO,OACP4F,KAAM,OACNmE,MAAM,EACNC,iBAAkB,EAACC,EAAAA,EAAAA,WAAU,MAE/B,CACEjK,MAAO,UACP4F,KAAM,UACNmE,MAAM,EACNC,iBAAkB,EAACC,EAAAA,EAAAA,WAAU,MAE/B,CACEjK,MAAO,UACP4F,KAAM,UACNmE,MAAM,EACNC,iBAAkB,EAACC,EAAAA,EAAAA,WAAU,OAK3BC,GAAa,SAAH,GAKV,IAJJsC,EAAY,EAAZA,aACAC,EAAiB,EAAjBA,kBACAC,EAAa,EAAbA,cAWA,OAPc,IAHP,EAAPC,QAIMF,EAAkBG,QAChB,SAACC,GAAI,OACHH,aAAa,EAAbA,EAAeE,QAAO,SAAC3N,GAAK,OAAK4N,EAAK1Q,OAAS8C,EAAME,IAAI,IAAE2N,QAC3D,CAAC,IAELL,GACS9K,KAAI,SAACoL,GAAW,MAAM,CACnCvC,gBAAiB,CACfuC,aAAW,EAAXA,EAAa5Q,KACb4Q,aAAW,EAAXA,EAAa3N,QACb2N,aAAW,EAAXA,EAAa5L,SAGfyJ,MAAO,CACLmC,aAAW,EAAXA,EAAa5Q,KACb4Q,aAAW,EAAXA,EAAa3N,QACb2N,aAAW,EAAXA,EAAa5L,QAEb,CACEnB,MACE,uBACEmE,KAAI,6DAAwDqI,EAAY,wBAAgBO,aAAW,EAAXA,EAAa5Q,KAAI,YAAI4Q,aAAW,EAAXA,EAAa3N,QAAO,YAAI2N,aAAW,EAAXA,EAAa5L,QAAO,YAAI4L,aAAW,EAAXA,EAAaC,KAAI,qBAC9K3I,OAAO,SACPD,IAAI,uBAEJ,kBAAC6I,GAAA,GAAM,CACLlN,QAAQ,OACRmN,SAAO,EACPC,KAAM,kBAAC,MAAmB,MAC1BC,aAAa,SAAO,uBAQ/B,GACH,EAEMC,GAAc,CAClB,EAAG,aACH,EAAG,OAGCC,GAAc,CAClBC,WAAY,EACZC,IAAK,GAGDC,GAAmB,SAAH,GAAyB,sBAAnBjK,EAAY,EAAZA,aACpBkK,GAAWC,EAAAA,EAAAA,eACXC,GAAUC,EAAAA,EAAAA,cACVC,EAAWJ,EAASK,SAASC,MAAM,KACnCC,EAAoC,IAApBH,EAAShB,OAAeQ,GAAYQ,EAAS,IAAM,EAEnEtB,EAAehJ,SAAmB,QAAP,EAAZA,EAAcvE,aAAK,OAAc,QAAd,EAAnB,EAAqBmC,oBAAY,WAArB,EAAZ,EAAmC4M,MAAM,KAAK,GAAGE,MACpE,GACC,GAGH,GAAsCpR,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA3CiQ,EAAW,KAAEoB,EAAc,KAClC,GAAsCrR,EAAAA,EAAAA,UAASmR,GAAc,eAAtDG,EAAW,KAAEC,EAAc,KAwBlC,OAtBAxQ,EAAAA,EAAAA,YAAU,WACRsQ,EAAe3K,EACjB,GAAG,CAACA,KAEJ3F,EAAAA,EAAAA,YAAU,WACRiQ,EAAS,KAAOT,GAAYe,IAAgBC,EAAeJ,EAC7D,GAAG,CAACH,IAgB2C,aAAxCtK,SAAmB,QAAP,EAAZA,EAAcvE,aAAK,OAAQ,QAAR,EAAnB,EAAqBwJ,cAAM,WAAf,EAAZ,EAA6BhI,QAClC,kBAAC+K,EAAA,EAAI,CAACnJ,UAAU,aACd,kBAACoJ,EAAA,EAAY,CACXC,eAAe,EACfE,QAASjC,GACTmC,UAAW,CACTC,MACkB,IAAhBqC,EACIrB,aAAW,EAAXA,EAAa/E,oBACb+E,aAAW,EAAXA,EAAa/J,SACnB4B,WAAW,EACXC,UAAU,GAEZiF,YAAaA,GACb1C,KACE2F,SAAkB,QAAP,EAAXA,EAAa9N,aAAK,OAAQ,QAAR,EAAlB,EAAoBwJ,cAAM,OAA1B,EAA4B6F,kBACxBpE,GAAW,CACTsC,aAAcA,EACdC,kBACEM,SAAkB,QAAP,EAAXA,EAAa9N,aAAK,OAAQ,QAAR,EAAlB,EAAoBwJ,cAAM,WAAf,EAAX,EAA4B6F,kBAC9B5B,cAAeK,SAAkB,QAAP,EAAXA,EAAa9N,aAAK,WAAP,EAAX,EAAoByC,SACnCiL,QAASyB,IAEX,GAENpC,eAAgB,iBAAM,EAAE,EACxBI,mBAAoB,kBAAM,CAAI,EAC9BC,YAAa,CAAE3E,MAAO,EAAG4E,UAAW,OACpCiC,aAAc,CACZ,CAAEvO,MAAO,aAAcgE,IAAK,GAC5B,CAAEhE,MAAO,MAAOgE,IAAK,IAEvBwK,aA9CoB,SAACC,GAAgB,MACnCC,EAAwB,QAAd,EAAGZ,EAAS,UAAE,aAAX,EAAajI,cAChCwI,EAAeI,GACI,aAAfC,IACsB,IAApBZ,EAAShB,OACXgB,EAAS,GAAKT,GAAYoB,GAE1BX,EAAShK,KAAKuJ,GAAYoB,IAG5Bb,EAAQ9J,KAAKgK,EAASa,KAAK,MAE/B,EAmCMC,YAAaR,EACbS,iBAAkB,CAChB1B,KAAM,SACNnN,MAAO,6BAKb,kBAACwL,EAAA,EAAI,CAACnJ,UAAU,aACd,kBAACyM,GAAA,EAAK,CACJC,QAAQ,QACR/O,MAAM,qCACNgP,KAAK,2EACLC,cAAe,KACfC,iBAAkB,KAI1B,EAEAzB,GAAiBrK,UAAY,CAC3BI,aAAcH,IAAAA,QAGhB,YC3KA,IAAM8L,GAAO,CACXC,QAAS,EACTpM,SAAU,EACVqM,SAAU,GAGNC,GAAkB,SAAH,GAKf,IAJJ3L,EAAS,EAATA,UACAD,EAAgB,EAAhBA,iBACAF,EAAY,EAAZA,aACAoB,EAAS,EAATA,UAEM8I,GAAWC,EAAAA,EAAAA,eACXC,GAAUC,EAAAA,EAAAA,cAChB,GAAwC/Q,EAAAA,EAAAA,UAASqS,GAAKC,SAAQ,eAAvDG,EAAY,KAAEC,EAAe,KAC9BC,EAAYjM,EAAe,WAAa,cAUxCkM,GAAiBC,EAAAA,EAAAA,IAAYjC,EAASK,SAR/B,CACX,UACA,kBACA,cACA,eACA,WACA,mBAqBF,OANAlQ,EAAAA,EAAAA,YAAU,WACR6R,EAAyB,SACrBF,EAAgBL,GAAKO,EAAyB,WAC9CF,EAAgBL,GAAKO,EAA4B,aACvD,GAAG,CAAChC,EAASK,WAGX,qCACIpK,EAAUiB,WAAajB,EAAUkB,SACjC,kBAACiK,GAAA,EAAU,CACT3B,KAAK,WACLnN,MAAM,kBACNgP,KAAK,oEACLC,cAAe,CACbW,KAAM,wBACNzL,KAAMe,EAAAA,EAAAA,kBAERgK,iBAAkB,KAGpB,yBAAK7M,UAAU,mCACb,kBAACwN,EAAA,EAAI,CACHxN,UAAU,aACVyN,UAAWP,EACXQ,SAnCa,SAAC7D,EAAQ8D,GAC9B,IAAMC,EACS,IAAbD,EAAiB,UAAYxM,EAAe,WAAa,WAE3DkM,EAAeD,GAAaQ,EAE5BrC,EAAQ9J,KAAK4L,EAAeQ,YAE5BV,EAAgBQ,EAClB,GA4BU,kBAACG,EAAA,EAAG,CACFC,SAAUjB,GAAKC,QACfpP,MAAO,kBAACqQ,EAAA1K,EAAY,iBAEpB,kBAAC,EAAc,CACbhC,UAAWA,EACXH,aAAcA,KAGjBoB,EACC,kBAACuL,EAAA,EAAG,CACFnQ,MACE,kBAACqQ,EAAA1K,EAAY,KACX,kBAACN,EAAA,EAAQ,CAAChJ,MAAM,YAIpBmH,EACF,kBAAC2M,EAAA,EAAG,CACFC,SAAUjB,GAAKnM,SACfhD,MAAO,kBAACqQ,EAAA1K,EAAY,kBAEpB,kBAAC,GAAgB,CAACnC,aAAcA,KAGlC,kBAAC2M,EAAA,EAAG,CACFC,SAAUjB,GAAKE,SACfrP,MAAO,kBAACqQ,EAAA1K,EAAY,kBAEpB,kBAAC,GAAe,CACdhC,UAAWA,EACXD,iBAAkBA,OASpC,EAEA4L,GAAgBlM,UAAY,CAC1BO,UAAWN,IAAAA,OACXG,aAAcH,IAAAA,OACdK,iBAAkBL,IAAAA,KAClBuB,UAAWvB,IAAAA,MAGb,Y,ylBCnCA,SAlFoB,WAClB,OAAoCiN,EAAAA,EAAAA,aAA5BC,EAAO,EAAPA,QAASC,EAAc,EAAdA,eACX5C,GAAUC,EAAAA,EAAAA,cAChB,GAAwC/Q,EAAAA,EAAAA,UAAS,CAC/CyH,QAAQ,EACRkM,SAAU,OACV,eAHKC,EAAY,KAAEC,EAAe,KAIpC,GAAwC7T,EAAAA,EAAAA,UAAS,MAAK,eAA/C0G,EAAY,KAAEoN,EAAe,KAEpC,GAAyC3F,EAAAA,EAAAA,GAAO,CAC9CC,IAAK2F,EAAAA,GACLxQ,GAAImQ,EAAiB,GAAH,OAAMD,EAAO,qBAAaC,GAAc,UAAQD,GAClElF,aAAa,IACb,eAJKC,EAAQ,KAAEwF,EAAoB,KAM7BrT,EAAoB6N,EAApB7N,KAAMmH,EAAc0G,EAAd1G,UAERlB,EAAmB,SAACrD,GACxBuN,EAAQ9J,KAAK,CACXiK,SAAUH,EAAQF,SAASK,SAC3BgD,OAAQ,IAAIC,gBAAgB,CAC1BC,cAAc,IACbC,aAELP,GAAgB,SAACQ,GAAS,gBACrBA,GAAS,IACZ5M,QAAS4M,EAAUvM,UACnB6L,SAAUpQ,GAAE,GAEhB,EAYA,OAVAxC,EAAAA,EAAAA,YAAU,WAEJ+S,EADJJ,EACoB/S,aAAI,EAAJA,EAAM2T,aACN,KACtB,GAAG,CAAC9F,EAAUkF,KAEd3S,EAAAA,EAAAA,YAAU,WACRiT,GACF,GAAG,CAACP,EAASC,IAGX,kBAAC,EAAAxH,SAAQ,KACP,kBAACqI,EAAA,EAAU,CAAChP,UAAU,cACpB,kBAACiP,EAAA,EAAK,CAACC,WAAS,GACd,kBAACC,EAAA,EAAS,KACR,kBAAC,EAAW,CACV7N,UAAW2H,EACX9H,aAAcA,EACdE,iBAAkBA,OAK1B,kBAAC,GAAe,CACdC,UAAW2H,EACXiB,SAAUgE,EACV/M,aAAcA,EACdE,iBAAkBA,EAClBkB,UAAWA,IAEZ8L,EAAanM,QACZ,kBAAC,EAAAkN,SAAQ,CACPC,SACE,kBAACC,EAAA,EAAQ,KACP,kBAACC,EAAA,EAAO,QAIZ,kBAACC,GAAA,QAAiB,CAChBlV,aAAc,WACZiR,EAAQ9J,KAAK,CAAEiK,SAAUH,EAAQF,SAASK,WAC1C4C,GAAgB,SAACQ,GAAS,gBAAWA,GAAS,IAAE5M,QAAQ,GAAK,GAC/D,EACA3H,cAAe8T,EAAaD,YAMxC,C","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/copy-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs","webpack:///./src/Routes/ImageManager/UpdateImageWizard.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageVersionsTab.js","webpack:///./src/Routes/ImageManagerDetail/ImagePackagesTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTabs.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CopyIconConfig = {\n  name: 'CopyIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CopyIcon = createIcon(CopyIconConfig);\n\nexport default CopyIcon;","import './clipboard-copy.css';\nexport default {\n  \"button\": \"pf-c-button\",\n  \"clipboardCopy\": \"pf-c-clipboard-copy\",\n  \"clipboardCopyActions\": \"pf-c-clipboard-copy__actions\",\n  \"clipboardCopyActionsItem\": \"pf-c-clipboard-copy__actions-item\",\n  \"clipboardCopyExpandableContent\": \"pf-c-clipboard-copy__expandable-content\",\n  \"clipboardCopyGroup\": \"pf-c-clipboard-copy__group\",\n  \"clipboardCopyText\": \"pf-c-clipboard-copy__text\",\n  \"clipboardCopyToggleIcon\": \"pf-c-clipboard-copy__toggle-icon\",\n  \"modifiers\": {\n    \"expanded\": \"pf-m-expanded\",\n    \"inline\": \"pf-m-inline\",\n    \"block\": \"pf-m-block\",\n    \"code\": \"pf-m-code\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","import React, { useState, useEffect, useContext } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  review,\n  packages,\n  updateDetails,\n  registration,\n  repositories,\n  imageOutput,\n  customPackages,\n} from './steps';\nimport { Bullseye, Backdrop, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useFeatureFlags, getReleases } from '../../utils';\nimport { temporaryReleases, supportedReleases } from '../../constants';\n\nconst UpdateImage = ({ navigateBack, updateImageID, reload }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateImageID && loadImageDetail(dispatch, updateImageID);\n    return () => registered();\n  }, [dispatch]);\n\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  return user && data ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          Id: data?.image?.ID,\n          name: data?.image?.Name,\n          version: data?.image?.Version + 1,\n          architecture: 'x86_64',\n          credentials: values.credentials\n            ? values.credentials\n            : data?.image?.Installer.SshKey,\n          username: values.username\n            ? values.username\n            : data?.image?.Installer.Username,\n        };\n\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Update image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n          dispatch(\n            addImageToPoll({ name: data.value.Name, id: data.value.ID })\n          );\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        imageID: data?.image.ID,\n        name: data?.image?.Name,\n        isUpdate: true,\n        description: data?.image?.Description,\n        credentials: data?.image?.Installer.SshKey,\n        username: data?.image?.Installer.Username,\n        version: data?.image?.Version,\n        release: data?.image?.Distribution,\n        release_options: temporaryReleasesFlag\n          ? getReleases(data?.image?.Distribution, [\n              ...supportedReleases,\n              ...temporaryReleases,\n            ])\n          : getReleases(data?.image?.Distribution),\n        imageType: ['rhel-edge-commit'],\n        'selected-packages': data?.image?.Packages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n        'third-party-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'initial-custom-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'custom-packages': data?.image?.CustomPackages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n      }}\n      test=\"\"\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Update image',\n            },\n            showTitles: true,\n            title: `Update image: ${data?.image?.Name}`,\n            crossroads: [\n              'target-environment',\n              'release',\n              'imageType',\n              'third-party-repositories',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              updateDetails,\n              imageOutput,\n              registration,\n              repositories,\n              packages,\n              repositories,\n              review,\n              customPackages,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  updateImageID: PropTypes.number,\n  reload: PropTypes.func,\n};\nUpdateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default UpdateImage;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  Text,\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Tooltip,\n} from '@patternfly/react-core';\nimport Status from '../../components/Status';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\n\nconst dropdownItems = (data, imageVersion, isoURL, openUpdateWizard) => {\n  const imageData = imageVersion ? imageVersion : data?.LastImageDetails;\n\n  const actionsArray = [];\n\n  imageData?.image?.ID &&\n    actionsArray.push(\n      <DropdownItem\n        key=\"create-new-version-button\"\n        component=\"button\"\n        onClick={() => openUpdateWizard(imageData?.image?.ID)}\n      >\n        Create new version\n      </DropdownItem>\n    );\n\n  isoURL &&\n    actionsArray.push(\n      <DropdownItem key=\"download-button\" component=\"button\">\n        <Text\n          className=\"force-text-black remove-underline\"\n          component=\"a\"\n          href={isoURL}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Download installable .iso for newest image\n        </Text>\n      </DropdownItem>\n    );\n  return actionsArray;\n};\n\nconst DetailsHead = ({ imageData, imageVersion, openUpdateWizard }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    setData(imageData?.data);\n  }, [imageData]);\n\n  const actionsLabel = 'Actions for image set details view';\n  const dropdownId = 'image-set-details-dropdown';\n\n  return (\n    <>\n      {!imageData.isLoading && imageData.hasError ? (\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={paths['manage-images']}>Back to Manage Images</Link>\n          </BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        <>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={paths['manage-images']}>Manage Images</Link>\n            </BreadcrumbItem>\n            {imageVersion ? (\n              <BreadcrumbItem>\n                <Link to={`${paths['manage-images']}/${data?.ImageSet?.ID}`}>\n                  {data?.ImageSet?.Name}\n                </Link>\n              </BreadcrumbItem>\n            ) : (\n              <BreadcrumbItem isActive>\n                {data?.ImageSet?.Name || <Skeleton width=\"100px\" />}\n              </BreadcrumbItem>\n            )}\n            {imageVersion && (\n              <BreadcrumbItem isActive>\n                {imageVersion?.image?.Version}\n              </BreadcrumbItem>\n            )}\n          </Breadcrumb>\n\n          <TextContent>\n            <Split>\n              <SplitItem>\n                <TextList component=\"dl\">\n                  <TextListItem\n                    component=\"h1\"\n                    className=\"grid-align-center pf-u-mb-0\"\n                  >\n                    {data?.ImageSet?.Name || <Skeleton width=\"150px\" />}\n                  </TextListItem>\n                  <TextListItem className=\"pf-u-pt-sm\" component=\"dd\">\n                    {imageVersion?.image?.Status ||\n                    data?.LastImageDetails?.image?.Status ? (\n                      <Status\n                        type={\n                          imageVersion\n                            ? imageVersion?.image?.Status.toLowerCase()\n                            : data?.LastImageDetails?.image?.Status.toLowerCase()\n                        }\n                      />\n                    ) : (\n                      <Skeleton width=\"100px\" />\n                    )}\n                  </TextListItem>\n                  {imageVersion?.image?.UpdatedAt ||\n                  data?.LastImageDetails?.image?.UpdatedAt ? (\n                    <TextListItem component=\"p\">\n                      {`Last updated `}\n                      <DateFormat\n                        date={\n                          imageVersion\n                            ? imageVersion?.image?.UpdatedAt\n                            : data?.LastImageDetails?.image?.UpdatedAt\n                        }\n                      />\n                    </TextListItem>\n                  ) : (\n                    <Skeleton width=\"200px\" />\n                  )}\n                </TextList>\n              </SplitItem>\n              <SplitItem isFilled></SplitItem>\n              <SplitItem>\n                <Dropdown\n                  position={DropdownPosition.right}\n                  toggle={\n                    <DropdownToggle\n                      id={dropdownId}\n                      toggleIndicator={CaretDownIcon}\n                      onToggle={(newState) => setIsOpen(newState)}\n                      isDisabled={\n                        (imageVersion\n                          ? imageVersion?.image?.Status\n                          : data?.LastImageDetails?.image.Status) ===\n                          'BUILDING' || false\n                      }\n                      aria-label={actionsLabel}\n                    >\n                      <Tooltip\n                        content={actionsLabel}\n                        reference={() => document.getElementById(dropdownId)}\n                      />\n                      Actions\n                    </DropdownToggle>\n                  }\n                  isOpen={isOpen}\n                  dropdownItems={dropdownItems(\n                    data,\n                    imageVersion,\n                    data?.ImageBuildIsoURL,\n                    openUpdateWizard\n                  )}\n                />\n              </SplitItem>\n            </Split>\n          </TextContent>\n        </>\n      )}\n    </>\n  );\n};\n\nDetailsHead.propTypes = {\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n  openUpdateWizard: PropTypes.func,\n};\n\nexport default DetailsHead;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  Text,\n  TextVariants,\n  Grid,\n  GridItem,\n  ClipboardCopy,\n  Skeleton,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\n\nconst ImageDetailTab = ({ imageData, imageVersion }) => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    imageVersion\n      ? setData(imageVersion)\n      : setData(imageData?.data?.LastImageDetails);\n  }, [imageData, imageVersion]);\n\n  const createSkeleton = (rows) =>\n    [...Array(rows * 2)].map((_, key) => <Skeleton width=\"180px\" key={key} />);\n\n  const dateFormat = () => <DateFormat date={data?.image?.['CreatedAt']} />;\n\n  const detailsMapper = {\n    Version: 'Version',\n    Created: () => dateFormat(),\n    'Type(s)': () =>\n      data?.image?.['OutputTypes']?.map((outputType, index) => (\n        <div key={index}>{outputType}</div>\n      )),\n    Release: () => distributionMapper?.[data?.image?.['Distribution']],\n    //Size: 'Size',\n    Description: 'Description',\n  };\n\n  const userInfoMapper = {\n    Username: () => data?.image?.Installer?.Username,\n    'SSH key': () => data?.image?.Installer?.SshKey,\n  };\n  const renderAdditionalPackageLink = () => {\n    return (\n      <Link\n        to={`${paths['manage-images']}/${data?.image?.ImageSetID}/versions/${data?.image?.ID}/packages/additional`}\n      >\n        {data?.additional_packages}\n      </Link>\n    );\n  };\n\n  const renderTotalPackageLink = () => {\n    return (\n      <Link\n        to={`${paths['manage-images']}/${data?.image?.ImageSetID}/versions/${data?.image?.ID}/packages/all`}\n      >\n        {data?.packages}\n      </Link>\n    );\n  };\n\n  const packageMapper = {\n    'Total additional packages': renderAdditionalPackageLink,\n    'Total packages': renderTotalPackageLink,\n  };\n\n  const packageDiffMapper = {\n    Added: () => data?.update_added,\n    Removed: () => data?.update_removed,\n    Updated: () => data?.update_updated,\n  };\n\n  if (data?.image?.Installer?.Checksum) {\n    detailsMapper['SHA-256 checksum'] = () => data?.image?.Installer?.Checksum;\n  }\n\n  if (data?.image?.Commit?.OSTreeCommit) {\n    detailsMapper['Ostree commit hash'] = () =>\n      data?.image?.Commit?.OSTreeCommit;\n  }\n\n  const buildTextList = (labelsToValueMapper) =>\n    data\n      ? Object.entries(labelsToValueMapper).map(([label, value], index) => {\n          return (\n            <Fragment key={index}>\n              <TextListItem\n                className=\"details-label\"\n                component={TextListItemVariants.dt}\n              >\n                {label}\n              </TextListItem>\n              {label === 'SHA-256 checksum' ||\n              label === 'Ostree commit hash' ||\n              (label === 'SSH key' && value()) ? (\n                <TextListItem component={TextListItemVariants.dd}>\n                  <ClipboardCopy\n                    hoverTip=\"Copy\"\n                    clickTip=\"Copied\"\n                    variant=\"expansion\"\n                    className=\"pf-u-text-break-word\"\n                    id={`${label\n                      .replace(/\\s+/g, '-')\n                      .toLowerCase()}-clipboard-copy`}\n                  >\n                    {typeof value === 'function'\n                      ? value() || 'Unavailable'\n                      : data?.image?.[value] || 'Unavailable'}\n                  </ClipboardCopy>\n                </TextListItem>\n              ) : (\n                <TextListItem\n                  className=\"pf-u-text-break-word\"\n                  component={TextListItemVariants.dd}\n                >\n                  {typeof value === 'function'\n                    ? value() === 0\n                      ? 0\n                      : value() || 'Unavailable'\n                    : data?.image?.[value] || 'Unavailable'}\n                </TextListItem>\n              )}\n            </Fragment>\n          );\n        })\n      : null;\n\n  return (\n    <TextContent className=\"pf-u-ml-lg pf-u-mt-md\">\n      <Grid span={12}>\n        <GridItem span={5}>\n          <Text component={TextVariants.h2}>\n            {imageVersion ? 'Details' : 'Most recent image'}\n          </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(detailsMapper) || createSkeleton(6)}\n          </TextList>\n          <Text component={TextVariants.h2}>User information </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(userInfoMapper) || createSkeleton(2)}\n          </TextList>\n        </GridItem>\n        <GridItem span={1} />\n        <GridItem span={6}>\n          <Text component={TextVariants.h2}>Packages </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(packageMapper) || createSkeleton(3)}\n          </TextList>\n          <Text component={TextVariants.h2}>Changes from previous version</Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(packageDiffMapper) || createSkeleton(3)}\n          </TextList>\n        </GridItem>\n      </Grid>\n    </TextContent>\n  );\n};\n\nImageDetailTab.propTypes = {\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n};\n\nexport default ImageDetailTab;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Status from '../../components/Status';\nimport { imageTypeMapper } from '../../constants';\nimport { getImageSetViewVersions } from '../../api/images';\nimport { cellWidth } from '@patternfly/react-table';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { truncateString } from '../../utils';\nimport useApi from '../../hooks/useApi';\n\nconst defaultFilters = [\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Version',\n    type: 'version',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Output',\n    type: 'image_type',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Ostree commit hash',\n    type: 'ostree_commit_hash',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Created',\n    type: 'created_at',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(35)],\n  },\n];\n\nconst createRows = (data, imageSetId, latestImageVersion) => {\n  return data?.map((image) => ({\n    rowInfo: {\n      id: image?.ID,\n      imageStatus: image?.Status,\n      isoURL: image?.ImageBuildIsoURL,\n      latestImageVersion,\n      currentImageVersion: image.Version,\n    },\n    noApiSortFilter: [\n      image?.Version,\n      imageTypeMapper[image?.ImageType],\n      image?.CreatedAt,\n      image?.Status,\n    ],\n    cells: [\n      {\n        title: (\n          <Link\n            to={`${paths['manage-images']}/${imageSetId}/versions/${image.ID}/details`}\n          >\n            {image?.Version}\n          </Link>\n        ),\n      },\n      {\n        title: imageTypeMapper[image?.ImageType],\n      },\n      {\n        title: image?.CommitCheckSum ? (\n          <Tooltip content={<div>{image.CommitCheckSum}</div>}>\n            <span>{truncateString(image.CommitCheckSum, 5, 5)}</span>\n          </Tooltip>\n        ) : (\n          <Text>Unavailable</Text>\n        ),\n      },\n      {\n        title: <DateFormat date={image?.CreatedAt} />,\n      },\n      {\n        title: <Status type={image?.Status.toLowerCase()} />,\n      },\n    ],\n  }));\n};\n\nconst ImageVersionsTab = ({ imageData, openUpdateWizard }) => {\n  const imageSetID = imageData?.data?.ImageSet?.ID;\n  const latestImageVersion = imageData?.data?.ImageSet?.Version;\n\n  const [response, fetchImageSetVersions] = useApi({\n    api: ({ query }) =>\n      getImageSetViewVersions({\n        imageSetID: imageSetID,\n        query,\n      }),\n    tableReload: true,\n  });\n\n  const { data, isLoading, hasError } = response;\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.rowInfo.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo.id);\n        },\n        isDisabled:\n          rowData?.rowInfo?.latestImageVersion !==\n          rowData?.rowInfo?.currentImageVersion,\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <Main className=\"add-100vh\">\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        filters={defaultFilters}\n        loadTableData={fetchImageSetVersions}\n        tableData={{\n          count: data?.count,\n          data: data?.data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columnNames}\n        rows={createRows(data?.data, imageSetID, latestImageVersion)}\n        actionResolver={actionResolver}\n        areActionsDisabled={areActionsDisabled}\n        defaultSort={{ index: 3, direction: 'desc' }}\n      />\n    </Main>\n  );\n};\nImageVersionsTab.propTypes = {\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  imageSetID: PropTypes.number,\n  createRows: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n};\n\nexport default ImageVersionsTab;\n","import React, { useState, useEffect } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { cellWidth } from '@patternfly/react-table';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Empty from '../../components/Empty';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\n\nconst defaultFilters = [{ label: 'Name', type: 'text' }];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Release',\n    type: 'release',\n    sort: false,\n    columnTransforms: [cellWidth(35)],\n  },\n  //{ title: 'Type', type: 'type', sort: false, columnTransforms: [cellWidth(35)] },\n];\n\nconst createRows = ({\n  distribution,\n  installedPackages,\n  addedPackages,\n  showAll,\n}) => {\n  const rowData =\n    showAll === 0\n      ? installedPackages.filter(\n          (pack) =>\n            addedPackages?.filter((image) => pack.name === image.Name).length >\n            0\n        )\n      : installedPackages;\n  return rowData.map((packageData) => ({\n    noApiSortFilter: [\n      packageData?.name,\n      packageData?.version,\n      packageData?.release,\n      //packageData?.type,\n    ],\n    cells: [\n      packageData?.name,\n      packageData?.version,\n      packageData?.release,\n      //packageData?.type,\n      {\n        title: (\n          <a\n            href={`https://access.redhat.com/downloads/content/rhel---${distribution}/x86_64/7416/${packageData?.name}/${packageData?.version}-${packageData?.release}/${packageData?.arch}/fd431d51/package`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Button\n              variant=\"link\"\n              isSmall\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n            >\n              More information\n            </Button>\n          </a>\n        ),\n      },\n    ],\n  }));\n};\n\nconst indexToTabs = {\n  0: 'additional',\n  1: 'all',\n};\n\nconst tabsToIndex = {\n  additional: 0,\n  all: 1,\n};\n\nconst ImagePackagesTab = ({ imageVersion }) => {\n  const location = useLocation();\n  const history = useHistory();\n  const splitUrl = location.pathname.split('/');\n  const defaultToggle = splitUrl.length === 7 ? tabsToIndex[splitUrl[6]] : 1;\n  // Distribution examples would be: rhel-86, rhel-90, and rhel-100\n  const distribution = imageVersion?.image?.Distribution?.split('-')[1].slice(\n    0,\n    -1\n  );\n\n  const [packageData, setPackageData] = useState({});\n  const [toggleTable, setToggleTable] = useState(defaultToggle);\n\n  useEffect(() => {\n    setPackageData(imageVersion);\n  }, [imageVersion]);\n\n  useEffect(() => {\n    splitUrl[5] !== indexToTabs[toggleTable] && setToggleTable(defaultToggle);\n  }, [splitUrl]);\n\n  const handleToggleTable = (toggleIndex) => {\n    const currentTab = splitUrl[5]?.toLowerCase();\n    setToggleTable(toggleIndex);\n    if (currentTab === 'packages') {\n      if (splitUrl.length === 7) {\n        splitUrl[6] = indexToTabs[toggleIndex];\n      } else {\n        splitUrl.push(indexToTabs[toggleIndex]);\n      }\n\n      history.push(splitUrl.join('/'));\n    }\n  };\n\n  return imageVersion?.image?.Commit?.Status === 'SUCCESS' ? (\n    <Main className=\"add-100vh\">\n      <GeneralTable\n        apiFilterSort={false}\n        filters={defaultFilters}\n        tableData={{\n          count:\n            toggleTable === 0\n              ? packageData?.additional_packages\n              : packageData?.packages,\n          isLoading: false,\n          hasError: false,\n        }}\n        columnNames={columnNames}\n        rows={\n          packageData?.image?.Commit?.InstalledPackages\n            ? createRows({\n                distribution: distribution,\n                installedPackages:\n                  packageData?.image?.Commit?.InstalledPackages,\n                addedPackages: packageData?.image?.Packages,\n                showAll: toggleTable,\n              })\n            : []\n        }\n        actionResolver={() => []}\n        areActionsDisabled={() => true}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        toggleButton={[\n          { title: 'Additional', key: 0 },\n          { title: 'All', key: 1 },\n        ]}\n        toggleAction={handleToggleTable}\n        toggleState={toggleTable}\n        emptyFilterState={{\n          icon: 'search',\n          title: 'No packages to display',\n        }}\n      />\n    </Main>\n  ) : (\n    <Main className=\"add-100vh\">\n      <Empty\n        bgColor=\"white\"\n        title=\"Package data currently unavailable\"\n        body=\"Packages will be displayed as soon as the image is finished being built.\"\n        primaryAction={null}\n        secondaryActions={[]}\n      />\n    </Main>\n  );\n};\n\nImagePackagesTab.propTypes = {\n  imageVersion: PropTypes.object,\n};\n\nexport default ImagePackagesTab;\n","import React, { useState, useEffect } from 'react';\nimport { Tabs, Tab, TabTitleText, Skeleton } from '@patternfly/react-core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\n\nimport ImageDetailTab from './ImageDetailTab';\nimport ImageVersionTab from './ImageVersionsTab';\nimport ImagePackagesTab from './ImagePackagesTab';\nimport PropTypes from 'prop-types';\nimport EmptyState from '../../components/Empty';\n\nimport { mapUrlToObj } from '../../utils';\n\n// conditional render for same index\nconst tabs = {\n  details: 0,\n  packages: 1,\n  versions: 1,\n};\n\nconst ImageDetailTabs = ({\n  imageData,\n  openUpdateWizard,\n  imageVersion,\n  isLoading,\n}) => {\n  const location = useLocation();\n  const history = useHistory();\n  const [activeTabKey, setActiveTabkey] = useState(tabs.details);\n  const activeTab = imageVersion ? 'imageTab' : 'imageSetTab';\n\n  const keys = [\n    'baseURL',\n    'imageSetVersion',\n    'imageSetTab',\n    'imageVersion',\n    'imageTab',\n    'packagesToggle',\n  ];\n  const imageUrlMapper = mapUrlToObj(location.pathname, keys);\n\n  const handleTabClick = (_event, tabIndex) => {\n    const selectedTab =\n      tabIndex === 0 ? 'details' : imageVersion ? 'packages' : 'versions';\n\n    imageUrlMapper[activeTab] = selectedTab;\n\n    history.push(imageUrlMapper.buildUrl());\n\n    setActiveTabkey(tabIndex);\n  };\n\n  useEffect(() => {\n    imageUrlMapper['imageTab']\n      ? setActiveTabkey(tabs[imageUrlMapper['imageTab']])\n      : setActiveTabkey(tabs[imageUrlMapper['imageSetTab']]);\n  }, [location.pathname]);\n\n  return (\n    <>\n      {!imageData.isLoading && imageData.hasError ? (\n        <EmptyState\n          icon=\"question\"\n          title=\"Image not found\"\n          body=\"Please check you have the correct link with the correct image Id.\"\n          primaryAction={{\n            text: 'Back to Manage Images',\n            href: paths['manage-images'],\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <div className=\"edge-c-device--detail add-100vh\">\n          <Tabs\n            className=\"pf-u-ml-md\"\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n          >\n            <Tab\n              eventKey={tabs.details}\n              title={<TabTitleText>Details</TabTitleText>}\n            >\n              <ImageDetailTab\n                imageData={imageData}\n                imageVersion={imageVersion}\n              />\n            </Tab>\n            {isLoading ? (\n              <Tab\n                title={\n                  <TabTitleText>\n                    <Skeleton width=\"75px\" />\n                  </TabTitleText>\n                }\n              ></Tab>\n            ) : imageVersion ? (\n              <Tab\n                eventKey={tabs.packages}\n                title={<TabTitleText>Packages</TabTitleText>}\n              >\n                <ImagePackagesTab imageVersion={imageVersion} />\n              </Tab>\n            ) : (\n              <Tab\n                eventKey={tabs.versions}\n                title={<TabTitleText>Versions</TabTitleText>}\n              >\n                <ImageVersionTab\n                  imageData={imageData}\n                  openUpdateWizard={openUpdateWizard}\n                />\n              </Tab>\n            )}\n          </Tabs>\n        </div>\n      )}\n    </>\n  );\n};\n\nImageDetailTabs.propTypes = {\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n  openUpdateWizard: PropTypes.func,\n  isLoading: PropTypes.bool,\n};\n\nexport default ImageDetailTabs;\n","import React, { Fragment, Suspense, useEffect, useState } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Stack, StackItem, Spinner, Bullseye } from '@patternfly/react-core';\nimport { useParams, useHistory } from 'react-router-dom';\nimport DetailsHead from './DetailsHeader';\nimport ImageDetailTabs from './ImageDetailTabs';\nimport UpdateImageWizard from '../ImageManager/UpdateImageWizard';\nimport useApi from '../../hooks/useApi';\nimport { getImageSetView } from '../../api/images';\n\nconst ImageDetail = () => {\n  const { imageId, imageVersionId } = useParams();\n  const history = useHistory();\n  const [updateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    updateId: null,\n  });\n  const [imageVersion, setImageVersion] = useState(null);\n\n  const [response, fetchImageSetDetails] = useApi({\n    api: getImageSetView,\n    id: imageVersionId ? `${imageId}/versions/${imageVersionId}` : `${imageId}`,\n    tableReload: true,\n  });\n\n  const { data, isLoading } = response;\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard((prevState) => ({\n      ...prevState,\n      isOpen: !prevState.isLoading,\n      updateId: id,\n    }));\n  };\n\n  useEffect(() => {\n    imageVersionId\n      ? setImageVersion(data?.ImageDetails)\n      : setImageVersion(null);\n  }, [response, imageVersionId]);\n\n  useEffect(() => {\n    fetchImageSetDetails();\n  }, [imageId, imageVersionId]);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Stack hasGutter>\n          <StackItem>\n            <DetailsHead\n              imageData={response}\n              imageVersion={imageVersion}\n              openUpdateWizard={openUpdateWizard}\n            />\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <ImageDetailTabs\n        imageData={response}\n        urlParam={imageId}\n        imageVersion={imageVersion}\n        openUpdateWizard={openUpdateWizard}\n        isLoading={isLoading}\n      />\n      {updateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateWizard((prevState) => ({ ...prevState, isOpen: false }));\n            }}\n            updateImageID={updateWizard.updateId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n"],"names":["CopyIconConfig","name","height","width","svgPath","yOffset","xOffset","CopyIcon","UpdateImage","navigateBack","updateImageID","reload","useState","user","setUser","dispatch","useDispatch","closeAction","temporaryReleasesFlag","useFeatureFlags","getRegistry","useContext","RegistryContext","data","useSelector","imageDetailReducer","shallowEqual","useEffect","registered","register","loadImageDetail","insights","chrome","auth","getUser","then","result","undefined","onClose","customComponentMapper","review","ReviewStep","onSubmit","values","setIsSaving","payload","Id","image","ID","Name","version","Version","architecture","credentials","Installer","SshKey","username","Username","createNewImage","resp","addNotification","variant","title","description","value","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","addImageToPoll","defaultArch","initialValues","imageID","isUpdate","Description","release","Distribution","release_options","getReleases","supportedReleases","temporaryReleases","imageType","Packages","map","pkg","ThirdPartyRepositories","repo","CustomPackages","test","schema","fields","component","componentTypes","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","updateDetails","imageOutput","registration","repositories","packages","customPackages","isSVG","diameter","propTypes","PropTypes","defaultProps","dropdownItems","imageVersion","isoURL","openUpdateWizard","imageData","LastImageDetails","actionsArray","push","DropdownItem","key","onClick","Text","href","rel","target","DetailsHead","isOpen","setIsOpen","setData","actionsLabel","dropdownId","isLoading","hasError","Breadcrumb","BreadcrumbItem","Link","to","paths","ImageSet","isActive","Skeleton","TextContent","Split","SplitItem","TextList","TextListItem","T","type","toLowerCase","UpdatedAt","DateFormat","date","isFilled","Dropdown","position","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","onToggle","newState","isDisabled","Tooltip","content","reference","document","getElementById","ImageBuildIsoURL","ImageDetailTab","createSkeleton","rows","Array","_","detailsMapper","Created","outputType","index","Release","distributionMapper","userInfoMapper","packageMapper","ImageSetID","additional_packages","packageDiffMapper","Added","update_added","Removed","update_removed","Updated","update_updated","Checksum","Commit","OSTreeCommit","buildTextList","labelsToValueMapper","Object","entries","label","Fragment","TextListItemVariants","ClipboardCopy","hoverTip","clickTip","replace","Grid","span","GridItem","TextVariants","TextListVariants","defaultFilters","options","option","columnNames","sort","columnTransforms","cellWidth","createRows","imageSetId","latestImageVersion","rowInfo","imageStatus","currentImageVersion","noApiSortFilter","imageTypeMapper","ImageType","CreatedAt","cells","CommitCheckSum","truncateString","ImageVersionsTab","imageSetID","useApi","api","query","getImageSetViewVersions","tableReload","response","fetchImageSetVersions","Main","GeneralTable","apiFilterSort","isUseApi","filters","loadTableData","tableData","count","actionResolver","rowData","_event","_rowId","areActionsDisabled","defaultSort","direction","urlParam","distribution","installedPackages","addedPackages","showAll","filter","pack","length","packageData","arch","Button","isSmall","icon","iconPosition","indexToTabs","tabsToIndex","additional","all","ImagePackagesTab","location","useLocation","history","useHistory","splitUrl","pathname","split","defaultToggle","slice","setPackageData","toggleTable","setToggleTable","InstalledPackages","toggleButton","toggleAction","toggleIndex","currentTab","join","toggleState","emptyFilterState","Empty","bgColor","body","primaryAction","secondaryActions","tabs","details","versions","ImageDetailTabs","activeTabKey","setActiveTabkey","activeTab","imageUrlMapper","mapUrlToObj","text","Tabs","activeKey","onSelect","tabIndex","selectedTab","buildUrl","Tab","eventKey","TabTitleText","useParams","imageId","imageVersionId","updateId","updateWizard","setUpdateWizard","setImageVersion","getImageSetView","fetchImageSetDetails","search","URLSearchParams","update_image","toString","prevState","ImageDetails","PageHeader","Stack","hasGutter","StackItem","Suspense","fallback","Bullseye","Spinner","UpdateImageWizard"],"sourceRoot":""}