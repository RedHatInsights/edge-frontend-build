{"version":3,"file":"js/250.1362991655e4cfb8e6d0.js","mappings":"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","sources":["webpack:///./src/Routes/Repositories/modals/AddModal.js","webpack:///./src/Routes/Repositories/modals/EditModal.js","webpack:///./src/Routes/Repositories/modals/RemoveModal.js","webpack:///./src/Routes/Repositories/TableHeader.js","webpack:///./src/Routes/Repositories/RepositoryTable.js","webpack:///./src/Routes/Repositories/RepositoryHeader.js","webpack:///./src/Routes/Repositories/Repositories.js"],"sourcesContent":["import React from 'react';\nimport Modal from '../../../components/Modal';\nimport { createCustomRepository } from '../../../api/index';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { nameValidator } from '../../../constants';\n\nconst AddModal = ({ isOpen, openModal, reloadData }) => {\n  const addSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'title',\n        label:\n          'Link to a custom repository to add packages to RHEL for Edge images.',\n      },\n      {\n        component: 'text-field',\n        name: 'name',\n        label: 'Name',\n        placeholder: 'Repository name',\n        helperText:\n          'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }, nameValidator],\n      },\n      {\n        component: 'textarea',\n        name: 'baseURL',\n        label: 'BaseURL',\n        placeholder: 'https://',\n        helperText: 'Enter the baseURL for the custom repository.',\n        isRequired: true,\n        validate: [\n          { type: validatorTypes.REQUIRED },\n          { type: validatorTypes.URL, message: 'Must be a valid url' },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title=\"Add Repository\"\n      isOpen={isOpen}\n      openModal={() => openModal({ type: 'add' })}\n      submitLabel=\"Add\"\n      schema={addSchema}\n      onSubmit={(values) => createCustomRepository(values)}\n      reloadData={reloadData}\n    />\n  );\n};\n\nAddModal.propTypes = {\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n};\n\nexport default AddModal;\n","import React from 'react';\nimport Modal from '../../../components/Modal';\nimport { HelperText, HelperTextItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { editCustomRepository } from '../../../api/index';\n\nconst EditModal = ({ openModal, isOpen, id, name, baseURL, reloadData }) => {\n  const editSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'title',\n        label: 'Update information about this custom repository.',\n      },\n      {\n        component: 'text-field',\n        name: 'name',\n        label: 'Name',\n        placeholder: 'Repository name',\n        helperText:\n          'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n      {\n        component: 'textarea',\n        name: 'baseURL',\n        label: 'BaseURL',\n        placeholder: 'https://',\n        helperText: (\n          <HelperText hasIcon>\n            <HelperTextItem className=\"pf-u-pb-md\" variant=\"warning\" hasIcon>\n              If you change the repo URL, you may not have access to the\n              packages that were used to build images that reference this\n              repository.\n            </HelperTextItem>\n          </HelperText>\n        ),\n\n        isRequired: true,\n        validate: [\n          { type: validatorTypes.REQUIRED },\n          { type: validatorTypes.URL, message: 'Must be a valid url' },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title=\"Edit Repository\"\n      isOpen={isOpen}\n      openModal={() => openModal({ type: 'edit' })}\n      submitLabel=\"Update\"\n      schema={editSchema}\n      initialValues={{ id, name, baseURL }}\n      onSubmit={(values) => editCustomRepository(values)}\n      reloadData={reloadData}\n    />\n  );\n};\n\nEditModal.propTypes = {\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  baseURL: PropTypes.string,\n  setData: PropTypes.func,\n};\nexport default EditModal;\n","import React from 'react';\nimport Modal from '../../../components/Modal';\nimport { TextContent, Text } from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport PropTypes from 'prop-types';\nimport { removeCustomRepository } from '../../../api/index';\n\nconst LabelWithText = ({ label, text }) => {\n  return (\n    <TextContent>\n      <Text component={'b'}>{label}</Text>\n      <Text>{text}</Text>\n    </TextContent>\n  );\n};\n\nLabelWithText.propTypes = {\n  label: PropTypes.string,\n  text: PropTypes.string,\n};\n\nconst RemoveModal = ({ openModal, id, isOpen, name, baseURL, reloadData }) => {\n  const addSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'description',\n        label:\n          'Removing a repository could affect your ability to update images.',\n      },\n      {\n        component: 'plain-text',\n        name: 'name',\n        label: <LabelWithText label=\"Name\" text={name} />,\n      },\n      {\n        component: 'plain-text',\n        name: 'baseURL',\n        label: <LabelWithText label=\"baseURL\" text={baseURL} />,\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title={\n        <>\n          <ExclamationTriangleIcon\n            color={warningColor.value}\n            className=\"pf-u-mr-md\"\n          />\n          Remove Repository\n        </>\n      }\n      isOpen={isOpen}\n      openModal={() => openModal({ type: 'remove' })}\n      submitLabel=\"Remove\"\n      schema={addSchema}\n      initialValues={{ id }}\n      variant=\"danger\"\n      onSubmit={({ id }) => removeCustomRepository(id)}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRemoveModal.propTypes = {\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  baseURL: PropTypes.string,\n  setData: PropTypes.func,\n};\nexport default RemoveModal;\n","import React from 'react';\nimport { TextContent, Text, TextVariants } from '@patternfly/react-core';\n//import { ExternalLinkAltIcon } from \"@patternfly/react-icons\";\n\nconst Header = () => {\n  return (\n    <TextContent style={{ padding: '15px', backgroundColor: 'white' }}>\n      <Text component={TextVariants.h1}>Custom repositories</Text>\n      <Text component={TextVariants.p}>\n        Add custom repositories to build RHEL for Edge images with additional\n        packages.{' '}\n        {/*<Text\n          style={{ display: 'inline' }}\n          component={TextVariants.small}\n          href=\"#\"\n        >\n          <Text component={TextVariants.a} href=\"#\">\n            Learn more\n            <ExternalLinkAltIcon size=\"sm\" className=\"pf-u-ml-sm\" />\n          </Text>\n        </Text>*/}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst filters = [{ label: 'Name', type: 'text' }];\n\nconst RepositoryTable = ({ data, openModal }) => {\n  const actionResolver = (rowData) => {\n    const { id, repoName, repoBaseURL } = rowData.rowInfo;\n    return [\n      {\n        title: 'Edit',\n        onClick: () =>\n          openModal({\n            type: 'edit',\n            id: id,\n            name: repoName,\n            baseURL: repoBaseURL,\n          }),\n      },\n      {\n        title: 'Remove',\n        onClick: () =>\n          openModal({\n            type: 'remove',\n            id: id,\n            name: repoName,\n            baseURL: repoBaseURL,\n          }),\n      },\n    ];\n  };\n\n  const buildRows = data.map(({ id, name, baseURL }) => {\n    return {\n      rowInfo: {\n        id: id,\n        repoName: name,\n        repoBaseURL: baseURL,\n      },\n      noApiSortFilter: [name, baseURL],\n      cells: [\n        {\n          title: (\n            <>\n              <Text className=\"pf-u-mb-xs\" component={TextVariants.p}>\n                {name}\n              </Text>\n              <Text\n                component={TextVariants.a}\n                href={baseURL}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {baseURL} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Text>\n            </>\n          ),\n        },\n      ],\n    };\n  });\n\n  return (\n    <GeneralTable\n      apiFilterSort={false}\n      filters={filters}\n      tableData={{\n        count: data.length,\n        data,\n        isLoading: false,\n        hasError: false,\n      }}\n      columnNames={[{ title: 'Name', type: 'name', sort: true }]}\n      rows={buildRows}\n      actionResolver={actionResolver}\n      areActionsDisabled={() => false}\n      defaultSort={{ index: 0, direction: 'desc' }}\n      toolbarButtons={[\n        {\n          title: 'Add repository',\n          click: () => openModal({ type: 'add' }),\n        },\n      ]}\n    />\n  );\n};\nRepositoryTable.propTypes = {\n  data: PropTypes.array,\n  openModal: PropTypes.func,\n};\n\nexport default RepositoryTable;\n","import React from 'react';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Popover } from '@patternfly/react-core';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\n//import { ExternalLinkAltIcon } from \"@patternfly/react-icons\";\n\nconst RepositoryHeader = () => {\n  return (\n    <PageHeader>\n      <>\n        <PageHeaderTitle title=\"Applications settings\" />\n        <p className=\"pf-u-mt-sm\">\n          Settings for Edge Management\n          <Popover\n            aria-label=\"Basic popover\"\n            headerContent={<div>About Edge Management</div>}\n            bodyContent={\n              <div>\n                Edge Management is a service that allows you to provision,\n                update and maintain edge systems.\n              </div>\n            }\n            //footerContent={\n            //  <Button variant=\"link\" style={{ 'padding-left': 0 }}>\n            //    <a href=\"#\">Documentation</a>\n            //    <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            //  </Button>\n            //}\n          >\n            <QuestionCircleIcon\n              style={{ cursor: 'pointer' }}\n              className=\"pf-u-ml-xs\"\n              data-testid=\"test-pop-over\"\n            />\n          </Popover>\n        </p>\n      </>\n    </PageHeader>\n  );\n};\n\nexport default RepositoryHeader;\n","import React, { useEffect, useState } from 'react';\nimport EmptyState from '../../components/Empty';\nimport AddModal from './modals/AddModal';\nimport EditModal from './modals/EditModal';\nimport RemoveModal from './modals/RemoveModal';\nimport TableHeader from './TableHeader';\nimport RepositoryTable from './RepositoryTable';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport RepositoryHeader from './RepositoryHeader';\nimport { getCustomRepositories } from '../../api/index';\nimport { Skeleton } from '@patternfly/react-core';\n\nconst Repository = () => {\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [modalDetails, setModalDetails] = useState({\n    isOpen: {\n      add: false,\n      edit: false,\n      remove: false,\n    },\n    id: null,\n    name: '',\n    baseURL: '',\n  });\n\n  const openModal = ({ type, id = null, name = '', baseURL = '' }) => {\n    setModalDetails((prevState) => ({\n      ...prevState,\n      id,\n      name,\n      baseURL,\n      isOpen: {\n        ...prevState.isOpen,\n        [type]: !prevState.isOpen[type],\n      },\n    }));\n  };\n\n  const reloadData = async () => {\n    const repos = await getCustomRepositories();\n    setData(\n      repos.data.map((repo) => ({\n        id: repo.ID,\n        name: repo.Name,\n        baseURL: repo.URL,\n        ...repo,\n      }))\n    );\n    setLoaded(true);\n  };\n\n  useEffect(() => reloadData(), []);\n\n  return (\n    <>\n      <RepositoryHeader />\n      <Main>\n        {loaded ? (\n          data.length > 0 ? (\n            <>\n              <TableHeader />\n              <RepositoryTable data={data} openModal={openModal} />\n            </>\n          ) : (\n            <EmptyState\n              icon=\"repository\"\n              title=\"Add a custom repository\"\n              body=\"Add custom repositories to build RHEL for Edge images with additional packages.\"\n              primaryAction={{\n                text: 'Add repository',\n                click: () => openModal({ type: 'add' }),\n              }}\n              secondaryActions={\n                [\n                  //{\n                  //  title: 'Learn more about custom repositories',\n                  //  type: 'link',\n                  //  link: '#',\n                  //},\n                ]\n              }\n            />\n          )\n        ) : (\n          <Skeleton />\n        )}\n        <AddModal\n          isOpen={modalDetails.isOpen.add}\n          openModal={openModal}\n          reloadData={reloadData}\n        />\n        <EditModal\n          isOpen={modalDetails.isOpen.edit}\n          id={modalDetails.id}\n          name={modalDetails.name}\n          baseURL={modalDetails.baseURL}\n          openModal={openModal}\n          reloadData={reloadData}\n        />\n        <RemoveModal\n          isOpen={modalDetails.isOpen.remove}\n          id={modalDetails.id}\n          name={modalDetails.name}\n          baseURL={modalDetails.baseURL}\n          openModal={openModal}\n          reloadData={reloadData}\n        />\n      </Main>\n    </>\n  );\n};\n\nexport default Repository;\n"],"names":["AddModal","isOpen","openModal","reloadData","addSchema","fields","component","name","label","placeholder","helperText","isRequired","validate","type","validatorTypes","nameValidator","message","Modal","title","submitLabel","schema","onSubmit","values","createCustomRepository","propTypes","PropTypes","EditModal","id","baseURL","editSchema","HelperText","hasIcon","HelperTextItem","className","variant","initialValues","editCustomRepository","setData","LabelWithText","text","TextContent","Text","RemoveModal","color","warningColor","removeCustomRepository","style","padding","backgroundColor","TextVariants","filters","RepositoryTable","data","buildRows","map","rowInfo","repoName","repoBaseURL","noApiSortFilter","cells","href","target","rel","GeneralTable","apiFilterSort","tableData","count","length","isLoading","hasError","columnNames","sort","rows","actionResolver","rowData","onClick","areActionsDisabled","defaultSort","index","direction","toolbarButtons","click","PageHeader","PageHeaderTitle","Popover","headerContent","bodyContent","cursor","useState","loaded","setLoaded","add","edit","remove","modalDetails","setModalDetails","prevState","getCustomRepositories","repos","repo","ID","Name","URL","useEffect","Main","TableHeader","Empty","icon","body","primaryAction","secondaryActions","Skeleton"],"sourceRoot":""}