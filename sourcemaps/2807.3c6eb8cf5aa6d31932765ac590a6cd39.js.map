{"version":3,"file":"js/2807.1654120268021.f1db956b1fcd5469f058.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/api/devices/index.js","webpack:///./src/api/images/index.js","webpack:///./src/hooks/useApi.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/edgeImageSets.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/imageSetDetail.js","webpack:///./src/store/edgeImagePackages.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/deviceTable.js"],"sourcesContent":["import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from '../../constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n  }\n  return (\n    <Split style={{ color: color }}>\n      <SplitItem className=\"pf-u-mr-sm\">{icon(color)}</SplitItem>\n      <SplitItem>{text}</SplitItem>\n    </Split>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/devices/${id}`);\n  } catch (err) {\n    // temp error solution\n    console.log('');\n  }\n};\n\nexport const updateDeviceLatestImage = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","import { EDGE_API, IMAGE_BUILDER_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const validateImage = async (ids) => {\n  return await instance.post(`${EDGE_API}/updates/validate`, ids);\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_SETS } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImageSetsPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImageSetsFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImageSetsRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_SETS}_PENDING`]: loadEdgeImageSetsPending,\n    [`${LOAD_EDGE_IMAGE_SETS}_FULFILLED`]: loadEdgeImageSetsFulfilled,\n    [`${LOAD_EDGE_IMAGE_SETS}_REJECTED`]: loadEdgeImageSetsRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_SET_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageSetDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageSetDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageSetDetailRejected = (state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_SET_DETAIL}_PENDING`]: loadImageSetDetailPending,\n    [`${LOAD_IMAGE_SET_DETAIL}_FULFILLED`]: loadImageSetDetailFulfilled,\n    [`${LOAD_IMAGE_SET_DETAIL}_REJECTED`]: loadImageSetDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_PACKAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagePackagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagePackagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagePackagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_PENDING`]: loadEdgeImagePackagesPending,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_FULFILLED`]: loadEdgeImagePackagesFulfilled,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_REJECTED`]: loadEdgeImagePackagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_TABLE } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceTablePending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceTableFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceTableRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_TABLE}_PENDING`]: loadDeviceTablePending,\n    [`${LOAD_DEVICE_TABLE}_FULFILLED`]: loadDeviceTableFulfilled,\n    [`${LOAD_DEVICE_TABLE}_REJECTED`]: loadDeviceTableRejected,\n  },\n  initialState\n);\n"],"names":["StatusLabel","status","icon","statusIcons","color","statusColors","text","composeStatus","imageStatusMapper","charAt","toUpperCase","slice","toLowerCase","style","className","propTypes","PropTypes","getInventory","query","q","getTableParams","instance","EDGE_API","getDeviceHasUpdate","id","console","log","updateDeviceLatestImage","payload","checkImageName","name","validateImage","ids","createImage","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","length","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","Name","URL","endpoint","getImageSet","limit","offset","sort_by","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","search","params","URLSearchParams","IMAGE_BUILDER_API","toString","getImageById","api","statusMessages","tableReload","dispatch","useDispatch","useState","data","setData","isLoading","setIsLoading","hasError","setHasError","hasSuccess","onSuccess","title","onError","fetchData","addNotification","variant","useEffect","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","POLLING_IMAGES","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","keyBy","k","loadImageDetail","imageId","type","createNewImage","callback","then","loadEdgeImageSets","addImageToPoll","loadImageSetDetail","urlParam","applyReducerHash","state","groups","results","meta","threshold","devicesInfo","canariesInfo","statusMapper","SecureIcon","isSecure","props","Icon","LockIcon","LockOpenIcon","defaultProps","uuid","devices","error","_state"],"sourceRoot":""}