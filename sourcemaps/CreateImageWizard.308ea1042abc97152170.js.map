{"version":3,"sources":["webpack:///./src/Routes/ImageManager/CreateImageWizard.js"],"names":["CreateImage","navigateBack","useState","user","setUser","dispatch","useDispatch","closeAction","type","CREATE_NEW_IMAGE_RESET","useEffect","insights","chrome","auth","getUser","userData","onClose","customComponentMapper","review","ReviewStep","onSubmit","values","payload","architecture","createNewImage","resp","addNotification","variant","title","description","value","Name","meta","polling","id","ID","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImages","defaultArch","initialValues","version","schema","fields","component","componentTypes","name","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","imageSetDetails","imageOutput","registration","packages","propTypes","PropTypes","defaultProps"],"mappings":"q9BAmBA,IAAMA,EAAc,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,aAAmB,GAChBC,gBADgB,WACjCC,EADiC,KAC3BC,EAD2B,KAElCC,GAAWC,mBACXC,EAAc,WAClBN,IACAI,EAAS,CAAEG,KAAMC,OASnB,OAPAC,gBAAU,WACR,cAAC,oHACyBC,gBADzB,iBACyB,EAAUC,cADnC,iBACyB,EAAkBC,YAD3C,aACyB,EAAwBC,UADjD,gDAC+D,GAD/D,OACOC,EADP,KAECX,GAAQ,kBAAMW,KAFf,0CAAD,KAIC,IAEIZ,EACL,kBAAC,IAAD,CACEa,QAAST,EACTU,sBAAuB,CACrBC,OAAQC,KAEVC,SAAU,SAACC,GACT,IAAMC,EAAU,EAAH,KACRD,GADQ,IAEXE,aAAc,YAEhBC,QAAenB,EAAUiB,GAAS,SAACG,GACjCpB,EAAS,EAAD,MACHqB,QAAgB,CACjBC,QAAS,OACTC,MAAO,gBACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMC,KAAhB,qCAJP,IAMNC,KAAM,CACJC,QAAS,CACPC,GAAI,eAAF,OAAiBT,EAAKK,MAAMK,GAA5B,iBACFC,QAAS,kBAAMC,QAAmBZ,EAAKK,MAAMK,KAC7CG,UAAW,SAACb,GACV,OAAQA,EAAKc,QACX,IAAK,WACH,MAAO,EAAC,EAAM,IAChB,IAAK,QACH,MAAO,EAAC,EAAO,WACjB,QACE,MAAO,EAAC,EAAO,aAGrBC,QAAS,CACPC,QAAS,CACP,SAACpC,GAAD,OACEA,GACEqB,QAAgB,CACdC,QAAS,SACTC,MAAO,qBACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMC,KAAhB,iDAInBW,QAAS,CACP,SAACrC,GAAD,OACEA,GACEqB,QAAgB,CACdC,QAAS,UACTC,MAAO,iBACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMC,KAAhB,iCAGjB,SAAC1B,GAAD,OAAcsC,QAAetC,WAMvCE,KACAoC,QAAetC,OAGnBuC,YAAY,SACZC,cAAe,CAAEC,QAAS,GAC1BC,OAAQ,CACNC,OAAQ,CACN,CACEC,UAAWC,WACXC,KAAM,uBACNC,UAAW,gBACXC,WAAW,EACXC,SAAS,EACTC,aAAc,CACZC,OAAQ,gBAEVC,YAAY,EACZ7B,MAAO,eACP8B,WAAY,CAAC,qBAAsB,UAAW,aAG9CV,OAAQ,CACNW,KACAC,KACAC,KACAC,KACA5C,WAOV,kBAAC,IAAD,OAIJlB,EAAY+D,UAAY,CACtB9D,aAAc+D,UAEhBhE,EAAYiE,aAAe,CACzBhE,aAAc,cAGhB","file":"js/CreateImageWizard.5121a89da4d013a9c693.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  registration,\n  review,\n  packages,\n  imageSetDetails,\n  imageOutput,\n} from './steps';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage, loadEdgeImages } from '../../store/actions';\nimport { CREATE_NEW_IMAGE_RESET } from '../../store/action-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getEdgeImageStatus } from '../../api';\n\nconst CreateImage = ({ navigateBack }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    dispatch({ type: CREATE_NEW_IMAGE_RESET });\n  };\n  useEffect(() => {\n    (async () => {\n      const userData = (await insights?.chrome?.auth?.getUser()) || {};\n      setUser(() => userData);\n    })();\n  }, []);\n\n  return user ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={(values) => {\n        const payload = {\n          ...values,\n          architecture: 'x86_64',\n        };\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Created image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                    (dispatch) => loadEdgeImages(dispatch),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n          loadEdgeImages(dispatch);\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{ version: 0 }}\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Create image',\n            },\n            showTitles: true,\n            title: 'Create image',\n            crossroads: ['target-environment', 'release', 'imageType'],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              imageSetDetails,\n              imageOutput,\n              registration,\n              packages,\n              review,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImage.propTypes = {\n  navigateBack: PropTypes.func,\n};\nCreateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default CreateImage;\n"],"sourceRoot":""}