{"version":3,"file":"js/UpdateImageWizard.7c185861eaa8645c3e6b.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManager/UpdateImageWizard.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  review,\n  packages,\n  updateDetails,\n  registration,\n  imageOutput,\n} from './steps';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport {\n  createNewImage,\n  addImageToPoll,\n  loadEdgeImages,\n} from '../../store/actions';\nimport { CREATE_NEW_IMAGE_RESET } from '../../store/action-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst UpdateImage = ({ navigateBack, updateImageID }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    dispatch({ type: CREATE_NEW_IMAGE_RESET });\n  };\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    loadImageDetail(dispatch, updateImageID);\n    return () => registered();\n  }, [dispatch]);\n\n  useEffect(() => {\n    (async () => {\n      const userData = (await insights?.chrome?.auth?.getUser()) || {};\n      setUser(() => userData);\n    })();\n  }, []);\n\n  return user ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          Id: data?.ID,\n          name: data?.Name,\n          version: data?.Version + 1,\n          architecture: 'x86_64',\n          credentials: values.credentials\n            ? values.credentials\n            : data?.Installer.SshKey,\n          username: values.username\n            ? values.username\n            : data?.Installer.Username,\n        };\n\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Update image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                    (dispatch) => loadEdgeImages(dispatch),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n          loadEdgeImages(dispatch);\n          dispatch(\n            addImageToPoll({ name: data.value.Name, id: data.value.ID })\n          );\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        name: data?.Name,\n        isUpdate: true,\n        description: data?.Description,\n        credentials: data?.Installer.SshKey,\n        username: data?.Installer.Username,\n        version: data?.Version,\n        imageType: ['rhel-edge-commit'],\n        'selected-packages': data?.Packages.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n      }}\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Create image',\n            },\n            showTitles: true,\n            title: `Update image: ${data?.Name}`,\n            crossroads: ['target-environment', 'release', 'imageType'],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              updateDetails,\n              imageOutput,\n              registration,\n              packages,\n              review,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nUpdateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  updateImageID: PropTypes.number,\n};\nUpdateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default UpdateImage;\n"],"names":["UpdateImage","navigateBack","updateImageID","useState","user","setUser","dispatch","useDispatch","closeAction","type","CREATE_NEW_IMAGE_RESET","getRegistry","useContext","RegistryContext","data","useSelector","imageDetailReducer","shallowEqual","useEffect","registered","register","loadImageDetail","insights","chrome","auth","getUser","userData","onClose","customComponentMapper","review","ReviewStep","onSubmit","values","setIsSaving","payload","Id","ID","name","Name","version","Version","architecture","credentials","Installer","SshKey","username","Username","createNewImage","resp","addNotification","variant","title","description","value","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImages","addImageToPoll","defaultArch","initialValues","isUpdate","Description","imageType","Packages","map","pkg","schema","fields","component","componentTypes","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","updateDetails","imageOutput","registration","packages","propTypes","PropTypes","defaultProps"],"sourceRoot":""}