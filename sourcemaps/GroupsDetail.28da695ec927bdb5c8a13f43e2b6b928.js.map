{"version":3,"file":"js/GroupsDetail.eb18b23daf1c090612b5.js","mappings":"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","sources":["webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Devices/AddSystemsToGroupModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Icon, Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <Icon status=\"warning\">\n    <ExclamationTriangleIcon />\n  </Icon>\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Button, Modal } from '@patternfly/react-core';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { getInventory } from '../../api/devices';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst AddSystemsToGroupModal = ({\n  groupId,\n  closeModal,\n  isOpen,\n  reloadData,\n  groupName,\n  locationProp,\n  navigateProp,\n}) => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [deviceIds, setDeviceIds] = useState([]);\n  const dispatch = useDispatch();\n\n  const handleAddDevicesToGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `An error occurred making the request`,\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () =>\n        addDevicesToGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(async () => await reloadData(), 500);\n    closeModal();\n  };\n\n  return (\n    <Modal\n      id=\"add-systems-modal\"\n      title=\"Add systems\"\n      position=\"top\"\n      isOpen={isOpen}\n      onClose={closeModal}\n      variant=\"large\"\n      actions={[\n        <Button\n          isDisabled={deviceIds.length === 0}\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={handleAddDevicesToGroup}\n        >\n          Add systems\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <DeviceTable\n        selectedItems={setDeviceIds}\n        skeletonRowQuantity={15}\n        hasCheckbox={true}\n        isLoading={isLoading}\n        hasError={hasError}\n        count={data?.count}\n        data={data?.data?.devices || []}\n        fetchDevices={fetchDevices}\n        enforceEdgeGroups={data?.data?.enforce_edge_groups}\n        locationProp={locationProp}\n        navigateProp={navigateProp}\n      />\n    </Modal>\n  );\n};\nAddSystemsToGroupModal.propTypes = {\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n  groupName: PropTypes.string,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n};\n\nexport default AddSystemsToGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Flex,\n  FlexItem,\n  Skeleton,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n} from '@patternfly/react-core/deprecated';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Empty from '../../components/Empty';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/groups';\nimport AddSystemsToGroupModal from '../Devices/AddSystemsToGroupModal';\nimport {\n  canUpdateSelectedDevices,\n  createLink,\n  emptyStateNoFilters,\n} from '../../utils';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\nimport RenameGroupModal from '../Groups/RenameGroupModal';\nimport PropTypes from 'prop-types';\nimport { useFeatureFlags } from '../../utils';\nimport {\n  FEATURE_PARITY_INVENTORY_GROUPS,\n  FEATURE_INVENTORY_WORKSPACES_RENAME,\n} from '../../constants/features';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst GroupsDetail = ({ locationProp, navigateProp, paramsProp }) => {\n  const useInventoryGroups = useFeatureFlags(FEATURE_PARITY_INVENTORY_GROUPS);\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const params = paramsProp ? paramsProp() : useParams();\n  const groupId = params?.id ? params.id : params.groupId;\n  const { search, pathname } = locationProp ? locationProp() : useLocation();\n  const currentApplicationPath =\n    window.location.pathname.indexOf('edge') > 0 ? 'edge' : paths.inventory;\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchDevices] = useApi({\n    api: getGroupById,\n    id: groupId,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove system' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} systems have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove systems' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const actionsLabel = 'Actions for group details view';\n  const dropdownId = 'group-details-dropdown';\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              {createLink({\n                pathname:\n                  currentApplicationPath === 'edge'\n                    ? `edge${paths.fleetManagement}`\n                    : `insights/inventory/groups`,\n                linkText: 'Groups',\n              })}\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb>\n            <BreadcrumbItem isActive>\n              <Skeleton width=\"100px\" />\n            </BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id={dropdownId}\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(_event, newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                  aria-label={actionsLabel}\n                >\n                  <Tooltip\n                    content={actionsLabel}\n                    triggerRef={() => document.getElementById(dropdownId)}\n                  />\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"rename-device-group\"\n                  onClick={() => handleRenameModal(groupId, groupName)}\n                >\n                  Rename group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.DevicesView?.devices?.map((device) => ({\n                      imageSetId: device?.ImageSetID,\n                    })),\n                    imageData: data?.DevicesView?.devices?.some(\n                      (device) => device.ImageID\n                    ),\n                  })}\n                  onClick={() => {\n                    setIsDropdownOpen(false);\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.DevicesView?.devices?.map((device) => ({\n                        id: device?.DeviceUUID,\n                        display_name:\n                          device?.DeviceName === ''\n                            ? 'localhost'\n                            : device?.DeviceName,\n                      })),\n                      imageSetId: data?.DevicesView?.devices.find(\n                        (device) => device.ImageSetID\n                      )?.ImageSetID,\n                    }));\n                  }}\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <section className=\"edge-devices pf-l-page__main-section pf-c-page__main-section\">\n        {!emptyStateNoFilters(\n          isLoading,\n          data?.DeviceGroup?.Devices.length,\n          search\n        ) ? (\n          <DeviceTable\n            data={data?.DevicesView?.devices || []}\n            count={data?.DevicesView?.total}\n            isLoading={isLoading}\n            locationProp={locationProp}\n            navigateProp={navigateProp}\n            paramsProp={useParams}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: `Remove from ${\n                  useInventoryGroups && useWorkspacesRename\n                    ? 'workspace'\n                    : 'group'\n                }`,\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageSetId: deviceIds.find((device) => device?.imageSetId)\n                      .imageSetId,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchDevices={fetchDevices}\n            isAddSystemsView={true}\n            enforceEdgeGroups={data?.DevicesView?.enforce_edge_groups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Add systems to the group\"\n              body=\"Create groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </section>\n      {isAddModalOpen && (\n        <AddSystemsToGroupModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchDevices}\n          groupName={data?.DeviceGroup?.Name}\n          locationProp={locationProp}\n          navigateProp={navigateProp}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          closeModal={() => setRemoveModal(false)}\n          title={`Remove from ${\n            useInventoryGroups && useWorkspacesRename ? 'workspace' : 'group'\n          }`}\n          submitLabel={'Remove'}\n          variant=\"danger\"\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchDevices}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths.fleetManagement)}\n          modalState={modalState}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={() => fetchDevices()}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nGroupsDetail.propTypes = {\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  paramsProp: PropTypes.func,\n};\n\nexport default GroupsDetail;\n","import { EDGE_API, INVENTORY_API_BASE, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const createInventoryGroup = (payload) => {\n  return instance.post(`${INVENTORY_API_BASE}/groups`, { name: payload.name });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getInventoryGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${INVENTORY_API_BASE}/groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const addDevicesToInventoryGroup = (groupId, devices) => {\n  const devicesIDS = [];\n  devices.forEach((device) => devicesIDS.push(device.UUID));\n\n  return instance.post(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts`,\n    devicesIDS\n  );\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDevicesFromInventoryGroup = (groupId, devices) => {\n  return instance.delete(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts/` + devices.join(',')\n  );\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n\nexport const getEnforceEdgeGroups = () => {\n  return instance.get(`${EDGE_API}/device-groups/enforce-edge-groups`);\n};\n\nexport const validateInventoryGroupName = (name) => {\n  return instance.get(\n    `${INVENTORY_API_BASE}/groups?name=${name}&order_by=name&order_how=ASC`\n  );\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n"],"names":["description","name","React","Text","schema","fields","component","componentTypes","PLAIN_TEXT","label","CHECKBOX","validate","type","validatorTypes","REQUIRED","WarningIcon","Icon","status","ExclamationTriangleIcon","DeleteGroupModal","_ref","isModalOpen","setIsModalOpen","reloadData","modalState","id","dispatch","useDispatch","Modal","isOpen","closeModal","title","titleIconVariant","variant","submitLabel","onSubmit","statusMessages","onSuccess","concat","onError","apiWithToast","deleteGroupById","propTypes","PropTypes","asyncGroupNameValidation","_asyncToGenerator","_regeneratorRuntime","_callee","value","_context","prev","next","validateGroupName","sent","data","isValid","abrupt","stop","_x","apply","arguments","createGroupSchema","TEXT_FIELD","helperText","isRequired","MAX_LENGTH","threshold","nameValidator","RenameGroupModal","_ref2","initialValues","values","updateGroupById","AddSystemsToGroupModal","_data$data","_data$data2","groupId","groupName","locationProp","navigateProp","_useApi","useApi","api","getInventory","tableReload","_useApi2","_slicedToArray","response","fetchDevices","isLoading","hasError","_useState","useState","_useState2","deviceIds","setDeviceIds","position","onClose","actions","Button","isDisabled","length","key","onClick","addDevicesToGroup","parseInt","map","device","ID","deviceID","setTimeout","DeviceTable","selectedItems","skeletonRowQuantity","hasCheckbox","count","devices","enforceEdgeGroups","enforce_edge_groups","UpdateDeviceModal","GroupsDetail","_data$DeviceGroup","_data$DevicesView","_data$DevicesView2","_data$DeviceGroup2","_data$DevicesView5","_data$DevicesView6","_deviceIds$","_data$DevicesView7","_data$DeviceGroup3","paramsProp","useInventoryGroups","useFeatureFlags","FEATURE_PARITY_INVENTORY_GROUPS","useWorkspacesRename","FEATURE_INVENTORY_WORKSPACES_RENAME","history","useHistory","params","useParams","useLocation","search","pathname","currentApplicationPath","window","location","indexOf","paths","inventory","isDropdownOpen","setIsDropdownOpen","_useState3","_useState4","isAddModalOpen","setIsAddModalOpen","_useState5","deviceId","_useState6","removeModal","setRemoveModal","_useState7","deviceData","imageData","_useState8","updateModal","setUpdateModal","getGroupById","DeviceGroup","Name","_useState9","_useState10","getDeviceIds","_useState11","_useState12","hasModalSubmitted","setHasModalSubmitted","_useState13","_useState14","setModalState","_useState15","_useState16","isDeleteModalOpen","setIsDeleteModalOpen","_useState17","_useState18","isRenameModalOpen","setIsRenameModalOpen","handleSingleDeviceRemoval","removeDeviceFromGroupById","actionsLabel","dropdownId","PageHeader","className","Breadcrumb","BreadcrumbItem","createLink","fleetManagement","linkText","isActive","Skeleton","width","Flex","justifyContent","default","FlexItem","PageHeaderTitle","Dropdown","DropdownPosition","right","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","onToggle","_event","newState","Tooltip","content","triggerRef","document","getElementById","dropdownItems","DropdownItem","canUpdateSelectedDevices","DevicesView","imageSetId","ImageSetID","some","ImageID","prevState","_data$DevicesView3","_data$DevicesView4","_objectSpread","DeviceUUID","display_name","DeviceName","find","emptyStateNoFilters","Devices","Empty","icon","body","primaryAction","text","click","secondaryActions","link","total","kebabItems","updateImageData","_toConsumableArray","isAddSystemsView","removeDevicesFromGroup","Suspense","fallback","Bullseye","Spinner","navigateBack","push","refreshTable","createGroup","payload","instance","post","EDGE_API","Type","createInventoryGroup","INVENTORY_API_BASE","getGroups","query","q","getTableParams","get","getInventoryGroups","_ref3","put","addDevicesToInventoryGroup","devicesIDS","forEach","UUID","removeDevicesFromInventoryGroup","join","getEnforceEdgeGroups","validateInventoryGroupName","RepoModal","size","additionalMappers","validatorMapper","FormRenderer","FormTemplate","props","_FormTemplate","_extends","disableSubmit","buttonsProps","submit","componentMapper","_callee2","_context2","onCancel","_statusMessages","_ref$id","_ref$tableReload","setData","setIsLoading","setHasError","apiFunc","setAPIFunc","hasSuccess","fetchData","_data","_args","undefined","addNotification","t0","finish","useEffect"],"sourceRoot":""}