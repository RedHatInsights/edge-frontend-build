{"version":3,"file":"js/UpdateDeviceModal.eb18b23daf1c090612b5.js","mappings":"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","sources":["webpack:///./src/components/BuildModalReview.js","webpack:///./src/Routes/Devices/UpdateDeviceModal.js","webpack:///./src/api/images/index.js","webpack:///./src/components/Modal.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextListItemVariants,\n  TextListVariants,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BuildModalReview = ({ reviewObject, key }) => {\n  return (\n    <TextContent>\n      <Title headingLevel=\"h3\">\n        <Text component={'b'}>{reviewObject.title}</Text>\n      </Title>\n      <TextList component={TextListVariants.dl}>\n        {reviewObject.rows.map((row) => (\n          <Fragment key={row.title + key}>\n            <TextListItem component={TextListItemVariants.dt}>\n              {row.title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {row.value}\n            </TextListItem>\n          </Fragment>\n        ))}\n      </TextList>\n    </TextContent>\n  );\n};\n\nBuildModalReview.propTypes = {\n  reviewObject: PropTypes.object,\n  key: PropTypes.string,\n};\n\nexport default BuildModalReview;\n","import React, { useEffect, useState } from 'react';\nimport {\n  TextContent,\n  Text,\n  Bullseye,\n  Backdrop,\n  Spinner,\n  Alert,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { getImageById, getImageSet } from '../../api/images';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Modal from '../../components/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport BuildModalReview from '../../components/BuildModalReview';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\nimport apiWithToast from '../../utils/apiWithToast';\n\nconst getImageData = (imageId) =>\n  getImageById({ id: imageId }).then((imageSetId) =>\n    getImageSet({\n      id: imageSetId?.image?.ImageSetID,\n      q: {\n        limit: 1,\n        sort_by: '-created_at',\n      },\n    })\n  );\n\nconst UpdateDeviceModal = ({\n  inventoryGroupUpdateDevicesInfo,\n  updateModal,\n  setUpdateModal,\n  refreshTable,\n  notificationProp,\n}) => {\n  if (\n    inventoryGroupUpdateDevicesInfo &&\n    !inventoryGroupUpdateDevicesInfo.update_valid\n  ) {\n    setUpdateModal((prevState) => ({ ...prevState, isOpen: false }));\n    return;\n  }\n\n  const [imageData, setImageData] = useState(null);\n  const dispatch = useDispatch();\n\n  const deviceId = inventoryGroupUpdateDevicesInfo\n    ? inventoryGroupUpdateDevicesInfo.update_devices_uuids\n    : updateModal.deviceData.map((device) => device.id);\n  const isMultiple = deviceId.length > 1;\n\n  let deviceName;\n  if (inventoryGroupUpdateDevicesInfo) {\n    deviceName = inventoryGroupUpdateDevicesInfo.update_devices_uuids;\n  } else {\n    deviceName = isMultiple\n      ? updateModal.deviceData.map((device) => device.display_name)\n      : updateModal?.deviceData[0]?.display_name;\n  }\n\n  const imageSetID = inventoryGroupUpdateDevicesInfo\n    ? inventoryGroupUpdateDevicesInfo.image_set_id\n    : updateModal?.imageSetId;\n  useEffect(() => {\n    imageSetID\n      ? getImageSet({\n          id: imageSetID,\n          q: {\n            limit: 1,\n            sort_by: '-created_at',\n            status: 'SUCCESS',\n          },\n        }).then((data) => setImageData(data.Data.images[0]))\n      : getImageData(updateModal.imageId).then((data) =>\n          setImageData(data.Data.images[0])\n        );\n  }, []);\n  const statusMessages = {\n    onInfo: {\n      title: 'Updating system',\n      description: isMultiple\n        ? ` ${deviceName.length} systems were added to the queue.`\n        : ` ${deviceName ? deviceName : 'one system'}  was added to the queue.`,\n    },\n    onError: {\n      title: 'Error',\n      description: `Failed to update the selected system(s)`,\n    },\n  };\n\n  const handleUpdateModal = async () => {\n    try {\n      await apiWithToast(\n        dispatch,\n        () =>\n          updateSystem({\n            DevicesUUID: deviceId,\n          }),\n        statusMessages,\n        notificationProp\n      );\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a system was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  const WarningText = () => (\n    <TextContent className=\"pf-u-pt-md\">\n      <Text\n        style={{ color: 'var(--pf-global--warning-color--200' }}\n        component=\"small\"\n      >\n        <ExclamationTriangleIcon\n          style={{ color: 'var(--pf-global--warning-color--100' }}\n        />{' '}\n        After the update is installed, the system will apply the changes.\n      </Text>\n    </TextContent>\n  );\n\n  const Description = () => (\n    <TextContent>\n      <Text>\n        Update{' '}\n        <span className=\"pf-u-font-weight-bold pf-u-font-size-md\">\n          {isMultiple\n            ? `${deviceName.length} systems`\n            : inventoryGroupUpdateDevicesInfo || !deviceName\n            ? 'one system'\n            : deviceName}\n        </span>{' '}\n        to latest version of the image linked to it.\n      </Text>\n      {updateModal?.deviceData?.some(\n        (device) =>\n          device.deviceStatus !== 'updateAvailable' &&\n          device.deviceStatus !== 'error'\n      ) && (\n        <Alert\n          variant=\"info\"\n          isInline\n          title=\"Some systems will not be updated. This action will update only systems with an update available.\"\n          style={{ '--pf-c-content--h4--MarginTop': 0 }}\n        />\n      )}\n    </TextContent>\n  );\n\n  const updateToDetails = {\n    title: `Update to version ${imageData?.image.Version}`,\n    rows: [\n      { title: 'Image Name', value: imageData?.image.Name },\n      { title: 'Version', value: imageData?.image.Version },\n      {\n        title: 'Created',\n        value: <DateFormat date={imageData?.image.CreatedAt} />,\n      },\n      {\n        title: 'Release',\n        value: distributionMapper[imageData?.image.Distribution],\n      },\n    ],\n  };\n\n  const packageDetails = {\n    title: `Changes from version ${imageData?.image.Version - 1}`,\n    rows: [\n      { title: 'Added', value: imageData?.update_added || 0 },\n      { title: 'Removed', value: imageData?.update_removed || 0 },\n      { title: 'Updated', value: imageData?.update_updated || 0 },\n    ],\n  };\n\n  const updateSchema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: Description(),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({\n          reviewObject: updateToDetails,\n          key: 'update-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'package-details',\n        label: BuildModalReview({\n          reviewObject: packageDetails,\n          key: 'package-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-text',\n        label: WarningText(),\n      },\n    ],\n  };\n\n  return (\n    <>\n      {imageData ? (\n        <Modal\n          size=\"medium\"\n          title={`Update system${\n            isMultiple ? 's' : ''\n          } to latest image version`}\n          isOpen={updateModal.isOpen}\n          closeModal={() =>\n            setUpdateModal((prevState) => ({ ...prevState, isOpen: false }))\n          }\n          submitLabel=\"Update system\"\n          schema={updateSchema}\n          onSubmit={handleUpdateModal}\n          reloadData={refreshTable}\n          notificationProp={notificationProp}\n        />\n      ) : (\n        <Backdrop>\n          <Bullseye>\n            <Spinner diameter=\"100px\" />\n          </Bullseye>\n        </Backdrop>\n      )}\n    </>\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  inventoryGroupUpdateDevicesInfo: PropTypes.shape({\n    group_uuid: PropTypes.string,\n    update_valid: PropTypes.bool,\n    image_set_id: PropTypes.number,\n    update_devices_uuids: PropTypes.array,\n  }),\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.array.isRequired,\n    imageData: PropTypes.object,\n    imageId: PropTypes.number,\n    imageSetId: PropTypes.number,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n  notificationProp: PropTypes.object,\n};\n\nexport default UpdateDeviceModal;\n","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  RHSM_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchActivationKeys = ({ limit = 10, offset = 0 } = {}) => {\n  return instance.get(\n    `${RHSM_API}/activation_keys?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n  activationKey,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n    activationKey: activationKey,\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n"],"names":["BuildModalReview","_ref","reviewObject","key","React","TextContent","Title","headingLevel","Text","component","title","TextList","TextListVariants","dl","rows","map","row","Fragment","TextListItem","TextListItemVariants","dt","dd","value","propTypes","PropTypes","UpdateDeviceModal","inventoryGroupUpdateDevicesInfo","updateModal","setUpdateModal","refreshTable","notificationProp","update_valid","deviceName","_updateModal$deviceDa","_useState","useState","_useState2","_slicedToArray","imageData","setImageData","dispatch","useDispatch","deviceId","update_devices_uuids","deviceData","device","id","isMultiple","length","display_name","imageSetID","image_set_id","imageSetId","useEffect","imageId","getImageSet","q","limit","sort_by","status","then","data","Data","images","getImageById","_imageSetId$image","image","ImageSetID","_updateModal$deviceDa2","statusMessages","onInfo","description","concat","onError","handleUpdateModal","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","apiWithToast","updateSystem","DevicesUUID","t0","_objectSpread","addNotification","variant","statusText","handleClose","stop","apply","arguments","prevState","isOpen","updateToDetails","Version","Name","DateFormat","date","CreatedAt","distributionMapper","Distribution","packageDetails","update_added","update_removed","update_updated","updateSchema","fields","componentTypes","PLAIN_TEXT","name","label","className","some","deviceStatus","Alert","isInline","style","color","ExclamationTriangleIcon","Modal","size","closeModal","submitLabel","schema","onSubmit","reloadData","Backdrop","Bullseye","Spinner","diameter","group_uuid","isRequired","checkImageName","payload","instance","post","EDGE_API","fetchActivationKeys","_ref3","undefined","_ref3$limit","_ref3$offset","offset","get","RHSM_API","createImage","_ref4","Id","version","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","activationKey","_ref5","distribution","item","outputTypes","commit","arch","installer","sshkey","repo","ID","URL","uuid","endpoint","_ref7","_ref7$q","query","getTableParams","getImageSetViewVersions","_ref8","_ref8$query","getImageSetView","_ref9","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","_ref10","search","params","URLSearchParams","abrupt","IMAGE_BUILDER_API","toString","_x","_x2","_x3","_ref11","getImageSets","_ref12","postRpmsNames","urls","CONTENT_SOURCES_API","RepoModal","titleIconVariant","initialValues","additionalMappers","validatorMapper","onClose","FormRenderer","FormTemplate","props","_FormTemplate","_extends","disableSubmit","buttonsProps","submit","componentMapper","_callee2","values","_context2","setTimeout","sent","onCancel"],"sourceRoot":""}