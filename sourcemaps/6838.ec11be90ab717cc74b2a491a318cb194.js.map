{"version":3,"file":"js/6838.8132b6bb0eaa7ad45917.js","mappings":"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","sources":["webpack:///./src/components/SearchInputApi.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  HelperText,\n  HelperTextItem,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useApi from '../hooks/useApi';\nimport { getGroups, getInventoryGroups } from '../api/groups';\nimport { debounce } from 'lodash';\nimport { useFeatureFlags } from '../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../constants/features';\n\nconst SelectInput = (props) => {\n  useFieldApi(props);\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [{ data, isLoading }, fetchGroups] = useApi({\n    api: inventoryGroupsEnabled ? getInventoryGroups : getGroups,\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  const updateSelection = (value) => {\n    // Update state when an option has been selected.\n    setSelected(value);\n    setIsOpen(false);\n    change('group', value);\n  };\n\n  const onSelect = (_event, selection) => {\n    if (_event) updateSelection(selection);\n  };\n\n  const clearSelection = () => {\n    setSearchTerm('');\n    fetchGroups();\n    updateSelection(null);\n  };\n\n  const onFilter = (_event, value) => {\n    /* This handler is called on input changes as well as when children change.\n       _event is null when the children change. Only update searchTerm state\n       and fetch results from the API only if there was an actual input change.\n    */\n    if (_event && value != searchTerm) {\n      setSearchTerm(value);\n      fetchGroups({ name: encodeURIComponent(value) });\n    }\n  };\n\n  const options = (inventoryGroupsEnabled ? data?.results : data?.data) || [];\n  const totalCount = (inventoryGroupsEnabled ? data?.total : data?.count) || 0;\n\n  return (\n    <>\n      <HelperText>\n        {!isLoading && !selected && isOpen && totalCount > options.length ? (\n          <HelperTextItem variant=\"warning\" className=\"pf-u-font-weight-bold\">\n            Over {options.length} results found. Refine your search.\n          </HelperTextItem>\n        ) : (\n          <HelperTextItem className=\"pf-u-font-weight-bold\">\n            Select a group\n          </HelperTextItem>\n        )}\n      </HelperText>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a group\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected ? selected : searchTerm}\n        isOpen={isOpen}\n        onFilter={debounce(onFilter, 300)}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click to select a group\"\n        noResultsFoundText={isLoading ? 'Loading...' : 'No results found'}\n        isInputValuePersisted={true}\n        maxHeight={'180px'}\n      >\n        {isLoading\n          ? []\n          : options?.map(({ id, name, DeviceGroup }) => (\n              // note: the schema is different when fetching groups from inventory or from edge-api\n              <SelectOption\n                key={inventoryGroupsEnabled ? id : DeviceGroup.ID}\n                value={{\n                  toString: () =>\n                    inventoryGroupsEnabled ? name : DeviceGroup.Name,\n                  groupId: inventoryGroupsEnabled ? id : DeviceGroup.ID,\n                }}\n              />\n            ))}\n      </Select>\n    </>\n  );\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInputApi from '../../components/SearchInputApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport {\n  addDevicesToGroup,\n  addDevicesToInventoryGroup,\n} from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Button, Text } from '@patternfly/react-core';\nimport { useFeatureFlags } from '../../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../../constants/features';\n\nconst CreateGroupButton = ({ closeModal }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={closeModal}>\n      Create Group\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  closeModal: PropTypes.func,\n};\n\nconst createDescription = (deviceIds) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a group to add <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds),\n    },\n    {\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    let addDevicesToGroupFunc;\n    if (inventoryGroupsEnabled) {\n      addDevicesToGroupFunc = () =>\n        addDevicesToInventoryGroup(group.groupId, deviceIds);\n    } else {\n      addDevicesToGroupFunc = () =>\n        addDevicesToGroup(parseInt(group.groupId), deviceIds);\n    }\n    apiWithToast(dispatch, addDevicesToGroupFunc, statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Add to group\"\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInputApi,\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          closeModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n        },\n      }}\n      schema={createSchema(deviceIds)}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInputApi = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    change('group', null);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {props.defaultOptions.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </>\n  );\n};\n\nSelectInputApi.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInputApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport {\n  removeDeviceFromGroupById,\n  removeDevicesFromInventoryGroup,\n} from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { useFeatureFlags } from '../../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../../constants/features';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n\n  if (inventoryGroupsEnabled) {\n    return (\n      <Text>\n        <strong>{systemText} </strong> will no longer be part of{' '}\n        <strong>{groupText}</strong> and its configuration will be impacted.\n      </Text>\n    );\n  }\n\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n    const systemText =\n      deviceInfo.length > 1\n        ? `${deviceInfo.length} systems`\n        : deviceInfo[0].name;\n\n    const errorMessageDescription = inventoryGroupsEnabled\n      ? deviceInfo.length > 1\n        ? `Failed to remove ${deviceInfo.length} systems from ${groupName}`\n        : `Failed to remove 1 system from ${groupName}`\n      : 'Failed to remove system from group';\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${systemText} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: errorMessageDescription,\n      },\n    };\n\n    let removeDeviceGroupFunc;\n    if (inventoryGroupsEnabled) {\n      removeDeviceGroupFunc = () =>\n        removeDevicesFromInventoryGroup(\n          groupId,\n          deviceInfo.map((device) => device.UUID)\n        );\n    } else {\n      removeDeviceGroupFunc = () =>\n        removeDeviceFromGroupById(groupId, deviceInfo[0].ID);\n    }\n\n    apiWithToast(dispatch, removeDeviceGroupFunc, statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api/devices';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { editDisplayName, deleteEntity } from '../../store/actions';\nimport { useDispatch } from 'react-redux';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useFeatureFlags } from '../../utils';\nimport {\n  FEATURE_HIDE_GROUP_ACTIONS,\n  FEATURE_PARITY_INVENTORY_GROUPS,\n} from '../../constants/features';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"UpdateDeviceModal\" */ './UpdateDeviceModal')\n);\n\nconst TextInputModal = (props) => (\n  <AsyncComponent appName=\"inventory\" module=\"./TextInputModal\" {...props} />\n);\n\nconst DeleteModal = (props) => (\n  <AsyncComponent appName=\"inventory\" module=\"./DeleteModal\" {...props} />\n);\n\nconst Inventory = ({\n  historyProp,\n  navigateProp,\n  locationProp,\n  showHeaderProp,\n  notificationProp,\n  urlName,\n}) => {\n  const chrome = useChrome();\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const showHeader = showHeaderProp === undefined ? true : showHeaderProp;\n  const { data, isLoading, hasError } = response;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [isEditNameModalOpen, setIsEditNameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleEditNameSystem = (ids, isRow) => {\n    setIsEditNameModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleDeleteSystem = (ids, isRow) => {\n    setIsDeleteModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const canBeUpdated = () => {\n    let canBeUpdated = false;\n    if (checkedDeviceIds.length > 0) {\n      let initialImage = checkedDeviceIds[0].imageSetId;\n      for (let device of checkedDeviceIds) {\n        if (device.imageSetId !== initialImage) {\n          canBeUpdated = false;\n          break;\n        }\n        if (\n          (!canBeUpdated &&\n            device.updateImageData &&\n            device.deviceStatus === 'updateAvailable') ||\n          device.deviceStatus === 'unresponsive' ||\n          device.deviceStatus === 'error'\n        ) {\n          canBeUpdated = true;\n        }\n      }\n    }\n    return canBeUpdated;\n  };\n\n  const handleUpdateSelected = () => {\n    setUpdateModal((prevState) => ({\n      ...prevState,\n      deviceData: checkedDeviceIds.map((device) => ({\n        id: device.id,\n        display_name: device.display_name,\n        deviceStatus: device.deviceStatus,\n      })),\n      imageData: { imageName: checkedDeviceIds[0].imageName },\n      imageSetId: checkedDeviceIds[0].imageSetId,\n      isOpen: true,\n    }));\n  };\n\n  const reloadData = async () => {\n    await fetchDevices();\n    setHasModalSubmitted(true);\n  };\n  let classNameMain = '';\n  if (showHeaderProp !== undefined && showHeader) {\n    classNameMain =\n      'edge-devices pf-l-page__main-section pf-c-page__main-section';\n  } else if (!showHeader) {\n    classNameMain = 'pf-c-toolbar';\n  }\n\n  function handleOnSubmitEditName(value) {\n    const uuid = isRowSelected ? deviceId[0].UUID : checkedDeviceIds[0].UUID;\n    const name = isRowSelected ? deviceId[0].name : checkedDeviceIds[0].name;\n    const statusMessages = {\n      onSuccess: {\n        title: `Display name for entity with ID ${uuid} has been changed to ${value}`,\n      },\n      onError: { title: 'Error', description: 'Failed to update device name' },\n    };\n    if (notificationProp) {\n      apiWithToast(\n        dispatch,\n        () => editDisplayName(uuid, value, name),\n        statusMessages,\n        notificationProp\n      );\n    } else {\n      dispatch(editDisplayName(uuid, value, name));\n    }\n    setIsEditNameModalOpen(false);\n  }\n\n  function handleOnConfirmDeleteSystem() {\n    const systemInstance = isRowSelected ? deviceId[0] : checkedDeviceIds[0];\n\n    let displayName = systemInstance.display_name;\n    let removeSystems = [systemInstance.UUID];\n    const statusInitialMessages = {\n      onWarning: {\n        title: 'Delete operation initiated',\n        description: `Removal of ${displayName} started.`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to initial delete device',\n      },\n    };\n    const statusMessages = {\n      onSuccess: {\n        title: 'Delete operation finished',\n        description: `${displayName} has been successfully removed.`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete device' },\n    };\n\n    if (notificationProp) {\n      apiWithToast(\n        dispatch,\n        () =>\n          addNotification({\n            id: 'remove-initiated',\n            variant: 'warning',\n          }),\n        statusInitialMessages,\n        notificationProp\n      );\n      apiWithToast(\n        dispatch,\n        () => deleteEntity(removeSystems, displayName),\n        statusMessages,\n        notificationProp\n      );\n    } else {\n      dispatch(\n        addNotification({\n          id: 'remove-initiated',\n          variant: 'warning',\n          title: 'Delete operation initiated',\n          description: `Removal of ${displayName} started.`,\n          dismissable: false,\n        })\n      );\n      dispatch(deleteEntity(removeSystems, displayName));\n    }\n    setIsDeleteModalOpen(false);\n  }\n\n  useEffect(() => {\n    chrome?.updateDocumentTitle?.('Systems - Inventory | Edge management');\n  }, [chrome]);\n\n  const hideGroupsActions = useFeatureFlags(FEATURE_HIDE_GROUP_ACTIONS);\n  const kebabMenuItems = [];\n  if (!hideGroupsActions) {\n    const groupsKebabMenuItems = [\n      {\n        isDisabled: inventoryGroupsEnabled\n          ? !(checkedDeviceIds.length > 0) ||\n            checkedDeviceIds.filter((device) => device.deviceGroups?.length > 0)\n              .length > 0 // The action menu item is disabled if one of the systems items belongs to a group\n          : !(checkedDeviceIds.length > 0),\n        title: 'Add to group',\n        onClick: () =>\n          handleAddDevicesToGroup(\n            checkedDeviceIds.map((device) => ({\n              ID: device.deviceID,\n              name: device.display_name,\n              UUID: device.id,\n            })),\n            false\n          ),\n      },\n    ];\n\n    if (inventoryGroupsEnabled) {\n      groupsKebabMenuItems.push({\n        isDisabled:\n          !(checkedDeviceIds.length > 0) || // disable if no system checked\n          checkedDeviceIds.filter(\n            // disable if any checked systems has no groups assigned\n            (device) =>\n              device.deviceGroups === undefined ||\n              device.deviceGroups.length === 0\n          ).length > 0 ||\n          checkedDeviceIds.reduce((acc, device) => {\n            // disable if the checked systems has different groups assigned\n            const groupIDS = device.deviceGroups\n              ? device.deviceGroups.map((group) => group.ID)\n              : [];\n            const newGroupIDS = groupIDS.filter(\n              (groupID) => !acc.includes(groupID)\n            );\n            acc.push(...newGroupIDS);\n            return acc;\n          }, []).length !== 1,\n        title: 'Remove from group',\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            checkedDeviceIds.map((device) => ({\n              ID: device.deviceID,\n              name: device.display_name,\n              UUID: device.id,\n              deviceGroups: device.deviceGroups,\n            })),\n            false\n          ),\n      });\n    }\n    kebabMenuItems.push(...groupsKebabMenuItems);\n  }\n\n  return (\n    <>\n      {showHeader && (\n        <PageHeader className=\"pf-m-light\">\n          <PageHeaderTitle title=\"Systems\" />\n        </PageHeader>\n      )}\n      {showHeader}\n      <section className={classNameMain}>\n        <DeviceTable\n          historyProp={historyProp}\n          navigateProp={navigateProp}\n          locationProp={locationProp}\n          isSystemsView={true}\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          updateModal={updateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          handleEditNameSystem={handleEditNameSystem}\n          handleDeleteSystem={handleDeleteSystem}\n          handleUpdateSelected={handleUpdateSelected}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          selectedItemsUpdateable={canBeUpdated()}\n          kebabItems={kebabMenuItems.length > 0 ? kebabMenuItems : undefined}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n          urlName={urlName}\n        />\n      </section>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                console.log('Click modal');\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            notificationProp={notificationProp}\n            refreshTable={reloadData}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={reloadData}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isEditNameModalOpen && (\n        <TextInputModal\n          isOpen={isEditNameModalOpen}\n          title=\"Edit display name\"\n          value={isRowSelected ? deviceId[0].name : checkedDeviceIds[0].name}\n          ariaLabel=\"Host inventory display name\"\n          modalOuiaId=\"edit-display-name-modal\"\n          cancelOuiaId=\"cancel-edit-display-name\"\n          confirmOuiaId=\"confirm-edit-display-name\"\n          inputOuiaId=\"input-edit-display-name\"\n          onCancel={() => setIsEditNameModalOpen(false)}\n          onSubmit={handleOnSubmitEditName}\n          className=\"sentry-mask data-hj-suppress\"\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteModal\n          className=\"sentry-mask data-hj-suppress\"\n          handleModalToggle={setIsDeleteModalOpen}\n          isModalOpen={isDeleteModalOpen}\n          currentSytems={isRowSelected ? deviceId[0] : checkedDeviceIds[0]}\n          onConfirm={handleOnConfirmDeleteSystem}\n        />\n      )}\n    </>\n  );\n};\n\nInventory.propTypes = {\n  historyProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  showHeaderProp: PropTypes.bool,\n  notificationProp: PropTypes.object,\n  urlName: PropTypes.string,\n};\n\nexport default Inventory;\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\nexport const UPDATE_DISPLAY_NAME = 'UPDATE_DISPLAY_NAME';\nexport const REMOVE_ENTITY = 'REMOVE_ENTITY';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n    UPDATE_DISPLAY_NAME,\n    REMOVE_ENTITY,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  ACTION_TYPES,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\nimport { hosts } from '../api';\nimport { deleteSystemsById } from '../utils';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show system summary data',\n          description: 'Failed receiving system summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n\nexport const editDisplayName = (id, value, origValue) => ({\n  type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n  payload: hosts.apiHostPatchHostById([id], { display_name: value }),\n  meta: {\n    id,\n    value,\n    origValue,\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: `Display name for entity with ID ${id} has been changed to ${value}`,\n        dismissable: true,\n      },\n    },\n  },\n});\n\nexport const deleteEntity = (systems, displayName) => ({\n  type: ACTION_TYPES.REMOVE_ENTITY,\n  payload: deleteSystemsById(systems),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Delete operation finished',\n        description: `${displayName} has been successfully removed.`,\n        dismissable: true,\n      },\n    },\n    systems,\n  },\n});\n"],"names":["props","useFieldApi","inventoryGroupsEnabled","useFeatureFlags","FEATURE_PARITY_INVENTORY_GROUPS","change","useFormApi","useState","isOpen","setIsOpen","selected","setSelected","useApi","api","getInventoryGroups","getGroups","data","isLoading","fetchGroups","searchTerm","setSearchTerm","updateSelection","value","options","results","totalCount","total","count","HelperText","length","HelperTextItem","variant","className","Select","typeAheadAriaLabel","onToggle","onSelect","_event","selection","onClear","selections","onFilter","name","encodeURIComponent","placeholderText","noResultsFoundText","isInputValuePersisted","maxHeight","map","id","DeviceGroup","SelectOption","key","ID","toString","Name","groupId","CreateGroupButton","closeModal","Text","Button","onClick","propTypes","PropTypes","createDescription","deviceIds","systemText","createSchema","fields","component","componentTypes","label","isRequired","validate","type","validatorTypes","AddDeviceModal","isModalOpen","setIsModalOpen","setIsCreateGroupModalOpen","reloadData","dispatch","useDispatch","Modal","title","submitLabel","additionalMappers","SearchInputApi","schema","onSubmit","values","addDevicesToGroupFunc","group","statusMessages","onSuccess","description","onError","addDevicesToInventoryGroup","addDevicesToGroup","parseInt","apiWithToast","SelectInputApi","clearSelection","isPlaceholder","defaultOptions","index","removeDescription","deviceInfo","deviceGroups","groupText","WarningIcon","color","warningColor","push","RemoveDeviceModal","titleIconVariant","SearchInput","removeDeviceGroupFunc","hasManyGroups","groupName","errorMessageDescription","removeDevicesFromInventoryGroup","device","UUID","removeDeviceFromGroupById","UpdateDeviceModal","React","TextInputModal","AsyncComponent","appName","module","DeleteModal","Inventory","historyProp","navigateProp","locationProp","showHeaderProp","notificationProp","urlName","chrome","useChrome","history","useHistory","pathname","useLocation","getInventory","tableReload","response","fetchDevices","showHeader","undefined","hasError","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","isEditNameModalOpen","setIsEditNameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","deviceId","setDeviceId","checkedDeviceIds","setCheckedDeviceIds","isRowSelected","setIsRowSelected","hasModalSubmitted","setHasModalSubmitted","isCreateGroupModalOpen","deviceData","imageData","updateModal","setUpdateModal","handleAddDevicesToGroup","ids","isRow","handleRemoveDevicesFromGroup","classNameMain","useEffect","updateDocumentTitle","kebabMenuItems","FEATURE_HIDE_GROUP_ACTIONS","groupsKebabMenuItems","isDisabled","filter","deviceID","display_name","reduce","acc","newGroupIDS","groupID","includes","PageHeader","PageHeaderTitle","DeviceTable","isSystemsView","devices","handleEditNameSystem","handleDeleteSystem","handleUpdateSelected","prevState","deviceStatus","imageName","imageSetId","hasCheckbox","selectedItems","selectedItemsUpdateable","canBeUpdated","initialImage","updateImageData","kebabItems","Suspense","fallback","Bullseye","Spinner","navigateBack","console","log","refreshTable","CreateGroupModal","ariaLabel","modalOuiaId","cancelOuiaId","confirmOuiaId","inputOuiaId","onCancel","uuid","editDisplayName","handleModalToggle","currentSytems","onConfirm","systemInstance","displayName","removeSystems","statusInitialMessages","onWarning","addNotification","deleteEntity","dismissable","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","POLLING_IMAGES","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","ACTION_TYPES","keyBy","k","loadImageDetail","imageId","payload","getImageById","createNewImage","callback","createImage","then","loadEdgeImageSets","query","fetchEdgeImageSets","addImageToPoll","origValue","hosts","meta","notifications","fulfilled","systems","deleteSystemsById"],"sourceRoot":""}