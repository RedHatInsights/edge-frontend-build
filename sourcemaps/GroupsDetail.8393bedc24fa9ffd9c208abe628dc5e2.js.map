{"version":3,"file":"js/GroupsDetail.1670950981074.2ead3ea244de88386c2b.js","mappings":"2LAKO,MAAMA,EAAcC,IACvB,IAAI,SAAEC,EAAW,KAAI,UAAEC,EAAY,GAAI,aAAcC,EAAY,aAAY,OAAEC,EAAM,SAAEC,GAAW,GAASL,EAAIM,GAAQ,IAAAC,QAAOP,EAAI,CAAC,WAAY,YAAa,aAAc,SAAU,aACpL,MAAMQ,GAAY,QAAaT,EAAWU,YAAaL,EAAQC,GAC/D,OAAQ,gBAAoB,MAAOK,OAAOC,OAAO,CAAC,EAAGL,EAAO,CAAE,aAAcH,EAAWD,WAAW,OAAI,eAAmBA,IAAcM,GACnI,gBAAoB,KAAM,CAAEN,UAAW,oBAAyB,eAAmBD,GAAU,CAACW,EAAOC,KACjG,MAAMC,EAAcD,EAAQ,EAC5B,OAAI,iBAAqBD,GACd,eAAmBA,EAAO,CAAEE,gBAEhCF,CAAK,KACX,EAEbb,EAAWU,YAAc,Y,2GCZlB,MAAMM,EAAkBf,IAC3B,IAAI,SAAEC,EAAW,KAAMC,UAAWc,EAAgB,GAAE,GAAEC,EAAc,SAAEC,GAAW,EAAK,WAAEC,GAAa,EAAK,YAAEL,EAAW,OAAEM,EAAkB,UAAEC,EAAY,IAAG,OAAEC,GAAuBtB,EAAIM,GAAQ,IAAAC,QAAOP,EAAI,CAAC,WAAY,YAAa,KAAM,WAAY,aAAc,cAAe,SAAU,YAAa,WAC5S,MAAMuB,EAAYF,EACZG,EAAcN,EAAW,YAASO,EAClCvB,GAAY,OAAI,mBAAuBgB,GAAY,uBACzD,OAAQ,gBAAoB,KAAMR,OAAOC,OAAO,CAAC,EAAGL,EAAO,CAAEJ,WAAW,OAAI,mBAAuBc,KAC/FF,GAAgB,gBAAoB,OAAQ,CAAEZ,UAAW,2BACrD,gBAAoB,KAAgB,OAC1B,WAAdmB,GAA2B,gBAAoB,SAAU,CAAEnB,UAAWA,EAAW,eAAgBsB,EAAaE,KAAM,UAAYzB,GAChIkB,GAAc,gBAAoB,OAAQ,CAAEjB,WAAW,OAAI,yBAA8BD,GACzFqB,GAAUA,EAAO,CAAEpB,YAAWsB,gBAC9BP,IAAOK,GAAW,gBAAoBC,EAAW,CAAEI,KAAMV,EAAIG,OAAQA,EAAQlB,UAAWA,EAAW,eAAgBsB,GAAevB,IACjIgB,GAAoB,WAAdI,IAA2BF,GAAclB,EAAU,EAElEc,EAAeN,YAAc,gB,yDClB7B,SACE,WAAc,kBACd,mBAAsB,4BACtB,kBAAqB,2BACrB,eAAkB,wBAClB,sBAAyB,gCACzB,eAAkB,wBAClB,eAAkB,wBAClB,eAAkB,wBAClB,UAAa,CACX,QAAW,eACX,aAAgB,sBAElB,UAAa,gB,+LCFTmB,EAAc,SAACC,GAAI,OACvB,kBAAC,IAAI,KACH,gCAASA,EAAI,KAAW,2HAEnB,EAGHC,EAAS,SAACD,GAAI,MAAM,CACxBE,OAAQ,CACN,CACEV,UAAWW,EAAAA,EAAAA,WACXH,KAAM,kBACNI,MAAOL,EAAYC,IAErB,CACER,UAAWW,EAAAA,EAAAA,SACXH,KAAM,eACNI,MAAO,kDACPC,SAAU,CAAC,CAAER,KAAMS,EAAAA,EAAAA,aAGxB,EAEKC,EAAc,WAAH,OACf,kBAAC,KAAuB,CAACC,MAAOC,EAAAA,EAAAA,OAAsB,EAGlDC,EAAmB,SAAH,GAKhB,IAJJC,EAAW,EAAXA,YACAC,EAAc,EAAdA,eACAC,EAAU,EAAVA,WACAC,EAAU,EAAVA,WAEQC,EAAaD,EAAbC,GAAIf,EAASc,EAATd,KACNgB,GAAWC,EAAAA,EAAAA,MAajB,OACE,kBAAC,IAAK,CACJC,OAAQP,EACRQ,WAAY,kBAAMP,GAAe,EAAM,EACvCQ,MAAM,eACNC,iBAAkBd,EAClBe,QAAQ,SACRC,YAAY,SACZtB,OAAQA,EAAOD,GACfwB,SApBsB,WACxB,IAAMC,EAAiB,CACrBC,UAAW,CACTN,MAAO,UACPrB,YAAa,GAAF,OAAKC,EAAI,mCAEtB2B,QAAS,CAAEP,MAAO,QAASrB,YAAa,4BAE1C6B,EAAAA,EAAAA,GAAaZ,GAAU,kBAAMa,EAAAA,EAAAA,IAAgBd,EAAG,GAAEU,EACpD,EAYIZ,WAAYA,GAGlB,EAEAH,EAAiBoB,UAAY,CAC3Bf,GAAIgB,IAAAA,OACJ/B,KAAM+B,IAAAA,OACNjB,WAAYiB,IAAAA,OACZpB,YAAaoB,IAAAA,KACbnB,eAAgBmB,IAAAA,KAChBlB,WAAYkB,IAAAA,MAEd,S,wMCxEMC,EAAwB,mCAAG,WAAOC,GAAK,kFACxBC,EAAAA,EAAAA,IAAkBD,GAAM,OAAjC,IAAG,EAAH,KACDE,KAAKC,QAAS,CAAF,wCACZ,6BAA2B,2CAErC,gBAL6B,sCAOxBC,EAAoB,CACxBnC,OAAQ,CACN,CACEV,UAAWW,EAAAA,EAAAA,WACXH,KAAM,OACNI,MAAO,aACPkC,WACE,kFACFC,YAAY,EACZlC,SAAU,CACR,CAAER,KAAMS,EAAAA,EAAAA,UAER,CAAET,KAAMS,EAAAA,EAAAA,WAA2BkC,UAAW,IAC9CC,EAAAA,GACAT,MAMFU,EAAmB,SAAH,GAKhB,IAJJ/B,EAAW,EAAXA,YACAC,EAAc,EAAdA,eACAC,EAAU,EAAVA,WACAC,EAAU,EAAVA,WAEQC,EAAaD,EAAbC,GAAIf,EAASc,EAATd,KACNgB,GAAWC,EAAAA,EAAAA,MAYjB,OACE,kBAAC,IAAK,CACJC,OAAQP,EACRQ,WAAY,kBAAMP,GAAe,EAAM,EACvCQ,MAAM,eACNG,YAAY,OACZtB,OAAQoC,EACRM,cAAe7B,EACfU,SAlBsB,SAACoB,GACzB,IAAMnB,EAAiB,CACrBC,UAAW,CACTN,MAAO,UACPrB,YAAa,GAAF,OAAKC,EAAI,gCAAwB4C,EAAO5C,KAAI,kBAEzD2B,QAAS,CAAEP,MAAO,QAASrB,YAAa,4BAE1C6B,EAAAA,EAAAA,GAAaZ,GAAU,kBAAM6B,EAAAA,EAAAA,IAAgB9B,EAAI6B,EAAO,GAAEnB,EAC5D,EAUIZ,WAAYA,GAGlB,EAEA6B,EAAiBZ,UAAY,CAC3Bf,GAAIgB,IAAAA,OACJjB,WAAYiB,IAAAA,OACZpB,YAAaoB,IAAAA,KACbnB,eAAgBmB,IAAAA,KAChBlB,WAAYkB,IAAAA,MAEd,S,ubCnEMe,EAAyB,SAAH,GAMtB,MALJC,EAAO,EAAPA,QACA5B,EAAU,EAAVA,WACAD,EAAM,EAANA,OACAL,EAAU,EAAVA,WACAmC,EAAS,EAATA,UAEA,GAAiCC,EAAAA,EAAAA,GAAO,CACtCC,IAAKC,EAAAA,GACLC,aAAa,IACb,eAHKC,EAAQ,KAAEC,EAAY,KAIrBnB,EAA8BkB,EAA9BlB,KAAMoB,EAAwBF,EAAxBE,UAAWC,EAAaH,EAAbG,SACzB,GAAkCC,EAAAA,EAAAA,UAAS,IAAG,eAAvCC,EAAS,KAAEC,EAAY,KACxB3C,GAAWC,EAAAA,EAAAA,MA2BjB,OACE,kBAAC2C,EAAA,EAAK,CACJ7C,GAAG,oBACHK,MAAM,cACNyC,SAAS,MACT3C,OAAQA,EACR4C,QAAS3C,EACTG,QAAQ,QACRyC,QAAS,CACP,kBAACC,EAAA,GAAM,CACLC,WAAiC,IAArBP,EAAUQ,OACtBC,IAAI,UACJ7C,QAAQ,UACR8C,QAtCwB,WAC9B,IAAM3C,EAAiB,CACrBC,UAAW,CACTN,MAAO,UACPrB,YAAa,gCAAF,OAAkCiD,EAAS,kBAExDrB,QAAS,CACPP,MAAO,QACPrB,YAAa,0CAIjB6B,EAAAA,EAAAA,GACEZ,GACA,kBACEqD,EAAAA,EAAAA,IACEC,SAASvB,GACTW,EAAUa,KAAI,SAACC,GAAM,MAAM,CAAEC,GAAID,EAAOE,SAAU,IACnD,GACHjD,GAEFkD,YAAU,iBAAC,8FAAkB9D,IAAY,mFAAE,KAC3CM,GACF,GAeyC,eAInC,kBAAC6C,EAAA,GAAM,CAACG,IAAI,SAAS7C,QAAQ,OAAO8C,QAASjD,GAAW,YAK1D,kBAACyD,EAAA,EAAW,CACVC,cAAelB,EACfmB,oBAAqB,GACrBC,aAAa,EACbxB,UAAWA,EACXC,SAAUA,EACVwB,MAAO7C,aAAI,EAAJA,EAAM6C,MACb7C,MAAMA,SAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAY8C,UAAW,GAC7B3B,aAAcA,IAItB,EACAR,EAAuBhB,UAAY,CACjCiB,QAAShB,IAAAA,OACTZ,WAAYY,IAAAA,KACZb,OAAQa,IAAAA,KACRlB,WAAYkB,IAAAA,KACZiB,UAAWjB,IAAAA,QAGb,U,qpBCjDA,IAAMmD,EAAoBC,IAAAA,MAAW,kBACnC,sFAEC,IAgVH,QA7UqB,WAAM,wBACnBnE,GAAWC,EAAAA,EAAAA,MACXmE,GAASC,EAAAA,EAAAA,aACTC,GAAUC,EAAAA,EAAAA,cACRxC,EAAYqC,EAAZrC,QAER,GAA4CU,EAAAA,EAAAA,WAAS,GAAM,eAApD+B,EAAc,KAAEC,EAAiB,KACxC,IAA4ChC,EAAAA,EAAAA,WAAS,GAAM,iBAApDiC,GAAc,MAAEC,GAAiB,MACxC,IAAsClC,EAAAA,EAAAA,UAAS,CAC7CvC,QAAQ,EACRlB,KAAM,GACN4F,SAAU,OACV,iBAJKC,GAAW,MAAEC,GAAc,MAKlC,IAAsCrC,EAAAA,EAAAA,UAAS,CAC7CvC,QAAQ,EACR6E,WAAY,KACZC,UAAW,OACX,iBAJKC,GAAW,MAAEC,GAAc,MAKlC,IAAiCjD,EAAAA,EAAAA,GAAO,CACtCC,IAAKiD,EAAAA,GACLpF,GAAIgC,EACJK,aAAa,IACb,iBAJKC,GAAQ,MAAEC,GAAY,MAKrBnB,GAA8BkB,GAA9BlB,KAAMoB,GAAwBF,GAAxBE,UAAWC,GAAaH,GAAbG,SACnBR,GAAYb,UAAiB,QAAb,EAAJA,GAAMiE,mBAAW,WAAb,EAAJ,EAAmBC,KACrC,IAAkC5C,EAAAA,EAAAA,UAAS,IAAG,iBAAvCC,GAAS,MAAE4C,GAAY,MAC9B,IAAkD7C,EAAAA,EAAAA,WAAS,GAAM,iBAA1D8C,GAAiB,MAAEC,GAAoB,MAC9C,IAAoC/C,EAAAA,EAAAA,UAAS,CAAE1C,GAAI,KAAMf,KAAM,KAAK,iBAA7Dc,GAAU,MAAE2F,GAAa,MAChC,IAAkDhD,EAAAA,EAAAA,WAAS,GAAM,iBAA1DiD,GAAiB,MAAEC,GAAoB,MAC9C,IAAkDlD,EAAAA,EAAAA,WAAS,GAAM,iBAA1DmD,GAAiB,MAAEC,GAAoB,OAmB9CC,EAAAA,EAAAA,YAAU,WACRxB,EAAQyB,KAAK,CACXC,SAAU1B,EAAQ2B,SAASD,SAC3BE,QAAQC,EAAAA,EAAAA,IAAiB,wBAAyBzB,KAEtD,GAAG,CAACA,KAEJ,IAAM0B,GAA4B,WAChC,IAAM3F,EAAiB,CACrBC,UAAW,CACTN,MAAO,UACPrB,YAAa,GAAF,OAAK8F,GAAY7F,KAAI,mCAElC2B,QAAS,CAAEP,MAAO,QAASrB,YAAa,6BAE1C6B,EAAAA,EAAAA,GACEZ,GACA,kBAAMqG,EAAAA,EAAAA,IAA0BtE,EAAS8C,GAAYD,SAAS,GAC9DnE,GAEFkD,YAAW,kBAAM6B,IAAqB,EAAK,GAAE,IAC/C,EAsBMc,GAAe,iCACfC,GAAa,yBAEnB,OACE,oCACE,kBAACC,EAAA,EAAU,CAACnJ,UAAU,cACnB2E,GACC,kBAAC9E,EAAA,EAAU,KACT,kBAACgB,EAAA,EAAc,KACb,kBAAC,EAAAuI,KAAI,CAACrI,GAAE,UAAKsI,EAAAA,EAAAA,sBAA4B,WAE3C,kBAACxI,EAAA,EAAc,KAAE8D,KAGnB,kBAAC9E,EAAA,EAAU,KACT,kBAACgB,EAAA,EAAc,CAACG,UAAQ,GACtB,kBAACsI,EAAA,EAAQ,CAACC,MAAM,YAItB,kBAACC,EAAA,EAAI,CAACC,eAAgB,CAAEC,QAAS,+BAC/B,kBAACC,EAAA,EAAQ,KACNhF,GACC,kBAACiF,EAAA,EAAe,CAAC7G,MAAO4B,KAExB,kBAAC2E,EAAA,EAAQ,CAACC,MAAM,WAGpB,kBAACI,EAAA,EAAQ,KACP,kBAACE,EAAA,EAAQ,CACPrE,SAAUsE,EAAAA,GAAAA,MACVC,OACE,kBAACC,EAAA,EAAc,CACbtH,GAAIwG,GACJe,gBAAiBC,EAAAA,GACjBC,SAAU,SAACC,GAAQ,OAAKhD,EAAkBgD,EAAS,EACnDxE,YAAY,EACZ,aAAYqD,IAEZ,kBAACoB,EAAA,EAAO,CACNC,QAASrB,GACTsB,UAAW,kBAAMC,SAASC,eAAevB,GAAW,IACpD,WAINrG,OAAQsE,EACRuD,cAAe,CACb,kBAACC,EAAA,EAAY,CACX7E,IAAI,sBACJC,QAAS,kBA7GvBqC,GAAc,CAAE1F,GA6G+BgC,EA7G3B/C,KA6GoCgD,UA5GxD2D,IAAqB,EA4G6C,GAAC,gBAIvD,kBAACqC,EAAA,EAAY,CACX7E,IAAI,sBACJC,QAAS,kBA9GvBqC,GAAc,CAAE1F,GA8G+BgC,EA9G3B/C,KA8GoCgD,UA7GxD6D,IAAqB,EA6G6C,GAAC,gBAIvD,kBAACmC,EAAA,EAAY,CACX7E,IAAI,qBACJF,YAAYgF,EAAAA,EAAAA,IAAyB,CACnClD,WAAY5D,UAAiB,QAAb,EAAJA,GAAM+G,mBAAW,OAAS,QAAT,EAAjB,EAAmBjE,eAAO,WAAtB,EAAJ,EAA4BV,KAAI,SAACC,GAAM,MAAM,CACvD2E,WAAY3E,aAAM,EAANA,EAAQ4E,WACrB,IACDpD,UAAW7D,UAAiB,QAAb,EAAJA,GAAM+G,mBAAW,OAAS,QAAT,EAAjB,EAAmBjE,eAAO,WAAtB,EAAJ,EAA4BoE,MACrC,SAAC7E,GAAM,OAAKA,EAAO8E,OAAO,MAG9BlF,QAAS,WACPqB,GAAkB,GAClBS,IAAe,SAACqD,GAAS,0BACpBA,GAAS,IACZrI,QAAQ,EACR6E,WAAY5D,UAAiB,QAAb,EAAJA,GAAM+G,mBAAW,OAAS,QAAT,EAAjB,EAAmBjE,eAAO,WAAtB,EAAJ,EAA4BV,KAAI,SAACC,GAAM,MAAM,CACvDzD,GAAIyD,aAAM,EAANA,EAAQgF,WACZC,aACyB,MAAvBjF,aAAM,EAANA,EAAQkF,YACJ,YACAlF,aAAM,EAANA,EAAQkF,WACf,IACDP,WAAYhH,UAAiB,QAAb,EAAJA,GAAM+G,mBAAW,OAE5B,QAF4B,EAAjB,EAAmBjE,QAAQ0E,MACrC,SAACnF,GAAM,OAAKA,EAAO4E,UAAU,WAC9B,WAFe,EAAJ,EAETA,YAAU,GAEjB,GAAE,gBASd,kBAACQ,EAAA,EAAI,CAACvL,UAAU,iBACZwL,EAAAA,EAAAA,IACAtG,GACApB,UAAiB,QAAb,EAAJA,GAAMiE,mBAAW,WAAb,EAAJ,EAAmB0D,QAAQ5F,OAC3BoB,GA6CA,kBAACuC,EAAA,EAAI,CAACC,eAAgB,CAAEC,QAAS,yBAC/B,kBAACgC,EAAA,EAAK,CACJC,KAAK,OACL5I,MAAM,2BACN6I,KAAK,8DACLC,cAAe,CACbC,KAAM,cACNC,MAAO,kBAAMzE,IAAkB,EAAK,GAEtC0E,iBAAkB,CAChB,CACExK,KAAM,OACNuB,MAAO,iCACPkJ,KAAM,oJAxDd,kBAAC1F,EAAA,EAAW,CACVzC,MAAMA,UAAiB,QAAb,EAAJA,GAAM+G,mBAAW,WAAb,EAAJ,EAAmBjE,UAAW,GACpCD,MAAO7C,UAAiB,QAAb,EAAJA,GAAM+G,mBAAW,WAAb,EAAJ,EAAmBqB,MAC1BhH,UAAWA,GACXC,SAAUA,GACVuB,aAAa,EACbqC,0BAA2BA,GAC3BoD,WAAY,CACV,CACEvG,aAAcP,GAAUQ,OAAS,GACjC9C,MAAO,oBACPgD,QAAS,kBACP0B,GAAe,CACb9F,KAAM,GACN4F,SAAU,KACV1E,QAAQ,GACR,GAEN,CACE+C,YAAYgF,EAAAA,EAAAA,IAAyB,CACnClD,WAAYrC,GACZsC,UAAuB,QAAd,EAAEtC,GAAU,UAAE,aAAZ,EAAc+G,kBAE3BrJ,MAAO,kBACPgD,QAAS,kBACP8B,IAAe,SAACqD,GAAS,cACpBA,GAAS,IACZrI,QAAQ,EACR6E,YAAY,OAAIrC,IAChByF,WAAYzF,GAAUiG,MAAK,SAACnF,GAAM,OAAKA,aAAM,EAANA,EAAQ2E,UAAU,IACtDA,YAAU,GACZ,IAGTtE,cAAeyB,GACfR,eAAgBA,GAChBH,kBAAmBA,GACnBY,kBAAmBA,GACnBC,qBAAsBA,GACtBlD,aAAcA,GACdoH,kBAAkB,KAuBvBhF,IACC,kBAAC,EAAsB,CACrB3C,QAASA,EACT5B,WAAY,kBAAMwE,IAAkB,EAAM,EAC1CzE,OAAQwE,GACR7E,WAAYyC,GACZN,UAAWb,UAAiB,QAAb,EAAJA,GAAMiE,mBAAW,WAAb,EAAJ,EAAmBC,OAGjCR,GAAY3E,QACX,kBAAC,IAAK,CACJA,OAAQ2E,GAAY3E,OACpBC,WAAY,kBAAM2E,IAAe,EAAM,EACvC1E,MAAO,oBACPG,YAAa,SACbD,QAAQ,SACRrB,OAAQ,CACNC,OAAQ,CACN,CACEV,UAAWW,EAAAA,EAAAA,WACXH,KAAM,eACNI,MA3OS,gCAEnBsD,GAAUQ,OAAS,EAAC,UACbR,GAAUQ,OAAM,kBAA+B,IAArBR,GAAUQ,OAAe,GAAK,KAAG,UAC3D2B,GAAY7F,MAAM,iBAClBgD,GAAS,QA0OZxB,SACEqE,GAAYD,SACRwB,GAnNkB,WAC9B,IAAM3F,EAAiB,CACrBC,UAAW,CACTN,MAAO,UACPrB,YAAa,GAAF,OAAK2D,GAAUQ,OAAM,4CAElCvC,QAAS,CAAEP,MAAO,QAASrB,YAAa,8BAE1C6B,EAAAA,EAAAA,GACEZ,GACA,kBACE2J,EAAAA,EAAAA,IACErG,SAASvB,GACTW,GAAUa,KAAI,SAACC,GAAM,MAAM,CAAEC,GAAID,EAAOE,SAAU,IACnD,GACHjD,GAEFkD,YAAW,kBAAM6B,IAAqB,EAAK,GAAE,IAC/C,EAoMQ3F,WAAYyC,KAIf2C,GAAY/E,QACX,kBAAC,EAAA0J,SAAQ,CACPC,SACE,kBAACC,EAAA,EAAQ,KACP,kBAACC,EAAA,EAAO,QAIZ,kBAAC7F,EAAiB,CAChB8F,aAAc,WACZ1F,EAAQyB,KAAK,CAAEC,SAAU1B,EAAQ2B,SAASD,WAC1Cd,IAAe,SAACqD,GACd,OAAO,EAAP,KACKA,GAAS,IACZrI,QAAQ,GAEZ,GACF,EACAgF,eAAgBA,GAChBD,YAAaA,GACbgF,aAAc3H,MAInBoD,IACC,kBAAChG,EAAA,EAAgB,CACfC,YAAa+F,GACb9F,eAAgB+F,GAChB9F,WAAY,kBAAMyE,EAAQyB,KAAKW,EAAAA,EAAAA,oBAA0B,EACzD5G,WAAYA,KAGf8F,IACC,kBAAClE,EAAA,EAAgB,CACf/B,YAAaiG,GACbhG,eAAgBiG,GAChBhG,WAAY,kBAAMyC,IAAc,EAChCxC,WAAYA,KAKtB,C","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.mjs","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Devices/AddSystemsToGroupModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Breadcrumb/breadcrumb';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const Breadcrumb = (_a) => {\n    var { children = null, className = '', 'aria-label': ariaLabel = 'Breadcrumb', ouiaId, ouiaSafe = true } = _a, props = __rest(_a, [\"children\", \"className\", 'aria-label', \"ouiaId\", \"ouiaSafe\"]);\n    const ouiaProps = useOUIAProps(Breadcrumb.displayName, ouiaId, ouiaSafe);\n    return (React.createElement(\"nav\", Object.assign({}, props, { \"aria-label\": ariaLabel, className: css(styles.breadcrumb, className) }, ouiaProps),\n        React.createElement(\"ol\", { className: styles.breadcrumbList }, React.Children.map(children, (child, index) => {\n            const showDivider = index > 0;\n            if (React.isValidElement(child)) {\n                return React.cloneElement(child, { showDivider });\n            }\n            return child;\n        }))));\n};\nBreadcrumb.displayName = 'Breadcrumb';\n//# sourceMappingURL=Breadcrumb.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/Breadcrumb/breadcrumb';\nimport { css } from '@patternfly/react-styles';\nexport const BreadcrumbItem = (_a) => {\n    var { children = null, className: classNameProp = '', to = undefined, isActive = false, isDropdown = false, showDivider, target = undefined, component = 'a', render = undefined } = _a, props = __rest(_a, [\"children\", \"className\", \"to\", \"isActive\", \"isDropdown\", \"showDivider\", \"target\", \"component\", \"render\"]);\n    const Component = component;\n    const ariaCurrent = isActive ? 'page' : undefined;\n    const className = css(styles.breadcrumbLink, isActive && styles.modifiers.current);\n    return (React.createElement(\"li\", Object.assign({}, props, { className: css(styles.breadcrumbItem, classNameProp) }),\n        showDivider && (React.createElement(\"span\", { className: styles.breadcrumbItemDivider },\n            React.createElement(AngleRightIcon, null))),\n        component === 'button' && (React.createElement(\"button\", { className: className, \"aria-current\": ariaCurrent, type: \"button\" }, children)),\n        isDropdown && React.createElement(\"span\", { className: css(styles.breadcrumbDropdown) }, children),\n        render && render({ className, ariaCurrent }),\n        to && !render && (React.createElement(Component, { href: to, target: target, className: className, \"aria-current\": ariaCurrent }, children)),\n        !to && component !== 'button' && !isDropdown && children));\n};\nBreadcrumbItem.displayName = 'BreadcrumbItem';\n//# sourceMappingURL=BreadcrumbItem.js.map","import './breadcrumb.css';\nexport default {\n  \"breadcrumb\": \"pf-c-breadcrumb\",\n  \"breadcrumbDropdown\": \"pf-c-breadcrumb__dropdown\",\n  \"breadcrumbHeading\": \"pf-c-breadcrumb__heading\",\n  \"breadcrumbItem\": \"pf-c-breadcrumb__item\",\n  \"breadcrumbItemDivider\": \"pf-c-breadcrumb__item-divider\",\n  \"breadcrumbLink\": \"pf-c-breadcrumb__link\",\n  \"breadcrumbList\": \"pf-c-breadcrumb__list\",\n  \"dropdownToggle\": \"pf-c-dropdown__toggle\",\n  \"modifiers\": {\n    \"current\": \"pf-m-current\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Button, Modal } from '@patternfly/react-core';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { getInventory } from '../../api/devices';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst AddSystemsToGroupModal = ({\n  groupId,\n  closeModal,\n  isOpen,\n  reloadData,\n  groupName,\n}) => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [deviceIds, setDeviceIds] = useState([]);\n  const dispatch = useDispatch();\n\n  const handleAddDevicesToGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `An error occurred making the request`,\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () =>\n        addDevicesToGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(async () => await reloadData(), 500);\n    closeModal();\n  };\n\n  return (\n    <Modal\n      id=\"add-systems-modal\"\n      title=\"Add systems\"\n      position=\"top\"\n      isOpen={isOpen}\n      onClose={closeModal}\n      variant=\"large\"\n      actions={[\n        <Button\n          isDisabled={deviceIds.length === 0}\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={handleAddDevicesToGroup}\n        >\n          Add systems\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <DeviceTable\n        selectedItems={setDeviceIds}\n        skeletonRowQuantity={15}\n        hasCheckbox={true}\n        isLoading={isLoading}\n        hasError={hasError}\n        count={data?.count}\n        data={data?.data?.devices || []}\n        fetchDevices={fetchDevices}\n      />\n    </Modal>\n  );\n};\nAddSystemsToGroupModal.propTypes = {\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n  groupName: PropTypes.string,\n};\n\nexport default AddSystemsToGroupModal;\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Flex,\n  FlexItem,\n  Skeleton,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Empty from '../../components/Empty';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/groups';\nimport AddSystemsToGroupModal from '../Devices/AddSystemsToGroupModal';\nimport {\n  canUpdateSelectedDevices,\n  emptyStateNoFliters,\n  stateToUrlSearch,\n} from '../../utils';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\nimport RenameGroupModal from '../Groups/RenameGroupModal';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst GroupsDetail = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const history = useHistory();\n  const { groupId } = params;\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchDevices] = useApi({\n    api: getGroupById,\n    id: groupId,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  useEffect(() => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('add_system_modal=true', isAddModalOpen),\n    });\n  }, [isAddModalOpen]);\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove system' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} systems have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove systems' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const actionsLabel = 'Actions for group details view';\n  const dropdownId = 'group-details-dropdown';\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={`${paths['fleet-management']}`}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb>\n            <BreadcrumbItem isActive>\n              <Skeleton width=\"100px\" />\n            </BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id={dropdownId}\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                  aria-label={actionsLabel}\n                >\n                  <Tooltip\n                    content={actionsLabel}\n                    reference={() => document.getElementById(dropdownId)}\n                  />\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"rename-device-group\"\n                  onClick={() => handleRenameModal(groupId, groupName)}\n                >\n                  Rename group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.DevicesView?.devices?.map((device) => ({\n                      imageSetId: device?.ImageSetID,\n                    })),\n                    imageData: data?.DevicesView?.devices?.some(\n                      (device) => device.ImageID\n                    ),\n                  })}\n                  onClick={() => {\n                    setIsDropdownOpen(false);\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.DevicesView?.devices?.map((device) => ({\n                        id: device?.DeviceUUID,\n                        display_name:\n                          device?.DeviceName === ''\n                            ? 'localhost'\n                            : device?.DeviceName,\n                      })),\n                      imageSetId: data?.DevicesView?.devices.find(\n                        (device) => device.ImageSetID\n                      )?.ImageSetID,\n                    }));\n                  }}\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(\n          isLoading,\n          data?.DeviceGroup?.Devices.length,\n          history\n        ) ? (\n          <DeviceTable\n            data={data?.DevicesView?.devices || []}\n            count={data?.DevicesView?.total}\n            isLoading={isLoading}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: 'Remove from group',\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageSetId: deviceIds.find((device) => device?.imageSetId)\n                      .imageSetId,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchDevices={fetchDevices}\n            isAddSystemsView={true}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Add systems to the group\"\n              body=\"Create groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n      {isAddModalOpen && (\n        <AddSystemsToGroupModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchDevices}\n          groupName={data?.DeviceGroup?.Name}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          closeModal={() => setRemoveModal(false)}\n          title={'Remove from group'}\n          submitLabel={'Remove'}\n          variant=\"danger\"\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchDevices}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths['fleet-management'])}\n          modalState={modalState}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={() => fetchDevices()}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GroupsDetail;\n"],"names":["Breadcrumb","_a","children","className","ariaLabel","ouiaId","ouiaSafe","props","__rest","ouiaProps","displayName","Object","assign","child","index","showDivider","BreadcrumbItem","classNameProp","to","isActive","isDropdown","target","component","render","Component","ariaCurrent","undefined","type","href","description","name","schema","fields","componentTypes","label","validate","validatorTypes","WarningIcon","color","warningColor","DeleteGroupModal","isModalOpen","setIsModalOpen","reloadData","modalState","id","dispatch","useDispatch","isOpen","closeModal","title","titleIconVariant","variant","submitLabel","onSubmit","statusMessages","onSuccess","onError","apiWithToast","deleteGroupById","propTypes","PropTypes","asyncGroupNameValidation","value","validateGroupName","data","isValid","createGroupSchema","helperText","isRequired","threshold","nameValidator","RenameGroupModal","initialValues","values","updateGroupById","AddSystemsToGroupModal","groupId","groupName","useApi","api","getInventory","tableReload","response","fetchDevices","isLoading","hasError","useState","deviceIds","setDeviceIds","Modal","position","onClose","actions","Button","isDisabled","length","key","onClick","addDevicesToGroup","parseInt","map","device","ID","deviceID","setTimeout","DeviceTable","selectedItems","skeletonRowQuantity","hasCheckbox","count","devices","UpdateDeviceModal","React","params","useParams","history","useHistory","isDropdownOpen","setIsDropdownOpen","isAddModalOpen","setIsAddModalOpen","deviceId","removeModal","setRemoveModal","deviceData","imageData","updateModal","setUpdateModal","getGroupById","DeviceGroup","Name","getDeviceIds","hasModalSubmitted","setHasModalSubmitted","setModalState","isDeleteModalOpen","setIsDeleteModalOpen","isRenameModalOpen","setIsRenameModalOpen","useEffect","push","pathname","location","search","stateToUrlSearch","handleSingleDeviceRemoval","removeDeviceFromGroupById","actionsLabel","dropdownId","PageHeader","Link","paths","Skeleton","width","Flex","justifyContent","default","FlexItem","PageHeaderTitle","Dropdown","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","onToggle","newState","Tooltip","content","reference","document","getElementById","dropdownItems","DropdownItem","canUpdateSelectedDevices","DevicesView","imageSetId","ImageSetID","some","ImageID","prevState","DeviceUUID","display_name","DeviceName","find","Main","emptyStateNoFliters","Devices","Empty","icon","body","primaryAction","text","click","secondaryActions","link","total","kebabItems","updateImageData","isAddSystemsView","removeDevicesFromGroup","Suspense","fallback","Bullseye","Spinner","navigateBack","refreshTable"],"sourceRoot":""}