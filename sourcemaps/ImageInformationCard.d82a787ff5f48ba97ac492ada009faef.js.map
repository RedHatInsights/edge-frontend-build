{"version":3,"file":"js/ImageInformationCard.1670510785491.318f38bb2f27974a51fc.js","mappings":"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","sources":["webpack:///./src/components/ImageInformationCard.js"],"sourcesContent":["import React, { Suspense, useEffect, useState } from 'react';\nimport { getImageDataOnDevice } from '../api/images';\nimport { routes as paths } from '../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport CmpLoader from './CmpLoader';\n\nconst LoadingCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./LoadingCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = () => {\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n  const [isImageInfoLoading, setIsImageInfoLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [imageData, setImageData] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const data = await getImageDataOnDevice(deviceId);\n        setImageData(data);\n      } catch (err) {\n        setHasError(true);\n      }\n      setIsImageInfoLoading(false);\n    })();\n  }, []);\n\n  return (\n    <Suspense fallback=\"\">\n      <LoadingCard\n        title=\"Image information\"\n        isLoading={false}\n        items={[\n          {\n            title: 'Running image',\n            value: isImageInfoLoading ? (\n              <Skeleton size={SkeletonSize.sm} />\n            ) : imageData ? (\n              <Link\n                to={`${paths['manage-images']}/${imageData?.Image?.ImageSetID}/details`}\n              >\n                {imageData?.Image?.Name}\n              </Link>\n            ) : (\n              'unavailable'\n            ),\n          },\n          {\n            title: 'Running version',\n            value: isImageInfoLoading ? (\n              <Skeleton size={SkeletonSize.sm} />\n            ) : imageData ? (\n              <Link\n                to={`${paths['manage-images']}/${imageData?.Image?.ImageSetID}/versions/${imageData?.Image?.ID}/details`}\n              >\n                {imageData?.Image?.Version}\n              </Link>\n            ) : (\n              'unavailable'\n            ),\n          },\n          {\n            title: 'Target version',\n            value: isImageInfoLoading ? (\n              <Skeleton size={SkeletonSize.sm} />\n            ) : imageData?.UpdatesAvailable ? (\n              <Link\n                to={`${paths['manage-images']}/${imageData?.UpdatesAvailable[0]?.Image?.ImageSetID}/versions/${imageData?.UpdatesAvailable[0]?.Image?.ID}/details`}\n              >\n                {imageData?.UpdatesAvailable[0]?.Image?.Version}\n              </Link>\n            ) : hasError ? (\n              'unavailable'\n            ) : (\n              'Same as running'\n            ),\n          },\n          {\n            title: 'Rollback version',\n            value: isImageInfoLoading ? (\n              <Skeleton size={SkeletonSize.sm} />\n            ) : imageData?.RollbackImage?.ID ? (\n              <Link\n                to={`${paths['manage-images']}/${imageData?.RollbackImage?.ImageSetID}/versions/${imageData?.RollbackImage?.ID}/details`}\n              >\n                {imageData?.RollbackImage?.Version}\n              </Link>\n            ) : hasError ? (\n              'unavailable'\n            ) : (\n              'None'\n            ),\n          },\n        ]}\n      />\n    </Suspense>\n  );\n};\n\nexport default ImageInformationCard;\n"],"names":["LoadingCard","props","appName","module","fallback","numberOfRows","deviceId","useSelector","entityDetails","entity","id","useState","isImageInfoLoading","setIsImageInfoLoading","hasError","setHasError","imageData","setImageData","useEffect","getImageDataOnDevice","data","Suspense","title","isLoading","items","value","size","SkeletonSize","Link","to","paths","Image","ImageSetID","Name","ID","Version","UpdatesAvailable","RollbackImage"],"sourceRoot":""}