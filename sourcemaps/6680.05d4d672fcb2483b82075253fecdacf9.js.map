{"version":3,"file":"js/6680.eb18b23daf1c090612b5.js","mappings":"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","sources":["webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/constants/features.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { createLink, emptyStateNoFilters, useFeatureFlags } from '../../utils';\nimport DeviceStatus, { getDeviceStatus } from '../../components/Status';\nimport RetryUpdatePopover from './RetryUpdatePopover';\nimport {\n  FEATURE_HIDE_GROUP_ACTIONS,\n  FEATURE_PARITY_INVENTORY_GROUPS,\n  FEATURE_INVENTORY_WORKSPACES_RENAME,\n} from '../../constants/features';\n\nconst insightsInventoryManageEdgeUrlName = 'manage-edge-inventory';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      // { option: 'Booting', value: 'booting' },\n      // { option: 'Running', value: 'running' },\n      { option: 'Update available', value: 'updateAvailable' },\n      // { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst GetColumnNames = (\n  inventoryGroupsEnabled,\n  isDataAvailable,\n  useWorkspacesRename\n) => {\n  return [\n    {\n      title: 'Name',\n      type: 'name',\n      sort: isDataAvailable,\n      columnTransforms: [cellWidth(25)],\n    },\n    {\n      title: 'Image',\n      type: 'image',\n      sort: false,\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: inventoryGroupsEnabled\n        ? useWorkspacesRename\n          ? 'Workspace'\n          : 'Group'\n        : 'Groups',\n      type: 'groups',\n      sort: false,\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: 'Last seen',\n      type: 'last_seen',\n      sort: isDataAvailable,\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: 'Status',\n      type: 'status',\n      sort: false,\n      columnTransforms: [cellWidth(25)],\n    },\n  ];\n};\n\nconst createRows = (\n  devices,\n  hasLinks,\n  fetchDevices,\n  deviceBaseUrl,\n  history,\n  navigate,\n  inventoryGroupsEnabled,\n  useWorkspacesRename\n) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n      DispatcherStatus,\n      GroupName,\n      GroupUUID,\n    } = device;\n    const deviceStatus = getDeviceStatus(\n      Status,\n      UpdateAvailable,\n      DispatcherStatus\n    );\n\n    // const currentInventoryPath = history ? '/edge' : paths.inventory;\n\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (inventoryGroupsEnabled) {\n      if (GroupName && GroupUUID) {\n        DeviceGroups = [{ ID: GroupUUID, Name: GroupName }];\n      } else {\n        DeviceGroups = [];\n      }\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n    const pathToDevice =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.inventory}/${DeviceUUID}`\n        : `insights/inventory/${DeviceUUID}`;\n    const pathToImage =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.manageImages}/${ImageSetID}`\n        : `insights/image-builder/manage-edge-images/${ImageSetID}`;\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(\n          Status,\n          UpdateAvailable,\n          DispatcherStatus\n        ),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: hasLinks\n            ? createLink({\n                pathname: pathToDevice,\n                linkText: DeviceName,\n                navigate,\n              })\n            : DeviceName,\n        },\n        {\n          title: ImageName\n            ? hasLinks\n              ? createLink({\n                  pathname: pathToImage,\n                  linkText: ImageName,\n                  navigate,\n                })\n              : ImageName\n            : 'unavailable',\n        },\n        {\n          title:\n            DeviceGroups.length === 0 ? (\n              <div className=\"pf-v5-u-disabled-color-200\">\n                No{' '}\n                {inventoryGroupsEnabled && useWorkspacesRename\n                  ? 'workspace'\n                  : 'group'}\n              </div>\n            ) : DeviceGroups.length === 1 ? (\n              DeviceGroups[0].Name\n            ) : (\n              deviceGroupTooltip\n            ),\n        },\n        {\n          title: LastSeen ? <DateFormat date={LastSeen} /> : 'Unknown',\n        },\n        {\n          title:\n            deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n              <RetryUpdatePopover\n                lastSeen={LastSeen}\n                fetchDevices={fetchDevices}\n                device={device}\n              >\n                <DeviceStatus\n                  type={\n                    deviceStatus === 'error'\n                      ? 'errorWithExclamationCircle'\n                      : deviceStatus\n                  }\n                  isLink={true}\n                />\n              </RetryUpdatePopover>\n            ) : (\n              <DeviceStatus\n                type={\n                  deviceStatus === 'error'\n                    ? 'errorWithExclamationCircle'\n                    : deviceStatus\n                }\n              />\n            ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  navigateProp,\n  historyProp,\n  locationProp,\n  hasCheckbox = false,\n  selectedItems,\n  selectedItemsUpdateable,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  handleEditNameSystem,\n  handleDeleteSystem,\n  handleUpdateSelected,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n  isSystemsView = false,\n  isAddSystemsView = false,\n  urlName,\n  enforceEdgeGroups,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const canBeUpdated = isSystemsView;\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const { pathname, search } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n\n  const useInventorGroups = useFeatureFlags(FEATURE_PARITY_INVENTORY_GROUPS);\n  const inventoryGroupsEnabled = !enforceEdgeGroups && useInventorGroups;\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  // Create base URL path for system detail link\n  const deviceBaseUrl = navigateProp\n    ? 'federated'\n    : pathname === paths.inventory\n    ? pathname\n    : pathname === '/'\n    ? ''\n    : `${pathname}/systems`;\n\n  const hideGroupsActions = useFeatureFlags(FEATURE_HIDE_GROUP_ACTIONS);\n\n  const actionResolver = (rowData) => {\n    const getUpdatePathname = (updateRowData) =>\n      navigateProp\n        ? `/insights/inventory/${updateRowData.rowInfo.id}/update`\n        : `/inventory/${updateRowData.rowInfo.id}/update`;\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup && !hideGroupsActions) {\n      actions.push({\n        title: `Add to ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        isDisabled: inventoryGroupsEnabled\n          ? rowData?.rowInfo?.deviceGroups.length !== 0 // disable the action item if the system has a group assigned\n          : false,\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleEditNameSystem) {\n      actions.push({\n        title: 'Edit',\n        onClick: () =>\n          handleEditNameSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleDeleteSystem) {\n      actions.push({\n        title: 'Delete',\n        onClick: () =>\n          handleDeleteSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                display_name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup && !hideGroupsActions) {\n      actions.push({\n        title: `Remove from ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData) && handleUpdateSelected) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          if (navigateProp) {\n            const pathProp = getUpdatePathname(rowData);\n            navigate(pathProp, { replace: true });\n          } else {\n            history.push({\n              pathname: getUpdatePathname(rowData),\n              // pathname: `${deviceBaseUrl}/${rowData.rowInfo.id}/update`,\n            });\n          }\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: `Remove from ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    !rowData.rowInfo?.UpdateAvailable &&\n    (rowData.rowInfo?.deviceStatus === 'updating' ||\n      rowData.rowInfo?.deviceStatus === 'upToDate');\n\n  // some filters and columns titles/labels have different values when shown in insights inventory\n  let tableFilters = [];\n  let tableColumnNames = [];\n  const isDataAvailable = data ? data.length > 0 : false;\n  const columnNames = GetColumnNames(\n    inventoryGroupsEnabled,\n    isDataAvailable,\n    useWorkspacesRename\n  );\n\n  if (urlName === insightsInventoryManageEdgeUrlName) {\n    for (let ind = 0; ind < defaultFilters.length; ind++) {\n      let filterElement = defaultFilters[ind];\n      if (filterElement['label'] === 'Status') {\n        filterElement['label'] = 'Image status';\n      }\n      tableFilters.push(filterElement);\n    }\n    for (let ind = 0; ind < columnNames.length; ind++) {\n      let columnElement = columnNames[ind];\n      if (columnElement['title'] === 'Status') {\n        columnElement['title'] = 'Image status';\n      }\n      tableColumnNames.push(columnElement);\n    }\n  } else {\n    tableFilters = defaultFilters;\n    tableColumnNames = columnNames;\n  }\n\n  return (\n    <div className=\"edge\">\n      <>\n        {isSystemsView &&\n        emptyStateNoFilters(isLoading, count, search) &&\n        !historyProp ? (\n          <CustomEmptyState\n            data-testid=\"general-table-empty-state-no-data\"\n            icon={'plus'}\n            title={'Connect edge systems'}\n            body={\n              'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n            }\n            secondaryActions={[\n              {\n                title:\n                  'Create RHEL for Edge images and configure automated management',\n                link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n                type: 'link',\n              },\n            ]}\n          />\n        ) : (\n          <GeneralTable\n            historyProp={historyProp}\n            navigateProp={navigateProp}\n            locationProp={locationProp}\n            apiFilterSort={true}\n            isUseApi={true}\n            filters={tableFilters}\n            filtersName={'edge-devices-table-filters'}\n            loadTableData={fetchDevices}\n            tableData={{\n              count: count,\n              isLoading: isLoading,\n              hasError: hasError,\n            }}\n            columnNames={tableColumnNames}\n            rows={createRows(\n              data || [],\n              isAddSystemsView || isSystemsView,\n              fetchDevices,\n              deviceBaseUrl,\n              history,\n              navigate,\n              inventoryGroupsEnabled,\n              useWorkspacesRename\n            )}\n            actionResolver={actionResolver}\n            defaultSort={{ index: 3, direction: 'desc' }}\n            toolbarButtons={\n              (canBeAdded\n                ? [\n                    {\n                      title: 'Add systems',\n                      click: () => setIsAddModalOpen(true),\n                    },\n                  ]\n                : [],\n              canBeUpdated\n                ? [\n                    {\n                      isDisabled: !selectedItemsUpdateable,\n                      title: 'Update',\n                      id: 'toolbar-update-button',\n                      click: () => handleUpdateSelected(),\n                    },\n                  ]\n                : [])\n            }\n            hasCheckbox={hasCheckbox}\n            selectedItems={selectedItems}\n            skeletonRowQuantity={skeletonRowQuantity}\n            kebabItems={kebabItems}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n          />\n        )}\n      </>\n    </div>\n  );\n};\n\nDeviceTable.propTypes = {\n  navigateProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.func,\n  selectedItemsUpdateable: PropTypes.bool,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  handleEditNameSystem: PropTypes.func,\n  handleDeleteSystem: PropTypes.func,\n  handleUpdateSelected: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isSystemsView: PropTypes.bool,\n  isAddSystemsView: PropTypes.bool,\n  urlName: PropTypes.string,\n  groupUUID: PropTypes.string,\n  enforceEdgeGroups: PropTypes.bool,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","export const FEATURE_PARITY_INVENTORY_GROUPS =\n  'edgeParity.inventory-groups-enabled';\n\nexport const FEATURE_HIDE_GROUP_ACTIONS = 'edge-management.hide_groups_actions';\n\nexport const FEATURE_INVENTORY_WORKSPACES_RENAME =\n  'platform.rbac.groups-to-workspaces-rename';\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["defaultFilters","label","type","options","option","value","createRows","devices","hasLinks","fetchDevices","deviceBaseUrl","history","navigate","inventoryGroupsEnabled","useWorkspacesRename","map","device","DeviceName","DeviceGroups","DeviceID","DeviceUUID","UpdateAvailable","LastSeen","ImageName","ImageSetID","Status","DispatcherStatus","GroupName","GroupUUID","deviceStatus","getDeviceStatus","ID","Name","deviceGroupTooltip","React","Tooltip","content","group","index","key","pathToDevice","concat","paths","inventory","pathToImage","manageImages","rowInfo","deviceID","id","display_name","updateImageData","imageSetId","imageName","deviceGroups","noApiSortFilter","cells","title","createLink","pathname","linkText","length","className","DateFormat","date","RetryUpdatePopover","lastSeen","DeviceStatus","isLink","DeviceTable","_ref","navigateProp","historyProp","locationProp","_ref$hasCheckbox","hasCheckbox","selectedItems","selectedItemsUpdateable","skeletonRowQuantity","data","count","isLoading","hasError","kebabItems","setRemoveModal","handleAddDevicesToGroup","setIsAddModalOpen","handleRemoveDevicesFromGroup","handleEditNameSystem","handleDeleteSystem","handleUpdateSelected","hasModalSubmitted","setHasModalSubmitted","_ref$isSystemsView","isSystemsView","_ref$isAddSystemsView","isAddSystemsView","urlName","enforceEdgeGroups","canBeRemoved","canBeUpdated","useHistory","useNavigate","_ref2","useLocation","search","useInventorGroups","useFeatureFlags","FEATURE_PARITY_INVENTORY_GROUPS","FEATURE_INVENTORY_WORKSPACES_RENAME","hideGroupsActions","FEATURE_HIDE_GROUP_ACTIONS","tableFilters","tableColumnNames","isDataAvailable","columnNames","sort","columnTransforms","cellWidth","GetColumnNames","ind","filterElement","push","columnElement","emptyStateNoFilters","CustomEmptyState","icon","body","secondaryActions","link","GeneralTable","apiFilterSort","isUseApi","filters","filtersName","loadTableData","tableData","rows","actionResolver","rowData","_rowData$rowInfo","_rowData$rowInfo2","_rowData$rowInfo3","getUpdatePathname","updateRowData","actions","isDisabled","onClick","name","UUID","_rowData$rowInfo4","_rowData$rowInfo5","_rowData$rowInfo6","areActionsDisabled","_event","_rowId","pathProp","replace","isOpen","deviceId","defaultSort","direction","toolbarButtons","click","propTypes","PropTypes","imageData","urlParam","openUpdateWizard","temp","setIsModalOpen","reload","setReload","handleSingleDeviceRemoval","groupUUID","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","status","Stack","StackItem","position","children","_useState","useState","_useState2","_slicedToArray","isVisible","setIsVisible","dispatch","useDispatch","statusMessages","onSuccess","variant","description","DescriptionListGroup","DescriptionListTermHelpText","Popover","shouldOpen","shouldClose","alertseverityvariant","headerContent","style","color","ExclamationCircleIcon","size","DispatcherReason","headerComponent","bodyContent","footerContent","Button","isInline","apiWithToast","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","updateSystem","DevicesUUID","stop","DescriptionListDescription","defaultProps","statusMapper","booting","text","Icon","iconMapper","checkCircle","colorMapper","green","labelColor","building","inProgress","blue","created","upToDate","success","passed","updateAvailable","exclamationTriangle","yellow","updating","error","timesCircle","red","default","unknown","interrupted","unresponsive","exclamationCircle","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","_ref$isLabel","isLabel","_ref$toolTipContent","toolTipContent","_ref$className","Object","prototype","hasOwnProperty","call","Label","Split","SplitItem","textDecoration","cursor","api","notificationProp","_statusMessages","_statusMessages2","_statusMessages3","hasSuccess","hasInfo","onInfo","hasWarning","onWarning","onError","fetchData","response","sent","_objectSpread","addNotification","abrupt","t0","err","Title","apply","arguments"],"sourceRoot":""}