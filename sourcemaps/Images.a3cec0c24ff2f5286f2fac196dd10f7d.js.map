{"version":3,"file":"js/Images.47380c722f357e3fdb50.js","mappings":"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","sources":["webpack:///./src/api/images/index.js"],"sourcesContent":["import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  RHSM_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchActivationKeys = ({ limit = 10, offset = 0 } = {}) => {\n  return instance.get(\n    `${RHSM_API}/activation_keys?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n  activationKey,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n    activationKey: activationKey,\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n"],"names":["checkImageName","name","payload","instance","post","concat","EDGE_API","fetchActivationKeys","_ref3","arguments","length","undefined","_ref3$limit","limit","_ref3$offset","offset","get","RHSM_API","createImage","_ref4","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","activationKey","_ref5","_slicedToArray","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","id","Name","URL","uuid","endpoint","getImageSet","_ref7","_ref7$q","q","sort_by","query","getTableParams","getImageSetViewVersions","_ref8","imageSetID","_ref8$query","getImageSetView","_ref9","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","_ref10","_asyncToGenerator","_regeneratorRuntime","_callee","search","params","_context","prev","next","URLSearchParams","abrupt","IMAGE_BUILDER_API","toString","stop","_x","_x2","_x3","apply","getImageById","_ref11","getImageSets","_ref12","postRpmsNames","urls","CONTENT_SOURCES_API"],"sourceRoot":""}