{"version":3,"file":"js/7080.5872d87cf19410909762.js","mappings":"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","sources":["webpack:///./src/components/SearchInputApi.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  HelperText,\n  HelperTextItem,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useApi from '../hooks/useApi';\nimport { getGroups } from '../api/groups';\nimport { debounce } from 'lodash';\n\nconst SelectInput = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [{ data, isLoading }, fetchGroups] = useApi({ api: getGroups });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  const updateSelection = (value) => {\n    // Update state when an option has been selected.\n    setSelected(value);\n    setIsOpen(false);\n    change('group', value);\n  };\n\n  const onSelect = (_event, selection) => {\n    if (_event) updateSelection(selection);\n  };\n\n  const clearSelection = () => {\n    setSearchTerm('');\n    fetchGroups();\n    updateSelection(null);\n  };\n\n  const onFilter = (_event, value) => {\n    /* This handler is called on input changes as well as when children change.\n       _event is null when the children change. Only update searchTerm state\n       and fetch results from the API only if there was an actual input change.\n    */\n    if (_event && value != searchTerm) {\n      setSearchTerm(value);\n      fetchGroups({ name: encodeURIComponent(value) });\n    }\n  };\n\n  const options = data?.data || [];\n  const totalCount = data?.count || 0;\n\n  return (\n    <>\n      <HelperText>\n        {!isLoading && !selected && isOpen && totalCount > options.length ? (\n          <HelperTextItem variant=\"warning\" className=\"pf-u-font-weight-bold\">\n            Over {options.length} results found. Refine your search.\n          </HelperTextItem>\n        ) : (\n          <HelperTextItem className=\"pf-u-font-weight-bold\">\n            Select a group\n          </HelperTextItem>\n        )}\n      </HelperText>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a group\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected ? selected : searchTerm}\n        isOpen={isOpen}\n        onFilter={debounce(onFilter, 300)}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click to select a group\"\n        noResultsFoundText={isLoading ? 'Loading...' : 'No results found'}\n        isInputValuePersisted={true}\n        maxHeight={'180px'}\n      >\n        {isLoading\n          ? []\n          : options?.map(({ DeviceGroup }) => (\n              <SelectOption\n                key={DeviceGroup.ID}\n                value={{\n                  toString: () => DeviceGroup.Name,\n                  groupId: DeviceGroup.ID,\n                }}\n                {...(DeviceGroup.description && {\n                  description: DeviceGroup.description,\n                })}\n              />\n            ))}\n      </Select>\n    </>\n  );\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInputApi from '../../components/SearchInputApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Button, Text } from '@patternfly/react-core';\n\nconst CreateGroupButton = ({ closeModal }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={closeModal}>\n      Create Group\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  closeModal: PropTypes.func,\n};\n\nconst createDescription = (deviceIds) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a group to add <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds),\n    },\n    {\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(group.groupId), deviceIds),\n      statusMessages\n    );\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Add to group\"\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInputApi,\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          closeModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n        },\n      }}\n      schema={createSchema(deviceIds)}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInputApi = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    change('group', null);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {props.defaultOptions.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </>\n  );\n};\n\nSelectInputApi.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInputApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { removeDeviceFromGroupById } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceInfo[0].name} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to remove system from group',\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, deviceInfo[0].ID),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api/devices';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"UpdateDeviceModal\" */ './UpdateDeviceModal')\n);\n\nconst Inventory = ({ historyProp, locationProp, showHeaderProp }) => {\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const showHeader = showHeaderProp === undefined ? true : showHeaderProp;\n  const { data, isLoading, hasError } = response;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const canBeUpdated = () => {\n    let canBeUpdated = false;\n    if (checkedDeviceIds.length > 0) {\n      let initialImage = checkedDeviceIds[0].imageSetId;\n      for (let device of checkedDeviceIds) {\n        if (device.imageSetId !== initialImage) {\n          canBeUpdated = false;\n          break;\n        }\n        if (\n          (!canBeUpdated &&\n            device.updateImageData &&\n            device.deviceStatus === 'updateAvailable') ||\n          device.deviceStatus === 'unresponsive' ||\n          device.deviceStatus === 'error'\n        ) {\n          canBeUpdated = true;\n        }\n      }\n    }\n    return canBeUpdated;\n  };\n\n  const handleUpdateSelected = () => {\n    setUpdateModal((prevState) => ({\n      ...prevState,\n      deviceData: checkedDeviceIds.map((device) => ({\n        id: device.id,\n        display_name: device.display_name,\n        deviceStatus: device.deviceStatus,\n      })),\n      imageData: { imageName: checkedDeviceIds[0].imageName },\n      imageSetId: checkedDeviceIds[0].imageSetId,\n      isOpen: true,\n    }));\n  };\n\n  const reloadData = async () => {\n    await fetchDevices();\n    setHasModalSubmitted(true);\n  };\n  let classNameMain = '';\n  if (showHeaderProp !== undefined && showHeader) {\n    classNameMain =\n      'edge-devices pf-l-page__main-section pf-c-page__main-section';\n  }\n\n  return (\n    <>\n      {showHeader && (\n        <PageHeader className=\"pf-m-light\">\n          <PageHeaderTitle title=\"Systems\" />\n        </PageHeader>\n      )}\n      {showHeader}\n      <section className={classNameMain}>\n        <DeviceTable\n          historyProp={historyProp}\n          locationProp={locationProp}\n          isSystemsView={true}\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          updateModal={updateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          handleUpdateSelected={handleUpdateSelected}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          selectedItemsUpdateable={canBeUpdated()}\n          kebabItems={[\n            {\n              isDisabled: !(checkedDeviceIds.length > 0),\n              title: 'Add to group',\n              onClick: () =>\n                handleAddDevicesToGroup(\n                  checkedDeviceIds.map((device) => ({\n                    ID: device.deviceID,\n                    name: device.display_name,\n                  })),\n                  false\n                ),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n        />\n      </section>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                console.log('Click modal');\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={reloadData}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={reloadData}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n    </>\n  );\n};\n\nInventory.propTypes = {\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  showHeaderProp: PropTypes.bool,\n};\n\nexport default Inventory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  addDevicesToGroup,\n  validateGroupName,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={validatorMapper}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n"],"names":["props","useFieldApi","change","useFormApi","useState","isOpen","setIsOpen","selected","setSelected","useApi","api","getGroups","data","isLoading","fetchGroups","searchTerm","setSearchTerm","updateSelection","value","options","totalCount","count","HelperText","length","HelperTextItem","variant","className","Select","typeAheadAriaLabel","onToggle","onSelect","_event","selection","onClear","selections","onFilter","name","encodeURIComponent","placeholderText","noResultsFoundText","isInputValuePersisted","maxHeight","map","DeviceGroup","SelectOption","key","ID","toString","Name","groupId","description","CreateGroupButton","closeModal","Text","Button","onClick","propTypes","PropTypes","createDescription","deviceIds","systemText","createSchema","fields","component","componentTypes","label","isRequired","validate","type","validatorTypes","AddDeviceModal","isModalOpen","setIsModalOpen","setIsCreateGroupModalOpen","reloadData","dispatch","useDispatch","Modal","title","submitLabel","additionalMappers","SearchInputApi","schema","onSubmit","values","group","statusMessages","onSuccess","onError","apiWithToast","addDevicesToGroup","parseInt","SelectInputApi","clearSelection","isPlaceholder","defaultOptions","index","removeDescription","deviceInfo","deviceGroups","groupText","WarningIcon","color","warningColor","push","RemoveDeviceModal","titleIconVariant","SearchInput","hasManyGroups","groupName","removeDeviceFromGroupById","UpdateDeviceModal","React","Inventory","historyProp","locationProp","showHeaderProp","history","useHistory","pathname","useLocation","getInventory","tableReload","response","fetchDevices","showHeader","undefined","hasError","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","deviceId","setDeviceId","checkedDeviceIds","setCheckedDeviceIds","isRowSelected","setIsRowSelected","hasModalSubmitted","setHasModalSubmitted","isCreateGroupModalOpen","deviceData","imageData","updateModal","setUpdateModal","handleAddDevicesToGroup","ids","isRow","classNameMain","PageHeader","PageHeaderTitle","DeviceTable","isSystemsView","devices","handleRemoveDevicesFromGroup","handleUpdateSelected","prevState","device","id","display_name","deviceStatus","imageName","imageSetId","hasCheckbox","selectedItems","selectedItemsUpdateable","canBeUpdated","initialImage","updateImageData","kebabItems","isDisabled","deviceID","Suspense","fallback","Bullseye","Spinner","navigateBack","console","log","refreshTable","CreateGroupModal","asyncGroupNameValidation","validateGroupName","isValid","validatorMapper","createGroupSchema","helperText","autoFocus","threshold","nameValidator","handleCreateGroup","createGroup","handleAddDevicesToNewGroup","payload","instance","EDGE_API","Type","query","q","getTableParams","getGroupById","updateGroupById","deleteGroupById","Devices","removeDevicesFromGroup","RepoModal","initialValues","size","onClose","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","onCancel","setData","setIsLoading","setHasError","hasSuccess","fetchData","addNotification","useEffect"],"sourceRoot":""}