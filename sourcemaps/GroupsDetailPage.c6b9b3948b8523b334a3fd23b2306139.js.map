{"version":3,"file":"js/GroupsDetailPage.d614f915b295c1d6b810.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/DeviceStatus.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  imageTypeMapper,\n  releaseMapper,\n} from '../ImageManagerDetail/constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail, loadEdgeImageSets } from '../../store/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Update image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Create image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      //onSubmit={handleUpdateModal}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Create Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\n\nconst getActiveAlert = (CVEs, systemProfile, prevState) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !systemProfile?.system_profile) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0) {\n    return 'noAlert';\n  }\n  if (\n    systemProfile?.system_profile?.status === 'BUILDING' ||\n    systemProfile?.system_profile?.status === 'CREADTED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (\n    systemProfile?.system_profile?.image_data?.ImageInfo?.UpdatesAvailable\n      ?.length > 0\n  ) {\n    return 'updateDevice';\n  }\n  if (\n    systemProfile?.system_profile?.image_data?.UpdateTransactions?.[\n      systemProfile?.system_profile?.image_data?.UpdateTransactions?.length - 1\n    ] === 'BUILDING'\n  ) {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  systemProfile,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { params } = useRouteMatch('/fleet-management/:inventoryId');\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, systemProfile, prevState)\n    );\n  }, [CVEs, systemProfile]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your device.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update device to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update Device\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Device updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <Main>\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: params.inventoryId }}\n          canSelect={false}\n          canEditStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </Main>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.string,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n          <VulnerabilityTab\n            systemProfile={systemProfile}\n            setUpdateModal={setUpdateModal}\n            imageId={imageId}\n            setReload={setReload}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.string,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { getDeviceHasUpdate } from '../../api/index';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: {\n          display_name: entity.display_name,\n          id: entity.id,\n          system_profile: {\n            image_data,\n            status:\n              image_data?.UpdateTransactions?.[\n                image_data.UpdateTransactions.length - 1\n              ]?.Status,\n          },\n        },\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/fleet-management'}>\n                {uuid ? 'Groups' : 'Fleet management'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n                    ?.UpdatesAvailable?.length > 0,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : updateModal?.deviceData?.system_profile?.status === 'BUILDING' ||\n            updateModal?.deviceData?.system_profile?.status === 'CREATED' ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"blue\"\n              icon={<InProgressIcon />}\n            >\n              Updating\n            </Label>\n          ) : updateModal?.deviceData?.system_profile?.image_data?.ImageInfo\n              ?.UpdatesAvailable?.length > 0 ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"orange\"\n              icon={<ExclamationTriangleIcon />}\n            >\n              Update Available\n            </Label>\n          ) : (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"green\"\n              icon={<CheckCircleIcon color=\"green\" />}\n            >\n              Running\n            </Label>\n          )}\n        </PageHeader>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <DeviceDetailTabs\n              systemProfile={updateModal?.deviceData}\n              imageId={imageId}\n              setUpdateModal={setUpdateModal}\n              setReload={setReload}\n            />\n          </GridItem>\n        </Grid>\n        {updateModal.isOpen && (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <UpdateDeviceModal\n              navigateBack={() => {\n                history.push({ pathname: history.location.pathname });\n                setUpdateModal((prevState) => {\n                  return {\n                    ...prevState,\n                    isOpen: false,\n                  };\n                });\n              }}\n              setUpdateModal={setUpdateModal}\n              updateModal={updateModal}\n              refreshTable={() => setReload(true)}\n            />\n          </Suspense>\n        )}\n      </DetailWrapper>\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary</CardTitle>\n    <CardBody>\n      <Grid>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {active}\n              </Button>{' '}\n              Active\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {orphaned}\n              </Button>{' '}\n              Orphaned\n            </StackItem>\n          </Stack>\n        </GridItem>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {noReports}\n              </Button>\n              Stale\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {neverReported}\n              </Button>\n              Registered but never reported\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_active_color_300';\nimport PropTypes from 'prop-types';\n\nconst DeviceStatus = ({ imageData, rpm_ostree_deployments }) => {\n  const { UpdateTransactions, ImageInfo } = imageData || {};\n  if (rpm_ostree_deployments?.length === undefined) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <QuestionCircleIcon color=\"grey\" />\n        </SplitItem>\n        <SplitItem>Unspecified</SplitItem>\n      </Split>\n    );\n  }\n  const current_deployment = rpm_ostree_deployments[0];\n  if (!current_deployment.booted) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color=\"blue\" />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    );\n  }\n\n  if (\n    UpdateTransactions?.[UpdateTransactions.length - 1]?.Status ===\n      'BUILDING' ||\n    UpdateTransactions?.[UpdateTransactions.length - 1]?.Status === 'CREATED'\n  ) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color={infoColor.value} />\n        </SplitItem>\n        <SplitItem>Updating</SplitItem>\n      </Split>\n    );\n  }\n\n  if (ImageInfo?.UpdatesAvailable?.length > 0) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon color={warningColor.value} />\n        </SplitItem>\n        <SplitItem className=\"pf-u-warning-color-200\">\n          Update Available\n        </SplitItem>\n      </Split>\n    );\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">\n        <CheckCircleIcon color=\"green\" />\n      </SplitItem>\n      <SplitItem>Running</SplitItem>\n    </Split>\n  );\n};\n\nDeviceStatus.propTypes = {\n  id: PropTypes.string,\n  updateTransactions: PropTypes.array,\n  rpm_ostree_deployments: PropTypes.array,\n  imageData: PropTypes.object,\n};\n\nexport default DeviceStatus;\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  //onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport DeviceStatus from './DeviceStatus';\nimport { getDeviceHasUpdate } from '../../api';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [activeFilters] = useState(defaultFilters);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('update_device') === 'true') {\n      setUpdateModal((prevState) => {\n        return {\n          ...prevState,\n          isOpen: true,\n        };\n      });\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n            variant: 'compact',\n            actionResolver: (rowData) => {\n              return rowData?.system_profile?.image_data\n                ? [\n                    {\n                      title: 'Update',\n                      onClick: (_event, _index, rowData) => {\n                        setUpdateModal((prevState) => {\n                          return {\n                            ...prevState,\n                            isOpen: true,\n                            deviceData: rowData,\n                          };\n                        });\n                      },\n                    },\n                  ]\n                : rowData?.system_profile\n                ? [\n                    {\n                      title: 'No Action',\n                    },\n                  ]\n                : null;\n            },\n            areActionsDisabled: (rowData) => {\n              const updateTransactions =\n                rowData?.system_profile?.image_data?.UpdateTransactions || [];\n\n              return (\n                updateTransactions[updateTransactions.length - 1]?.Status ===\n                  'BUILDING' ||\n                updateTransactions[updateTransactions.length - 1]?.Status ===\n                  'CREATED' ||\n                !rowData?.system_profile?.image_data?.ImageInfo\n                  ?.UpdatesAvailable?.length > 0\n              );\n            },\n          }}\n          columns={(defaultColumns) => {\n            const newColumns = defaultColumns.filter((column) =>\n              ['display_name', 'updated'].includes(column.key)\n            );\n            newColumns.filter((col) => col.key === 'updated')[0].props = {\n              width: 20,\n            };\n\n            return [\n              ...newColumns,\n              {\n                key: 'system_profile',\n                title: 'Device status',\n                // eslint-disable-next-line react/display-name\n                renderFunc: (sysProf) => (\n                  <DeviceStatus\n                    rpm_ostree_deployments={sysProf.rpm_ostree_deployments}\n                    imageData={sysProf.image_data}\n                  />\n                ),\n                props: { width: 20, isStatic: true },\n              },\n            ];\n          }}\n          getEntities={async (\n            _items,\n            config,\n            _showTags,\n            defaultGetEntities\n          ) => {\n            const defaultData = await defaultGetEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                  'operating_system',\n                  'greenboot_status',\n                  'greenboot_fallback_detected',\n                  'rpm_ostree_deployments',\n                ],\n              },\n            });\n\n            const promises = defaultData.results.map(async (device) => {\n              const getImageInfo = await getDeviceHasUpdate(device.id);\n              const imageInfo =\n                !getImageInfo || getImageInfo === 404\n                  ? { data: null }\n                  : getImageInfo;\n              return {\n                ...device,\n                system_profile: {\n                  ...device.system_profile,\n                  image_data: Object.prototype.hasOwnProperty.call(\n                    imageInfo,\n                    'data'\n                  )\n                    ? null\n                    : imageInfo,\n                },\n              };\n            });\n            const rows = await Promise.all(promises);\n            return { ...defaultData, results: rows };\n          }}\n          hideFilters={{ registeredWith: true }}\n          // NOTE: add back in when device status is sent with inventory data\n          //filterConfig={{\n          //  items: [\n          //    {\n          //      label: activeFilters?.deviceStatus?.label,\n          //      type: 'checkbox',\n          //      filterValues: {\n          //        onChange: (event, value) => {\n          //          setActiveFilters(() => ({\n          //            ...(activeFilters || {}),\n          //            deviceStatus: {\n          //              ...(activeFilters?.deviceStatus || {}),\n          //              value,\n          //            },\n          //          }));\n          //          inventory.current.onRefreshData();\n          //        },\n          //        items: deviceStatusMapper,\n          //        value: activeFilters?.deviceStatus?.value || [],\n          //      },\n          //    },\n          //  ],\n          //}}\n          hasCheckbox={false}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            // NOTE: Adding custom onDelete function overrides default inventory deletion behavior\n            //onDelete: (event, itemsToRemove, isAll) => {\n            //  if (isAll) {\n            //    setActiveFilters(defaultFilters);\n            //  } else {\n            //    setActiveFilters(() =>\n            //      onDeleteFilter(activeFilters, itemsToRemove)\n            //    );\n            //  }\n            //  inventory.current.onRefreshData();\n            //},\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities }) => {\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={inventory.current.onRefreshData}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImageSets } from '../../store/actions';\nimport { cellWidth } from '@patternfly/react-table';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Current Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last Updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(30)],\n  },\n];\n\nconst createRows = (data) => {\n  return data.map(({ image_set, image_build_iso_url }, index) => ({\n    id: image_set?.ID,\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Images[0].Version, // remove when image_set.Version is accurate\n      {\n        title: <DateFormat date={image_set?.UpdatedAt} />,\n      },\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <StatusLabel status={image_set?.Images[0].Status} />\n          </>\n        ),\n      },\n    ],\n    imageStatus: image_set?.Images[0].Status,\n    isoURL: image_build_iso_url || null,\n    latestImageID: image_set?.Images[0].ID,\n  }));\n};\n\nconst ImageTable = ({ openCreateWizard, openUpdateWizard }) => {\n  const { count, data, isLoading, hasError } = useSelector(\n    ({ edgeImageSetsReducer }) => ({\n      count: edgeImageSetsReducer?.data?.Count || 0,\n      data: edgeImageSetsReducer?.data?.Data || null,\n      isLoading:\n        edgeImageSetsReducer?.isLoading === undefined\n          ? true\n          : edgeImageSetsReducer.isLoading,\n      hasError: edgeImageSetsReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData?.imageStatus === 'SUCCESS' ||\n      rowData?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.latestImageID);\n        },\n      });\n    }\n\n    if (rowData?.imageStatus === 'BUILDING' && rowData?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) => rowData?.imageStatus === 'BUILDING';\n\n  return (\n    <GeneralTable\n      apiFilterSort={true}\n      filters={defaultFilters}\n      loadTableData={loadEdgeImageSets}\n      tableData={{ count, data, isLoading, hasError }}\n      columnNames={columnNames}\n      rows={data ? createRows(data) : []}\n      emptyStateMessage=\"No images found\"\n      emptyStateActionMessage=\"Create new image\"\n      emptyStateAction={openCreateWizard}\n      actionResolver={actionResolver}\n      areActionsDisabled={areActionsDisabled}\n      defaultSort={{ index: 2, direction: 'desc' }}\n      toolbarButtons={[\n        {\n          title: 'Create new image',\n          click: () => openCreateWizard(),\n        },\n      ]}\n    />\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  openUpdateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageTable;\n","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport { edgeImageSetsReducer } from '../../store/reducers';\nimport ImageSetsTable from './ImageSetsTable';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        create_image: true,\n      }).toString(),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImageSetsReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","data","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","key","onClick","payload","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","addNotification","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","setUpdateModal","params","useRouteMatch","useState","CVEs","setCVEs","activeAlert","setActiveAlert","isLoading","filter","length","system_profile","image_data","ImageInfo","UpdatesAvailable","UpdateTransactions","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","Main","AsyncComponent","appName","module","customIntlProvider","entity","inventoryId","canSelect","canEditStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","AppInfo","showTags","Vulnerability","UpdateDeviceModal","React","setImageId","useParams","uuid","entityDetails","groupName","groupsDetailReducer","deviceId","deviceData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","Image","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","isDisabled","hideBack","hideInvDrawer","Label","icon","Grid","gutter","GridItem","span","navigateBack","history","push","pathname","location","refreshTable","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Card","CardTitle","CardBody","Stack","hasGutter","StackItem","deviceSummaryReducer","undefined","hasError","Tiles","imagesReducer","loadImages","loadDeviceSummary","Flex","FlexItem","onNewImageClick","DeviceStatus","imageData","rpm_ostree_deployments","Split","SplitItem","booted","infoColor","warningColor","updateTransactions","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","activeFilters","inventory","useRef","useHistory","URLSearchParams","search","get","cleanEntities","Fragment","PageHeaderTitle","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","actionResolver","rowData","_index","areActionsDisabled","columns","newColumns","column","includes","col","width","renderFunc","sysProf","isStatic","getEntities","_items","config","_showTags","defaultGetEntities","host_type","fields","defaultData","promises","results","device","getImageInfo","imageInfo","Object","prototype","hasOwnProperty","call","Promise","all","rows","hideFilters","registeredWith","hasCheckbox","activeFiltersConfig","isEmptyFilters","constructActiveFilters","find","item","onRowClick","_e","mergeWithEntities","TooltipSelectorRef","index","reference","document","getElementById","type","option","columnNames","sort","columnTransforms","cellWidth","createRows","image_set","image_build_iso_url","cells","paths","Images","DateFormat","date","UpdatedAt","StatusLabel","imageStatus","isoURL","latestImageID","ImageTable","openCreateWizard","openUpdateWizard","edgeImageSetsReducer","count","Count","Data","GeneralTable","apiFilterSort","loadTableData","tableData","emptyStateMessage","emptyStateActionMessage","emptyStateAction","actionsArray","href","rel","target","_rowId","defaultSort","direction","toolbarButtons","click","clearFilters","pagination","page","perPage","CreateImageWizard","UpdateImageWizard","isCreateWizardOpen","setIsCreateWizardOpen","UpdateWizard","setUpdateWizard","ImageSetsTable","create_image","toString","update_image","updateImageID"],"sourceRoot":""}