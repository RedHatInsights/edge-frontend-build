{"version":3,"sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/api/index.js","webpack:///./src/constants.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/pollingMiddleware.js","webpack:///./src/store/index.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/polling.js","webpack:///./src/App.scss","webpack:///./src/App.scss?75e2"],"names":["DeviceDetail","React","Devices","Images","ImageDetail","Routes","Suspense","fallback","Bullseye","Spinner","size","Switch","Route","exact","path","paths","component","Redirect","to","props","dispatch","useDispatch","getRegistry","useContext","RegistryContext","useState","isLogged","setIsLogged","history","useHistory","useEffect","insights","chrome","init","identifyApp","on","event","push","navId","registered","register","pollingReducer","notifications","notificationsReducer","setPolling","auth","getUser","Fragment","NotificationPortal","childProps","IMAGE_BUILDER_API","EDGE_API","fetchActiveImages","limit","offset","instance","fetchImageStatus","id","fetchDeviceSummary","client","HostsApi","undefined","Promise","all","apiHostGetHostList","query","generateFilter","inventoryFields","system_profile","then","resp","reduce","acc","curr","index","deviceSummaryMapper","total","getPackages","distribution","architecture","search","params","URLSearchParams","toString","createImage","name","description","release","imageTypes","imageType","packages","length","payload","commit","arch","map","item","fetchEdgeImages","q","sort_by","Object","keys","value","multiVals","val","includes","getEdgeStatus","ids","allSettled","statusMapper","statusToIcon","done","icon","CheckCircleIcon","color","successColor","title","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","isEmptyFilters","activeFilters","values","find","constructActiveFilters","getLabel","entries","key","label","category","chipKey","chips","Array","isArray","onDeleteFilter","itemsToRemove","currItem","filter","host_type","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","POLLING_IMAGES","asyncActions","flatMap","a","CLEAN_ENTITIES","keyBy","k","cleanEntities","type","loadImages","pagination","meta","rejected","variant","loadDeviceSummary","loadImageStatus","imageId","createNewImage","callback","loadEdgeImages","toStart","interval","subAction","addImageToPoll","removeImagesToPoll","tid","getState","next","action","setInterval","imageIdsHash","removeImages","forEach","result","status","image","ID","addNotification","Status","Name","rejectedResult","reason","autoDismiss","dismissDelay","clearInterval","createContext","middleware","ReducerRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","pollingImageMidlleware","applyReducerHash","isLoading","hasError","data","state","groups","results","threshold","devicesInfo","canariesInfo","PropTypes","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","propTypes","defaultProps","uuid","devices","_state","newState","___CSS_LOADER_API_IMPORT___","___CSS_LOADER_AT_RULE_IMPORT_0___","___CSS_LOADER_AT_RULE_IMPORT_1___","___CSS_LOADER_AT_RULE_IMPORT_2___","exports","i","module","update","hot","invalidate","oldLocals","accept","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/259.ad9bcd5588072cdddfca.js","sourcesContent":["import { Redirect, Route, Switch } from 'react-router-dom';\n\nimport React, { Suspense } from 'react';\nimport { routes as paths } from '../package.json';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n// const Groups = React.lazy(() =>\n//   import(/* webpackChunkName: \"GroupsPage\" */ './Routes/Groups/Groups')\n// );\n// const GroupsDetail = React.lazy(() =>\n//   import(\n//     /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/GroupsDetail/GroupsDetail'\n//   )\n// );\n\nconst DeviceDetail = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/DeviceDetail/DeviceDetail'\n  )\n);\n\n// const Canaries = React.lazy(() =>\n//   import(\n//     /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/Canaries/Canaries'\n//   )\n// );\n\nconst Devices = React.lazy(() =>\n  import(/* webpackChunkName: \"GroupsDetailPage\" */ './Routes/Devices/Devices')\n);\n\nconst Images = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/ImageManager/Images'\n  )\n);\n\nconst ImageDetail = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"GroupsDetailPage\" */ './Routes/ImageManagerDetail/ImageDetail'\n  )\n);\n\nexport const Routes = () => {\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner size=\"xl\" />\n        </Bullseye>\n      }\n    >\n      <Switch>\n        {/* <Route exact path={paths.groups} component={Groups} /> */}\n        {/* <Route exact path={paths['groups-detail']} component={GroupsDetail} /> */}\n        {/* <Route path={paths['device-detail']} component={DeviceDetail} /> */}\n        {/* <Route path={paths.canaries} component={Canaries} /> */}\n        <Route exact path={paths['fleet-management']} component={Devices} />\n        <Route path={paths['manage-images-detail']} component={ImageDetail} />\n        <Route path={paths['manage-images']} component={Images} />\n        <Route\n          path={paths['fleet-management-detail']}\n          component={DeviceDetail}\n        />\n        <Route>\n          <Redirect to={paths['fleet-management']} />\n        </Route>\n      </Switch>\n    </Suspense>\n  );\n};\n","import React, { useEffect, Fragment, useContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from './store';\nimport { Routes } from './Routes';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { setPolling } from './store/actions';\nimport { pollingReducer } from './store/reducers';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { NotificationPortal } from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport './App.scss';\n\nconst App = (props) => {\n  const dispatch = useDispatch();\n  const { getRegistry } = useContext(RegistryContext);\n  const [isLogged, setIsLogged] = useState(false);\n  const history = useHistory();\n  useEffect(() => {\n    insights.chrome.init();\n    // TODO change this to your appname\n    insights.chrome.identifyApp('fleet-management');\n\n    insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n\n    const registered = getRegistry().register({\n      pollingReducer,\n      notifications: notificationsReducer,\n    });\n    dispatch(setPolling(true, 3 * 60 * 1000));\n    (async () => {\n      await insights.chrome.auth.getUser();\n      setIsLogged(true);\n    })();\n\n    return () => {\n      registered();\n      dispatch(setPolling(false));\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationPortal />\n      {isLogged ? (\n        <Routes childProps={props} />\n      ) : (\n        <Bullseye>\n          <Spinner size=\"xl\" />\n        </Bullseye>\n      )}\n    </Fragment>\n  );\n};\n\nexport default App;\n","import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  name,\n  description,\n  release,\n  architecture,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    description,\n    distribution: release,\n    imageType: imageType,\n    commit: {\n      arch: architecture,\n      packages: packages.map((item) => ({ name: item.name })),\n    },\n  };\n  return instance.post(`${EDGE_API}/images`, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const getEdgeStatus = (ids) => {\n  return Promise.allSettled(\n    ids.map((id) => instance.get(`${EDGE_API}/images/${id}/status`))\n  );\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    CREATE_NEW_IMAGE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n  fetchEdgeImages,\n  createImage,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then((resp) => {\n      callback(resp);\n    })\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n","import { POLLING_IMAGES } from './action-types';\nimport { getEdgeStatus } from '../api';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux/actions/notifications';\nimport { loadEdgeImages, removeImagesToPoll } from './actions';\n\nvar tid;\nconst pollingImageMidlleware = ({ getState, dispatch }) => (next) => (\n  action\n) => {\n  if (action.type === `${POLLING_IMAGES}_START`) {\n    tid = setInterval(() => {\n      const imageIdsHash = getState()['pollingReducer'];\n      const ids = Object.keys(imageIdsHash);\n      if (ids.length === 0) {\n        return;\n      }\n      getEdgeStatus(ids).then((resp) => {\n        let removeImages = [];\n\n        resp.forEach((result) => {\n          if (result.status === 'fulfilled') {\n            const image = result.value;\n            removeImages = [...removeImages, image.ID];\n            dispatch(\n              addNotification({\n                variant: image.Status === 'ERROR' ? 'danger' : 'success',\n                title: `Image ${\n                  image.Status === 'CREATED'\n                    ? 'was created'\n                    : image.Status === 'SUCCESS'\n                    ? 'is ready'\n                    : 'failure'\n                }`,\n                description: `${image.Name} image build is completed.`,\n              })\n            );\n          }\n        });\n\n        const rejectedResult = resp.find(\n          (result) => result.status === 'rejected'\n        );\n        if (rejectedResult !== undefined) {\n          dispatch(\n            addNotification({\n              variant: 'warning',\n              title: 'Error pulling status data',\n              description: rejectedResult.reason || undefined,\n              autoDismiss: true,\n              dismissDelay: 2500,\n            })\n          );\n        }\n\n        if (removeImages.length > 0) {\n          loadEdgeImages(dispatch);\n        }\n        dispatch(removeImagesToPoll(removeImages));\n      });\n    }, action.interval);\n  }\n\n  if (action.type === `${POLLING_IMAGES}_END`) {\n    clearInterval(tid);\n  }\n\n  if (action.type === `${POLLING_IMAGES}_ADD`) {\n    loadEdgeImages(dispatch);\n    dispatch(\n      addNotification({\n        title: 'Creating image',\n        variant: 'info',\n        description: `${action.payload.name} image build was added to the queue.`,\n        dismissDelay: 2000,\n      })\n    );\n  }\n\n  return next(action);\n};\n\nexport default pollingImageMidlleware;\n","import { createContext } from 'react';\nimport { ReducerRegistry } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport pollingImageMidlleware from './pollingMiddleware';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  return new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorDescriptionKey: ['detail', 'stack'],\n    }),\n    pollingImageMidlleware,\n    ...middleware,\n  ]);\n}\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { POLLING_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst addImageToPoll = (state, { payload: { id } }) => ({\n  ...state,\n  [id]: 'BUILDING',\n});\n\nconst removeImageToPoll = (state, { ids }) => {\n  const newState = state;\n  ids.forEach((id) => {\n    delete newState[id];\n  });\n  return newState;\n};\n\nexport default applyReducerHash(\n  {\n    [`${POLLING_IMAGES}_ADD`]: addImageToPoll,\n    [`${POLLING_IMAGES}_REMOVE`]: removeImageToPoll,\n  },\n  initialState\n);\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_AT_RULE_IMPORT_0___ = require(\"-!../node_modules/css-loader/dist/cjs.js!@redhat-cloud-services/frontend-components-notifications/index.css\");\nvar ___CSS_LOADER_AT_RULE_IMPORT_1___ = require(\"-!../node_modules/css-loader/dist/cjs.js!@redhat-cloud-services/frontend-components/PrimaryToolbar/primary-toolbar.css\");\nvar ___CSS_LOADER_AT_RULE_IMPORT_2___ = require(\"-!../node_modules/css-loader/dist/cjs.js!@redhat-cloud-services/frontend-components/ConditionalFilter/conditional-filter.css\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_1___);\nexports.i(___CSS_LOADER_AT_RULE_IMPORT_2___);\n// Module\nexports.push([module.id, \".fleet-management,.edge{}.fleet-management :root,.edge :root{--ins-color--orange: #ec7a08}.fleet-management button:focus,.edge button:focus{outline:none}.fleet-management .edge-groups .edge-groups__info .pf-c-card,.fleet-management .edge-groups .edge-groups--detail__info .pf-c-card,.fleet-management .edge-groups--detail .edge-groups__info .pf-c-card,.fleet-management .edge-groups--detail .edge-groups--detail__info .pf-c-card,.edge .edge-groups .edge-groups__info .pf-c-card,.edge .edge-groups .edge-groups--detail__info .pf-c-card,.edge .edge-groups--detail .edge-groups__info .pf-c-card,.edge .edge-groups--detail .edge-groups--detail__info .pf-c-card{height:100%}.fleet-management .edge-groups--detail .edge-groups--detail__info .pf-c-card.edge-groups--detail__complex .pf-c-card__header .pf-l-grid,.edge .edge-groups--detail .edge-groups--detail__info .pf-c-card.edge-groups--detail__complex .pf-c-card__header .pf-l-grid{width:100%}.fleet-management .edge-groups--detail .edge-groups--detail__info .pf-c-card.edge-groups--detail__complex .pf-c-card__body .pf-l-grid,.edge .edge-groups--detail .edge-groups--detail__info .pf-c-card.edge-groups--detail__complex .pf-c-card__body .pf-l-grid{height:100%}.fleet-management .edge-groups--detail .edge-groups--detail__info .pf-c-card.edge-groups--detail__complex .pf-c-card__body .pf-l-grid .pf-l-grid__item:first-of-type,.edge .edge-groups--detail .edge-groups--detail__info .pf-c-card.edge-groups--detail__complex .pf-c-card__body .pf-l-grid .pf-l-grid__item:first-of-type{border-right:var(--pf-global--BorderWidth--sm) solid var(--pf-global--BorderColor--100)}.fleet-management .edge-c-device--detail,.edge .edge-c-device--detail{background-color:var(--pf-global--palette--white)}.fleet-management .tiles,.edge .tiles{padding-bottom:1rem;align-items:stretch}.fleet-management .tiles-card,.edge .tiles-card{height:100%}.fleet-management .packages-compound-expand,.edge .packages-compound-expand{padding:1rem}.fleet-management .force-padding-left,.edge .force-padding-left{padding-left:1rem !important}.fleet-management .grid-align-center,.edge .grid-align-center{align-self:center}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../node_modules/sass-loader/dist/cjs.js!./App.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}