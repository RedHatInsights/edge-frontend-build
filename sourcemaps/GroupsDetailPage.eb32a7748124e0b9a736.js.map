{"version":3,"sources":["webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/AvailableImagesTile.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/constants.js","webpack:///./src/api/index.js","webpack:///./src/constants.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js"],"names":["GeneralInformation","lazy","SystemCard","OperatingSystemCard","CollectionCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","runningVersion","systemProfile","running_rpm_os_tree_version","stagedVersion","staged_rpm_os_tree_version","nonActiveVersion","non_active_rpm_os_tree_version","heathCheck","health_check","rhcHealth","rhc_health","Suspense","fallback","store","useStore","ConfigurationCardWrapper","SystemCardWrapper","props","hasSAP","OperatingSystemCardWrapper","hasKernelModules","extra","title","value","length","plural","singular","onClick","_e","handleClick","generalMapper","statusHelper","toUpperCase","Tooltip","content","className","CollectionCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","hideBack","hideInvDrawer","Main","Grid","gutter","GridItem","span","AppInfo","AvailableImageTileBase","children","Card","CardTitle","propTypes","PropTypes","AvailableImageTile","onNewImageClick","imagesReducer","isLoading","undefined","hasError","data","shallowEqual","CardBody","Bullseye","Spinner","Button","variant","style","paddingLeft","meta","count","CardFooter","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Stack","StackItem","deviceSummaryReducer","Tiles","dispatch","useDispatch","registered","notifications","notificationsReducer","loadImages","loadDeviceSummary","Flex","FlexItem","AvailableImagesTile","CreateImageWizard","React","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","useState","getEntities","setGetEntities","isOpen","setIsOpen","activeFilters","setActiveFilters","inventory","useRef","history","useHistory","URLSearchParams","location","search","get","cleanEntities","Fragment","PageHeaderTitle","push","pathname","create_image","toString","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","_i","config","filter","system_profile","host_type","fields","hideFilters","registeredWith","filterConfig","items","type","filterValues","onChange","event","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onDelete","itemsToRemove","isAll","onDeleteFilter","onRowClick","id","mergeWithEntities","api","navigateBack","columns","transforms","sortable","key","distribution","status","imageType","activeFilterMapper","UPDATE_FILTER","action","property","DELETE_FILTER","_state","payload","activeFilterReducer","useReducer","dispatchActiveFilters","perPage","setPerPage","page","setPage","opened","setOpened","index","direction","sortBy","setSortBy","edgeImagesReducer","_event","placeholder","composeStatus","Object","entries","imageTypeMapper","map","tid","setTimeout","loadEdgeImages","keys","reduce","prevValues","clearTimeout","limit","offset","sort_by","pagination","colSize","rowSize","icon","DisconnectedIcon","headingLevel","itemCount","onSetPage","_evt","newPage","onPerPageSelect","newPerPage","isCompact","dedicatedAction","isDisabled","Table","aria-label","onExpand","_rowIndex","_colIndex","isExpanded","rowData","imageId","ariaLabel","onSort","cells","rows","flatten","ID","paths","Name","Version","Distribution","ImageType","date","CreatedAt","Status","heightAuto","colSpan","PlusCircleIcon","TableHeader","TableBody","imageStatusReducer","TextContent","TextList","TextListItem","T","StatusLabel","loadImageStatus","hasGutter","Title","statusIcons","color","statusColors","text","imageStatusMapper","charAt","slice","unknown","CREATED","BUILDING","ERROR","SUCCESS","releaseMapper","IMAGE_BUILDER_API","EDGE_API","fetchActiveImages","instance","fetchImageStatus","fetchDeviceSummary","client","HostsApi","Promise","all","apiHostGetHostList","query","generateFilter","inventoryFields","then","resp","acc","curr","deviceSummaryMapper","total","getPackages","architecture","params","createImage","description","release","imageTypes","packages","commit","arch","fetchEdgeImages","q","multiVals","val","statusMapper","statusToIcon","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","values","getLabel","category","chipKey","chips","Array","isArray","currItem","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","asyncActions","flatMap","a","CLEAN_ENTITIES","keyBy","k","rejected","createNewImage","groups","results","threshold","devicesInfo","canariesInfo","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","defaultProps","devices"],"mappings":"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","file":"js/GroupsDetailPage.7a218b979d6fbeb505f4.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nimport {\n  generalMapper,\n  statusHelper,\n} from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const {\n    runningVersion,\n    stagedVersion,\n    nonActiveVersion,\n    heathCheck,\n    rhcHealth,\n  } = useSelector(({ systemProfileStore }) => ({\n    runningVersion:\n      systemProfileStore?.systemProfile?.running_rpm_os_tree_version,\n    stagedVersion:\n      systemProfileStore?.systemProfile?.staged_rpm_os_tree_version,\n    nonActiveVersion:\n      systemProfileStore?.systemProfile?.non_active_rpm_os_tree_version || [],\n    heathCheck: systemProfileStore?.systemProfile?.health_check,\n    rhcHealth: systemProfileStore?.systemProfile?.rhc_health,\n  }));\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        ConfigurationCardWrapper={false}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard {...props} hasSAP={false} />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard\n              {...props}\n              hasKernelModules={false}\n              extra={[\n                { title: 'Running rpm-ostree version', value: runningVersion },\n                {\n                  title: 'Staged rpm-ostree version',\n                  value: stagedVersion,\n                },\n                {\n                  title: 'Non-active (available rollback version(s))',\n                  value: nonActiveVersion?.length,\n                  plural: 'versions',\n                  singular: 'version',\n                  onClick: (_e, handleClick) =>\n                    handleClick(\n                      'Non-active (available rollback version(s))',\n                      generalMapper(nonActiveVersion || [], 'Version'),\n                      'small'\n                    ),\n                },\n                {\n                  title: 'Health check status',\n                  value: statusHelper[heathCheck?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  AppInfo,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={uuid ? `/groups` : '/fleet-management'}>\n              {uuid ? 'Groups' : 'Fleet management'}\n            </Link>\n          </BreadcrumbItem>\n          {uuid && (\n            <BreadcrumbItem>\n              {groupName ? (\n                <Link to={`/groups/${uuid}`}>{groupName}</Link>\n              ) : (\n                <Skeleton size={SkeletonSize.xs} />\n              )}\n            </BreadcrumbItem>\n          )}\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead fallback=\"\" hideBack showTags hideInvDrawer />\n      </PageHeader>\n      <Main className=\"edge-c-device--detail\">\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <AppInfo showTags fallback=\"\" />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardFooter,\n  Button,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst AvailableImageTileBase = ({ children }) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Available images</CardTitle>\n    {children}\n  </Card>\n);\n\nAvailableImageTileBase.propTypes = {\n  children: PropTypes.children,\n};\n\nconst AvailableImageTile = ({ onNewImageClick }) => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ imagesReducer }) => ({\n      isLoading:\n        imagesReducer?.isLoading !== undefined\n          ? imagesReducer?.isLoading\n          : true,\n      hasError: imagesReducer?.hasError || false,\n      data: imagesReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  return (\n    <AvailableImageTileBase>\n      <CardBody>\n        {isLoading ? (\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        ) : hasError ? (\n          data\n        ) : (\n          <Button variant=\"link\" style={{ paddingLeft: 0 }}>\n            {data.meta.count} images\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter>\n        <Button variant=\"primary\" onClick={() => onNewImageClick()}>\n          Create new image\n        </Button>\n      </CardFooter>\n    </AvailableImageTileBase>\n  );\n};\n\nAvailableImageTile.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n\nexport default AvailableImageTile;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary information</CardTitle>\n    <CardBody>\n      <Stack>\n        <StackItem>\n          <Button variant=\"link\">{orphaned}</Button> orphaned devices\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{active}</Button> active devices\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{noReports}</Button> devices has not reported\n          in the last 6 months\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{neverReported}</Button> devices were\n          registered but never reported\n        </StackItem>\n      </Stack>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport AvailableImagesTile from './AvailableImagesTile';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = ({ onNewImageClick }) => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n      notifications: notificationsReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <AvailableImagesTile onNewImageClick={onNewImageClick} />\n      </FlexItem>\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [getEntities, setGetEntities] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('create_image') === 'true') {\n      setIsOpen(() => true);\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles\n          onNewImageClick={() => {\n            history.push({\n              pathname: history.location.pathname,\n              search: new URLSearchParams({\n                create_image: true,\n              }).toString(),\n            });\n            setIsOpen(true);\n          }}\n        />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n          }}\n          getEntities={async (_i, config) => {\n            const data = await getEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                ],\n              },\n            });\n            return data;\n          }}\n          hideFilters={{ registeredWith: true }}\n          filterConfig={{\n            items: [\n              {\n                label: activeFilters?.deviceStatus?.label,\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value) => {\n                    setActiveFilters(() => ({\n                      ...(activeFilters || {}),\n                      deviceStatus: {\n                        ...(activeFilters?.deviceStatus || {}),\n                        value,\n                      },\n                    }));\n                    inventory.current.onRefreshData();\n                  },\n                  items: deviceStatusMapper,\n                  value: activeFilters?.deviceStatus?.value || [],\n                },\n              },\n            ],\n          }}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            onDelete: (event, itemsToRemove, isAll) => {\n              if (isAll) {\n                setActiveFilters(defaultFilters);\n              } else {\n                setActiveFilters(() =>\n                  onDeleteFilter(activeFilters, itemsToRemove)\n                );\n              }\n              inventory.current.onRefreshData();\n            },\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities, api }) => {\n            setGetEntities(() => api?.getEntities);\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React, {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  Suspense,\n  useReducer,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { loadEdgeImages } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport { edgeImagesReducer } from '../../store/reducers';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n  Button,\n  Skeleton,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { DisconnectedIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport flatten from 'lodash/flatten';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { useHistory } from 'react-router-dom';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport {\n  imageTypeMapper,\n  composeStatus,\n} from '../ImageManagerDetail/constants';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst columns = [\n  {\n    title: 'Name',\n    type: 'name',\n    transforms: [sortable],\n  },\n  'Version',\n  {\n    title: 'Distribution',\n    type: 'distribution',\n    transforms: [sortable],\n  },\n  {\n    title: 'Type',\n    type: 'image_type',\n    transforms: [sortable],\n  },\n  {\n    title: 'Created',\n    type: 'created_at',\n    transforms: [sortable],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    transforms: [sortable],\n  },\n];\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    key: 'name',\n    value: '',\n  },\n  distribution: {\n    label: 'Distribution',\n    key: 'distribution',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    key: 'status',\n    value: [],\n  },\n  imageType: {\n    label: 'Image type',\n    key: 'image_type',\n    value: [],\n  },\n};\n\nconst updateFilter = (state, action) => ({\n  ...state,\n  [action.property]: {\n    ...(state[action.property] || {}),\n    value: action.value,\n  },\n});\n\nconst deleteFilter = (_state, action) => action.payload;\n\nconst activeFilterMapper = {\n  UPDATE_FILTER: updateFilter,\n  DELETE_FILTER: deleteFilter,\n};\n\nconst activeFilterReducer = applyReducerHash(\n  activeFilterMapper,\n  defaultFilters\n);\n\nconst Images = () => {\n  const history = useHistory();\n  const [activeFilters, dispatchActiveFilters] = useReducer(\n    activeFilterReducer,\n    defaultFilters\n  );\n  const [perPage, setPerPage] = useState(100);\n  const [page, setPage] = useState(1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [opened, setOpened] = useState([]);\n  const [sortBy, setSortBy] = useState({ index: 4, direction: 'desc' });\n  const dispatch = useDispatch();\n  const { getRegistry } = useContext(RegistryContext);\n  const { isLoading, hasError, data } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      isLoading:\n        edgeImagesReducer?.isLoading !== undefined\n          ? edgeImagesReducer?.isLoading\n          : true,\n      hasError: edgeImagesReducer?.hasError || false,\n      data: edgeImagesReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  const filterConfig = {\n    items: [\n      {\n        label: defaultFilters.name.label,\n        type: 'text',\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'name',\n              value,\n            }),\n          value: activeFilters?.name?.value || '',\n          placeholder: 'Filter by name',\n        },\n      },\n      {\n        label: defaultFilters.distribution.label,\n        type: 'text',\n        filterValues: {\n          key: 'distribution-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'distribution',\n              value,\n            }),\n          value: activeFilters?.distribution?.value || '',\n        },\n      },\n      {\n        label: defaultFilters.status.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'status-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'status',\n              value,\n            }),\n          items: composeStatus.map((item) => ({\n            value: item,\n            label: item,\n          })),\n          value: activeFilters?.status?.value || [],\n        },\n      },\n      {\n        label: defaultFilters.imageType.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'image-type-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'imageType',\n              value,\n            }),\n          items: Object.entries(imageTypeMapper).map(([value, label]) => ({\n            value,\n            label,\n          })),\n          value: activeFilters?.imageType?.value || [],\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    const tid = setTimeout(() => {\n      loadEdgeImages(\n        dispatch,\n        Object.keys(activeFilters).reduce((filters, key) => {\n          const filter = activeFilters[key];\n          if (typeof filter.value === 'string') {\n            return { ...filters, [key]: filter.value };\n          }\n          if (typeof filter.value === 'object') {\n            if (typeof filter.value.length !== 'number') {\n              return filters;\n            }\n            const prevValues = filters[key] || [];\n            return { ...filters, [key]: [...prevValues, ...filter.value] };\n          }\n          return filters;\n        }, {})\n      );\n    }, 570);\n    return () => clearTimeout(tid);\n  }, [activeFilters]);\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      edgeImagesReducer,\n    });\n    return () => registered();\n  }, []);\n\n  useEffect(() => {\n    if (sortBy.direction === 'asc') {\n      loadEdgeImages(dispatch, {\n        limit: perPage,\n        offset: (page - 1) * perPage,\n        sort_by: columns[sortBy.index].type,\n      });\n    } else {\n      loadEdgeImages(dispatch, {\n        limit: perPage,\n        offset: (page - 1) * perPage,\n        sort_by: `-${columns[sortBy.index].type}`,\n      });\n    }\n  }, [page, perPage, sortBy]);\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Fragment>\n          {isLoading ? (\n            <Fragment>\n              <PrimaryToolbar pagination={<Skeleton />} />\n              <SkeletonTable colSize={5} rowSize={15} />\n            </Fragment>\n          ) : null}\n          {!isLoading && hasError ? (\n            <EmptyState>\n              <EmptyStateIcon icon={DisconnectedIcon} />\n              <Title headingLevel=\"h4\" size=\"lg\">\n                Error!\n              </Title>\n              <EmptyStateBody>\n                There was an error while loading images list!\n              </EmptyStateBody>\n            </EmptyState>\n          ) : null}\n          {!isLoading && !hasError ? (\n            <Fragment>\n              {data.length > 0 ? (\n                <PrimaryToolbar\n                  filterConfig={filterConfig}\n                  activeFiltersConfig={{\n                    filters: isEmptyFilters(activeFilters)\n                      ? constructActiveFilters(activeFilters)\n                      : [],\n                    onDelete: (_event, itemsToRemove, isAll) => {\n                      if (isAll) {\n                        dispatchActiveFilters({\n                          type: 'DELETE_FILTER',\n                          payload: defaultFilters,\n                        });\n                      } else {\n                        dispatchActiveFilters({\n                          type: 'DELETE_FILTER',\n                          payload: onDeleteFilter(activeFilters, itemsToRemove),\n                        });\n                      }\n                    },\n                  }}\n                  pagination={{\n                    itemCount: data?.length || 0,\n                    page,\n                    perPage,\n                    onSetPage: (_evt, newPage) => setPage(newPage),\n                    onPerPageSelect: (_evt, newPerPage) =>\n                      setPerPage(newPerPage),\n                    isCompact: true,\n                  }}\n                  dedicatedAction={\n                    <Button\n                      onClick={() => {\n                        history.push({\n                          pathname: history.location.pathname,\n                          search: new URLSearchParams({\n                            create_image: true,\n                          }).toString(),\n                        });\n                        setIsOpen(true);\n                      }}\n                      isDisabled={isLoading !== false}\n                    >\n                      Create new image\n                    </Button>\n                  }\n                />\n              ) : null}\n              <Table\n                aria-label=\"Manage Images table\"\n                onExpand={(_e, _rowIndex, _colIndex, isExpanded, rowData) => {\n                  const imageId = rowData.id;\n                  setOpened(\n                    isExpanded\n                      ? opened.filter((item) => item !== imageId)\n                      : [...opened, imageId]\n                  );\n                }}\n                ariaLabel=\"Images table\"\n                variant=\"compact\"\n                sortBy={sortBy}\n                onSort={handleSort}\n                cells={columns}\n                rows={\n                  data.length > 0\n                    ? flatten(\n                        data.map((item) => [\n                          {\n                            id: item.ID,\n                            cells: [\n                              {\n                                title: (\n                                  <Link\n                                    to={`${paths['manage-images']}/${item.ID}`}\n                                  >\n                                    {item.Name}\n                                  </Link>\n                                ),\n                              },\n                              item?.Version,\n                              item?.Distribution,\n                              {\n                                title: imageTypeMapper[item?.ImageType],\n                              },\n                              {\n                                title: <DateFormat date={item?.CreatedAt} />,\n                              },\n                              {\n                                title: <StatusLabel status={item?.Status} />,\n                              },\n                            ],\n                          },\n                        ])\n                      )\n                    : [\n                        {\n                          heightAuto: true,\n                          cells: [\n                            {\n                              props: { colSpan: 8 },\n                              title: (\n                                <Bullseye>\n                                  <EmptyState variant=\"small\">\n                                    <EmptyStateIcon icon={PlusCircleIcon} />\n                                    <Title headingLevel=\"h2\" size=\"lg\">\n                                      No images found\n                                    </Title>\n                                    <Button\n                                      onClick={() => {\n                                        history.push({\n                                          pathname: history.location.pathname,\n                                          search: new URLSearchParams({\n                                            create_image: true,\n                                          }).toString(),\n                                        });\n                                        setIsOpen(true);\n                                      }}\n                                      isDisabled={isLoading !== false}\n                                    >\n                                      Create new images\n                                    </Button>\n                                  </EmptyState>\n                                </Bullseye>\n                              ),\n                            },\n                          ],\n                        },\n                      ]\n                }\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n            </Fragment>\n          ) : null}\n        </Fragment>\n      </Main>\n      {isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React from 'react';\nimport {\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n} from '@patternfly/react-core';\nimport StatusLabel from './StatusLabel';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DetailsHead = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ imageStatusReducer }) => ({\n      isLoading:\n        imageStatusReducer?.isLoading !== undefined\n          ? imageStatusReducer?.isLoading\n          : true,\n      hasError: imageStatusReducer?.hasError || false,\n      data: imageStatusReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  const status = !isLoading && !hasError ? data.Status : null;\n\n  return (\n    <TextContent>\n      <TextList component=\"dl\">\n        <TextListItem component=\"dt\" className=\"grid-align-center\">\n          Status\n        </TextListItem>\n        <TextListItem component=\"dd\">\n          {isLoading ? <Skeleton /> : <StatusLabel status={status} />}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport default DetailsHead;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Title,\n} from '@patternfly/react-core';\nimport { routes as paths } from '../../../package.json';\nimport { useDispatch } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { loadImageStatus } from '../../store/actions';\nimport { imageStatusReducer } from '../../store/reducers';\nimport DetailsHead from './DetailsHeader';\n\nconst ImageDetail = () => {\n  const { imageId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({ imageStatusReducer });\n    loadImageStatus(dispatch, imageId);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={paths['manage-images']}>Manged images</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>{imageId}</BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              {imageId}\n            </Title>\n          </StackItem>\n          <StackItem>\n            <DetailsHead />\n          </StackItem>\n        </Stack>\n      </PageHeader>\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n  }\n  return (\n    <Label color={color} icon={icon}>\n      {text}\n    </Label>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = ['CREATED', 'BUILDING', 'ERROR', 'SUCCESS'];\n\nexport const statusIcons = {\n  unknown: <QuestionCircleIcon />,\n  CREATED: <CheckCircleIcon />,\n  BUILDING: <InProgressIcon />,\n  ERROR: <TimesCircleIcon />,\n  SUCCESS: <CheckCircleIcon />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  CREATED: 'green',\n  BUILDING: 'blue',\n  ERROR: 'red',\n  SUCCESS: 'green',\n};\n\nexport const imageStatusMapper = {\n  CREATED: 'CREATED',\n  BUILDING: 'Image build in progress',\n  ERROR: 'ERROR',\n  SUCCESS: 'SUCCESS',\n};\n\nexport const releaseMapper = {\n  'rhel-8': 'Red Hat Enterprise Linux (RHEL) 8.3',\n};\n\nexport const imageTypeMapper = {\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n};\n","import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  name,\n  description,\n  release,\n  architecture,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    description,\n    distribution: release,\n    imageType,\n    commit: {\n      arch: architecture,\n      packages: packages.map((item) => ({ name: item })),\n    },\n  };\n  return instance.post(`${EDGE_API}/images`, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (typeof q[curr] === 'string' && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    CREATE_NEW_IMAGE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  CREATE_NEW_IMAGE,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n  fetchEdgeImages,\n  createImage,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(() => callback())\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n"],"sourceRoot":""}