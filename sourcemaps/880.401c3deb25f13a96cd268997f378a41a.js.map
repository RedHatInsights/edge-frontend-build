{"version":3,"file":"js/880.d12b9595927139a4b42c.js","mappings":"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","sources":["webpack:///./src/Routes/Repositories/Empty.js","webpack:///./src/Routes/Repositories/modals/Modal.js","webpack:///./src/Routes/Repositories/modals/AddModal.js","webpack:///./src/Routes/Repositories/modals/EditModal.js","webpack:///./src/Routes/Repositories/modals/RemoveModal.js","webpack:///./src/Routes/Repositories/TableHeader.js","webpack:///./src/Routes/Repositories/ToolbarHeader.js","webpack:///./src/Routes/Repositories/ToolbarFooter.js","webpack:///./src/Routes/Repositories/Table.js","webpack:///./src/Routes/Repositories/RepositoryTable.js","webpack:///./src/Routes/Repositories/RepositoryHeader.js","webpack:///./src/Routes/Repositories/Repositories.js"],"sourcesContent":["import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport RepositoryIcon from '@patternfly/react-icons/dist/esm/icons/repository-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst emptyStateIconMapper = {\n  repository: RepositoryIcon,\n  search: SearchIcon,\n};\n\nconst Empty = ({\n  bgColor,\n  icon,\n  title,\n  body,\n  primaryAction,\n  secondaryActions,\n}) => (\n  <EmptyState style={{ backgroundColor: bgColor || '' }}>\n    <EmptyStateIcon icon={emptyStateIconMapper[icon]} />\n    <Title headingLevel=\"h4\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody>{body}</EmptyStateBody>\n    {primaryAction && (\n      <Button onClick={primaryAction.click} variant=\"primary\">\n        {primaryAction.text}\n      </Button>\n    )}\n    <EmptyStateSecondaryActions>\n      {secondaryActions.map(({ type, title, link, onClick }, index) => (\n        <Button\n          component={type === 'link' ? 'a' : 'button'}\n          href={link}\n          variant=\"link\"\n          key={index}\n          onClick={onClick}\n        >\n          {title}\n          {link && <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />}\n        </Button>\n      ))}\n    </EmptyStateSecondaryActions>\n  </EmptyState>\n);\n\nEmpty.propTypes = {\n  bgColor: PropTypes.string,\n  icon: PropTypes.string,\n  title: PropTypes.string,\n  body: PropTypes.string,\n  primaryAction: PropTypes.object,\n  secondaryActions: PropTypes.array,\n};\n\nexport default Empty;\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  toggle,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  onSubmit,\n}) => {\n  return (\n    <Modal variant=\"small\" title={title} isOpen={isOpen} onClose={toggle}>\n      <FormRenderer\n        schema={schema}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={componentMapper}\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          toggle();\n          reloadData();\n        }}\n        onCancel={() => toggle()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  toggle: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n\nexport default RepoModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { createCustomRepository } from '../../../api/index';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst AddModal = ({ isOpen, toggle, reloadData }) => {\n  const addSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'title',\n        label:\n          'Link to a custom repository to add packages to RHEL for Edge images.',\n      },\n      {\n        component: 'text-field',\n        name: 'name',\n        label: 'Name',\n        placeholder: 'Repository name',\n        helperText:\n          'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n      {\n        component: 'textarea',\n        name: 'baseURL',\n        label: 'BaseURL',\n        placeholder: 'https://',\n        helperText: 'Enter the baseURL for the custom repository.',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title=\"Add Repository\"\n      isOpen={isOpen}\n      toggle={() => toggle({ type: 'add' })}\n      submitLabel=\"Add\"\n      schema={addSchema}\n      onSubmit={(values) => createCustomRepository(values)}\n      reloadData={reloadData}\n    />\n  );\n};\n\nAddModal.propTypes = {\n  toggle: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n};\n\nexport default AddModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { HelperText, HelperTextItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst EditModal = ({ toggle, isOpen, id, name, baseURL, reloadData }) => {\n  const editSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'title',\n        label: 'Update information about this custom repository.',\n      },\n      {\n        component: 'text-field',\n        name: 'name',\n        label: 'Name',\n        placeholder: 'Repository name',\n        helperText:\n          'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n      {\n        component: 'textarea',\n        name: 'baseURL',\n        label: 'BaseURL',\n        placeholder: 'https://',\n        helperText: (\n          <HelperText hasIcon>\n            <HelperTextItem className=\"pf-u-pb-md\" variant=\"warning\" hasIcon>\n              If you change the repo URL, you may not have access to the\n              packages that were used to build images that reference this\n              repository.\n            </HelperTextItem>\n          </HelperText>\n        ),\n\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title=\"Edit Repository\"\n      isOpen={isOpen}\n      toggle={() => toggle({ type: 'edit' })}\n      submitLabel=\"Update\"\n      schema={editSchema}\n      initialValues={{ id, name, baseURL }}\n      onSubmit={console.log}\n      reloadData={reloadData}\n    />\n  );\n};\n\nEditModal.propTypes = {\n  toggle: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  baseURL: PropTypes.string,\n  setData: PropTypes.func,\n};\nexport default EditModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { TextContent, Text } from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport PropTypes from 'prop-types';\n\nconst LabelWithText = ({ label, text }) => {\n  return (\n    <TextContent>\n      <Text component={'b'}>{label}</Text>\n      <Text>{text}</Text>\n    </TextContent>\n  );\n};\n\nLabelWithText.propTypes = {\n  label: PropTypes.string,\n  text: PropTypes.string,\n};\n\nconst RemoveModal = ({ toggle, isOpen, name, baseURL, reloadData }) => {\n  const addSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'description',\n        label:\n          'Removing a repository could affect your ability to update images.',\n      },\n      {\n        component: 'plain-text',\n        name: 'name',\n        label: <LabelWithText label=\"Name\" text={name} />,\n      },\n      {\n        component: 'plain-text',\n        name: 'baseURL',\n        label: <LabelWithText label=\"baseURL\" text={baseURL} />,\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title={\n        <>\n          <ExclamationTriangleIcon\n            color={warningColor.value}\n            className=\"pf-u-mr-md\"\n          />\n          Remove Repository\n        </>\n      }\n      isOpen={isOpen}\n      toggle={() => toggle({ type: 'remove' })}\n      submitLabel=\"Remove\"\n      schema={addSchema}\n      variant=\"danger\"\n      onSubmit={console.log}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRemoveModal.propTypes = {\n  toggle: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  baseURL: PropTypes.string,\n  setData: PropTypes.func,\n};\nexport default RemoveModal;\n","import React from 'react';\nimport { TextContent, Text, TextVariants } from '@patternfly/react-core';\n//import { ExternalLinkAltIcon } from \"@patternfly/react-icons\";\n\nconst Header = () => {\n  return (\n    <TextContent style={{ padding: '15px', backgroundColor: 'white' }}>\n      <Text component={TextVariants.h1}>Custom repositories</Text>\n      <Text component={TextVariants.p}>\n        Add custom repositories to build RHEL for Edge images with additional\n        packages.{' '}\n        {/*<Text\n          style={{ display: 'inline' }}\n          component={TextVariants.small}\n          href=\"#\"\n        >\n          <Text component={TextVariants.a} href=\"#\">\n            Learn more\n            <ExternalLinkAltIcon size=\"sm\" className=\"pf-u-ml-sm\" />\n          </Text>\n        </Text>*/}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport default Header;\n","import React, { useEffect } from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n  Button,\n  InputGroup,\n  TextInput,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst ToolbarButtons = ({ buttons }) => {\n  return buttons.map(({ title, click }, index) => (\n    <ToolbarItem key={index}>\n      <Button onClick={click} variant=\"primary\">\n        {title}\n      </Button>\n    </ToolbarItem>\n  ));\n};\n\nconst ToolbarHeader = ({\n  toolbarButtons,\n  input,\n  setInput,\n  count,\n  perPage,\n  setPerPage,\n  page,\n  setPage,\n}) => {\n  useEffect(() => {\n    setPage(1);\n  }, [count]);\n\n  return (\n    <Toolbar id=\"toolbar\">\n      <ToolbarContent>\n        <ToolbarItem>\n          <InputGroup>\n            <TextInput\n              name=\"textInput1\"\n              id=\"textInput1\"\n              value={input}\n              type=\"search\"\n              aria-label=\"search input example\"\n              placeholder=\"Filter by name\"\n              onChange={(value) => setInput(value)}\n              iconVariant=\"search\"\n            />\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarButtons buttons={toolbarButtons} />\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <Pagination\n            isCompact\n            itemCount={count}\n            perPage={perPage}\n            page={page}\n            onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n            widgetId=\"pagination-options-menu-top\"\n            onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarHeader.propTypes = {\n  toolbarButtons: PropTypes.array,\n  setInput: PropTypes.func,\n  input: PropTypes.string,\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n};\nexport default ToolbarHeader;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst ToolbarFooter = ({ count, perPage, setPerPage, page, setPage }) => {\n  return (\n    <Toolbar id=\"toolbar\">\n      <ToolbarContent>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <Pagination\n            itemCount={count}\n            perPage={perPage}\n            page={page}\n            onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n            widgetId=\"pagination-options-menu-top\"\n            onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarFooter.propTypes = {\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n};\n\nexport default ToolbarFooter;\n","import React from 'react';\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from '@patternfly/react-table';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst Table = ({ toggle, columns, rows, sortDirection, setSortDirection }) => {\n  return (\n    <React.Fragment>\n      <TableComposable aria-label=\"Simple table\" variant=\"compact\">\n        <Thead>\n          <Tr>\n            {columns.map((column, columnIndex) => (\n              <Th\n                sort={{\n                  sortBy: { direction: sortDirection },\n                  onSort: () =>\n                    setSortDirection((prevState) =>\n                      prevState === 'asc' ? 'desc' : 'asc'\n                    ),\n                }}\n                key={columnIndex}\n              >\n                {column}\n              </Th>\n            ))}\n          </Tr>\n        </Thead>\n        <Tbody>\n          {rows.map(({ id, name, baseURL }, rowIndex) => (\n            <Tr key={rowIndex}>\n              <Td key={`${rowIndex}_0`} dataLabel={columns[0]}>\n                <Text classname=\"pf-u-mb-xs\" component={TextVariants.p}>\n                  {name}\n                </Text>\n                <Text component={TextVariants.a}>\n                  <a href={baseURL}>{baseURL}</a>{' '}\n                  <ExternalLinkAltIcon classname=\"pf-u-ml-sm\" />\n                </Text>\n              </Td>\n              <Td\n                actions={{\n                  items: [\n                    {\n                      title: 'Edit',\n                      onClick: () =>\n                        toggle({\n                          type: 'edit',\n                          id,\n                          name,\n                          baseURL,\n                        }),\n                    },\n                    {\n                      title: 'Remove',\n                      onClick: () =>\n                        toggle({\n                          type: 'remove',\n                          id,\n                          name,\n                          baseURL,\n                        }),\n                    },\n                  ],\n                }}\n              />\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </React.Fragment>\n  );\n};\n\nTable.propTypes = {\n  columns: PropTypes.array,\n  rows: PropTypes.array,\n  toggle: PropTypes.func,\n  sortDirection: PropTypes.string,\n  setSortDirection: PropTypes.func,\n};\nexport default Table;\n","import React, { useState } from 'react';\nimport ToolbarHeader from './ToolbarHeader';\nimport ToolbarFooter from './ToolbarFooter';\nimport Table from './Table';\nimport PropTypes from 'prop-types';\nimport EmptyState from './Empty';\n\nconst RepositoryTable = ({ data, toolbarButtons, toggle }) => {\n  const [input, setInput] = useState('');\n  const [sortDirection, setSortDirection] = useState('desc');\n  const [perPage, setPerPage] = useState(10);\n  const [page, setPage] = useState(1);\n\n  const filteredByName = () =>\n    data.filter((repo) =>\n      repo.Name.toLowerCase().includes(input.toLowerCase())\n    );\n\n  const sortedByDirection = (rows) =>\n    rows.sort((a, b) =>\n      sortDirection === 'asc'\n        ? a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n        : b.name.toLowerCase().localeCompare(a.name.toLowerCase())\n    );\n\n  return (\n    <>\n      <ToolbarHeader\n        count={filteredByName().length}\n        toolbarButtons={toolbarButtons}\n        input={input}\n        setInput={setInput}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n      />\n      {filteredByName().length > 0 ? (\n        <Table\n          toggle={toggle}\n          columns={['Name']}\n          rows={sortedByDirection(filteredByName()).slice(\n            (page - 1) * perPage,\n            (page - 1) * perPage + perPage\n          )}\n          sortDirection={sortDirection}\n          setSortDirection={setSortDirection}\n        />\n      ) : (\n        <EmptyState\n          bgColor=\"white\"\n          icon=\"search\"\n          title=\"No match found\"\n          secondaryActions={[\n            {\n              title: 'Clear all filters',\n              onClick: () => setInput(''),\n            },\n          ]}\n        />\n      )}\n      <ToolbarFooter\n        count={filteredByName().length}\n        setInput={setInput}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n      />\n    </>\n  );\n};\nRepositoryTable.propTypes = {\n  data: PropTypes.array,\n  toolbarButtons: PropTypes.array,\n  toggle: PropTypes.func,\n};\n\nexport default RepositoryTable;\n","import React from 'react';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Popover } from '@patternfly/react-core';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\n//import { ExternalLinkAltIcon } from \"@patternfly/react-icons\";\n\nconst RepositoryHeader = () => {\n  return (\n    <PageHeader>\n      <>\n        <PageHeaderTitle title=\"Applications settings\" />\n        <p className=\"pf-u-mt-sm\">\n          Settings for Fleet Management\n          <Popover\n            aria-label=\"Basic popover\"\n            headerContent={<div>About Fleet Management</div>}\n            bodyContent={\n              <div>\n                Fleet Management is a service that allows you to provision,\n                update and maintain edge systems.\n              </div>\n            }\n            //footerContent={\n            //  <Button variant=\"link\" style={{ 'padding-left': 0 }}>\n            //    <a href=\"#\">Documentation</a>\n            //    <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            //  </Button>\n            //}\n          >\n            <QuestionCircleIcon\n              style={{ cursor: 'pointer' }}\n              className=\"pf-u-ml-xs\"\n            />\n          </Popover>\n        </p>\n      </>\n    </PageHeader>\n  );\n};\n\nexport default RepositoryHeader;\n","import React, { useEffect, useState } from 'react';\nimport EmptyState from './Empty';\nimport AddModal from './modals/AddModal';\nimport EditModal from './modals/EditModal';\nimport RemoveModal from './modals/RemoveModal';\nimport TableHeader from './TableHeader';\nimport RepositoryTable from './RepositoryTable';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport RepositoryHeader from './RepositoryHeader';\nimport { getCustomRepositories } from '../../api/index';\nimport { Skeleton } from '@patternfly/react-core';\n\nconst Repository = () => {\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [modalDetails, setModalDetails] = useState({\n    isOpen: {\n      add: false,\n      edit: false,\n      remove: false,\n    },\n    id: null,\n    name: '',\n    baseURL: '',\n  });\n\n  const toggle = ({ type, id = null, name = '', baseURL = '' }) => {\n    setModalDetails((prevState) => ({\n      ...prevState,\n      id,\n      name,\n      baseURL,\n      isOpen: {\n        ...prevState.isOpen,\n        [type]: !prevState.isOpen[type],\n      },\n    }));\n  };\n\n  const reloadData = async () => {\n    const repos = await getCustomRepositories();\n    setData(\n      repos.data.map((repo) => ({\n        id: repo.ID,\n        name: repo.Name,\n        baseURL: repo.URL,\n        ...repo,\n      }))\n    );\n    setLoaded(true);\n  };\n\n  useEffect(() => reloadData(), []);\n\n  return (\n    <>\n      <RepositoryHeader />\n      <Main>\n        {loaded ? (\n          data.length > 0 ? (\n            <>\n              <TableHeader />\n              <RepositoryTable\n                data={data}\n                columns={['Name']}\n                toolbarButtons={[\n                  {\n                    title: 'Add repository',\n                    click: () => toggle({ type: 'add' }),\n                  },\n                ]}\n                toggle={toggle}\n              />\n            </>\n          ) : (\n            <EmptyState\n              icon=\"repository\"\n              title=\"Add a custom repository\"\n              body=\"Add custom repositories to build RHEL for Edge images with additional packages.\"\n              primaryAction={{\n                text: 'Add Repository',\n                click: () => toggle({ type: 'add' }),\n              }}\n              secondaryActions={\n                [\n                  //{\n                  //  title: 'Learn more about custom repositories',\n                  //  type: 'link',\n                  //  link: '#',\n                  //},\n                ]\n              }\n            />\n          )\n        ) : (\n          <Skeleton />\n        )}\n        <AddModal\n          isOpen={modalDetails.isOpen.add}\n          toggle={toggle}\n          reloadData={reloadData}\n        />\n        <EditModal\n          isOpen={modalDetails.isOpen.edit}\n          id={modalDetails.id}\n          name={modalDetails.name}\n          baseURL={modalDetails.baseURL}\n          toggle={toggle}\n          reloadData={reloadData}\n        />\n        <RemoveModal\n          isOpen={modalDetails.isOpen.remove}\n          id={modalDetails.id}\n          name={modalDetails.name}\n          baseURL={modalDetails.baseURL}\n          toggle={toggle}\n          reloadData={reloadData}\n        />\n      </Main>\n    </>\n  );\n};\n\nexport default Repository;\n"],"names":["emptyStateIconMapper","repository","RepositoryIcon","search","SearchIcon","Empty","bgColor","icon","title","body","primaryAction","secondaryActions","EmptyState","style","backgroundColor","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","Button","onClick","click","variant","text","EmptyStateSecondaryActions","map","index","type","link","component","href","key","className","propTypes","PropTypes","RepoModal","isOpen","toggle","submitLabel","schema","initialValues","reloadData","onSubmit","Modal","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","values","onCancel","AddModal","addSchema","fields","name","label","placeholder","helperText","isRequired","validate","validatorTypes","createCustomRepository","EditModal","id","baseURL","editSchema","HelperText","hasIcon","HelperTextItem","console","log","setData","LabelWithText","TextContent","Text","RemoveModal","color","warningColor","padding","TextVariants","ToolbarButtons","buttons","ToolbarItem","ToolbarHeader","toolbarButtons","input","setInput","count","perPage","setPerPage","page","setPage","useEffect","Toolbar","ToolbarContent","InputGroup","TextInput","value","onChange","iconVariant","align","default","Pagination","isCompact","itemCount","onSetPage","_e","pageNumber","widgetId","onPerPageSelect","ToolbarFooter","Table","columns","rows","sortDirection","setSortDirection","TableComposable","Thead","Tr","column","columnIndex","Th","sort","sortBy","direction","onSort","prevState","Tbody","rowIndex","Td","dataLabel","classname","actions","items","RepositoryTable","data","useState","filteredByName","filter","repo","Name","toLowerCase","includes","length","a","b","localeCompare","slice","PageHeader","PageHeaderTitle","Popover","headerContent","bodyContent","cursor","loaded","setLoaded","add","edit","remove","modalDetails","setModalDetails","getCustomRepositories","repos","ID","URL","Main","TableHeader","Skeleton"],"sourceRoot":""}