{"version":3,"file":"js/4675.4631dd2ee50f216c4deb.js","mappings":"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","sources":["webpack:///./src/api/devices/index.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/edgeImageSets.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/imageSetDetail.js","webpack:///./src/store/edgeImagePackages.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/deviceTable.js"],"sourcesContent":["import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDevice = (id) => {\n  return instance.get(`${EDGE_API}/devices/${id}`);\n};\n\nexport const getDeviceUpdates = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/${id}?${q}`);\n};\n\nexport const updateSystem = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show system summary data',\n          description: 'Failed receiving system summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No system summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_SETS } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImageSetsPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImageSetsFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImageSetsRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_SETS}_PENDING`]: loadEdgeImageSetsPending,\n    [`${LOAD_EDGE_IMAGE_SETS}_FULFILLED`]: loadEdgeImageSetsFulfilled,\n    [`${LOAD_EDGE_IMAGE_SETS}_REJECTED`]: loadEdgeImageSetsRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_SET_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageSetDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageSetDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageSetDetailRejected = (state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_SET_DETAIL}_PENDING`]: loadImageSetDetailPending,\n    [`${LOAD_IMAGE_SET_DETAIL}_FULFILLED`]: loadImageSetDetailFulfilled,\n    [`${LOAD_IMAGE_SET_DETAIL}_REJECTED`]: loadImageSetDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_PACKAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagePackagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagePackagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagePackagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_PENDING`]: loadEdgeImagePackagesPending,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_FULFILLED`]: loadEdgeImagePackagesFulfilled,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_REJECTED`]: loadEdgeImagePackagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_TABLE } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceTablePending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceTableFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceTableRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_TABLE}_PENDING`]: loadDeviceTablePending,\n    [`${LOAD_DEVICE_TABLE}_FULFILLED`]: loadDeviceTableFulfilled,\n    [`${LOAD_DEVICE_TABLE}_REJECTED`]: loadDeviceTableRejected,\n  },\n  initialState\n);\n"],"names":["getInventory","query","q","getTableParams","instance","EDGE_API","getDevice","id","getDeviceUpdates","updateSystem","payload","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","POLLING_IMAGES","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","keyBy","k","loadImageDetail","dispatch","imageId","type","getImageById","createNewImage","callback","createImage","then","loadEdgeImageSets","fetchEdgeImageSets","addImageToPoll","name","applyReducerHash","isLoading","hasError","data","state","groups","results","meta","threshold","devicesInfo","canariesInfo","PropTypes","statusMapper","SecureIcon","isSecure","props","Icon","LockIcon","LockOpenIcon","propTypes","defaultProps","uuid","devices","error","_state"],"sourceRoot":""}