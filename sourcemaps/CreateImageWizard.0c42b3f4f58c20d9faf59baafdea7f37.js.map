{"version":3,"file":"js/CreateImageWizard.1668802568402.dec3c826d2e85a9cba9f.js","mappings":"gaAYMA,EAAmB,SAAH,GAA8B,IAAxBC,EAAY,EAAZA,aAAcC,EAAG,EAAHA,IACxC,OACE,kBAACC,EAAA,EAAW,KACV,kBAACC,EAAA,EAAK,CAACC,aAAa,MAClB,kBAACC,EAAA,EAAI,CAACC,UAAW,KAAMN,EAAaO,QAEtC,kBAACC,EAAA,EAAQ,CAACF,UAAWG,EAAAA,EAAAA,IAClBT,EAAaU,KAAKC,KAAI,SAACC,GAAG,OACzB,kBAAC,EAAAC,SAAQ,CAACZ,IAAKW,EAAIL,MAAQN,GACzB,kBAACa,EAAAC,EAAY,CAACT,UAAWU,EAAAA,EAAAA,IACtBJ,EAAIL,OAEP,kBAACO,EAAAC,EAAY,CAACT,UAAWU,EAAAA,EAAAA,IACtBJ,EAAIK,OAEE,KAKrB,EAEAlB,EAAiBmB,UAAY,CAC3BlB,aAAcmB,IAAAA,OACdlB,IAAKkB,IAAAA,QAGP,U,+lBClBA,IAWMC,EAAoB,SAAH,GAAsD,MAAhDC,EAAW,EAAXA,YAAaC,EAAc,EAAdA,eAAgBC,EAAY,EAAZA,aACxD,GAAkCC,EAAAA,EAAAA,UAAS,MAAK,eAAzCC,EAAS,KAAEC,EAAY,KACxBC,GAAWC,EAAAA,EAAAA,MACXC,EAAaR,EAAYS,WAAWC,OAAS,EAC7CC,EAAWX,EAAYS,WAAWnB,KAAI,SAACsB,GAAM,OAAKA,EAAOC,EAAE,IAC3DC,EAAaN,EACfR,EAAYS,WAAWnB,KAAI,SAACsB,GAAM,OAAKA,EAAOG,YAAY,IAC1Df,SAA0B,QAAf,EAAXA,EAAaS,WAAW,UAAE,WAAf,EAAX,EAA4BM,cAEhCC,EAAAA,EAAAA,YAAU,WApBS,IAACC,EAqBlBjB,SAAAA,EAAakB,YACTC,EAAAA,EAAAA,IAAY,CACVN,GAAIb,EAAYkB,WAChBE,EAAG,CACDC,MAAO,EACPC,QAAS,cACTC,OAAQ,aAETC,MAAK,SAACC,GAAI,OAAKpB,EAAaoB,EAAKC,KAAKC,OAAO,GAAG,KA7BrCV,EA8BDjB,EAAYiB,SA7B/BW,EAAAA,EAAAA,IAAa,CAAEf,GAAII,IAAWO,MAAK,SAACN,GAAU,aAC5CC,EAAAA,EAAAA,IAAY,CACVN,GAAIK,SAAiB,QAAP,EAAVA,EAAYW,aAAK,WAAP,EAAV,EAAmBC,WACvBV,EAAG,CACDC,MAAO,EACPC,QAAS,gBAEX,KAsBoCE,MAAK,SAACC,GAAI,OAC1CpB,EAAaoB,EAAKC,KAAKC,OAAO,GAAG,GAEzC,GAAG,IAEH,IAAMI,EAAiB,mCAAG,wGAEhBC,EAAAA,EAAAA,IAAa,CACjBC,YAAatB,IACb,OACFL,EAAS,EAAD,IACH4B,EAAAA,EAAAA,IAAgB,CACjBC,QAAS,OACTjD,MAAO,kBACPkD,YAAa5B,EAAU,WACfM,EAAWJ,OAAM,gDACjBI,EAAU,gCAEnB,+CAEHR,EAAS,EAAD,IACH4B,EAAAA,EAAAA,IAAgB,CACjBC,QAAS,SACTjD,MAAO,qCACPkD,YAAa,aAAF,OAAe,KAAIC,gBAE/B,OAGLC,IACApC,GAAeA,IAAsB,yDACtC,kBA1BsB,mCA4BjBoC,EAAc,WAClBrC,GAAe,SAACsC,GACd,OAAO,EAAP,KACKA,GAAS,IACZC,QAAQ,GAEZ,GACF,EAwCMC,EAAkB,CACtBvD,MAAO,qBAAF,OAAuBkB,aAAS,EAATA,EAAWyB,MAAMa,SAC7CrD,KAAM,CACJ,CAAEH,MAAO,aAAcU,MAAOQ,aAAS,EAATA,EAAWyB,MAAMc,MAC/C,CAAEzD,MAAO,UAAWU,MAAOQ,aAAS,EAATA,EAAWyB,MAAMa,SAC5C,CACExD,MAAO,UACPU,MAAO,kBAACgD,EAAA,EAAU,CAACC,KAAMzC,aAAS,EAATA,EAAWyB,MAAMiB,aAE5C,CACE5D,MAAO,UACPU,MAAOmD,EAAAA,GAAmB3C,aAAS,EAATA,EAAWyB,MAAMmB,iBAK3CC,EAAiB,CACrB/D,MAAO,wBAAF,QAA0BkB,aAAS,EAATA,EAAWyB,MAAMa,SAAU,GAC1DrD,KAAM,CACJ,CAAEH,MAAO,QAASU,OAAOQ,aAAS,EAATA,EAAW8C,eAAgB,GACpD,CAAEhE,MAAO,UAAWU,OAAOQ,aAAS,EAATA,EAAW+C,iBAAkB,GACxD,CAAEjE,MAAO,UAAWU,OAAOQ,aAAS,EAATA,EAAWgD,iBAAkB,KAItDC,EAAe,CACnBC,OAAQ,CACN,CACErE,UAAWsE,EAAAA,EAAAA,WACXC,KAAM,cACNC,MArDJ,kBAAC5E,EAAA,EAAW,KACV,kBAACG,EAAA,EAAI,cACI,IACP,0BAAM0E,UAAU,2CACblD,EAAa,GAAH,OAAMM,EAAWJ,OAAM,YAAaI,GACzC,IAAG,gDAGZd,EAAYS,WAAWkD,MACtB,SAAC/C,GAAM,MACmB,oBAAxBA,EAAOgD,cACiB,UAAxBhD,EAAOgD,YAAwB,KAEjC,kBAACC,EAAA,EAAK,CACJ1B,QAAQ,OACR2B,UAAQ,EACR5E,MAAM,mGACN6E,MAAO,CAAE,gCAAiC,OAsC9C,CACE9E,UAAWsE,EAAAA,EAAAA,WACXC,KAAM,iBACNC,MAAO/E,EAAiB,CACtBC,aAAc8D,EACd7D,IAAK,oBAGT,CACEK,UAAWsE,EAAAA,EAAAA,WACXC,KAAM,kBACNC,MAAO/E,EAAiB,CACtBC,aAAcsE,EACdrE,IAAK,qBAGT,CACEK,UAAWsE,EAAAA,EAAAA,WACXC,KAAM,eACNC,MAxFJ,kBAAC5E,EAAA,EAAW,CAAC6E,UAAU,cACrB,kBAAC1E,EAAA,EAAI,CACH+E,MAAO,CAAEC,MAAO,uCAChB/E,UAAU,SAEV,kBAAC,KAAuB,CACtB8E,MAAO,CAAEC,MAAO,yCACf,IAAG,yEAsFZ,OACE,oCACG5D,EACC,kBAAC6D,EAAA,EAAK,CACJC,KAAK,SACLhF,MAAK,uBACHsB,EAAa,IAAM,GAAE,4BAEvBgC,OAAQxC,EAAYwC,OACpB2B,WAAY,kBACVlE,GAAe,SAACsC,GAAS,cAAWA,GAAS,IAAEC,QAAQ,GAAK,GAAI,EAElE4B,YAAY,gBACZC,OAAQhB,EACRiB,SAAUvC,EACVwC,WAAYrE,IAGd,kBAACsE,EAAA,EAAQ,KACP,kBAACC,EAAA,EAAQ,KACP,kBAACC,EAAA,EAAO,CAACC,OAAK,EAACC,SAAS,YAMpC,EAEA7E,EAAkBF,UAAY,CAC5BK,aAAcJ,IAAAA,KACdE,YAAaF,IAAAA,MAAgB,CAC3B0C,OAAQ1C,IAAAA,KAAAA,WACRW,WAAYX,IAAAA,MAAAA,WACZM,UAAWN,IAAAA,OACXmB,QAASnB,IAAAA,OACToB,WAAYpB,IAAAA,SACX+E,WACH5E,eAAgBH,IAAAA,KAAAA,YAGlB,S,60BC7MA,IAAMgF,EAAc,SAAH,GAAiC,IAA3BC,EAAY,EAAZA,aAAcC,EAAM,EAANA,OACnC,GAAwB7E,EAAAA,EAAAA,YAAU,eAA3B8E,EAAI,KAAEC,EAAO,KACd5E,GAAWC,EAAAA,EAAAA,MACX4E,GAAwBC,EAAAA,EAAAA,IAC5B,uCAGIC,EAAc,WAClBN,IACAC,GAAUA,GACZ,GAEAhE,EAAAA,EAAAA,YAAU,YACR,iBAAC,wFACS,QAAR,EAAAsE,gBAAQ,OAAQ,QAAR,EAAR,EAAUC,cAAM,OAAM,QAAN,EAAhB,EAAkBC,YAAI,OAAtB,EACIC,UACDjE,MAAK,SAACkE,GAAM,OAAKR,EAAkBS,MAAVD,EAAsBA,EAAS,CAAC,EAAE,IAAE,0CAHlE,EAKF,GAAG,IAIH,IAAME,GAAkBC,EAAAA,EAAAA,MAExB,OAAOZ,EACL,kBAAC,IAAY,CACXa,QAAST,EACTU,sBAAuB,CACrBC,OAAQC,EAAAA,GAEV3B,SAAU,YAA6B,IAA1B4B,EAAM,EAANA,QACXC,EAD8B,EAAXA,cACP,kBAAM,CAAI,IACtB,IAAMC,EAAU,EAAH,KACRF,GAAM,IACTG,aAAc,YAEhBC,EAAAA,EAAAA,IAAehG,EAAU8F,GAAS,SAACG,GACjCjG,EAAS,EAAD,MACH4B,EAAAA,EAAAA,IAAgB,CACjBC,QAAS,OACTjD,MAAO,gBACPkD,YAAa,GAAF,OAAKmE,EAAK3G,MAAM+C,KAAI,qCAC/B,IACF6D,KAAM,CACJC,QAAS,CACP5F,GAAI,eAAF,OAAiB0F,EAAK3G,MAAM8G,GAAE,iBAChCC,QAAS,kBAAMC,EAAAA,EAAAA,IAAmBL,EAAK3G,MAAM8G,GAAG,EAChDG,UAAW,SAACN,GACV,OAAQA,EAAKO,QACX,IAAK,WACH,MAAO,EAAC,EAAM,IAChB,IAAK,QACH,MAAO,EAAC,EAAO,WACjB,QACE,MAAO,EAAC,EAAO,WAErB,EACAC,QAAS,CACPC,QAAS,CACP,SAAC1G,GAAQ,OACPA,GACE4B,EAAAA,EAAAA,IAAgB,CACdC,QAAS,SACTjD,MAAO,qBACPkD,YAAa,GAAF,OAAKmE,EAAK3G,MAAM+C,KAAI,8CAElC,GAELsE,QAAS,CACP,SAAC3G,GAAQ,OACPA,GACE4B,EAAAA,EAAAA,IAAgB,CACdC,QAAS,UACTjD,MAAO,iBACPkD,YAAa,GAAF,OAAKmE,EAAK3G,MAAM+C,KAAI,+BAElC,SAMb0C,GACF,GACF,EACA6B,YAAY,SACZC,cAAe,CACbC,QAAS,EACTC,QAASlC,EAAwBmC,EAAAA,GAAoBC,EAAAA,IAEvDlD,OAAQ,CACNf,OAAQ,CACN,CACErE,UAAWsE,EAAAA,EAAAA,OACXC,KAAM,uBACNE,UAAW,gBACX8D,WAAW,EACXC,SAAS,EACTC,aAAc,CACZC,OAAQ,gBAEVC,YAAY,EACZ1I,MAAO,eACP2I,WAAY,CACV,UACA,YACA,2BACA,eAIFvE,OAAQ,CACNsC,EACAkC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAjC,EAAAA,GACAkC,EAAAA,SAOV,kBAAC,IAAO,KAEZ,EAEApD,EAAYjF,UAAY,CACtBkF,aAAcjF,IAAAA,KACdkF,OAAQlF,IAAAA,MAEVgF,EAAYqD,aAAe,CACzBpD,aAAc,WAAe,GAG/B,S","sources":["webpack:///./src/components/BuildModalReview.js","webpack:///./src/Routes/Devices/UpdateDeviceModal.js","webpack:///./src/Routes/ImageManager/CreateImageWizard.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextListItemVariants,\n  TextListVariants,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BuildModalReview = ({ reviewObject, key }) => {\n  return (\n    <TextContent>\n      <Title headingLevel=\"h3\">\n        <Text component={'b'}>{reviewObject.title}</Text>\n      </Title>\n      <TextList component={TextListVariants.dl}>\n        {reviewObject.rows.map((row) => (\n          <Fragment key={row.title + key}>\n            <TextListItem component={TextListItemVariants.dt}>\n              {row.title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {row.value}\n            </TextListItem>\n          </Fragment>\n        ))}\n      </TextList>\n    </TextContent>\n  );\n};\n\nBuildModalReview.propTypes = {\n  reviewObject: PropTypes.object,\n  key: PropTypes.string,\n};\n\nexport default BuildModalReview;\n","import React, { useEffect, useState } from 'react';\nimport {\n  TextContent,\n  Text,\n  Bullseye,\n  Backdrop,\n  Spinner,\n  Alert,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { getImageById, getImageSet } from '../../api/images';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Modal from '../../components/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport BuildModalReview from '../../components/BuildModalReview';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\n\nconst getImageData = (imageId) =>\n  getImageById({ id: imageId }).then((imageSetId) =>\n    getImageSet({\n      id: imageSetId?.image?.ImageSetID,\n      q: {\n        limit: 1,\n        sort_by: '-created_at',\n      },\n    })\n  );\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const [imageData, setImageData] = useState(null);\n  const dispatch = useDispatch();\n  const isMultiple = updateModal.deviceData.length > 1;\n  const deviceId = updateModal.deviceData.map((device) => device.id);\n  const deviceName = isMultiple\n    ? updateModal.deviceData.map((device) => device.display_name)\n    : updateModal?.deviceData[0]?.display_name;\n\n  useEffect(() => {\n    updateModal?.imageSetId\n      ? getImageSet({\n          id: updateModal.imageSetId,\n          q: {\n            limit: 1,\n            sort_by: '-created_at',\n            status: 'SUCCESS',\n          },\n        }).then((data) => setImageData(data.Data.images[0]))\n      : getImageData(updateModal.imageId).then((data) =>\n          setImageData(data.Data.images[0])\n        );\n  }, []);\n\n  const handleUpdateModal = async () => {\n    try {\n      await updateSystem({\n        DevicesUUID: deviceId,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating system',\n          description: isMultiple\n            ? ` ${deviceName.length} systems were added to the queue.`\n            : ` ${deviceName} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a system was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  const WarningText = () => (\n    <TextContent className=\"pf-u-pt-md\">\n      <Text\n        style={{ color: 'var(--pf-global--warning-color--200' }}\n        component=\"small\"\n      >\n        <ExclamationTriangleIcon\n          style={{ color: 'var(--pf-global--warning-color--100' }}\n        />{' '}\n        After the update is installed, the system will apply the changes.\n      </Text>\n    </TextContent>\n  );\n\n  const Description = () => (\n    <TextContent>\n      <Text>\n        Update{' '}\n        <span className=\"pf-u-font-weight-bold pf-u-font-size-md\">\n          {isMultiple ? `${deviceName.length} systems` : deviceName}\n        </span>{' '}\n        to latest version of the image linked to it.\n      </Text>\n      {updateModal.deviceData.some(\n        (device) =>\n          device.deviceStatus !== 'updateAvailable' &&\n          device.deviceStatus !== 'error'\n      ) && (\n        <Alert\n          variant=\"info\"\n          isInline\n          title=\"Some systems will not be updated. This action will update only systems with an update available.\"\n          style={{ '--pf-c-content--h4--MarginTop': 0 }}\n        />\n      )}\n    </TextContent>\n  );\n\n  const updateToDetails = {\n    title: `Update to version ${imageData?.image.Version}`,\n    rows: [\n      { title: 'Image Name', value: imageData?.image.Name },\n      { title: 'Version', value: imageData?.image.Version },\n      {\n        title: 'Created',\n        value: <DateFormat date={imageData?.image.CreatedAt} />,\n      },\n      {\n        title: 'Release',\n        value: distributionMapper[imageData?.image.Distribution],\n      },\n    ],\n  };\n\n  const packageDetails = {\n    title: `Changes from version ${imageData?.image.Version - 1}`,\n    rows: [\n      { title: 'Added', value: imageData?.update_added || 0 },\n      { title: 'Removed', value: imageData?.update_removed || 0 },\n      { title: 'Updated', value: imageData?.update_updated || 0 },\n    ],\n  };\n\n  const updateSchema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: Description(),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({\n          reviewObject: updateToDetails,\n          key: 'update-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'package-details',\n        label: BuildModalReview({\n          reviewObject: packageDetails,\n          key: 'package-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-text',\n        label: WarningText(),\n      },\n    ],\n  };\n\n  return (\n    <>\n      {imageData ? (\n        <Modal\n          size=\"medium\"\n          title={`Update system${\n            isMultiple ? 's' : ''\n          } to latest image version`}\n          isOpen={updateModal.isOpen}\n          closeModal={() =>\n            setUpdateModal((prevState) => ({ ...prevState, isOpen: false }))\n          }\n          submitLabel=\"Update system\"\n          schema={updateSchema}\n          onSubmit={handleUpdateModal}\n          reloadData={refreshTable}\n        />\n      ) : (\n        <Backdrop>\n          <Bullseye>\n            <Spinner isSVG diameter=\"100px\" />\n          </Bullseye>\n        </Backdrop>\n      )}\n    </>\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.array.isRequired,\n    imageData: PropTypes.object,\n    imageId: PropTypes.number,\n    imageSetId: PropTypes.number,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n","import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  registration,\n  review,\n  packages,\n  repositories,\n  getImageSetDetailsSchema,\n  imageOutput,\n  customPackages,\n} from './steps';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage } from '../../store/actions';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getEdgeImageStatus } from '../../api/images';\nimport { useFeatureFlags } from '../../utils';\nimport { DEFAULT_RELEASE, TEMPORARY_RELEASE } from '../../constants';\n\nconst CreateImage = ({ navigateBack, reload }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  // Re-initialize imageSetDetails schema each render, to avoid cache\n  // of async validator results across multiple instances of the form.\n  const imageSetDetails = getImageSetDetailsSchema();\n\n  return user ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          architecture: 'x86_64',\n        };\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Created image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        version: 0,\n        release: temporaryReleasesFlag ? TEMPORARY_RELEASE : DEFAULT_RELEASE,\n      }}\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Create image',\n            },\n            showTitles: true,\n            title: 'Create image',\n            crossroads: [\n              'release',\n              'imageType',\n              'third-party-repositories',\n              'imageOutput',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              imageSetDetails,\n              imageOutput,\n              registration,\n              repositories,\n              packages,\n              review,\n              customPackages,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  reload: PropTypes.func,\n};\nCreateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default CreateImage;\n"],"names":["BuildModalReview","reviewObject","key","TextContent","Title","headingLevel","Text","component","title","TextList","TextListVariants","rows","map","row","Fragment","TextListItem","T","TextListItemVariants","value","propTypes","PropTypes","UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","useState","imageData","setImageData","dispatch","useDispatch","isMultiple","deviceData","length","deviceId","device","id","deviceName","display_name","useEffect","imageId","imageSetId","getImageSet","q","limit","sort_by","status","then","data","Data","images","getImageById","image","ImageSetID","handleUpdateModal","updateSystem","DevicesUUID","addNotification","variant","description","statusText","handleClose","prevState","isOpen","updateToDetails","Version","Name","DateFormat","date","CreatedAt","distributionMapper","Distribution","packageDetails","update_added","update_removed","update_updated","updateSchema","fields","componentTypes","name","label","className","some","deviceStatus","Alert","isInline","style","color","Modal","size","closeModal","submitLabel","schema","onSubmit","reloadData","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","CreateImage","navigateBack","reload","user","setUser","temporaryReleasesFlag","useFeatureFlags","closeAction","insights","chrome","auth","getUser","result","undefined","imageSetDetails","getImageSetDetailsSchema","onClose","customComponentMapper","review","ReviewStep","values","setIsSaving","payload","architecture","createNewImage","resp","meta","polling","ID","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","defaultArch","initialValues","version","release","TEMPORARY_RELEASE","DEFAULT_RELEASE","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","imageOutput","registration","repositories","packages","customPackages","defaultProps"],"sourceRoot":""}