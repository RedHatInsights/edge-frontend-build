{"version":3,"file":"js/8279.775edba78e2854050b78.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.mjs","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Devices/AddSystemsToGroupModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/hooks/useApi.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Breadcrumb/breadcrumb';\nimport { css } from '@patternfly/react-styles';\nimport { useOUIAProps } from '../../helpers';\nexport const Breadcrumb = (_a) => {\n    var { children = null, className = '', 'aria-label': ariaLabel = 'Breadcrumb', ouiaId, ouiaSafe = true } = _a, props = __rest(_a, [\"children\", \"className\", 'aria-label', \"ouiaId\", \"ouiaSafe\"]);\n    const ouiaProps = useOUIAProps(Breadcrumb.displayName, ouiaId, ouiaSafe);\n    return (React.createElement(\"nav\", Object.assign({}, props, { \"aria-label\": ariaLabel, className: css(styles.breadcrumb, className) }, ouiaProps),\n        React.createElement(\"ol\", { className: styles.breadcrumbList }, React.Children.map(children, (child, index) => {\n            const showDivider = index > 0;\n            if (React.isValidElement(child)) {\n                return React.cloneElement(child, { showDivider });\n            }\n            return child;\n        }))));\n};\nBreadcrumb.displayName = 'Breadcrumb';\n//# sourceMappingURL=Breadcrumb.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport styles from '@patternfly/react-styles/css/components/Breadcrumb/breadcrumb';\nimport { css } from '@patternfly/react-styles';\nexport const BreadcrumbItem = (_a) => {\n    var { children = null, className: classNameProp = '', to = undefined, isActive = false, isDropdown = false, showDivider, target = undefined, component = 'a', render = undefined } = _a, props = __rest(_a, [\"children\", \"className\", \"to\", \"isActive\", \"isDropdown\", \"showDivider\", \"target\", \"component\", \"render\"]);\n    const Component = component;\n    const ariaCurrent = isActive ? 'page' : undefined;\n    const className = css(styles.breadcrumbLink, isActive && styles.modifiers.current);\n    return (React.createElement(\"li\", Object.assign({}, props, { className: css(styles.breadcrumbItem, classNameProp) }),\n        showDivider && (React.createElement(\"span\", { className: styles.breadcrumbItemDivider },\n            React.createElement(AngleRightIcon, null))),\n        component === 'button' && (React.createElement(\"button\", { className: className, \"aria-current\": ariaCurrent, type: \"button\" }, children)),\n        isDropdown && React.createElement(\"span\", { className: css(styles.breadcrumbDropdown) }, children),\n        render && render({ className, ariaCurrent }),\n        to && !render && (React.createElement(Component, { href: to, target: target, className: className, \"aria-current\": ariaCurrent }, children)),\n        !to && component !== 'button' && !isDropdown && children));\n};\nBreadcrumbItem.displayName = 'BreadcrumbItem';\n//# sourceMappingURL=BreadcrumbItem.js.map","import './breadcrumb.css';\nexport default {\n  \"breadcrumb\": \"pf-c-breadcrumb\",\n  \"breadcrumbDropdown\": \"pf-c-breadcrumb__dropdown\",\n  \"breadcrumbHeading\": \"pf-c-breadcrumb__heading\",\n  \"breadcrumbItem\": \"pf-c-breadcrumb__item\",\n  \"breadcrumbItemDivider\": \"pf-c-breadcrumb__item-divider\",\n  \"breadcrumbLink\": \"pf-c-breadcrumb__link\",\n  \"breadcrumbList\": \"pf-c-breadcrumb__list\",\n  \"dropdownToggle\": \"pf-c-dropdown__toggle\",\n  \"modifiers\": {\n    \"current\": \"pf-m-current\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Button, Modal } from '@patternfly/react-core';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { getInventory } from '../../api/devices';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst AddSystemsToGroupModal = ({\n  groupId,\n  closeModal,\n  isOpen,\n  reloadData,\n  groupName,\n  locationProp,\n  navigateProp,\n}) => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [deviceIds, setDeviceIds] = useState([]);\n  const dispatch = useDispatch();\n\n  const handleAddDevicesToGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `An error occurred making the request`,\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () =>\n        addDevicesToGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(async () => await reloadData(), 500);\n    closeModal();\n  };\n\n  return (\n    <Modal\n      id=\"add-systems-modal\"\n      title=\"Add systems\"\n      position=\"top\"\n      isOpen={isOpen}\n      onClose={closeModal}\n      variant=\"large\"\n      actions={[\n        <Button\n          isDisabled={deviceIds.length === 0}\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={handleAddDevicesToGroup}\n        >\n          Add systems\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <DeviceTable\n        selectedItems={setDeviceIds}\n        skeletonRowQuantity={15}\n        hasCheckbox={true}\n        isLoading={isLoading}\n        hasError={hasError}\n        count={data?.count}\n        data={data?.data?.devices || []}\n        fetchDevices={fetchDevices}\n        enforceEdgeGroups={data?.data?.enforce_edge_groups}\n        locationProp={locationProp}\n        navigateProp={navigateProp}\n      />\n    </Modal>\n  );\n};\nAddSystemsToGroupModal.propTypes = {\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n  groupName: PropTypes.string,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n};\n\nexport default AddSystemsToGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Flex,\n  FlexItem,\n  Skeleton,\n  Tooltip,\n} from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport Empty from '../../components/Empty';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/groups';\nimport AddSystemsToGroupModal from '../Devices/AddSystemsToGroupModal';\nimport {\n  canUpdateSelectedDevices,\n  createLink,\n  emptyStateNoFilters,\n} from '../../utils';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\nimport RenameGroupModal from '../Groups/RenameGroupModal';\nimport PropTypes from 'prop-types';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst GroupsDetail = ({ locationProp, navigateProp, paramsProp }) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const params = paramsProp ? paramsProp() : useParams();\n  const groupId = params?.id ? params.id : params.groupId;\n  const { search, pathname } = locationProp ? locationProp() : useLocation();\n  const currentApplicationPath =\n    window.location.pathname.indexOf('edge') > 0 ? 'edge' : paths.inventory;\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchDevices] = useApi({\n    api: getGroupById,\n    id: groupId,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove system' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} systems have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove systems' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const actionsLabel = 'Actions for group details view';\n  const dropdownId = 'group-details-dropdown';\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              {createLink({\n                pathname:\n                  currentApplicationPath === 'edge'\n                    ? `edge${paths.fleetManagement}`\n                    : `insights/inventory/groups`,\n                linkText: 'Groups',\n              })}\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb>\n            <BreadcrumbItem isActive>\n              <Skeleton width=\"100px\" />\n            </BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id={dropdownId}\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                  aria-label={actionsLabel}\n                >\n                  <Tooltip\n                    content={actionsLabel}\n                    reference={() => document.getElementById(dropdownId)}\n                  />\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"rename-device-group\"\n                  onClick={() => handleRenameModal(groupId, groupName)}\n                >\n                  Rename group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.DevicesView?.devices?.map((device) => ({\n                      imageSetId: device?.ImageSetID,\n                    })),\n                    imageData: data?.DevicesView?.devices?.some(\n                      (device) => device.ImageID\n                    ),\n                  })}\n                  onClick={() => {\n                    setIsDropdownOpen(false);\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.DevicesView?.devices?.map((device) => ({\n                        id: device?.DeviceUUID,\n                        display_name:\n                          device?.DeviceName === ''\n                            ? 'localhost'\n                            : device?.DeviceName,\n                      })),\n                      imageSetId: data?.DevicesView?.devices.find(\n                        (device) => device.ImageSetID\n                      )?.ImageSetID,\n                    }));\n                  }}\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <section className=\"edge-devices pf-l-page__main-section pf-c-page__main-section\">\n        {!emptyStateNoFilters(\n          isLoading,\n          data?.DeviceGroup?.Devices.length,\n          search\n        ) ? (\n          <DeviceTable\n            data={data?.DevicesView?.devices || []}\n            count={data?.DevicesView?.total}\n            isLoading={isLoading}\n            locationProp={locationProp}\n            navigateProp={navigateProp}\n            paramsProp={useParams}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: 'Remove from group',\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageSetId: deviceIds.find((device) => device?.imageSetId)\n                      .imageSetId,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchDevices={fetchDevices}\n            isAddSystemsView={true}\n            enforceEdgeGroups={data?.DevicesView?.enforce_edge_groups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Add systems to the group\"\n              body=\"Create groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </section>\n      {isAddModalOpen && (\n        <AddSystemsToGroupModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchDevices}\n          groupName={data?.DeviceGroup?.Name}\n          locationProp={locationProp}\n          navigateProp={navigateProp}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          closeModal={() => setRemoveModal(false)}\n          title={'Remove from group'}\n          submitLabel={'Remove'}\n          variant=\"danger\"\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchDevices}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths.fleetManagement)}\n          modalState={modalState}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={() => fetchDevices()}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nGroupsDetail.propTypes = {\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  paramsProp: PropTypes.func,\n};\n\nexport default GroupsDetail;\n","import { EDGE_API, INVENTORY_API_BASE, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const createInventoryGroup = (payload) => {\n  return instance.post(`${INVENTORY_API_BASE}/groups`, { name: payload.name });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getInventoryGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${INVENTORY_API_BASE}/groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const addDevicesToInventoryGroup = (groupId, devices) => {\n  const devicesIDS = [];\n  devices.forEach((device) => devicesIDS.push(device.UUID));\n\n  return instance.post(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts`,\n    devicesIDS\n  );\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDevicesFromInventoryGroup = (groupId, devices) => {\n  return instance.delete(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts/` + devices.join(',')\n  );\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n\nexport const getEnforceEdgeGroups = () => {\n  return instance.get(`${EDGE_API}/device-groups/enforce-edge-groups`);\n};\n\nexport const validateInventoryGroupName = (name) => {\n  return instance.get(\n    `${INVENTORY_API_BASE}/groups?name=${name}&order_by=name&order_how=ASC`\n  );\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["Breadcrumb","_a","children","className","ariaLabel","ouiaId","ouiaSafe","props","__rest","ouiaProps","displayName","Object","assign","child","index","showDivider","BreadcrumbItem","classNameProp","to","isActive","isDropdown","target","component","render","Component","ariaCurrent","undefined","type","href","description","name","schema","fields","componentTypes","label","validate","validatorTypes","WarningIcon","color","warningColor","DeleteGroupModal","isModalOpen","setIsModalOpen","reloadData","modalState","id","dispatch","useDispatch","isOpen","closeModal","title","titleIconVariant","variant","submitLabel","onSubmit","statusMessages","onSuccess","onError","apiWithToast","deleteGroupById","propTypes","PropTypes","asyncGroupNameValidation","value","validateGroupName","data","isValid","createGroupSchema","helperText","isRequired","threshold","nameValidator","RenameGroupModal","initialValues","values","updateGroupById","AddSystemsToGroupModal","groupId","groupName","locationProp","navigateProp","useApi","api","getInventory","tableReload","response","fetchDevices","isLoading","hasError","useState","deviceIds","setDeviceIds","Modal","position","onClose","actions","Button","isDisabled","length","key","onClick","addDevicesToGroup","parseInt","map","device","ID","deviceID","setTimeout","DeviceTable","selectedItems","skeletonRowQuantity","hasCheckbox","count","devices","enforceEdgeGroups","enforce_edge_groups","UpdateDeviceModal","React","GroupsDetail","paramsProp","history","useHistory","params","useParams","useLocation","search","pathname","currentApplicationPath","window","location","indexOf","paths","isDropdownOpen","setIsDropdownOpen","isAddModalOpen","setIsAddModalOpen","deviceId","removeModal","setRemoveModal","deviceData","imageData","updateModal","setUpdateModal","getGroupById","DeviceGroup","Name","getDeviceIds","hasModalSubmitted","setHasModalSubmitted","setModalState","isDeleteModalOpen","setIsDeleteModalOpen","isRenameModalOpen","setIsRenameModalOpen","handleSingleDeviceRemoval","removeDeviceFromGroupById","actionsLabel","dropdownId","PageHeader","createLink","linkText","Skeleton","width","Flex","justifyContent","default","FlexItem","PageHeaderTitle","Dropdown","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","onToggle","newState","Tooltip","content","reference","document","getElementById","dropdownItems","DropdownItem","canUpdateSelectedDevices","DevicesView","imageSetId","ImageSetID","some","ImageID","prevState","DeviceUUID","display_name","DeviceName","find","emptyStateNoFilters","Devices","Empty","icon","body","primaryAction","text","click","secondaryActions","link","total","kebabItems","updateImageData","isAddSystemsView","removeDevicesFromGroup","Suspense","fallback","Bullseye","Spinner","navigateBack","push","refreshTable","createGroup","payload","instance","EDGE_API","Type","createInventoryGroup","INVENTORY_API_BASE","getGroups","query","q","getTableParams","getInventoryGroups","addDevicesToInventoryGroup","devicesIDS","forEach","UUID","removeDevicesFromInventoryGroup","join","getEnforceEdgeGroups","validateInventoryGroupName","RepoModal","size","additionalMappers","validatorMapper","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","onCancel","setData","setIsLoading","setHasError","apiFunc","setAPIFunc","hasSuccess","fetchData","addNotification","useEffect","_objectWithoutProperties","source","excluded","i","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call"],"sourceRoot":""}