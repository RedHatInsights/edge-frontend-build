{"version":3,"file":"js/GroupsDetailPage.f24b5810ef2c6b8eb493.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Devices/DeviceModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  imageTypeMapper,\n  releaseMapper,\n} from '../ImageManagerDetail/constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail, loadEdgeImageSets } from '../../store/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Update image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Create image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      //onSubmit={handleUpdateModal}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Create Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/index';\n\nconst getActiveAlert = (\n  CVEs,\n  systemProfile,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !systemProfile?.system_profile) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    systemProfile?.system_profile?.status === 'BUILDING' ||\n    systemProfile?.system_profile?.status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (\n    systemProfile?.system_profile?.image_data?.ImageInfo?.UpdatesAvailable\n      ?.length > 0\n  ) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  systemProfile,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { params } = useRouteMatch('/inventory/:deviceId');\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!systemProfile?.system_profile) {\n        return;\n      }\n      const id = {\n        id: systemProfile?.system_profile?.image_data?.ImageInfo?.Image\n          ?.ImageSetID,\n      };\n      const newImageData = await getImageSet(id);\n      setNewImageStatus(newImageData?.Data?.images?.[0]?.image?.Status);\n    })();\n  }, [systemProfile]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, systemProfile, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, systemProfile, newImageStatus]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your device.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update device to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update Device\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Device updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <Main className=\"add-100vh\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: params.deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </Main>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.string,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n          <VulnerabilityTab\n            systemProfile={systemProfile}\n            setUpdateModal={setUpdateModal}\n            imageId={imageId}\n            setReload={setReload}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.string,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { getDeviceHasUpdate } from '../../api/index';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          ...prevState.deviceData,\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n            system_profile: {\n              image_data,\n              status:\n                image_data?.UpdateTransactions?.[\n                  image_data.UpdateTransactions.length - 1\n                ]?.Status,\n            },\n          },\n        ],\n        imageData: image_data?.ImageInfo?.UpdatesAvailable?.[0],\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/inventory'}>\n                {uuid ? 'Groups' : 'Inventory'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n                    ?.UpdatesAvailable?.length > 0,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : updateModal?.deviceData?.system_profile?.status === 'BUILDING' ||\n            updateModal?.deviceData?.system_profile?.status === 'CREATED' ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"blue\"\n              icon={<InProgressIcon />}\n            >\n              Updating\n            </Label>\n          ) : updateModal?.deviceData?.system_profile?.image_data?.ImageInfo\n              ?.UpdatesAvailable?.length > 0 ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"orange\"\n              icon={<ExclamationTriangleIcon />}\n            >\n              Update Available\n            </Label>\n          ) : (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"green\"\n              icon={<CheckCircleIcon color=\"green\" />}\n            >\n              Running\n            </Label>\n          )}\n        </PageHeader>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <DeviceDetailTabs\n              systemProfile={updateModal?.deviceData}\n              imageId={imageId}\n              setUpdateModal={setUpdateModal}\n              setReload={setReload}\n            />\n          </GridItem>\n        </Grid>\n        {updateModal.isOpen && (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <UpdateDeviceModal\n              navigateBack={() => {\n                history.push({ pathname: history.location.pathname });\n                setUpdateModal((prevState) => {\n                  return {\n                    ...prevState,\n                    isOpen: false,\n                  };\n                });\n              }}\n              setUpdateModal={setUpdateModal}\n              updateModal={updateModal}\n              refreshTable={() => setReload(true)}\n            />\n          </Suspense>\n        )}\n      </DetailWrapper>\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport { loadDeviceTable } from '../../store/actions';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport { emptyStateNoFliters } from '../../constants';\n\nconst getDeviceStatus = (deviceData) =>\n  deviceData?.ImageInfo?.UpdatesAvailable\n    ? 'updateAvailable'\n    : deviceData?.Device?.Booted\n    ? 'running'\n    : 'booting';\n\nconst DeviceStatus = ({ Device }) => {\n  const status = getDeviceStatus(Device);\n  const statusType = {\n    booting: (\n      <Split className=\"pf-u-info-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    ),\n    running: (\n      <Split className=\"pf-u-success-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <CheckCircleIcon />\n        </SplitItem>\n        <SplitItem>Running</SplitItem>\n      </Split>\n    ),\n    updateAvailable: (\n      <Split className=\"pf-u-warning-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon />\n        </SplitItem>\n        <SplitItem>Update Available</SplitItem>\n      </Split>\n    ),\n  };\n\n  return statusType[status];\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Image',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Booting', value: 'booting' },\n      { option: 'Running', value: 'running' },\n      { option: 'Update Available', value: 'updateAvailable' },\n      { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(30)],\n  },\n  {\n    title: 'Image',\n    type: 'image',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Groups',\n    type: 'groups',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last Seen',\n    type: 'last_seen',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n];\n\nconst createRows = (devices) =>\n  devices?.map((device) => ({\n    rowInfo: {\n      deviceID: device?.Device?.ID,\n      id: device?.Device?.UUID,\n      display_name: device?.Device?.DeviceName,\n      updateImageData: device?.ImageInfo?.UpdatesAvailable?.[0],\n      deviceStatus: getDeviceStatus(device),\n      imageSetId: device?.ImageInfo?.Image?.ImageSetID,\n      imageName: device?.ImageInfo?.Image?.Name,\n    },\n    noApiSortFilter: [\n      device?.Device?.DeviceName || '',\n      device?.ImageInfo?.Image?.Name || '',\n      '',\n      device?.Device?.LastSeen || '',\n      getDeviceStatus(device),\n    ],\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['inventory']}/${device?.Device?.UUID}`}>\n            {device?.Device?.DeviceName}\n          </Link>\n        ),\n      },\n      {\n        title: device?.ImageInfo?.Image?.Name ? (\n          <Link\n            to={`${paths['manage-images']}/${device?.ImageInfo?.Image?.ImageSetID}/versions/${device?.ImageInfo?.Image?.ID}/details`}\n          >\n            {device?.ImageInfo?.Image?.Name}\n          </Link>\n        ) : (\n          'unavailable'\n        ),\n      },\n      {\n        title: '-',\n      },\n      {\n        title: <DateFormat date={device?.Device?.LastSeen} />,\n      },\n      {\n        title: <DeviceStatus Device={device} />,\n      },\n    ],\n  }));\n\nconst DeviceTable = ({\n  hasCheckbox = false,\n  selectedItems,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  setUpdateModal,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (!areActionsDisabled(rowData)) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          setUpdateModal((prevState) => {\n            return {\n              ...prevState,\n              isOpen: true,\n              deviceData: {\n                id: rowData.rowInfo.id,\n                display_name: rowData.rowInfo.display_name,\n              },\n              imageData: rowData.rowInfo.updateImageData,\n            };\n          });\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: 'Remove from group',\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.deviceStatus !== 'updateAvailable';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Connect edge devices'}\n          body={\n            'Connect and manage edge devices here after registering them via the console. To start, create a RHEL for Edge image and install it to your target device.'\n          }\n          secondaryActions={[\n            {\n              title: 'How to connect a device',\n              link: '/',\n              type: 'link',\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={false}\n          filters={defaultFilters}\n          loadTableData={loadDeviceTable}\n          tableData={{\n            count: count,\n            isLoading: isLoading,\n            hasError: hasError,\n          }}\n          columnNames={columnNames}\n          rows={createRows(data || [])}\n          actionResolver={actionResolver}\n          areActionsDisabled={canBeRemoved ? false : areActionsDisabled}\n          defaultSort={{ index: 3, direction: 'desc' }}\n          toolbarButtons={\n            canBeAdded\n              ? [\n                  {\n                    title: 'Add systems',\n                    click: () => setIsAddModalOpen(true),\n                  },\n                ]\n              : []\n          }\n          hasCheckbox={hasCheckbox}\n          skeletonRowQuantity={skeletonRowQuantity}\n          selectedItems={selectedItems}\n          kebabItems={kebabItems}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\nDeviceTable.propTypes = {\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.array,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  setUpdateModal: PropTypes.func,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n};\n\nexport default DeviceTable;\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useHistory } from 'react-router-dom';\nimport DeviceTable from './DeviceTable';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst Inventory = () => {\n  const [response, fetchData] = useApi(getInventory);\n  const { data, isLoading, hasError } = response;\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const history = useHistory();\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <DeviceTable\n          data={data?.data}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchData}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Inventory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Image',\n    type: 'text',\n  },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n}) => {\n  const actionResolver = (rowData) => {\n    const { id, title } = rowData;\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData?.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image: ID === 3448 ? 'Multiple images' : 'Golden image',\n      },\n      noApiSortFilter: [\n        Name,\n        '',\n        ID === 3448 ? 'Multiple images' : 'Golden image',\n      ],\n      cells: [\n        {\n          title: <Link to={`${paths['fleet-management']}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={false}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'desc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={[\n          {\n            title: 'Create group',\n            click: handleCreateModal,\n          },\n        ]}\n      />\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  openModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { createGroup } from '../../api';\nimport { nameValidator } from '../../constants';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({ isModalOpen, setIsModalOpen, reloadData }) => {\n  const dispatch = useDispatch();\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Create Group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={handleCreateGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById } from '../../api';\nimport { nameValidator } from '../../constants';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/index';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\n\nconst Groups = () => {\n  const [response, fetchData] = useApi(getGroups);\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {isLoading || data?.count > 0 ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"module\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your devices more effectively\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: '#',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={fetchData}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={fetchData}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={fetchData}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","import React from 'react';\nimport Modal from '../../components/Modal';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/index';\nimport { getInventory } from '../../api';\nimport useApi from '../../hooks/useApi';\n\nconst DeviceModal = ({ groupId, closeModal, isOpen, reloadData }) => {\n  const [response] = useApi(getInventory);\n  const { data, isLoading, hasError } = response;\n  let deviceIds = [];\n  const getDeviceIds = (values) => {\n    deviceIds = values;\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      openModal={closeModal}\n      title=\"Add systems\"\n      submitLabel=\"Add systems\"\n      additionalMappers={{\n        'device-table': {\n          component: DeviceTable,\n          selectedItems: getDeviceIds,\n          skeletonRowQuantity: 15,\n          hasCheckbox: true,\n          isLoading,\n          hasError,\n          count: data?.count,\n          data: data?.data || [],\n        },\n      }}\n      schema={{\n        fields: [{ component: 'device-table', name: 'device-table' }],\n      }}\n      onSubmit={() => {\n        addDevicesToGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        );\n      }}\n      reloadData={reloadData}\n      size=\"large\"\n    />\n  );\n};\nDeviceModal.propTypes = {\n  // possibly remove some of these\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n};\n\nexport default DeviceModal;\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Flex,\n  FlexItem,\n  Skeleton,\n} from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Empty from '../../components/Empty';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/index';\nimport DeviceModal from '../Devices/DeviceModal';\nimport { canUpdateSelectedDevices, stateToUrlSearch } from '../../constants';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst GroupsDetail = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const history = useHistory();\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchData] = useApi(() => getGroupById(groupId));\n  const { data, isLoading, hasError } = response;\n  const { groupId } = params;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  useEffect(() => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('add_system_modal=true', isAddModalOpen),\n    });\n  }, [isAddModalOpen]);\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove device' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} devices have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove devices' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const getDeviceStatus = (deviceData) =>\n    deviceData?.ImageInfo?.UpdatesAvailable\n      ? 'updateAvailable'\n      : deviceData?.Device?.Booted\n      ? 'running'\n      : 'booting';\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={`${paths['fleet-management']}`}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb isActive>\n            <Skeleton width=\"100px\" />\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id=\"image-set-details-dropdown\"\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                >\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete Group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.Devices?.data?.map((device) => ({\n                      imageSetId: device?.ImageInfo?.Image.ImageSetID,\n                    })),\n                    imageData:\n                      data?.Devices?.data[0].ImageInfo.UpdatesAvailable?.[0],\n                  })}\n                  onClick={() =>\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.Devices?.data?.map((device) => ({\n                        deviceID: device?.Device?.ID,\n                        id: device?.Device?.UUID,\n                        display_name: device?.Device?.DeviceName,\n                        updateImageData:\n                          device?.ImageInfo?.UpdatesAvailable?.[0],\n                        deviceStatus: getDeviceStatus(device),\n                        imageSetId: device?.ImageInfo?.Image?.ImageSetID,\n                        imageName: device?.ImageInfo?.Image?.Name,\n                      })),\n                      imageData:\n                        data?.Devices?.data[0].ImageInfo.UpdatesAvailable?.[0],\n                    }))\n                  }\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {isLoading || data?.Devices?.count > 0 ? (\n          <DeviceTable\n            data={data?.Devices?.data || []}\n            count={data?.Devices?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: 'Remove from group',\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageData: deviceIds[0].updateImageData,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            setUpdateModal={setUpdateModal}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"cube\"\n              title=\"Add systems to the group\"\n              body=\"Create system groups to help manage your devices more effectively\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: '#',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n      {isAddModalOpen && (\n        <DeviceModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchData}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          openModal={() => setRemoveModal(false)}\n          title={'Remove from group'}\n          submitLabel={'Remove'}\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchData}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchData}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths['fleet-management'])}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GroupsDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImageSets } from '../../store/actions';\nimport { cellWidth } from '@patternfly/react-table';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../constants';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Current Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last Updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(30)],\n  },\n];\n\nconst createRows = (data) => {\n  return data.map(({ image_set, image_build_iso_url }, index) => ({\n    rowInfo: {\n      id: image_set?.ID,\n      imageStatus: image_set?.Images[0].Status,\n      isoURL: image_build_iso_url || null,\n      latestImageID: image_set?.Images[0].ID,\n    },\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Images[0].Version, // remove when image_set.Version is accurate\n      {\n        title: <DateFormat date={image_set?.UpdatedAt} />,\n      },\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <StatusLabel status={image_set?.Images[0].Status} />\n          </>\n        ),\n      },\n    ],\n  }));\n};\n\nconst ImageTable = ({ openCreateWizard, openUpdateWizard }) => {\n  const { count, data, isLoading, hasError } = useSelector(\n    ({ edgeImageSetsReducer }) => ({\n      count: edgeImageSetsReducer?.data?.Count || 0,\n      data: edgeImageSetsReducer?.data?.Data || [],\n      isLoading:\n        edgeImageSetsReducer?.isLoading === undefined\n          ? true\n          : edgeImageSetsReducer.isLoading,\n      hasError: edgeImageSetsReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.rowInfo?.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo?.latestImageID);\n        },\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'No images found'}\n          body={''}\n          primaryAction={{\n            click: openCreateWizard,\n            text: 'Create new image',\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          filters={defaultFilters}\n          loadTableData={loadEdgeImageSets}\n          tableData={{ count, data, isLoading, hasError }}\n          columnNames={columnNames}\n          rows={data ? createRows(data) : []}\n          actionResolver={actionResolver}\n          areActionsDisabled={areActionsDisabled}\n          defaultSort={{ index: 2, direction: 'desc' }}\n          toolbarButtons={[\n            {\n              title: 'Create new image',\n              click: () => openCreateWizard(),\n            },\n          ]}\n        />\n      )}\n    </>\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func,\n  openCreateWizard: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n  filters: PropTypes.array,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }),\n};\n\nexport default ImageTable;\n","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport { edgeImageSetsReducer } from '../../store/reducers';\nimport ImageSetsTable from './ImageSetsTable';\nimport { stateToUrlSearch } from '../../constants';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('create_image=true', true),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('update_image=true', true),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImageSetsReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('create_image=true', false),\n              });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('update_image=true', false),\n              });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n  const hasSuccess = statusMessages?.onSuccess;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      await api();\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    }\n  };\n\n  fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","data","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","key","onClick","payload","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","addNotification","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","setUpdateModal","params","useRouteMatch","useState","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","system_profile","image_data","ImageInfo","Image","ImageSetID","getImageSet","newImageData","Data","images","isLoading","filter","length","UpdatesAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","Main","AsyncComponent","appName","module","customIntlProvider","entity","deviceId","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","AppInfo","showTags","Vulnerability","UpdateDeviceModal","React","setImageId","useParams","inventoryId","uuid","entityDetails","groupName","groupsDetailReducer","deviceData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","UpdateTransactions","imageData","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","isDisabled","hideBack","hideInvDrawer","Label","icon","Grid","gutter","GridItem","span","navigateBack","history","push","pathname","location","refreshTable","getDeviceStatus","Device","Booted","DeviceStatus","booting","running","updateAvailable","defaultFilters","label","type","options","option","columnNames","sort","columnTransforms","cellWidth","DeviceTable","devices","hasCheckbox","selectedItems","skeletonRowQuantity","count","hasError","kebabItems","setRemoveModal","setIsAddModalOpen","hasModalSubmitted","setHasModalSubmitted","canBeRemoved","canBeAdded","useHistory","areActionsDisabled","rowData","rowInfo","deviceStatus","emptyStateNoFliters","body","secondaryActions","link","apiFilterSort","loadTableData","loadDeviceTable","tableData","rows","device","deviceID","UUID","DeviceName","updateImageData","imageSetId","imageName","noApiSortFilter","LastSeen","cells","paths","date","actionResolver","_rowId","defaultSort","index","direction","toolbarButtons","click","urlParam","openUpdateWizard","temp","setIsModalOpen","handleSingleDeviceRemoval","useApi","getInventory","response","fetchData","Fragment","schema","fields","componentTypes","validate","validatorTypes","WarningIcon","warningColor","DeleteGroupModal","isModalOpen","reloadData","modalState","openModal","titleIconVariant","submitLabel","onSubmit","statusMessages","onSuccess","onError","apiWithToast","deleteGroupById","columns","GroupTable","handleCreateModal","handleRenameModal","handleDeleteModal","buildRows","DeviceGroup","Devices","DevicesImageInfo","systems","GeneralTable","emptyFilterState","createGroupSchema","helperText","threshold","nameValidator","CreateGroupModal","values","createGroup","RenameGroupModal","initialValues","updateGroupById","getGroups","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","PageHeaderTitle","Flex","justifyContent","default","Empty","primaryAction","text","DeviceModal","groupId","closeModal","deviceIds","additionalMappers","addDevicesToGroup","parseInt","isDropdownOpen","setIsDropdownOpen","isAddModalOpen","removeModal","getGroupById","getDeviceIds","search","stateToUrlSearch","removeDeviceFromGroupById","setTimeout","width","FlexItem","Dropdown","position","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","onToggle","newState","dropdownItems","DropdownItem","canUpdateSelectedDevices","removeDevicesFromGroup","TooltipSelectorRef","reference","document","getElementById","createRows","image_set","image_build_iso_url","imageStatus","Images","isoURL","latestImageID","DateFormat","UpdatedAt","StatusLabel","ImageTable","openCreateWizard","edgeImageSetsReducer","Count","undefined","actionsArray","href","rel","target","clearFilters","pagination","page","perPage","CreateImageWizard","UpdateImageWizard","isCreateWizardOpen","setIsCreateWizardOpen","UpdateWizard","setUpdateWizard","ImageSetsTable","updateImageID","api","hasSuccess"],"sourceRoot":""}