{"version":3,"file":"js/GroupsDetailPage.559bca5825dd571aef1a.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/DeviceStatus.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/constants.js","webpack:///./src/Routes/ImageManager/ImageTable.js","webpack:///./src/Routes/ImageManager/ImagesToolbar.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailActions.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTab.js","webpack:///./src/Routes/ImageManagerDetail/ImagePackagesTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTabs.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/constants.js","webpack:///./src/api/index.js","webpack:///./src/constants.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst DeviceDetailTabs = () => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md pf-u-mb-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { getDeviceHasUpdate } from '../../api/index';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!displayName) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: {\n          display_name: displayName,\n          system_profile: {\n            image_data,\n            status: image_data?.UpdateTransactions?.filter(\n              (item) => item.Status === 'BUILDING' || item.Status === 'CREATED'\n            ),\n          },\n        },\n      }));\n    })();\n  }, [displayName]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/fleet-management'}>\n                {uuid ? 'Groups' : 'Fleet management'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {displayName || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  updateModal.deviceData?.system_profile?.image_data?.UpdateTransactions?.filter(\n                    (item) =>\n                      item.Status === 'BUILDING' || item.Status === 'CREATED'\n                  ).length > 0 ||\n                  !updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n                    ?.UpdatesAvailable?.length > 0,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : updateModal?.deviceData?.system_profile?.status?.length > 0 ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"blue\"\n              icon={<InProgressIcon />}\n            >\n              Updating\n            </Label>\n          ) : updateModal?.deviceData?.system_profile?.image_data?.ImageInfo\n              ?.UpdatesAvailable?.length > 0 ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"orange\"\n              icon={<ExclamationTriangleIcon />}\n            >\n              Update Available\n            </Label>\n          ) : (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"green\"\n              icon={<CheckCircleIcon color=\"green\" />}\n            >\n              Running\n            </Label>\n          )}\n        </PageHeader>\n        <Main className=\"edge-c-device--detail\">\n          <Grid gutter=\"md\">\n            <GridItem span={12}>\n              <DeviceDetailTabs />\n            </GridItem>\n          </Grid>\n        </Main>\n      </DetailWrapper>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary</CardTitle>\n    <CardBody>\n      <Grid>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {active}\n              </Button>{' '}\n              Active\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {orphaned}\n              </Button>{' '}\n              Orphaned\n            </StackItem>\n          </Stack>\n        </GridItem>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {noReports}\n              </Button>\n              Stale\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {neverReported}\n              </Button>\n              Registered but never reported\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_active_color_300';\nimport PropTypes from 'prop-types';\n\nconst DeviceStatus = ({ imageData, rpm_ostree_deployments }) => {\n  const { UpdateTransactions, ImageInfo } = imageData || {};\n  if (rpm_ostree_deployments?.length === undefined) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <QuestionCircleIcon color=\"grey\" />\n        </SplitItem>\n        <SplitItem>Unspecified</SplitItem>\n      </Split>\n    );\n  }\n  const current_deployment = rpm_ostree_deployments[0];\n  if (!current_deployment.booted) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color=\"blue\" />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    );\n  }\n\n  const transaction = UpdateTransactions?.filter(\n    (item) => item.Status === 'BUILDING' || item.Status === 'CREATED'\n  );\n\n  if (transaction?.length > 0) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color={infoColor.value} />\n        </SplitItem>\n        <SplitItem>Updating</SplitItem>\n      </Split>\n    );\n  }\n\n  if (ImageInfo?.UpdatesAvailable?.length > 0) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon color={warningColor.value} />\n        </SplitItem>\n        <SplitItem className=\"pf-u-warning-color-200\">\n          Update Available\n        </SplitItem>\n      </Split>\n    );\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">\n        <CheckCircleIcon color=\"green\" />\n      </SplitItem>\n      <SplitItem>Running</SplitItem>\n    </Split>\n  );\n};\n\nDeviceStatus.propTypes = {\n  id: PropTypes.string,\n  updateTransactions: PropTypes.array,\n  rpm_ostree_deployments: PropTypes.array,\n  imageData: PropTypes.object,\n};\n\nexport default DeviceStatus;\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  //onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport DeviceStatus from './DeviceStatus';\nimport { getDeviceHasUpdate } from '../../api';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [activeFilters] = useState(defaultFilters);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('update_device') === 'true') {\n      setUpdateModal((prevState) => {\n        return {\n          ...prevState,\n          isOpen: true,\n        };\n      });\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n            variant: 'compact',\n            actionResolver: (rowData) => {\n              return rowData.system_profile.image_data\n                ? [\n                    {\n                      title: 'Update',\n                      onClick: (_event, _index, rowData) => {\n                        setUpdateModal((prevState) => {\n                          return {\n                            ...prevState,\n                            isOpen: true,\n                            deviceData: rowData,\n                          };\n                        });\n                      },\n                    },\n                  ]\n                : [\n                    {\n                      title: 'No Action',\n                    },\n                  ];\n            },\n            areActionsDisabled: (rowData) =>\n              rowData?.system_profile?.image_data?.UpdateTransactions?.filter(\n                (item) =>\n                  item.Status === 'BUILDING' || item.Status === 'CREATED'\n              ).length > 0 ||\n              !rowData?.system_profile?.image_data?.ImageInfo?.UpdatesAvailable\n                ?.length > 0,\n          }}\n          columns={(defaultColumns) => {\n            const newColumns = defaultColumns.filter((column) =>\n              ['display_name', 'updated'].includes(column.key)\n            );\n            newColumns.filter((col) => col.key === 'updated')[0].props = {\n              width: 20,\n            };\n\n            return [\n              ...newColumns,\n              {\n                key: 'system_profile',\n                title: 'Device status',\n                // eslint-disable-next-line react/display-name\n                renderFunc: (sysProf) => (\n                  <DeviceStatus\n                    rpm_ostree_deployments={sysProf.rpm_ostree_deployments}\n                    imageData={sysProf.image_data}\n                  />\n                ),\n                props: { width: 20, isStatic: true },\n              },\n            ];\n          }}\n          getEntities={async (\n            _items,\n            config,\n            _showTags,\n            defaultGetEntities\n          ) => {\n            const defaultData = await defaultGetEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                  'operating_system',\n                  'greenboot_status',\n                  'greenboot_fallback_detected',\n                  'rpm_ostree_deployments',\n                ],\n              },\n            });\n\n            const promises = defaultData.results.map(async (device) => {\n              const getImageInfo = await getDeviceHasUpdate(device.id);\n              const imageInfo =\n                !getImageInfo || getImageInfo === 404\n                  ? { data: null }\n                  : getImageInfo;\n              return {\n                ...device,\n                system_profile: {\n                  ...device.system_profile,\n                  image_data: Object.prototype.hasOwnProperty.call(\n                    imageInfo,\n                    'data'\n                  )\n                    ? null\n                    : imageInfo,\n                },\n              };\n            });\n            const rows = await Promise.all(promises);\n            return { ...defaultData, results: rows };\n          }}\n          hideFilters={{ registeredWith: true }}\n          // NOTE: add back in when device status is sent with inventory data\n          //filterConfig={{\n          //  items: [\n          //    {\n          //      label: activeFilters?.deviceStatus?.label,\n          //      type: 'checkbox',\n          //      filterValues: {\n          //        onChange: (event, value) => {\n          //          setActiveFilters(() => ({\n          //            ...(activeFilters || {}),\n          //            deviceStatus: {\n          //              ...(activeFilters?.deviceStatus || {}),\n          //              value,\n          //            },\n          //          }));\n          //          inventory.current.onRefreshData();\n          //        },\n          //        items: deviceStatusMapper,\n          //        value: activeFilters?.deviceStatus?.value || [],\n          //      },\n          //    },\n          //  ],\n          //}}\n          hasCheckbox={false}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            // NOTE: Adding custom onDelete function overrides default inventory deletion behavior\n            //onDelete: (event, itemsToRemove, isAll) => {\n            //  if (isAll) {\n            //    setActiveFilters(defaultFilters);\n            //  } else {\n            //    setActiveFilters(() =>\n            //      onDeleteFilter(activeFilters, itemsToRemove)\n            //    );\n            //  }\n            //  inventory.current.onRefreshData();\n            //},\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities }) => {\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={inventory.current.onRefreshData}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","export const transformPaginationParams = ({ perPage, page }) => ({\n  limit: perPage,\n  offset: (page - 1) * perPage,\n});\n\nexport const transformFilters = (filters) => {\n  const f = filters.reduce((acc, filter) => {\n    if (!filter.chipKey || filter.chips.length === 0) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [filter.chipKey]: filter.chips.map((chip) => chip.value),\n    };\n  }, {});\n  return f;\n};\n\nexport const transformSort = ({ direction, name }) => {\n  return {\n    sort_by: direction === 'asc' ? name : `-${name}`,\n  };\n};\n\nexport const getFilterDep = (filter = undefined) => {\n  return filter?.chips?.map((chip) => chip.value).join('.') || undefined;\n};\n","import React, { useEffect, useState } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Title,\n  Button,\n  Spinner,\n  Bullseye,\n  Text,\n} from '@patternfly/react-core';\nimport {\n  imageTypeMapper,\n  distributionMapper,\n} from '../ImageManagerDetail/constants';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImages } from '../../store/actions';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { PlusCircleIcon, SearchIcon } from '@patternfly/react-icons';\nimport { routes as paths } from '../../../package.json';\nimport {\n  transformFilters,\n  transformPaginationParams,\n  transformSort,\n  getFilterDep,\n} from './constants';\nimport PropTypes from 'prop-types';\n\nconst ImageTable = ({\n  filters,\n  pagination,\n  clearFilters,\n  openCreateWizard,\n  openUpdateWizard,\n}) => {\n  const [sortBy, setSortBy] = useState({ index: 4, direction: 'desc' });\n  const dispatch = useDispatch();\n  const { data, isLoading, hasError } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      data: edgeImagesReducer?.data || null,\n      isLoading:\n        edgeImagesReducer?.isLoading === undefined\n          ? true\n          : edgeImagesReducer.isLoading,\n      hasError: edgeImagesReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const columns = [\n    {\n      title: 'Name',\n      type: 'name',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    'Version',\n    {\n      title: 'Distribution',\n      type: 'distribution',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    {\n      title: 'Type',\n      type: 'image_type',\n      transforms: [],\n    },\n    {\n      title: 'Created',\n      type: 'created_at',\n      transforms: toShowSort ? [] : [sortable],\n    },\n    {\n      title: 'Status',\n      type: 'status',\n      transforms: toShowSort ? [] : [sortable],\n    },\n  ];\n  const toShowSort = isLoading || hasError || (!data?.length && hasFilters);\n  useEffect(() => {\n    loadEdgeImages(dispatch, {\n      ...transformFilters(filters),\n      ...transformPaginationParams(pagination),\n      ...transformSort({\n        direction: sortBy.direction,\n        name: columns[sortBy.index].type,\n      }),\n    });\n  }, [\n    pagination.perPage,\n    pagination.page,\n    sortBy.index,\n    sortBy.direction,\n    // We have 3 different filters in the primary toolbar (status, name, distribution):\n    getFilterDep(filters[0]),\n    getFilterDep(filters[1]),\n    getFilterDep(filters[2]),\n  ]);\n  const hasFilters = Object.keys(filters).some((filterKey) => filterKey);\n\n  let rows = [\n    {\n      heightAuto: true,\n      cells: [\n        {\n          props: { colSpan: 8 },\n          title: (\n            <Bullseye>\n              <EmptyState variant=\"small\">\n                <EmptyStateIcon icon={Spinner} />\n              </EmptyState>\n            </Bullseye>\n          ),\n        },\n      ],\n    },\n  ];\n\n  if (isLoading === false && hasError === false) {\n    if (!data?.length && !hasFilters) {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant=\"small\">\n                    <EmptyStateIcon icon={PlusCircleIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      No images found\n                    </Title>\n                    <Button\n                      onClick={openCreateWizard}\n                      isDisabled={isLoading !== false}\n                    >\n                      Create new images\n                    </Button>\n                  </EmptyState>\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    }\n    if (!data?.length && hasFilters) {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant=\"small\">\n                    <EmptyStateIcon icon={SearchIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      No match found\n                    </Title>\n                    <EmptyStateSecondaryActions>\n                      <Button onClick={clearFilters} variant=\"link\">\n                        Clear all filters\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  </EmptyState>\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    }\n\n    if (data?.data?.length) {\n      rows = data.data.map((image) => ({\n        id: image.ID,\n        cells: [\n          {\n            title: (\n              <Link to={`${paths['manage-images']}/${image.ID}`}>\n                {image.Name}\n              </Link>\n            ),\n          },\n          image?.Version,\n          {\n            title: distributionMapper[image?.Distribution],\n          },\n          {\n            title: imageTypeMapper[image?.ImageType],\n          },\n          {\n            title: <DateFormat date={image?.CreatedAt} />,\n          },\n          {\n            title: <StatusLabel status={image?.Status} />,\n          },\n        ],\n        imageStatus: image?.Status,\n        isoURL: image?.Installer?.ImageBuildISOURL,\n      }));\n    }\n  }\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (rowData?.imageStatus === 'SUCCESS') {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.id);\n        },\n      });\n    }\n\n    if (rowData?.imageStatus !== 'SUCCESS') {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) => rowData?.imageStatus !== 'SUCCESS';\n\n  return (\n    <Table\n      variant=\"compact\"\n      aria-label=\"Manage Images table\"\n      sortBy={sortBy}\n      onSort={handleSort}\n      actionResolver={actionResolver}\n      areActionsDisabled={areActionsDisabled}\n      cells={columns}\n      rows={rows}\n    >\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  openUpdateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageTable;\n","import React from 'react';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Button } from '@patternfly/react-core';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst ImageToolbar = ({\n  setPagination,\n  pagination,\n  filterConfig,\n  activeFilters,\n  dispatchActiveFilters,\n  defaultFilters,\n  openCreateWizard,\n}) => {\n  const { count, isLoading } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      isLoading:\n        edgeImagesReducer?.isLoading === undefined\n          ? true\n          : edgeImagesReducer.isLoading,\n      count: edgeImagesReducer?.data?.count || 0,\n    }),\n    shallowEqual\n  );\n\n  return (\n    <PrimaryToolbar\n      filterConfig={filterConfig}\n      pagination={{\n        itemCount: count,\n        ...pagination,\n        onSetPage: (_evt, newPage) =>\n          setPagination({ ...pagination, page: newPage }),\n        onPerPageSelect: (_evt, newPerPage) =>\n          setPagination({ page: 1, perPage: newPerPage }),\n      }}\n      activeFiltersConfig={{\n        filters: isEmptyFilters(activeFilters)\n          ? constructActiveFilters(activeFilters)\n          : [],\n        onDelete: (_event, itemsToRemove, isAll) => {\n          if (isAll) {\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: defaultFilters,\n            });\n          } else {\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: onDeleteFilter(activeFilters, itemsToRemove),\n            });\n          }\n        },\n      }}\n      dedicatedAction={\n        <Button onClick={openCreateWizard} isDisabled={isLoading !== false}>\n          Create new image\n        </Button>\n      }\n    />\n  );\n};\n\nImageToolbar.propTypes = {\n  setPagination: PropTypes.func.isRequired,\n  filterConfig: PropTypes.shape({ items: PropTypes.array }),\n  defaultFilters: PropTypes.shape({\n    name: PropTypes.object,\n    distribution: PropTypes.object,\n    status: PropTypes.object,\n  }),\n  activeFilters: PropTypes.shape({\n    name: PropTypes.object,\n    distribution: PropTypes.object,\n    status: PropTypes.object,\n  }),\n  dispatchActiveFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageToolbar;\n","import React, {\n  Fragment,\n  useState,\n  useReducer,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport ImageTable from './ImageTable';\nimport ImageToolbar from './ImagesToolbar';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport {\n  composeStatus,\n  distributionMapper,\n} from '../ImageManagerDetail/constants';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { isEmptyFilters, constructActiveFilters } from '../../constants';\nimport { RegistryContext } from '../../store';\nimport { edgeImagesReducer } from '../../store/reducers';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    key: 'name',\n    value: '',\n  },\n  distribution: {\n    label: 'Distribution',\n    key: 'distribution',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    key: 'status',\n    value: [],\n  },\n};\n\nconst updateFilter = (state, action) => ({\n  ...state,\n  [action.property]: {\n    ...(state[action.property] || {}),\n    value: action.value,\n  },\n});\n\nconst deleteFilter = (_state, action) => action.payload;\n\nconst activeFilterMapper = {\n  UPDATE_FILTER: updateFilter,\n  DELETE_FILTER: deleteFilter,\n};\n\nconst activeFilterReducer = applyReducerHash(\n  activeFilterMapper,\n  defaultFilters\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [pagination, setPagination] = useState({ page: 1, perPage: 100 });\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n  const [activeFilters, dispatchActiveFilters] = useReducer(\n    activeFilterReducer,\n    defaultFilters\n  );\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        create_image: true,\n      }).toString(),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  const filterConfig = {\n    items: [\n      {\n        label: defaultFilters.name.label,\n        type: 'text',\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'name',\n              value,\n            }),\n          value: activeFilters?.name?.value || '',\n          placeholder: 'Filter by name',\n        },\n      },\n      {\n        label: defaultFilters.distribution.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'distribution-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'distribution',\n              value,\n            }),\n          items: Object.entries(distributionMapper).map(([value, label]) => ({\n            label,\n            value,\n          })),\n          value: activeFilters?.distribution?.value || '',\n        },\n      },\n      {\n        label: defaultFilters.status.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'status-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'status',\n              value,\n            }),\n          items: composeStatus.map((item) => ({\n            label: item,\n            value: item,\n          })),\n          value: activeFilters?.status?.value || [],\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImagesReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageToolbar\n          setPagination={setPagination}\n          pagination={pagination}\n          filterConfig={filterConfig}\n          activeFilters={activeFilters}\n          dispatchActiveFilters={dispatchActiveFilters}\n          defaultFilters={defaultFilters}\n          openCreateWizard={openCreateWizard}\n        />\n        <ImageTable\n          clearFilters={() =>\n            dispatchActiveFilters({\n              type: 'DELETE_FILTER',\n              payload: defaultFilters,\n            })\n          }\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n          filters={\n            isEmptyFilters(activeFilters)\n              ? constructActiveFilters(activeFilters)\n              : []\n          }\n          pagination={pagination}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Text,\n  Button,\n  SplitItem,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n} from '@patternfly/react-core';\n\nconst ImageActions = ({ imageData, openUpdateWizard }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const dropdownItems = [\n    <DropdownItem href={imageData?.Installer?.ImageBuildISOURL} key=\"link\">\n      <Text className=\"force-text-black\">Download</Text>\n    </DropdownItem>,\n  ];\n\n  const handleToggle = (isOpen) => setIsOpen(isOpen);\n\n  const handleSelect = () => {\n    setIsOpen((prevState) => !prevState);\n  };\n\n  const handleUpdate = () => {\n    openUpdateWizard(imageData.ID);\n  };\n\n  return (\n    <>\n      <SplitItem>\n        <Button onClick={handleUpdate} variant=\"secondary\">\n          Update\n        </Button>\n        {imageData?.Installer?.ImageBuildISOURL ? (\n          <Dropdown\n            position=\"right\"\n            onSelect={handleSelect}\n            toggle={\n              <KebabToggle onToggle={handleToggle} id=\"image-detail-kebab\" />\n            }\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n          />\n        ) : null}\n      </SplitItem>\n    </>\n  );\n};\n\nImageActions.propTypes = {\n  openUpdateWizard: PropTypes.func,\n  imageData: PropTypes.shape({\n    ID: PropTypes.number,\n    Name: PropTypes.string,\n    Status: PropTypes.string,\n    Installer: PropTypes.shape({\n      ImageBuildISOURL: PropTypes.string,\n    }),\n  }),\n};\n\nexport default ImageActions;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport StatusLabel from './StatusLabel';\nimport ImageDetailActions from './ImageDetailActions';\nimport { routes as paths } from '../../../package.json';\n\nconst DetailsHead = ({ imageData, openUpdateWizard }) => {\n  return (\n    <>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={paths['manage-images']}>Manage Images</Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{imageData?.Name}</BreadcrumbItem>\n      </Breadcrumb>\n\n      <TextContent>\n        <Split>\n          <SplitItem>\n            <TextList component=\"dl\">\n              <TextListItem component=\"h1\" className=\"grid-align-center\">\n                {imageData?.Name}\n              </TextListItem>\n              <TextListItem component=\"dd\">\n                {imageData?.Status ? (\n                  <StatusLabel status={imageData?.Status} />\n                ) : (\n                  <Skeleton />\n                )}\n              </TextListItem>\n            </TextList>\n          </SplitItem>\n          <SplitItem isFilled></SplitItem>\n          {imageData?.Status === 'SUCCESS' ? (\n            <ImageDetailActions\n              imageData={imageData}\n              openUpdateWizard={openUpdateWizard}\n            />\n          ) : null}\n        </Split>\n      </TextContent>\n    </>\n  );\n};\n\nDetailsHead.propTypes = {\n  openUpdateWizard: PropTypes.func,\n  imageData: PropTypes.shape({\n    ID: PropTypes.number,\n    Name: PropTypes.string,\n    Status: PropTypes.string,\n  }),\n};\n\nexport default DetailsHead;\n","import React from 'react';\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper, imageTypeMapper } from './constants';\n\nconst ImageDetailTab = () => {\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  const dateFormat = () => <DateFormat date={data['CreatedAt']} />;\n  const labelsToValueMapper = {\n    'Image name': 'Name',\n    Version: 'Version',\n    Created: () => dateFormat(),\n    Release: () => distributionMapper[data['Distribution']],\n    'Output type': () => imageTypeMapper[data['ImageType']],\n    'Added packages': () => data.Commit.Packages.length,\n  };\n\n  if (data?.Installer?.Checksum) {\n    labelsToValueMapper['SHA-256 Checksum'] = () => data?.Installer?.Checksum;\n  }\n\n  return (\n    <TextContent className=\"pf-u-ml-lg pf-u-mt-md\">\n      <TextList component={TextListVariants.dl}>\n        {data\n          ? Object.entries(labelsToValueMapper).map(([label, value]) => {\n              return (\n                <>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {label}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    {typeof value === 'function' ? value() : data[value]}\n                  </TextListItem>\n                </>\n              );\n            })\n          : null}\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport default ImageDetailTab;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  EmptyState,\n  Title,\n  Bullseye,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport flatten from 'lodash/flatten';\n\nconst ImagePackagesTab = () => {\n  const [perPage, setPerPage] = useState(10);\n  const [page, setPage] = useState(1);\n  const [sortBy, setSortBy] = useState({});\n  const [rows, setRows] = useState([]);\n  const { data, imageName } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data?.Commit?.Packages || null,\n      imageName: imageDetailReducer?.data?.Name || null,\n    }),\n    shallowEqual\n  );\n\n  const columns = [\n    {\n      title: 'Name',\n      type: 'name',\n      transforms: [sortable],\n    },\n  ];\n\n  const parserRows = (rows) => {\n    return rows.map((pack) => [\n      {\n        id: pack?.ID,\n        rowArray: [pack.Name],\n        cells: [\n          {\n            title: (\n              <TextContent>\n                <Text component={TextVariants.p}>{pack?.Name}</Text>\n              </TextContent>\n            ),\n          },\n        ],\n      },\n    ]);\n  };\n\n  const handleSetPage = (_evt, newPage, perPage, startIdx, endIdx) => {\n    setPage(newPage);\n    setRows(flatten(parserRows(data.slice(startIdx, endIdx))));\n  };\n\n  const handlePerPage = (_evt, newPerPage, newPage, startIdx, endIdx) => {\n    setPerPage(newPerPage);\n    setPage(newPage);\n    setRows(flatten(parserRows(data.slice(startIdx, endIdx))));\n  };\n\n  useEffect(() => {\n    setRows(\n      data !== null && data.length > 0\n        ? flatten(parserRows(data.slice(0, perPage)))\n        : [\n            {\n              heightAuto: true,\n              cells: [\n                {\n                  props: { colSpan: 8 },\n                  title: (\n                    <Bullseye>\n                      <EmptyState variant=\"small\">\n                        <Title headingLevel=\"h2\" size=\"lg\">\n                          {imageName} has no packages\n                        </Title>\n                      </EmptyState>\n                    </Bullseye>\n                  ),\n                },\n              ],\n            },\n          ]\n    );\n  }, [data]);\n\n  const handleSort = (_event, index, direction) => {\n    const sortedRows = data.sort((a, b) =>\n      a.Name < b.Name ? -1 : a.Name > b.Name ? 1 : 0\n    );\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      flatten(\n        parserRows(\n          direction === SortByDirection.asc ? sortedRows : sortedRows.reverse()\n        ).slice(0, perPage)\n      )\n    );\n    setPage(0);\n  };\n\n  return (\n    <Fragment>\n      {data ? (\n        <PrimaryToolbar\n          pagination={{\n            itemCount: data?.length || 0,\n            page,\n            perPage,\n            onSetPage: handleSetPage,\n            onPerPageSelect: handlePerPage,\n            isCompact: true,\n          }}\n        />\n      ) : null}\n      <Table\n        aria-label=\"Image packages table\"\n        ariaLabel=\"packages table\"\n        variant=\"compact\"\n        sortBy={sortBy}\n        onSort={handleSort}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Fragment>\n  );\n};\n\nexport default ImagePackagesTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nimport ImageDetailTab from './ImageDetailTab';\nimport ImagePackagesTab from './ImagePackagesTab';\n\nconst ImageDetailTabs = () => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <ImageDetailTab />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Packages</TabTitleText>}>\n          <ImagePackagesTab />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ImageDetailTabs;\n","import React, {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  Suspense,\n} from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useParams } from 'react-router-dom';\nimport {\n  Stack,\n  StackItem,\n  Text,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { loadImageDetail } from '../../store/actions';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { useHistory } from 'react-router-dom';\nimport DetailsHead from './DetailsHeader';\nimport ImageDetailTabs from './ImageDetailTabs';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst ImageDetail = () => {\n  const { imageId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [isUpdateWizardOpen, setIsUpdateWizardOpen] = useState(false);\n  const [imageData, setImageData] = useState({});\n\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    setImageData(data);\n  }, [data]);\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    loadImageDetail(dispatch, imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const openUpdateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setIsUpdateWizardOpen(true);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Stack hasGutter>\n          <StackItem>\n            <DetailsHead\n              imageData={imageData}\n              openUpdateWizard={openUpdateWizard}\n            />\n          </StackItem>\n        </Stack>\n        <StackItem>\n          <Text>{data?.Description}</Text>\n        </StackItem>\n      </PageHeader>\n      <ImageDetailTabs />\n      {isUpdateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsUpdateWizardOpen(false);\n            }}\n            updateImageID={data?.ID}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">{icon(color)}</SplitItem>\n      <SplitItem>{text}</SplitItem>\n    </Split>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = ['CREATED', 'BUILDING', 'ERROR', 'SUCCESS'];\n\nexport const DEFAULT_RELEASE = 'rhel-84';\n\n//For this object, it's need to sisable lint once this is not a react component\nexport const statusIcons = {\n  // eslint-disable-next-line react/display-name\n  unknown: (color) => <QuestionCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  CREATED: (color) => <CheckCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  BUILDING: (color) => <InProgressIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  ERROR: (color) => <TimesCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  SUCCESS: (color) => <CheckCircleIcon color={color} />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  CREATED: 'green',\n  BUILDING: 'blue',\n  ERROR: 'red',\n  SUCCESS: 'green',\n};\n\nexport const imageStatusMapper = {\n  CREATED: 'CREATED',\n  BUILDING: 'Image build in progress',\n  ERROR: 'ERROR',\n  SUCCESS: 'SUCCESS',\n};\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n};\n\nexport const releaseMapper = {\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const imageTypeMapper = {\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n};\n","import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchImage = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n      packages: packages.map((item) => ({ name: item.name })),\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/devices/${id}`);\n  } catch (err) {\n    // temp error solution\n    console.log('');\n  }\n};\n\nexport const updateDeviceLatestImage = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    CREATE_NEW_IMAGE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n  fetchImage,\n  fetchEdgeImages,\n  createImage,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: fetchImage({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","useState","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","T","AppInfo","showTags","UpdateDeviceModal","React","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","deviceId","id","isOpen","deviceData","updateModal","setUpdateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","useEffect","insights","chrome","registerModule","hideGlobalFilter","appAction","getDeviceHasUpdate","image_data","prevState","system_profile","UpdateTransactions","filter","item","Status","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","actions","isDisabled","length","ImageInfo","UpdatesAvailable","onClick","hideBack","hideInvDrawer","Label","icon","Main","Grid","gutter","GridItem","span","Bullseye","Spinner","navigateBack","history","push","pathname","location","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Card","CardTitle","CardBody","Stack","hasGutter","StackItem","isInline","deviceSummaryReducer","isLoading","undefined","hasError","data","shallowEqual","Tiles","dispatch","useDispatch","registered","imagesReducer","loadImages","loadDeviceSummary","Flex","FlexItem","onNewImageClick","DeviceStatus","imageData","rpm_ostree_deployments","Split","SplitItem","booted","transaction","infoColor","warningColor","updateTransactions","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","activeFilters","inventory","useRef","useHistory","URLSearchParams","search","get","cleanEntities","Fragment","PageHeaderTitle","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","actionResolver","rowData","_index","areActionsDisabled","columns","defaultColumns","newColumns","column","includes","key","col","width","renderFunc","sysProf","isStatic","getEntities","_items","config","_showTags","defaultGetEntities","host_type","fields","defaultData","promises","results","map","device","getImageInfo","imageInfo","Object","prototype","hasOwnProperty","call","Promise","all","rows","hideFilters","registeredWith","hasCheckbox","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","onRowClick","_e","mergeWithEntities","refreshTable","getFilterDep","chips","chip","join","ImageTable","pagination","clearFilters","openCreateWizard","openUpdateWizard","index","direction","sortBy","setSortBy","edgeImagesReducer","type","transforms","toShowSort","sortable","hasFilters","loadEdgeImages","reduce","acc","chipKey","transformFilters","perPage","limit","offset","page","transformPaginationParams","sort_by","keys","some","filterKey","heightAuto","cells","colSpan","EmptyState","EmptyStateIcon","PlusCircleIcon","Title","headingLevel","SearchIcon","EmptyStateSecondaryActions","image","ID","paths","Name","Version","distributionMapper","Distribution","imageTypeMapper","ImageType","DateFormat","date","CreatedAt","StatusLabel","imageStatus","isoURL","Installer","ImageBuildISOURL","Table","onSort","actionsArray","Text","href","rel","target","_rowId","TableHeader","TableBody","isRequired","ImageToolbar","setPagination","filterConfig","dispatchActiveFilters","count","PrimaryToolbar","itemCount","onSetPage","_evt","newPage","onPerPageSelect","newPerPage","onDelete","itemsToRemove","isAll","payload","onDeleteFilter","dedicatedAction","items","distribution","CreateImageWizard","UpdateImageWizard","activeFilterMapper","UPDATE_FILTER","action","property","DELETE_FILTER","_state","activeFilterReducer","isCreateWizardOpen","setIsCreateWizardOpen","imageId","UpdateWizard","setUpdateWizard","useReducer","create_image","toString","filterValues","onChange","placeholder","entries","composeStatus","update_image","updateImageID","ImageActions","setIsOpen","dropdownItems","DropdownItem","Dropdown","position","toggle","KebabToggle","onToggle","isPlain","DetailsHead","TextContent","TextList","TextListItem","isFilled","ImageDetailActions","imageDetailReducer","labelsToValueMapper","Created","Release","Commit","Packages","Checksum","TextListVariants","TextListItemVariants","setPerPage","setPage","setRows","imageName","parserRows","pack","rowArray","TextVariants","flatten","slice","startIdx","endIdx","isCompact","ariaLabel","sortedRows","sort","a","b","SortByDirection","reverse","isUpdateWizardOpen","setIsUpdateWizardOpen","setImageData","loadImageDetail","Description","statusIcons","statusColors","text","imageStatusMapper","charAt","toLowerCase","DEFAULT_RELEASE","unknown","CREATED","BUILDING","ERROR","SUCCESS","releaseMapper","IMAGE_BUILDER_API","EDGE_API","fetchActiveImages","instance","fetchImage","fetchDeviceSummary","client","HostsApi","apiHostGetHostList","query","generateFilter","inventoryFields","then","resp","curr","deviceSummaryMapper","total","getPackages","architecture","params","createImage","Id","version","description","release","username","credentials","imageTypes","imageType","packages","outputTypes","commit","arch","installer","sshkey","endpoint","fetchEdgeImages","q","multiVals","val","getEdgeImageStatus","console","log","updateDeviceLatestImage","getImageDataOnDevice","statusMapper","statusToIcon","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","UnknownIcon","warning","ExclamationTriangleIcon","notification","BellIcon","values","getLabel","category","Array","isArray","currItem","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","POLLING_IMAGES","asyncActions","flatMap","CLEAN_ENTITIES","keyBy","k","meta","notifications","rejected","createNewImage","addImageToPoll","groups","threshold","devicesInfo","canariesInfo","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","defaultProps","devices"],"sourceRoot":""}