{"version":3,"file":"js/UpdateDeviceModal.1673903204238.26940881a93ad2780d64.js","mappings":"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","sources":["webpack:///./node_modules/@data-driven-forms/react-form-renderer/esm/validator-types/validator-types.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/DateFormat/helper.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/DateFormat/DateFormat.js","webpack:///./src/components/BuildModalReview.js","webpack:///./src/Routes/Devices/UpdateDeviceModal.js","webpack:///./src/api/devices/index.js","webpack:///./src/api/images/index.js","webpack:///./src/components/Modal.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["var validatorTypes = {\n  REQUIRED: 'required',\n  MIN_LENGTH: 'min-length',\n  MAX_LENGTH: 'max-length',\n  EXACT_LENGTH: 'exact-length',\n  MIN_ITEMS: 'min-items',\n  MIN_NUMBER_VALUE: 'min-number-value',\n  MAX_NUMBER_VALUE: 'max-number-value',\n  PATTERN: 'pattern',\n  URL: 'url'\n};\nexport default validatorTypes;","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants || (TextListVariants = {}));\nexport const TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(className) }), children));\n};\nTextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants || (TextListItemVariants = {}));\nexport const TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(className) }), children));\n};\nTextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nimport { Tooltip } from '@patternfly/react-core';\nvar second = 1000;\nvar minute = second * 60;\nvar hour = minute * 60;\nvar day = hour * 24;\nvar month = day * 30;\nvar year = day * 365;\nvar formatTime = function (number, unit) { return \"\".concat(number, \" \").concat(number > 1 ? \"\".concat(unit, \"s\") : unit, \" ago\"); };\nvar relativeTimeTable = [\n    { rightBound: Infinity, description: function (date) { return formatTime(Math.round(date / year), 'year'); } },\n    { rightBound: year, description: function (date) { return formatTime(Math.round(date / month), 'month'); } },\n    { rightBound: month, description: function (date) { return formatTime(Math.round(date / day), 'day'); } },\n    { rightBound: day, description: function (date) { return formatTime(Math.round(date / hour), 'hour'); } },\n    { rightBound: hour, description: function (date) { return formatTime(Math.round(date / minute), 'minute'); } },\n    { rightBound: minute, description: function () { return 'Just now'; } },\n];\nvar exact = function (value) { return value.toUTCString().split(',')[1].slice(0, -7).trim(); };\nexport var addTooltip = function (date, element, tooltipProps, extraTitle) {\n    if (extraTitle === void 0) { extraTitle = ''; }\n    return (_jsx(Tooltip, __assign({}, tooltipProps, { content: _jsxs(\"div\", { children: [extraTitle, date] }) }, { children: element })));\n};\nexport var dateStringByType = function (type) {\n    return ({\n        exact: function (date) { return exact(date) + ' UTC'; },\n        onlyDate: function (date) { return exact(date).slice(0, -6); },\n        relative: function (date) {\n            return relativeTimeTable.reduce(function (acc, i) { return (i.rightBound > Date.now() - date.getTime() ? i.description(Date.now() - date.getTime()) : acc); }, exact(date));\n        },\n        invalid: function () { return 'Invalid date'; },\n    }[type]);\n};\nexport var dateByType = function (type, tooltipProps, extraTitle) {\n    return ({\n        exact: function (date) { return dateStringByType(type)(date); },\n        onlyDate: function (date) { return dateStringByType(type)(date); },\n        relative: function (date) { return addTooltip(dateStringByType('exact')(date), _jsx(\"span\", { children: dateStringByType(type)(date) }), tooltipProps, extraTitle); },\n        invalid: function () { return 'Invalid date'; },\n    }[type]);\n};\n//# sourceMappingURL=helper.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { dateByType } from './helper';\nvar DateFormat = function (_a) {\n    var date = _a.date, _b = _a.type, type = _b === void 0 ? 'relative' : _b, extraTitle = _a.extraTitle, tooltipProps = _a.tooltipProps;\n    var dateObj = date instanceof Date ? date : new Date(date);\n    var invalid = date === undefined || date === null || dateObj.toString() === 'Invalid Date';\n    var dateType = invalid ? 'invalid' : type;\n    return _jsx(React.Fragment, { children: dateByType(dateType, tooltipProps, extraTitle)(dateObj) });\n};\nexport default DateFormat;\n//# sourceMappingURL=DateFormat.js.map","import React, { Fragment } from 'react';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextListItemVariants,\n  TextListVariants,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BuildModalReview = ({ reviewObject, key }) => {\n  return (\n    <TextContent>\n      <Title headingLevel=\"h3\">\n        <Text component={'b'}>{reviewObject.title}</Text>\n      </Title>\n      <TextList component={TextListVariants.dl}>\n        {reviewObject.rows.map((row) => (\n          <Fragment key={row.title + key}>\n            <TextListItem component={TextListItemVariants.dt}>\n              {row.title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {row.value}\n            </TextListItem>\n          </Fragment>\n        ))}\n      </TextList>\n    </TextContent>\n  );\n};\n\nBuildModalReview.propTypes = {\n  reviewObject: PropTypes.object,\n  key: PropTypes.string,\n};\n\nexport default BuildModalReview;\n","import React, { useEffect, useState } from 'react';\nimport {\n  TextContent,\n  Text,\n  Bullseye,\n  Backdrop,\n  Spinner,\n  Alert,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { getImageById, getImageSet } from '../../api/images';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Modal from '../../components/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport BuildModalReview from '../../components/BuildModalReview';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\n\nconst getImageData = (imageId) =>\n  getImageById({ id: imageId }).then((imageSetId) =>\n    getImageSet({\n      id: imageSetId?.image?.ImageSetID,\n      q: {\n        limit: 1,\n        sort_by: '-created_at',\n      },\n    })\n  );\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const [imageData, setImageData] = useState(null);\n  const dispatch = useDispatch();\n  const isMultiple = updateModal.deviceData.length > 1;\n  const deviceId = updateModal.deviceData.map((device) => device.id);\n  const deviceName = isMultiple\n    ? updateModal.deviceData.map((device) => device.display_name)\n    : updateModal?.deviceData[0]?.display_name;\n\n  useEffect(() => {\n    updateModal?.imageSetId\n      ? getImageSet({\n          id: updateModal.imageSetId,\n          q: {\n            limit: 1,\n            sort_by: '-created_at',\n            status: 'SUCCESS',\n          },\n        }).then((data) => setImageData(data.Data.images[0]))\n      : getImageData(updateModal.imageId).then((data) =>\n          setImageData(data.Data.images[0])\n        );\n  }, []);\n\n  const handleUpdateModal = async () => {\n    try {\n      await updateSystem({\n        DevicesUUID: deviceId,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating system',\n          description: isMultiple\n            ? ` ${deviceName.length} systems were added to the queue.`\n            : ` ${deviceName} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a system was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  const WarningText = () => (\n    <TextContent className=\"pf-u-pt-md\">\n      <Text\n        style={{ color: 'var(--pf-global--warning-color--200' }}\n        component=\"small\"\n      >\n        <ExclamationTriangleIcon\n          style={{ color: 'var(--pf-global--warning-color--100' }}\n        />{' '}\n        After the update is installed, the system will apply the changes.\n      </Text>\n    </TextContent>\n  );\n\n  const Description = () => (\n    <TextContent>\n      <Text>\n        Update{' '}\n        <span className=\"pf-u-font-weight-bold pf-u-font-size-md\">\n          {isMultiple ? `${deviceName.length} systems` : deviceName}\n        </span>{' '}\n        to latest version of the image linked to it.\n      </Text>\n      {updateModal.deviceData.some(\n        (device) =>\n          device.deviceStatus !== 'updateAvailable' &&\n          device.deviceStatus !== 'error'\n      ) && (\n        <Alert\n          variant=\"info\"\n          isInline\n          title=\"Some systems will not be updated. This action will update only systems with an update available.\"\n          style={{ '--pf-c-content--h4--MarginTop': 0 }}\n        />\n      )}\n    </TextContent>\n  );\n\n  const updateToDetails = {\n    title: `Update to version ${imageData?.image.Version}`,\n    rows: [\n      { title: 'Image Name', value: imageData?.image.Name },\n      { title: 'Version', value: imageData?.image.Version },\n      {\n        title: 'Created',\n        value: <DateFormat date={imageData?.image.CreatedAt} />,\n      },\n      {\n        title: 'Release',\n        value: distributionMapper[imageData?.image.Distribution],\n      },\n    ],\n  };\n\n  const packageDetails = {\n    title: `Changes from version ${imageData?.image.Version - 1}`,\n    rows: [\n      { title: 'Added', value: imageData?.update_added || 0 },\n      { title: 'Removed', value: imageData?.update_removed || 0 },\n      { title: 'Updated', value: imageData?.update_updated || 0 },\n    ],\n  };\n\n  const updateSchema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: Description(),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({\n          reviewObject: updateToDetails,\n          key: 'update-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'package-details',\n        label: BuildModalReview({\n          reviewObject: packageDetails,\n          key: 'package-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-text',\n        label: WarningText(),\n      },\n    ],\n  };\n\n  return (\n    <>\n      {imageData ? (\n        <Modal\n          size=\"medium\"\n          title={`Update system${\n            isMultiple ? 's' : ''\n          } to latest image version`}\n          isOpen={updateModal.isOpen}\n          closeModal={() =>\n            setUpdateModal((prevState) => ({ ...prevState, isOpen: false }))\n          }\n          submitLabel=\"Update system\"\n          schema={updateSchema}\n          onSubmit={handleUpdateModal}\n          reloadData={refreshTable}\n        />\n      ) : (\n        <Backdrop>\n          <Bullseye>\n            <Spinner isSVG diameter=\"100px\" />\n          </Bullseye>\n        </Backdrop>\n      )}\n    </>\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.array.isRequired,\n    imageData: PropTypes.object,\n    imageId: PropTypes.number,\n    imageSetId: PropTypes.number,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDevice = (id) => {\n  return instance.get(`${EDGE_API}/devices/${id}`);\n};\n\nexport const updateSystem = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","import { EDGE_API, IMAGE_BUILDER_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["REQUIRED","MIN_LENGTH","MAX_LENGTH","EXACT_LENGTH","MIN_ITEMS","MIN_NUMBER_VALUE","MAX_NUMBER_VALUE","PATTERN","URL","TextListVariants","TextList","_a","children","className","component","ul","props","__rest","Component","Object","assign","displayName","TextListItemVariants","TextListItem","li","__assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","hour","minute","day","month","year","formatTime","number","unit","concat","relativeTimeTable","rightBound","Infinity","description","date","Math","round","second","exact","value","toUTCString","split","slice","trim","dateStringByType","type","onlyDate","relative","reduce","acc","Date","now","getTime","invalid","dateByType","tooltipProps","extraTitle","element","Tooltip","content","addTooltip","_b","dateObj","dateType","toString","BuildModalReview","reviewObject","key","TextContent","Title","headingLevel","Text","title","rows","map","row","Fragment","T","propTypes","PropTypes","UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","useState","imageData","setImageData","dispatch","useDispatch","isMultiple","deviceData","deviceId","device","id","deviceName","display_name","useEffect","imageId","imageSetId","getImageSet","q","limit","sort_by","status","then","data","Data","images","getImageById","image","ImageSetID","handleUpdateModal","updateSystem","DevicesUUID","addNotification","variant","statusText","handleClose","prevState","isOpen","updateToDetails","Version","Name","DateFormat","CreatedAt","distributionMapper","Distribution","packageDetails","update_added","update_removed","update_updated","updateSchema","fields","componentTypes","name","label","some","deviceStatus","Alert","isInline","style","color","Modal","size","closeModal","submitLabel","schema","onSubmit","reloadData","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","getInventory","query","getTableParams","instance","EDGE_API","getDevice","payload","checkImageName","createImage","Id","version","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","distribution","item","outputTypes","commit","arch","installer","sshkey","repo","ID","endpoint","offset","getImageSetViewVersions","imageSetID","getImageSetView","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","search","params","URLSearchParams","IMAGE_BUILDER_API","getImageSets","RepoModal","titleIconVariant","initialValues","additionalMappers","validatorMapper","onClose","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","values","setTimeout","onCancel","_iterableToArray","iter","Symbol","iterator","Array","from","_toConsumableArray","arr","isArray","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError"],"sourceRoot":""}