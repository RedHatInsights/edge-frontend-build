{"version":3,"file":"js/205.52b8dcb06224b242ef38.js","mappings":"k9BASA,IAAMA,EAAoB,wBACpBC,EAAW,eAyIJC,EAAoB,WAAsC,6DAAP,GAAO,IAAnCC,MAAAA,OAAmC,MAA3B,IAA2B,MAAtBC,OAAAA,OAAsB,MAAb,EAAa,EACrE,OAAOC,EAAAA,GAAAA,IAAA,UACFL,EADE,2BACkCG,EADlC,mBACkDC,KAQ9CE,EAAa,SAAC,GAAW,IAATC,EAAS,EAATA,GAC3B,OAAOF,EAAAA,GAAAA,IAAA,UAAgBJ,EAAhB,mBAAmCM,KAG/BC,EAAkB,mCAAG,2FAC1BC,EAAS,IAAIC,EAAAA,cAASC,EAAW,qBAAsBN,EAAAA,IAD7B,SAEnBO,QAAQC,IAAI,CACvBJ,EAAOK,wBACLH,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,CAAC,cACDA,OACAA,OACAA,OACAA,EACA,CACEI,MAAO,EAAF,MACAC,EAAAA,EAAAA,IAAeC,EAAAA,MACfD,EAAAA,EAAAA,IAAe,CAAEE,eAAgB,CAAC,cAAgB,aAI3DT,EAAOK,wBACLH,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,CAAC,cACDA,OACAA,OACAA,OACAA,EACA,CACEI,MAAO,EAAF,MACAC,EAAAA,EAAAA,IAAeC,EAAAA,MACfD,EAAAA,EAAAA,IAAe,CAAEE,eAAgB,CAAC,cAAgB,aAI3DT,EAAOK,wBACLH,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,CAAC,sBACDA,OACAA,OACAA,OACAA,EACA,CACEI,MAAO,EAAF,MACAC,EAAAA,EAAAA,IAAeC,EAAAA,MACfD,EAAAA,EAAAA,IAAe,CAAEE,eAAgB,CAAC,cAAgB,aAI3DT,EAAOK,wBACLH,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,CAAC,gBACDA,OACAA,OACAA,OACAA,EACA,CACEI,MAAO,EAAF,MACAC,EAAAA,EAAAA,IAAeC,EAAAA,MACfD,EAAAA,EAAAA,IAAe,CAAEE,eAAgB,CAAC,cAAgB,eAI1DC,MAAK,SAACC,GACP,OAAOA,EAAKC,QAAO,SAACC,EAAKC,EAAMC,GAC7B,cAAYF,GAAZ,cAAkBG,EAAAA,GAAoBD,GAASD,EAAKG,UACnD,OAtG2B,mFAAH,qDA0GlBC,EAAW,mCAAG,WAAOC,EAAcC,EAAcC,GAAnC,8EACnBC,EAAS,IAAIC,gBAAgB,CACjCJ,aAAAA,EACAC,aAAAA,EACAC,OAAAA,IAJuB,mBAMlBzB,EAAAA,EAAAA,IAAS,GAAD,OAAIL,EAAJ,qBAAkC+B,EAAOE,cAN/B,2CAAH,0DASXC,EAAc,SAAC,GAWtB,IAVJC,EAUI,EAVJA,GACAC,EASI,EATJA,KACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,QACAV,EAKI,EALJA,aACAW,EAII,EAJJA,SACAC,EAGI,EAHJA,YACWC,EAEP,EAFJC,UACqBC,EACjB,EADJ,qBAEA,EAAkBF,GAAc,GAA3BC,GAAL,eACID,EAAWG,OAAS,IACtBF,EAAY,uBAEd,IAAMG,EAAU,CACdV,KAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAV,aAAcW,EACdI,UAAWA,EACXC,SAAUA,EAASG,KAAI,SAACC,GAAD,MAAW,CAAEZ,KAAMY,EAAKZ,SAC/Ca,YAAaP,EACbQ,OAAQ,CACNC,KAAMtB,GAERuB,UAAW,CACTZ,SAAAA,EACAa,OAAQZ,IAIRa,EAAW,GAAH,OAAMrD,EAAN,WAMZ,OAJIoC,EAAU,IACZiB,GAAY,IAAJ,OAAQnB,EAAR,YAGH9B,EAAAA,GAAAA,KAAciD,EAAUR,IAGpBS,EAAkB,WAM1B,IALHC,EAKG,uDALC,CACFrD,MAAO,IACPC,OAAQ,EACRqD,QAAS,eAGL1C,EAAQ2C,OAAOC,KAAKH,GAAGnC,QAAO,SAACC,EAAKC,GACxC,IAAIqC,OAAQjD,EAeZ,MAbqB,YAAnB,OAAO6C,EAAEjC,KACiB,iBAAnBiC,EAAEjC,GAAMsB,QACfW,EAAEjC,GAAMsB,OAAS,IAEjBe,EAAQJ,EAAEjC,GAAMF,QACd,SAACwC,EAAWC,GAAZ,MACgB,KAAdD,EAAA,UAAsBtC,EAAtB,YAA8BuC,GAA9B,UAAyCD,EAAzC,YAAsDtC,EAAtD,YAA8DuC,KAChE,KAGA,CAAC,SAAU,UAAUC,UAArB,OAAqCP,EAAEjC,MAAsB,KAAZiC,EAAEjC,KACrDqC,EAAQ,GAAH,OAAMrC,EAAN,YAAciC,EAAEjC,UAENZ,IAAViD,EACHtC,EACQ,KAARA,EAAA,UACGsC,GADH,UAEGtC,EAFH,YAEUsC,KACb,IAEH,OAAOvD,EAAAA,GAAAA,IAAA,UAAgBJ,EAAhB,mBAAmCc,KAG/BiD,EAAqB,SAACzD,GACjC,OAAOF,EAAAA,GAAAA,IAAA,UAAgBJ,EAAhB,mBAAmCM,EAAnC,aAGI0D,EAAkB,mCAAG,WAAO1D,GAAP,0FAEjBF,EAAAA,GAAAA,IAAA,UAAgBJ,EAAhB,oBAAoCM,IAFnB,wEAK9B2D,QAAQC,IAAI,IALkB,wDAAH,sDASlBC,EAAuB,mCAAG,WAAOtB,GAAP,iFACxBzC,EAAAA,GAAAA,KAAA,UAAiBJ,EAAjB,YAAqC6C,GADb,mFAAH,sDAIvBuB,EAAuB,SAAC9D,GACnC,OAAOF,EAAAA,GAAAA,IAAA,UAAgBJ,EAAhB,2BAA2CM,EAA3C,YAGI+D,EAAiB,SAAClC,GAC7B,IAAMU,EAAU,CACdV,KAAAA,GAEF,OAAO/B,EAAAA,GAAAA,KAAA,UAAiBJ,EAAjB,0BAAmD6C,IAG/CyB,EAAwB,WACnC,OAAOlE,EAAAA,GAAAA,IAAA,UAAgBJ,EAAhB,qBAGIuE,EAAyB,SAAC1B,GACrC,OAAOzC,EAAAA,GAAAA,KAAA,UAAiBJ,EAAjB,mBAA4C,CACjDwE,KAAM3B,EAAQV,KACdsC,IAAK5B,EAAQ6B,WAIJC,EAAuB,SAAC9B,GACnC,OAAOzC,EAAAA,GAAAA,IAAA,UAAgBJ,EAAhB,2BAA2C6C,EAAQvC,IAAM,CAC9DkE,KAAM3B,EAAQV,KACdsC,IAAK5B,EAAQ6B,WAIJE,EAAyB,SAACtE,GAAD,OACpCF,EAAAA,GAAAA,OAAA,UAAmBJ,EAAnB,2BAA8CM,M,8KChY1CuE,EAAuB,CAC3BC,WAAYC,EAAAA,GACZlD,OAAQmD,EAAAA,IAGJC,EAAQ,SAAC,GAAD,IACZC,EADY,EACZA,QACAC,EAFY,EAEZA,KACAC,EAHY,EAGZA,MACAC,EAJY,EAIZA,KACAC,EALY,EAKZA,cACAC,EANY,EAMZA,iBANY,OAQZ,kBAAC,IAAD,CAAYC,MAAO,CAAEC,gBAAiBP,GAAW,KAC/C,kBAAC,IAAD,CAAgBC,KAAMN,EAAqBM,KAC3C,kBAAC,IAAD,CAAOO,aAAa,KAAKC,KAAK,MAC3BP,GAEH,kBAAC,IAAD,KAAiBC,GAChBC,GACC,kBAAC,KAAD,CAAQM,QAASN,EAAcO,MAAOC,QAAQ,WAC3CR,EAAcS,MAGnB,kBAAC,IAAD,KACGR,EAAiBzC,KAAI,WAAiCvB,GAAjC,IAAGyE,EAAH,EAAGA,KAAMZ,EAAT,EAASA,MAAOa,EAAhB,EAAgBA,KAAML,EAAtB,EAAsBA,QAAtB,OACpB,kBAAC,KAAD,CACEM,UAAoB,SAATF,EAAkB,IAAM,SACnCG,KAAMF,EACNH,QAAQ,OACRM,IAAK7E,EACLqE,QAASA,GAERR,EACAa,GAAQ,kBAAC,KAAD,CAAqBI,UAAU,sBAOlDpB,EAAMqB,UAAY,CAChBpB,QAASqB,IAAAA,OACTpB,KAAMoB,IAAAA,OACNnB,MAAOmB,IAAAA,OACPlB,KAAMkB,IAAAA,OACNjB,cAAeiB,IAAAA,OACfhB,iBAAkBgB,IAAAA,OAGpB,W,mxBC3DA,IAAMC,EAAiB,SAAC,GAAuC,IAArCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAe3C,OACE,oCACGF,EAAQ7D,OAAS,EAChB,kBAACgE,EAAA,EAAD,CAAa,cAAY,0BACvB,kBAACC,EAAA,EAAD,CACEf,QAAQ,SACR,aAAW,2BACXgB,MAAM,QACNC,SAtBK,WACbJ,GAAY,SAACK,GAAD,cACPA,GADO,IAEVC,QAASD,EAAUC,aAoBbC,SAhBK,SAACC,EAAIC,GAClBT,EAAY,CACVU,SAAUD,EACVH,QAAQ,KAcFK,WAAYZ,EAASW,SACrBJ,OAAQP,EAASO,OACjBM,WAAY,kBAAC,KAAD,OAEXd,EAAQ3D,KAAI,SAAC0E,EAAQjG,GAAT,OACX,kBAACkG,EAAA,EAAD,CAAcrB,IAAK7E,EAAOoC,MAAO6D,EAAOE,aAI5C,OAKVlB,EAAeF,UAAY,CACzBG,QAASF,IAAAA,MACTG,SAAUH,IAAAA,OACVI,YAAaJ,IAAAA,MAGf,U,inBCvCA,IAAMoB,EAAc,SAAC,GAA6C,IAA3CC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,gBAAiBC,EAAY,EAAZA,MAC9CC,EAAiBH,EAAaI,MAAK,SAACR,GAAD,OAAYA,EAAOE,QAAUI,KACtE,GAA4BG,EAAAA,EAAAA,WAAS,GAArC,eAAOhB,EAAP,KAAeiB,EAAf,KAEMC,EAAqB,kBAAM,SAACxE,EAAOyE,GACvCP,GAAgB,SAACb,GAAc,MACvBqB,EAAgBrB,EAAUsB,WAC9B,SAACd,GAAD,OAAYA,EAAOE,QAAUK,EAAeL,SAExCa,EAAcvB,EAAUgB,MAC5B,SAACR,GAAD,OAAYA,EAAOE,QAAUK,EAAeL,SAExCc,EACoB,aAAxBT,EAAe/B,KACXuC,EAAY5E,MAAM2E,WAAU,SAACG,GAAD,OAAOA,EAAEC,SAAWN,KAChD,EACAO,EAAgBlF,OAAOmF,OAAP,OACjBL,EAAY5E,OADK,cAEnB6E,EAFmB,OAGfD,EAAY5E,MAAM6E,IAHH,IAIlBK,YAAYN,MAAAA,GAAD,UAACA,EAAa5E,MAAM6E,UAApB,OAAC,EAAmCK,gBAG7CC,EAAenF,EAErB,OAAOF,OAAOmF,OAAP,OACF5B,GADE,cAEJqB,EAFI,OAGArB,EAAUqB,IAHV,IAIH1E,MAC0B,aAAxBoE,EAAe/B,KAAsB2C,EAAgBG,YAM/D,MAA4B,SAAxBf,EAAe/B,KAEf,kBAACY,EAAA,EAAD,CAAa,cAAY,uBACvB,kBAACmC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE7G,KAAK,aACL7B,GAAG,aACH0F,KAAK,SACL,wCAAgC+B,EAAeL,OAC/CuB,YAAW,oBAAelB,EAAeL,OACzCwB,SAAU,IAASf,IAAsB,KACzCxE,MAAOiE,EAAaI,MAAK,SAACR,GAAD,MAA4B,SAAhBA,EAAOxB,QAAiBrC,UAO3C,aAAxBoE,EAAe/B,KAEf,kBAACY,EAAA,EAAD,CAAa,cAAY,uBACvB,kBAACmC,EAAA,EAAD,KACE,kBAAClC,EAAA,EAAD,CACEf,QAAQ,WACR,wCAAgCiC,EAAeL,OAC/CZ,MAAM,QACNqC,gBAAe,oBAAepB,EAAeL,OAC7C0B,gCAA8B,EAC9BrC,SAAU,kBAAMmB,GAAU,SAAClB,GAAD,OAAgBA,MAC1CE,SAAUiB,IACVb,WAAYS,EAAepE,MACxB6D,QAAO,SAAC7D,GAAD,OAA8B,GAAnBA,EAAMkF,aACxB/F,KAAI,SAACuG,GAAD,OAASA,EAAIX,UACpBzB,OAAQA,GAEPc,EAAepE,MAAMb,KAAI,SAAC0E,EAAQjG,GAAT,OACxB,kBAACkG,EAAA,EAAD,CACErB,IAAK7E,EACLoC,MAAO6D,EAAOkB,OACdG,UAAWrB,EAAOqB,uBArBhC,GA+BFlB,EAAYrB,UAAY,CACtBsB,aAAcrB,IAAAA,MACdsB,gBAAiBtB,IAAAA,KACjBuB,MAAOvB,IAAAA,QAGT,UCjGA,IAAM+C,EAAiB,SAAC,GAA+C,IAA7C7C,EAA6C,EAA7CA,QAASmB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBAC/C,GAAgCI,EAAAA,EAAAA,UAAS,CACvChB,QAAQ,EACRI,SAAUZ,EAAQ,GAAGiB,QAFvB,eAAOhB,EAAP,KAAiBC,EAAjB,KAKA,OACE,oCACE,kBAAC,EAAD,CACED,SAAUA,EACVC,YAAaA,EACbF,QAASA,IAEX,kBAAC,EAAD,CACEmB,aAAcA,EACdC,gBAAiBA,EACjBC,MAAOpB,EAASW,aAMxBiC,EAAehD,UAAY,CACzBG,QAASF,IAAAA,MACTqB,aAAcrB,IAAAA,MACdsB,gBAAiBtB,IAAAA,MAGnB,U,knBC5BA,IAAMgD,EAAc,SAAC,GAKf,IAJJ3B,EAII,EAJJA,aACAC,EAGI,EAHJA,gBACA2B,EAEI,EAFJA,WACAC,EACI,EADJA,cAyHA,OA3DAC,EAAAA,EAAAA,YAAU,WA3DR9B,EAAa+B,SAAQ,SAACnC,GA+BpB,GA9BoB,aAAhBA,EAAOxB,MACTwB,EAAO7D,MAAMgG,SAAQ,SAACC,IAES,IAA3BA,EAAaf,WACZW,EAAWxB,MAAK,SAAC6B,GAAD,OAAUA,EAAKnC,QAAUkC,EAAalB,WAW5B,IAA3BkB,EAAaf,WACbW,EAAWxB,MAAK,SAAC6B,GAAD,OAAUA,EAAKnC,QAAUkC,EAAalB,WAEtDe,GAAc,SAACzC,GACb,IAAMzF,EAAQyF,EAAUsB,WACtB,SAACwB,GAAD,OAAWA,EAAMpC,QAAUkC,EAAalB,UAE1C,wBACK1B,EAAU+C,MAAM,EAAGxI,KADxB,OAEKyF,EAAU+C,MAAMxI,EAAQ,EAAGyF,EAAUpE,aAlB5C6G,GAAc,SAACzC,GAAD,wBACTA,GADS,CAEZ,CACEU,MAAOkC,EAAalB,OACpBsB,QAASJ,EAAaK,cACtB7D,IAAKoB,EAAOE,eAmBF,SAAhBF,EAAOxB,MAAmBwB,EAAO7D,MAAMf,OAAS,EAAG,CACrD,IAAMsH,EAAgB,CAAExC,MAAOF,EAAO7D,MAAOyC,IAAKoB,EAAOE,OACrD8B,EAAWxB,MAAK,SAAC6B,GAAD,OAAUA,EAAKzD,MAAQoB,EAAOE,SAChD+B,GAAc,SAACzC,GAAD,OACZA,EAAUlE,KAAI,SAACqH,GACb,OAAOA,EAAE/D,MAAQoB,EAAOE,MAAQwC,EAAgBC,QAIpDV,GAAc,SAACzC,GAAD,wBAAmBA,GAAnB,CAA8BkD,WAG9B,SAAhB1C,EAAOxB,MACPwD,EAAWxB,MAAK,SAAC6B,GAAD,OAAUA,EAAKzD,MAAQoB,EAAOE,UAE9C+B,GAAc,SAACzC,GACb,IAAMzF,EAAQyF,EAAUsB,WACtB,SAACwB,GAAD,OAAWA,EAAM1D,MAAQoB,EAAOE,SAElC,wBACKV,EAAU+C,MAAM,EAAGxI,KADxB,OAEKyF,EAAU+C,MAAMxI,EAAQ,EAAGyF,EAAUpE,kBAS/C,CAACgF,IA0DF,oCACG4B,EAAW5G,OAAS,EACjBa,OAAO2G,QAAQ,IAAQZ,EAAY,QAAQ1G,KAAI,+BAAEsD,EAAF,KAAOzC,EAAP,YAC7C,kBAAC0G,EAAA,EAAD,CACE,cAAY,cACZhE,UAAU,aACViE,aAAclE,EACdA,IAAKA,GAEJzC,EAAMb,KAAI,SAAC0E,GAAD,OACT,kBAAC+C,EAAA,EAAD,CAAM3E,QAAS,kBA/CF,SAAC4B,GAC1B,IAAMgD,EAAmB5C,EAAaU,WACpC,SAAC3E,GAAD,OAAWA,EAAM+D,QAAUF,EAAOpB,OAEpCyB,GAAgB,SAACb,GACf,IAAMyD,EAAezD,EAAUwD,GAC/B,GAA0B,SAAtBC,EAAazE,KACf,wBACKgB,EAAU+C,MAAM,EAAGS,IADxB,QAEOxD,EAAUwD,IAFjB,IAEoC7G,MAAO,OAF3C,OAGKqD,EAAU+C,MAAMS,EAAmB,EAAGxD,EAAUpE,UAGvD,GAA0B,aAAtB6H,EAAazE,KAAqB,CACpC,IAAM0E,EAAcD,EAAa9G,MAAMb,KAAI,SAAC4F,GAAD,OACzCA,EAAOA,SAAWlB,EAAOE,MAAzB,OACSgB,GADT,IACiBG,WAAW,IACxBH,KASN,OAPAe,GAAc,SAACzC,GACb,IAAM2D,EAAc3D,EAAUsB,WAAU,SAACwB,GAAD,OAAWA,IAAUtC,KAC7D,wBACKR,EAAU+C,MAAM,EAAGY,KADxB,OAEK3D,EAAU+C,MAAMY,EAAc,EAAG3D,EAAUpE,aAGlD,kBACKoE,EAAU+C,MAAM,EAAGS,IADxB,QAEOxD,EAAUwD,IAFjB,IAEoC7G,MAAO+G,MAF3C,OAGK1D,EAAU+C,MAAMS,EAAmB,EAAGxD,EAAUpE,UAGvD,OAAOoE,KAewB4D,CAAmBpD,IAASpB,IAAKA,GACnDoB,EAAOE,cAKhB,KACH8B,EAAW5G,OAAS,EACnB,kBAACiI,EAAA,GAAD,CAAQ/E,QAAQ,OAAOF,QA1EF,WACzBiC,GAAgB,SAACb,GAaf,OAZsBA,EAAUlE,KAAI,SAAC0E,GACnC,GAAoB,SAAhBA,EAAOxB,KACT,cAAYwB,GAAZ,IAAoB7D,MAAO,KAE7B,GAAoB,aAAhB6D,EAAOxB,KAAqB,CAC9B,IAAM8E,EAAWtD,EAAO7D,MAAMb,KAAI,SAACiI,GAEjC,OADAA,EAASlC,WAAY,EACrB,OAAYkC,GAAZ,IAAsBlC,WAAW,OAEnC,cAAYrB,GAAZ,IAAoB7D,MAAOmH,WAKjCrB,EAAc,MA0DV,iBAGE,OAKVF,EAAYjD,UAAY,CACtBsB,aAAcrB,IAAAA,MACdsB,gBAAiBtB,IAAAA,KACjBiD,WAAYjD,IAAAA,MACZkD,cAAelD,IAAAA,MAGjB,UCpJA,IAAMyE,EAAiB,SAAC,GACtB,OADsC,EAAdC,QACTnI,KAAI,WAAmBvB,GAAnB,IAAG6D,EAAH,EAAGA,MAAOS,EAAV,EAAUA,MAAV,OACjB,kBAACe,EAAA,EAAD,CAAaR,IAAK7E,GAChB,kBAACsJ,EAAA,GAAD,CAAQjF,QAASC,EAAOC,QAAQ,WAC7BV,QAMH8F,EAAgB,SAAC,GAajB,IAZJC,EAYI,EAZJA,eACA1E,EAWI,EAXJA,QACAoB,EAUI,EAVJA,gBACAD,EASI,EATJA,aACA4B,EAQI,EARJA,WACAC,EAOI,EAPJA,cACA2B,EAMI,EANJA,UACAC,EAKI,EALJA,MACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,KACAC,EACI,EADJA,QAEA,OACE,kBAACC,EAAA,EAAD,CAASpL,GAAG,UAAU,cAAY,yBAChC,kBAACqL,EAAA,EAAD,KACE,kBAAC,EAAD,CACElF,QAASA,EACTmB,aAAcA,EACdC,gBAAiBA,IAEnB,kBAACmD,EAAD,CAAgBC,QAASE,IACzB,kBAACvE,EAAA,EAAD,CAAad,QAAQ,aAAa8F,MAAO,CAAEC,QAAS,eACjDT,EACC,kBAACU,EAAA,EAAD,CAAUnG,KAAMoG,EAAAA,EAAAA,KAEhB,kBAACC,EAAA,EAAD,CACE,cAAY,4BACZC,UAAWZ,EACXC,QAASA,EACTE,KAAMA,EACNU,UAAW,SAAC/E,EAAIgF,GAAL,OAAoBV,EAAQU,IACvCC,SAAS,8BACTC,gBAAiB,SAAClF,EAAImE,GAAL,OAAiBC,EAAWD,IAC7CgB,WAAS,MAKjB,kBAACX,EAAA,EAAD,KACE,kBAAC/E,EAAA,EAAD,CAAad,QAAQ,aAAayG,OAAQ,CAAEV,QAAS,eACnD,kBAAC,EAAD,CACEjE,aAAcA,EACdC,gBAAiBA,EACjB2B,WAAYA,EACZC,cAAeA,QAQ3ByB,EAAc5E,UAAY,CACxBG,QAASF,IAAAA,MACT4E,eAAgB5E,IAAAA,MAChBsB,gBAAiBtB,IAAAA,KACjBqB,aAAcrB,IAAAA,MACduB,MAAOvB,IAAAA,OACP8E,MAAO9E,IAAAA,OACP+E,QAAS/E,IAAAA,OACTgF,WAAYhF,IAAAA,KACZiF,KAAMjF,IAAAA,OACNkF,QAASlF,IAAAA,KACTiD,WAAYjD,IAAAA,MACZkD,cAAelD,IAAAA,KACf6E,UAAW7E,IAAAA,MAEb,UCtFA,IAAMiG,EAAgB,SAAC,GAAkD,IAAhDnB,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACzD,OACE,kBAACC,EAAA,EAAD,CAASpL,GAAG,WACV,kBAACqL,EAAA,EAAD,KACE,kBAAC/E,EAAA,EAAD,CAAad,QAAQ,aAAa8F,MAAO,CAAEC,QAAS,eAClD,kBAACG,EAAA,EAAD,CACE,cAAY,4BACZC,UAAWZ,EACXC,QAASA,EACTE,KAAMA,EACNU,UAAW,SAAC/E,EAAIgF,GAAL,OAAoBV,EAAQU,IACvCC,SAAS,8BACTC,gBAAiB,SAAClF,EAAImE,GAAL,OAAiBC,EAAWD,UAQzDkB,EAAclG,UAAY,CACxB+E,MAAO9E,IAAAA,OACP+E,QAAS/E,IAAAA,OACTgF,WAAYhF,IAAAA,KACZiF,KAAMjF,IAAAA,OACNkF,QAASlF,IAAAA,MAGX,U,qkBCpBA,QAjB2B,SAACE,GAAD,OACzBA,EAAQ3D,KAAI,SAAC0E,GACX,IAAMiF,EAAS,CACbzG,KAAMwB,EAAOxB,KACb0B,MAAOF,EAAOE,OAUhB,MAPoB,SAAhBF,EAAOxB,OAAiByG,EAAO9I,MAAQ6D,EAAO7D,OAAS,IACvC,aAAhB6D,EAAOxB,OACTyG,EAAO9I,MAAQ6D,EAAOkF,QAAQ5J,KAAI,SAAC4F,EAAQnH,GAAT,SAAC,KAC9BmH,GAD6B,IAEhCpI,GAAI,SAAWiB,EACfsH,UAAWH,EAAOG,YAAa,QAE5B4D,M,ypBCOX,IA6BME,GAAe,SAAC,GAchB,IAbJC,EAaI,EAbJA,cACAnG,EAYI,EAZJA,QACAoG,EAWI,EAXJA,cACAC,EAUI,EAVJA,UACAC,EASI,EATJA,YACAC,EAQI,EARJA,KACA7B,EAOI,EAPJA,eACA8B,EAMI,EANJA,eACAC,EAKI,EALJA,mBACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,wBAEA,GAAwCrF,EAAAA,EAAAA,UAASsF,EAAmB9G,IAApE,eAAOmB,EAAP,KAAqBC,EAArB,KACA,GAAoCI,EAAAA,EAAAA,UAAS,IAA7C,eAAOuB,EAAP,KAAmBC,EAAnB,KACA,GAA4BxB,EAAAA,EAAAA,UAASkF,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAA8BxF,EAAAA,EAAAA,UAAS,IAAvC,eAAOqD,EAAP,KAAgBC,EAAhB,KACA,GAAwBtD,EAAAA,EAAAA,UAAS,GAAjC,eAAOuD,EAAP,KAAaC,EAAb,KACMiC,GAAWC,EAAAA,GAAAA,gBAEjBjE,EAAAA,EAAAA,YAAU,WCtDiB,IAAC,EAAavH,EDuDvCyK,GACIC,EAAca,EAAD,GAAC,MArDD,SAAClE,GA0BpB,OAxBEA,EAAW5G,OAAS,EAChB4G,EAAWpI,QAAO,SAACC,EAAKmG,GACtB,GAAInG,EAAImG,EAAOpB,IAAIwH,eAAgB,CACjC,IAAMC,EACqC,iBAAlCxM,EAAImG,EAAOpB,IAAIwH,eAClB,CAACvM,EAAImG,EAAOpB,IAAIwH,iBADpB,OAEQvM,EAAImG,EAAOpB,IAAIwH,gBACzB,gBACKvM,GADL,cAEGmG,EAAOpB,IAAIwH,cAFd,kBAGOC,GAHP,CAIIrG,EAAOwC,QAAUxC,EAAOwC,QAAUxC,EAAOE,UAI7C,gBACKrG,GADL,cAEGmG,EAAOpB,IAAIwH,cAAgBpG,EAAOwC,QAC/BxC,EAAOwC,QACPxC,EAAOE,UAGd,IACH,GA6BKoG,CAAatE,IADL,IAEXtJ,MAAOoL,EACPnL,QAASqL,EAAO,GAAKF,IC3DYnJ,GAAb,ED4DH,CACf4L,UAAWP,EAAOO,UAClB5L,KAAM6L,GAAQR,EAAOjM,OAAOyE,OC9DG7D,KAClC,CACLqB,QAAuB,QAF2B,EAAtBuK,UAEG5L,EAAtB,WAAiCA,SDgEzC,CAACqH,EAAY8B,EAASE,EAAMgC,IAE/B,IAIQS,EAJA5C,EAA+ByB,EAA/BzB,MAAOD,EAAwB0B,EAAxB1B,UAAW8C,EAAapB,EAAboB,SAYpBC,GAAsBvB,IARpBqB,EAAarG,EAAaI,MAAK,SAACR,GAAD,MAA8B,UAAlBA,MAAAA,OAAA,EAAAA,EAAQE,UAClDsF,EAAKxF,QAAO,SAAC4G,GAClB,OAAOH,EACHG,EAAKC,QAAQT,cAAc9J,SAASmK,EAAWtK,MAAMiK,eACrDQ,MAOFE,EAAoB,SAACtB,GAAD,OACxBA,EAAKuB,MAAK,SAACC,EAAGC,GAAJ,MACa,QAArBjB,EAAOO,UACHS,EAAEH,QAAQT,cAAcc,cAAcD,EAAEJ,QAAQT,eAChDa,EAAEJ,QAAQT,cAAcc,cAAcF,EAAEH,QAAQT,mBAGlDe,GAAe/B,EAEjB,EADA0B,EAAkBH,GAAoBvL,OAOpCgM,GACJxD,GAAa8C,IAAa7C,MAAAA,OAAA,EAAAA,EAAOzI,QAAS,GAAK6D,EAAQ7D,OAAS,EAE5DoL,GAAUjB,EAAYjK,KAAI,SAAC+L,GAAD,MAAiB,CAC/CzJ,MAAOyJ,EAAWzJ,MAClBY,KAAM6I,EAAW7I,KACjB8I,WAAYF,GAAa,GAAKC,EAAWN,KAAO,CAACQ,EAAAA,UAAY,OAGzDC,GAAepC,EACjBI,EACAsB,EAAkBH,GAAoBpE,OACnCyB,EAAO,GAAKF,GACZE,EAAO,GAAKF,EAAUA,GAGvB2D,GAAc,CAClB,CACEC,YAAY,EACZC,MAAO,CACL,CACEC,MAAO,CAAEC,QAAS,GAClBjK,MACE,kBAACkK,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYzJ,QAAQ,SAClB,kBAAC0J,EAAA,EAAD,CAAgBrK,KAAMsK,EAAAA,UASpC,OACE,oCACE,kBAAC,EAAD,CACEpE,MAAOuB,EAAgBvB,EAAQsD,GAC/BxD,eAAgBA,EAChB1E,QAASA,EACTmB,aAAcA,EACdC,gBAAiBA,EACjB2B,WAAYA,EACZC,cAAeA,EACf2B,UAAWA,EACXE,QAASA,EACTC,WAAYA,EACZC,KAAMA,EACNC,QAASA,KAETL,IAAcC,EAAQ,EACtB,kBAAC,KAAD,CACE,cAAY,oCACZnG,QAAQ,QACRC,KAAK,SACLC,MAAOgI,EACP7H,iBAAkB,CAChB,CACEH,MAAOkI,EACP1H,QAAS,kBAAMyH,UAIlBjC,IAAc4D,GAAapM,OAAS,EACvC,kBAAC,KAAD,CACE,cAAY,qCACZsC,QAAQ,QACRC,KAAK,SACLC,MAAM,iBACNG,iBAAkB,CAChB,CACEH,MAAO,oBACPQ,QAAS,kBAAMiC,EAAgB0F,EAAmB9G,SAKxD,kBAAC,EAAAiJ,MAAD,CACE,cAAY,uBACZ5J,QAAQ,UACR,aAAW,sBACX0H,OAAQA,EACRmC,OAtFW,SAACC,EAAQrO,EAAOwM,GACjCN,EAAU,CAAElM,MAAAA,EAAOwM,UAAAA,KAsFbd,eAAgBA,GAAkC,KAClDC,mBAAoBA,EACpBiC,MAAOnB,GACPhB,KAAM5B,EAAY6D,GAAcD,IAEhC,kBAAC,EAAAa,YAAD,MACA,kBAAC,EAAAC,UAAD,OAIJ,kBAAC,EAAD,CACEzE,MAAOuB,EAAgBvB,EAAQsD,GAC/B9G,gBAAiBA,EACjByD,QAASA,EACTC,WAAYA,EACZC,KAAMA,EACNC,QAASA,MAMjBkB,GAAarG,UAAY,CACvBsG,cAAerG,IAAAA,KACfE,QAASF,IAAAA,MACTsG,cAAetG,IAAAA,KACfuG,UAAWvG,IAAAA,OACXwG,YAAaxG,IAAAA,MACbyG,KAAMzG,IAAAA,MACN0G,eAAgB1G,IAAAA,KAChB2G,mBAAoB3G,IAAAA,KACpB4G,YAAa5G,IAAAA,OACb4E,eAAgB5E,IAAAA,MAChB6G,kBAAmB7G,IAAAA,OACnB+G,wBAAyB/G,IAAAA,OACzB8G,iBAAkB9G,IAAAA,MAGpB,a,qNE9NawJ,EAAe,CAC1B,OACA,QACA,UACA,UACA,WACA,UACA,gBAGWC,EAAe,CAC1BC,KAAM,CACJ9K,KAAM+K,EAAAA,GACNC,MAAOC,EAAAA,EAAAA,MACPhL,MAAO,iBAETiL,MAAO,CACLlL,KAAMmL,EAAAA,GACNH,MAAOI,EAAAA,EAAAA,MACPnL,MAAO,wBAEToL,QAAS,CAAErL,KAAMsL,EAAAA,GAAiBrL,MAAO,oBACzCsL,SAAU,CAAEvL,KAAMwL,EAAAA,GAAiBvL,MAAO,YAC1CwL,QAAS,CAAEzL,KAAM0L,EAAAA,GAAazL,MAAO,iBACrC0L,QAAS,CACP3L,KAAM4L,EAAAA,GACNZ,MAAOa,EAAAA,EAAAA,MACP5L,MAAO,0BAET6L,aAAc,CACZ9L,KAAM+L,EAAAA,GACNf,MAAOgB,EAAAA,EAAAA,MACP/L,MAAO,eAIEgM,EAAiB,SAACC,GAAD,OAC5B5N,OAAOmF,OAAOyI,GAAerJ,MAC3B,SAACjF,GAAD,aAAUA,MAAAA,GAAA,UAAAA,EAAMY,aAAN,eAAaf,QAAS,IAAKG,MAAAA,OAAA,EAAAA,EAAMH,QAAS,MAG3C0O,EAAyB,SAACD,EAAeE,GAAhB,OACpC9N,OAAO2G,QAAQiH,GAAevO,KAAI,+BAAEsD,EAAF,YAASsB,GAAT,aAA0B,GAA1B,GAASA,MAAO/D,EAAhB,EAAgBA,MAAhB,MAAmC,CACnE6N,SAAU9J,EACV+J,QAASrL,EACTsL,OACE/N,MAAAA,OAAA,EAAAA,EAAOf,QAAS,EACZ+O,MAAMC,QAAQjO,GACZA,EAAMb,KAAI,SAACC,GAAD,MAAW,CACnBZ,MAAMoP,MAAAA,OAAA,EAAAA,EAAWxO,KAASA,EAC1BY,MAAOZ,MAET,CACE,CACEZ,MAAMoP,MAAAA,OAAA,EAAAA,EAAW5N,KAAUA,EAC3BA,MAAAA,IAGN,QAkBGnC,EAAsB,CACjC,SACA,YACA,gBACA,YAGWR,EAAkB,CAC7BC,eAAgB,CAAE4Q,UAAW","sources":["webpack:///./src/api/index.js","webpack:///./src/components/Empty.js","webpack:///./src/components/general-table/FilterDropdown.js","webpack:///./src/components/general-table/FilterInput.js","webpack:///./src/components/general-table/FilterControls.js","webpack:///./src/components/general-table/FilterChips.js","webpack:///./src/components/general-table/ToolbarHeader.js","webpack:///./src/components/general-table/ToolbarFooter.js","webpack:///./src/components/general-table/createFilterValues.js","webpack:///./src/components/general-table/GeneralTable.js","webpack:///./src/Routes/ImageManager/constants.js","webpack:///./src/constants.js"],"sourcesContent":["import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchImage = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/devices/${id}`);\n  } catch (err) {\n    // temp error solution\n    console.log('');\n  }\n};\n\nexport const updateDeviceLatestImage = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const getCustomRepositories = () => {\n  return instance.get(`${EDGE_API}/thirdpartyrepo`);\n};\n\nexport const createCustomRepository = (payload) => {\n  return instance.post(`${EDGE_API}/thirdpartyrepo`, {\n    Name: payload.name,\n    URL: payload.baseURL,\n  });\n};\n\nexport const editCustomRepository = (payload) => {\n  return instance.put(`${EDGE_API}/thirdpartyrepo/${payload.id}`, {\n    Name: payload.name,\n    URL: payload.baseURL,\n  });\n};\n\nexport const removeCustomRepository = (id) =>\n  instance.delete(`${EDGE_API}/thirdpartyrepo/${id}`);\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport RepositoryIcon from '@patternfly/react-icons/dist/esm/icons/repository-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst emptyStateIconMapper = {\n  repository: RepositoryIcon,\n  search: SearchIcon,\n};\n\nconst Empty = ({\n  bgColor,\n  icon,\n  title,\n  body,\n  primaryAction,\n  secondaryActions,\n}) => (\n  <EmptyState style={{ backgroundColor: bgColor || '' }}>\n    <EmptyStateIcon icon={emptyStateIconMapper[icon]} />\n    <Title headingLevel=\"h4\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody>{body}</EmptyStateBody>\n    {primaryAction && (\n      <Button onClick={primaryAction.click} variant=\"primary\">\n        {primaryAction.text}\n      </Button>\n    )}\n    <EmptyStateSecondaryActions>\n      {secondaryActions.map(({ type, title, link, onClick }, index) => (\n        <Button\n          component={type === 'link' ? 'a' : 'button'}\n          href={link}\n          variant=\"link\"\n          key={index}\n          onClick={onClick}\n        >\n          {title}\n          {link && <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />}\n        </Button>\n      ))}\n    </EmptyStateSecondaryActions>\n  </EmptyState>\n);\n\nEmpty.propTypes = {\n  bgColor: PropTypes.string,\n  icon: PropTypes.string,\n  title: PropTypes.string,\n  body: PropTypes.string,\n  primaryAction: PropTypes.object,\n  secondaryActions: PropTypes.array,\n};\n\nexport default Empty;\n","import React from 'react';\nimport { ToolbarItem, Select, SelectOption } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst FilterDropdown = ({ filters, dropdown, setDropdown }) => {\n  const toggle = () => {\n    setDropdown((prevState) => ({\n      ...prevState,\n      isOpen: !prevState.isOpen,\n    }));\n  };\n\n  const select = (_e, selection) => {\n    setDropdown({\n      selected: selection,\n      isOpen: false,\n    });\n  };\n\n  return (\n    <>\n      {filters.length > 1 ? (\n        <ToolbarItem data-testid=\"filter-dropdown-testid\">\n          <Select\n            variant=\"single\"\n            aria-label=\"Select input for filters\"\n            width=\"11rem\"\n            onToggle={toggle}\n            onSelect={select}\n            selections={dropdown.selected}\n            isOpen={dropdown.isOpen}\n            toggleIcon={<FilterIcon />}\n          >\n            {filters.map((filter, index) => (\n              <SelectOption key={index} value={filter.label} />\n            ))}\n          </Select>\n        </ToolbarItem>\n      ) : null}\n    </>\n  );\n};\n\nFilterDropdown.propTypes = {\n  filters: PropTypes.array,\n  dropdown: PropTypes.object,\n  setDropdown: PropTypes.func,\n};\n\nexport default FilterDropdown;\n","import React, { useState } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  SearchInput,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\n\nconst FilterInput = ({ filterValues, setFilterValues, input }) => {\n  const selectedFilter = filterValues.find((filter) => filter.label === input);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleFilterChange = () => (value, checkboxValue) => {\n    setFilterValues((prevState) => {\n      const selectedIndex = prevState.findIndex(\n        (filter) => filter.label === selectedFilter.label\n      );\n      const checkedType = prevState.find(\n        (filter) => filter.label === selectedFilter.label\n      );\n      const checkboxIndex =\n        selectedFilter.type === 'checkbox'\n          ? checkedType.value.findIndex((i) => i.option === checkboxValue)\n          : 0;\n      const newValueArray = Object.values({\n        ...checkedType.value,\n        [checkboxIndex]: {\n          ...checkedType.value[checkboxIndex],\n          isChecked: !checkedType?.value[checkboxIndex]?.isChecked,\n        },\n      });\n      const newTextValue = value;\n\n      return Object.values({\n        ...prevState,\n        [selectedIndex]: {\n          ...prevState[selectedIndex],\n          value:\n            selectedFilter.type === 'checkbox' ? newValueArray : newTextValue,\n        },\n      });\n    });\n  };\n\n  if (selectedFilter.type === 'text') {\n    return (\n      <ToolbarItem data-testid=\"filter-input-testid\">\n        <InputGroup>\n          <SearchInput\n            name=\"textInput1\"\n            id=\"textInput1\"\n            type=\"search\"\n            aria-label={`Select input for ${selectedFilter.label}`}\n            placeholder={`Filter by ${selectedFilter.label}`}\n            onChange={debounce(handleFilterChange(), 400)}\n            value={filterValues.find((filter) => filter.type === 'text').value}\n          />\n        </InputGroup>\n      </ToolbarItem>\n    );\n  }\n\n  if (selectedFilter.type === 'checkbox') {\n    return (\n      <ToolbarItem data-testid=\"filter-input-testid\">\n        <InputGroup>\n          <Select\n            variant=\"checkbox\"\n            aria-label={`Select input for ${selectedFilter.label}`}\n            width=\"11rem\"\n            placeholderText={`Filter by ${selectedFilter.label}`}\n            isCheckboxSelectionBadgeHidden\n            onToggle={() => setIsOpen((prevState) => !prevState)}\n            onSelect={handleFilterChange()}\n            selections={selectedFilter.value\n              .filter((value) => value.isChecked == true)\n              .map((arr) => arr.option)}\n            isOpen={isOpen}\n          >\n            {selectedFilter.value.map((filter, index) => (\n              <SelectOption\n                key={index}\n                value={filter.option}\n                isChecked={filter.isChecked}\n              />\n            ))}\n          </Select>\n        </InputGroup>\n      </ToolbarItem>\n    );\n  }\n};\n\nFilterInput.propTypes = {\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  input: PropTypes.string,\n};\n\nexport default FilterInput;\n","import React, { useState } from 'react';\nimport FilterDropdown from './FilterDropdown';\nimport FilterInput from './FilterInput';\nimport PropTypes from 'prop-types';\n\nconst FilterControls = ({ filters, filterValues, setFilterValues }) => {\n  const [dropdown, setDropdown] = useState({\n    isOpen: false,\n    selected: filters[0].label,\n  });\n\n  return (\n    <>\n      <FilterDropdown\n        dropdown={dropdown}\n        setDropdown={setDropdown}\n        filters={filters}\n      />\n      <FilterInput\n        filterValues={filterValues}\n        setFilterValues={setFilterValues}\n        input={dropdown.selected}\n      />\n    </>\n  );\n};\n\nFilterControls.propTypes = {\n  filters: PropTypes.array,\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n};\n\nexport default FilterControls;\n","import React, { useEffect } from 'react';\nimport { ChipGroup, Chip, Button } from '@patternfly/react-core';\nimport { groupBy } from 'lodash';\nimport PropTypes from 'prop-types';\n\nconst FilterChips = ({\n  filterValues,\n  setFilterValues,\n  chipsArray,\n  setChipsArray,\n}) => {\n  const buildChipsArray = () => {\n    filterValues.forEach((filter) => {\n      if (filter.type === 'checkbox') {\n        filter.value.forEach((filterOption) => {\n          if (\n            filterOption.isChecked === true &&\n            !chipsArray.find((chip) => chip.label === filterOption.option)\n          ) {\n            setChipsArray((prevState) => [\n              ...prevState,\n              {\n                label: filterOption.option,\n                apiName: filterOption.optionApiName,\n                key: filter.label,\n              },\n            ]);\n          } else if (\n            filterOption.isChecked === false &&\n            chipsArray.find((chip) => chip.label === filterOption.option)\n          ) {\n            setChipsArray((prevState) => {\n              const index = prevState.findIndex(\n                (state) => state.label === filterOption.option\n              );\n              return [\n                ...prevState.slice(0, index),\n                ...prevState.slice(index + 1, prevState.length),\n              ];\n            });\n          }\n        });\n      }\n      if (filter.type === 'text' && filter.value.length > 0) {\n        const addTextFilter = { label: filter.value, key: filter.label };\n        if (chipsArray.find((chip) => chip.key === filter.label)) {\n          setChipsArray((prevState) =>\n            prevState.map((f) => {\n              return f.key === filter.label ? addTextFilter : f;\n            })\n          );\n        } else {\n          setChipsArray((prevState) => [...prevState, addTextFilter]);\n        }\n      } else if (\n        filter.type === 'text' &&\n        chipsArray.find((chip) => chip.key === filter.label)\n      ) {\n        setChipsArray((prevState) => {\n          const index = prevState.findIndex(\n            (state) => state.key === filter.label\n          );\n          return [\n            ...prevState.slice(0, index),\n            ...prevState.slice(index + 1, prevState.length),\n          ];\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    buildChipsArray();\n  }, [filterValues]);\n\n  const handleResetFilters = () => {\n    setFilterValues((prevState) => {\n      const removedValues = prevState.map((filter) => {\n        if (filter.type === 'text') {\n          return { ...filter, value: '' };\n        }\n        if (filter.type === 'checkbox') {\n          const setFalse = filter.value.map((checkbox) => {\n            checkbox.isChecked = false;\n            return { ...checkbox, isChecked: false };\n          });\n          return { ...filter, value: setFalse };\n        }\n      });\n      return removedValues;\n    });\n    setChipsArray([]);\n  };\n\n  const handleDeleteFilter = (filter) => {\n    const filterLabelIndex = filterValues.findIndex(\n      (value) => value.label === filter.key\n    );\n    setFilterValues((prevState) => {\n      const changedValue = prevState[filterLabelIndex];\n      if (changedValue.type === 'text') {\n        return [\n          ...prevState.slice(0, filterLabelIndex),\n          { ...prevState[filterLabelIndex], value: '' },\n          ...prevState.slice(filterLabelIndex + 1, prevState.length),\n        ];\n      }\n      if (changedValue.type === 'checkbox') {\n        const changeFalse = changedValue.value.map((option) =>\n          option.option === filter.label\n            ? { ...option, isChecked: false }\n            : option\n        );\n        setChipsArray((prevState) => {\n          const removeIndex = prevState.findIndex((state) => state === filter);\n          return [\n            ...prevState.slice(0, removeIndex),\n            ...prevState.slice(removeIndex + 1, prevState.length),\n          ];\n        });\n        return [\n          ...prevState.slice(0, filterLabelIndex),\n          { ...prevState[filterLabelIndex], value: changeFalse },\n          ...prevState.slice(filterLabelIndex + 1, prevState.length),\n        ];\n      }\n      return prevState;\n    });\n  };\n\n  return (\n    <>\n      {chipsArray.length > 0\n        ? Object.entries(groupBy(chipsArray, 'key')).map(([key, value]) => (\n            <ChipGroup\n              data-testid=\"filter-chip\"\n              className=\"pf-u-mr-xs\"\n              categoryName={key}\n              key={key}\n            >\n              {value.map((filter) => (\n                <Chip onClick={() => handleDeleteFilter(filter)} key={key}>\n                  {filter.label}\n                </Chip>\n              ))}\n            </ChipGroup>\n          ))\n        : null}\n      {chipsArray.length > 0 ? (\n        <Button variant=\"link\" onClick={handleResetFilters}>\n          Clear filters\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nFilterChips.propTypes = {\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  chipsArray: PropTypes.array,\n  setChipsArray: PropTypes.func,\n};\n\nexport default FilterChips;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport PropTypes from 'prop-types';\nimport FilterControls from './FilterControls';\nimport FilterChip from './FilterChips';\n\nconst ToolbarButtons = ({ buttons }) => {\n  return buttons.map(({ title, click }, index) => (\n    <ToolbarItem key={index}>\n      <Button onClick={click} variant=\"primary\">\n        {title}\n      </Button>\n    </ToolbarItem>\n  ));\n};\n\nconst ToolbarHeader = ({\n  toolbarButtons,\n  filters,\n  setFilterValues,\n  filterValues,\n  chipsArray,\n  setChipsArray,\n  isLoading,\n  count,\n  perPage,\n  setPerPage,\n  page,\n  setPage,\n}) => {\n  return (\n    <Toolbar id=\"toolbar\" data-testid=\"toolbar-header-testid\">\n      <ToolbarContent>\n        <FilterControls\n          filters={filters}\n          filterValues={filterValues}\n          setFilterValues={setFilterValues}\n        />\n        <ToolbarButtons buttons={toolbarButtons} />\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          {isLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : (\n            <Pagination\n              data-testid=\"pagination-header-test-id\"\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n              widgetId=\"pagination-options-menu-top\"\n              onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n              isCompact\n            />\n          )}\n        </ToolbarItem>\n      </ToolbarContent>\n      <ToolbarContent>\n        <ToolbarItem variant=\"chip-group\" spacer={{ default: 'spacerNone' }}>\n          <FilterChip\n            filterValues={filterValues}\n            setFilterValues={setFilterValues}\n            chipsArray={chipsArray}\n            setChipsArray={setChipsArray}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarHeader.propTypes = {\n  filters: PropTypes.array,\n  toolbarButtons: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  filterValues: PropTypes.array,\n  input: PropTypes.string,\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n  chipsArray: PropTypes.array,\n  setChipsArray: PropTypes.func,\n  isLoading: PropTypes.bool,\n};\nexport default ToolbarHeader;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst ToolbarFooter = ({ count, perPage, setPerPage, page, setPage }) => {\n  return (\n    <Toolbar id=\"toolbar\">\n      <ToolbarContent>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <Pagination\n            data-testid=\"pagination-footer-test-id\"\n            itemCount={count}\n            perPage={perPage}\n            page={page}\n            onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n            widgetId=\"pagination-options-menu-top\"\n            onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarFooter.propTypes = {\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n};\n\nexport default ToolbarFooter;\n","const createFilterValues = (filters) =>\n  filters.map((filter) => {\n    const config = {\n      type: filter.type,\n      label: filter.label,\n    };\n\n    if (filter.type === 'text') config.value = filter.value || '';\n    if (filter.type === 'checkbox')\n      config.value = filter.options.map((option, index) => ({\n        ...option,\n        id: 'option' + index,\n        isChecked: option.isChecked || false,\n      }));\n    return config;\n  });\n\nexport default createFilterValues;\n","import React, { useState, useEffect } from 'react';\nimport ToolbarHeader from './ToolbarHeader';\nimport ToolbarFooter from './ToolbarFooter';\nimport createFilterValues from '../../components/general-table/createFilterValues';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateIcon,\n  Spinner,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport CustomEmptyState from '../Empty';\nimport { useDispatch } from 'react-redux';\nimport { transformSort } from '../../Routes/ImageManager/constants';\n\nconst filterParams = (chipsArray) => {\n  const filterParamsObj =\n    chipsArray.length > 0\n      ? chipsArray.reduce((acc, filter) => {\n          if (acc[filter.key.toLowerCase()]) {\n            const returnAcc =\n              typeof acc[filter.key.toLowerCase()] === 'string'\n                ? [acc[filter.key.toLowerCase()]]\n                : [...acc[filter.key.toLowerCase()]];\n            return {\n              ...acc,\n              [filter.key.toLowerCase()]: [\n                ...returnAcc,\n                filter.apiName ? filter.apiName : filter.label,\n              ],\n            };\n          } else {\n            return {\n              ...acc,\n              [filter.key.toLowerCase()]: filter.apiName\n                ? filter.apiName\n                : filter.label,\n            };\n          }\n        }, {})\n      : {};\n  return filterParamsObj;\n};\n\nconst GeneralTable = ({\n  apiFilterSort,\n  filters,\n  loadTableData,\n  tableData,\n  columnNames,\n  rows,\n  toolbarButtons,\n  actionResolver,\n  areActionsDisabled,\n  defaultSort,\n  emptyStateMessage,\n  emptyStateAction,\n  emptyStateActionMessage,\n}) => {\n  const [filterValues, setFilterValues] = useState(createFilterValues(filters));\n  const [chipsArray, setChipsArray] = useState([]);\n  const [sortBy, setSortBy] = useState(defaultSort);\n  const [perPage, setPerPage] = useState(20);\n  const [page, setPage] = useState(1);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    apiFilterSort\n      ? loadTableData(dispatch, {\n          ...filterParams(chipsArray),\n          limit: perPage,\n          offset: (page - 1) * perPage,\n          ...transformSort({\n            direction: sortBy.direction,\n            name: columns[sortBy.index].type,\n          }),\n        })\n      : null;\n  }, [chipsArray, perPage, page, sortBy]);\n\n  const { count, isLoading, hasError } = tableData;\n\n  //Used for repos until the api can sort and filter\n  const filteredByName = () => {\n    const repoFilter = filterValues.find((filter) => filter?.label === 'Name');\n    return rows.filter((repo) => {\n      return repoFilter\n        ? repo.rowName.toLowerCase().includes(repoFilter.value.toLowerCase())\n        : repo;\n    });\n  };\n\n  const filteredByNameRows = !apiFilterSort && filteredByName();\n\n  //non-api sort function\n  const sortedByDirection = (rows) =>\n    rows.sort((a, b) =>\n      sortBy.direction === 'asc'\n        ? a.rowName.toLowerCase().localeCompare(b.rowName.toLowerCase())\n        : b.rowName.toLowerCase().localeCompare(a.rowName.toLowerCase())\n    );\n\n  const nonApiCount = !apiFilterSort\n    ? sortedByDirection(filteredByNameRows).length\n    : 0;\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  const toShowSort =\n    isLoading || hasError || (count?.length > 0 && filters.length > 0);\n\n  const columns = columnNames.map((columnName) => ({\n    title: columnName.title,\n    type: columnName.type,\n    transforms: toShowSort ? [] : columnName.sort ? [sortable] : [],\n  }));\n\n  const filteredRows = apiFilterSort\n    ? rows\n    : sortedByDirection(filteredByNameRows).slice(\n        (page - 1) * perPage,\n        (page - 1) * perPage + perPage\n      );\n\n  const loadingRows = [\n    {\n      heightAuto: true,\n      cells: [\n        {\n          props: { colSpan: 8 },\n          title: (\n            <Bullseye>\n              <EmptyState variant=\"small\">\n                <EmptyStateIcon icon={Spinner} />\n              </EmptyState>\n            </Bullseye>\n          ),\n        },\n      ],\n    },\n  ];\n\n  return (\n    <>\n      <ToolbarHeader\n        count={apiFilterSort ? count : nonApiCount}\n        toolbarButtons={toolbarButtons}\n        filters={filters}\n        filterValues={filterValues}\n        setFilterValues={setFilterValues}\n        chipsArray={chipsArray}\n        setChipsArray={setChipsArray}\n        isLoading={isLoading}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n      />\n      {!isLoading && !count > 0 ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          bgColor=\"white\"\n          icon=\"search\"\n          title={emptyStateMessage}\n          secondaryActions={[\n            {\n              title: emptyStateActionMessage,\n              onClick: () => emptyStateAction(),\n            },\n          ]}\n        />\n      ) : !isLoading && !filteredRows.length > 0 ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-match\"\n          bgColor=\"white\"\n          icon=\"search\"\n          title=\"No match found\"\n          secondaryActions={[\n            {\n              title: 'Clear all filters',\n              onClick: () => setFilterValues(createFilterValues(filters)),\n            },\n          ]}\n        />\n      ) : (\n        <Table\n          data-testid=\"general-table-testid\"\n          variant=\"compact\"\n          aria-label=\"Manage Images table\"\n          sortBy={sortBy}\n          onSort={handleSort}\n          actionResolver={actionResolver ? actionResolver : null}\n          areActionsDisabled={areActionsDisabled}\n          cells={columns}\n          rows={isLoading ? loadingRows : filteredRows}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n\n      <ToolbarFooter\n        count={apiFilterSort ? count : nonApiCount}\n        setFilterValues={setFilterValues}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n      />\n    </>\n  );\n};\n\nGeneralTable.propTypes = {\n  apiFilterSort: PropTypes.bool,\n  filters: PropTypes.array,\n  loadTableData: PropTypes.func,\n  tableData: PropTypes.object,\n  columnNames: PropTypes.array,\n  rows: PropTypes.array,\n  actionResolver: PropTypes.func,\n  areActionsDisabled: PropTypes.func,\n  defaultSort: PropTypes.object,\n  toolbarButtons: PropTypes.array,\n  emptyStateMessage: PropTypes.string,\n  emptyStateActionMessage: PropTypes.string,\n  emptyStateAction: PropTypes.func,\n};\n\nexport default GeneralTable;\n","export const transformPaginationParams = ({ perPage, page }) => ({\n  limit: perPage,\n  offset: (page - 1) * perPage,\n});\n\nexport const transformFilters = (filters) => {\n  const f = filters.reduce((acc, filter) => {\n    if (!filter.chipKey || filter.chips.length === 0) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [filter.chipKey]: filter.chips.map((chip) => chip.value),\n    };\n  }, {});\n  return f;\n};\n\nexport const transformSort = ({ direction, name }) => {\n  return {\n    sort_by: direction === 'asc' ? name : `-${name}`,\n  };\n};\n\nexport const getFilterDep = (filter = undefined) => {\n  return filter?.chips?.map((chip) => chip.value).join('.') || undefined;\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n"],"names":["IMAGE_BUILDER_API","EDGE_API","fetchActiveImages","limit","offset","instance","fetchImage","id","fetchDeviceSummary","client","HostsApi","undefined","Promise","all","apiHostGetHostList","query","generateFilter","inventoryFields","system_profile","then","resp","reduce","acc","curr","index","deviceSummaryMapper","total","getPackages","distribution","architecture","search","params","URLSearchParams","toString","createImage","Id","name","version","description","release","username","credentials","imageTypes","imageType","packages","length","payload","map","item","outputTypes","commit","arch","installer","sshkey","endpoint","fetchEdgeImages","q","sort_by","Object","keys","value","multiVals","val","includes","getEdgeImageStatus","getDeviceHasUpdate","console","log","updateDeviceLatestImage","getImageDataOnDevice","checkImageName","getCustomRepositories","createCustomRepository","Name","URL","baseURL","editCustomRepository","removeCustomRepository","emptyStateIconMapper","repository","RepositoryIcon","SearchIcon","Empty","bgColor","icon","title","body","primaryAction","secondaryActions","style","backgroundColor","headingLevel","size","onClick","click","variant","text","type","link","component","href","key","className","propTypes","PropTypes","FilterDropdown","filters","dropdown","setDropdown","ToolbarItem","Select","width","onToggle","prevState","isOpen","onSelect","_e","selection","selected","selections","toggleIcon","filter","SelectOption","label","FilterInput","filterValues","setFilterValues","input","selectedFilter","find","useState","setIsOpen","handleFilterChange","checkboxValue","selectedIndex","findIndex","checkedType","checkboxIndex","i","option","newValueArray","values","isChecked","newTextValue","InputGroup","SearchInput","placeholder","onChange","placeholderText","isCheckboxSelectionBadgeHidden","arr","FilterControls","FilterChips","chipsArray","setChipsArray","useEffect","forEach","filterOption","chip","state","slice","apiName","optionApiName","addTextFilter","f","entries","ChipGroup","categoryName","Chip","filterLabelIndex","changedValue","changeFalse","removeIndex","handleDeleteFilter","Button","setFalse","checkbox","ToolbarButtons","buttons","ToolbarHeader","toolbarButtons","isLoading","count","perPage","setPerPage","page","setPage","Toolbar","ToolbarContent","align","default","Skeleton","SkeletonSize","Pagination","itemCount","onSetPage","pageNumber","widgetId","onPerPageSelect","isCompact","spacer","ToolbarFooter","config","options","GeneralTable","apiFilterSort","loadTableData","tableData","columnNames","rows","actionResolver","areActionsDisabled","defaultSort","emptyStateMessage","emptyStateAction","emptyStateActionMessage","createFilterValues","sortBy","setSortBy","dispatch","useDispatch","toLowerCase","returnAcc","filterParams","direction","columns","repoFilter","hasError","filteredByNameRows","repo","rowName","sortedByDirection","sort","a","b","localeCompare","nonApiCount","toShowSort","columnName","transforms","sortable","filteredRows","loadingRows","heightAuto","cells","props","colSpan","Bullseye","EmptyState","EmptyStateIcon","Spinner","Table","onSort","_event","TableHeader","TableBody","statusMapper","statusToIcon","done","CheckCircleIcon","color","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","isEmptyFilters","activeFilters","constructActiveFilters","getLabel","category","chipKey","chips","Array","isArray","host_type"],"sourceRoot":""}