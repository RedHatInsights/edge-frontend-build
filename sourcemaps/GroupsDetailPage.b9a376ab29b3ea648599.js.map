{"version":3,"sources":["webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/constants.js"],"names":["GeneralInformation","lazy","SystemCard","OperatingSystemCard","CollectionCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","runningVersion","systemProfile","running_rpm_os_tree_version","stagedVersion","staged_rpm_os_tree_version","nonActiveVersion","non_active_rpm_os_tree_version","heathCheck","health_check","rhcHealth","rhc_health","Suspense","fallback","store","useStore","ConfigurationCardWrapper","SystemCardWrapper","props","hasSAP","OperatingSystemCardWrapper","hasKernelModules","extra","title","value","length","plural","singular","onClick","_e","handleClick","generalMapper","statusHelper","toUpperCase","Tooltip","content","className","CollectionCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","hideBack","hideInvDrawer","Main","Grid","gutter","GridItem","span","AppInfo","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Card","CardTitle","CardBody","Stack","hasGutter","StackItem","Button","isInline","variant","propTypes","PropTypes","deviceSummaryReducer","isLoading","undefined","hasError","data","shallowEqual","Bullseye","Spinner","Tiles","dispatch","useDispatch","registered","imagesReducer","loadImages","loadDeviceSummary","Flex","FlexItem","onNewImageClick","CreateImageWizard","React","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","useState","getEntities","setGetEntities","isOpen","setIsOpen","activeFilters","setActiveFilters","inventory","useRef","history","useHistory","URLSearchParams","location","search","get","cleanEntities","Fragment","PageHeaderTitle","push","pathname","create_image","toString","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","_i","config","filter","system_profile","host_type","fields","hideFilters","registeredWith","filterConfig","items","type","filterValues","onChange","event","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onDelete","itemsToRemove","isAll","onDeleteFilter","onRowClick","id","mergeWithEntities","api","navigateBack","columns","transforms","sortable","key","distribution","status","imageType","activeFilterMapper","UPDATE_FILTER","action","property","DELETE_FILTER","_state","payload","activeFilterReducer","useReducer","dispatchActiveFilters","perPage","setPerPage","page","setPage","opened","setOpened","index","direction","sortBy","setSortBy","edgeImagesReducer","_event","placeholder","composeStatus","Object","entries","imageTypeMapper","map","tid","setTimeout","loadEdgeImages","keys","reduce","prevValues","clearTimeout","limit","offset","sort_by","pagination","colSize","rowSize","icon","DisconnectedIcon","headingLevel","itemCount","onSetPage","_evt","newPage","onPerPageSelect","newPerPage","isCompact","dedicatedAction","isDisabled","Table","aria-label","onExpand","_rowIndex","_colIndex","isExpanded","rowData","imageId","ariaLabel","actionResolver","isoURL","href","rel","target","onSort","cells","rows","flatten","ID","paths","Name","Version","distributionMapper","Distribution","ImageType","date","CreatedAt","Status","Installer","InstallerISOURL","heightAuto","colSpan","PlusCircleIcon","TableHeader","TableBody","imageStatusReducer","TextContent","TextList","TextListItem","T","StatusLabel","loadImageStatus","Title","statusIcons","color","statusColors","text","imageStatusMapper","charAt","slice","toLowerCase","DEFAULT_RELEASE","unknown","CREATED","BUILDING","ERROR","SUCCESS","releaseMapper"],"mappings":"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","file":"js/GroupsDetailPage.2f635fd064fd089efe5a.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nimport {\n  generalMapper,\n  statusHelper,\n} from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const {\n    runningVersion,\n    stagedVersion,\n    nonActiveVersion,\n    heathCheck,\n    rhcHealth,\n  } = useSelector(({ systemProfileStore }) => ({\n    runningVersion:\n      systemProfileStore?.systemProfile?.running_rpm_os_tree_version,\n    stagedVersion:\n      systemProfileStore?.systemProfile?.staged_rpm_os_tree_version,\n    nonActiveVersion:\n      systemProfileStore?.systemProfile?.non_active_rpm_os_tree_version || [],\n    heathCheck: systemProfileStore?.systemProfile?.health_check,\n    rhcHealth: systemProfileStore?.systemProfile?.rhc_health,\n  }));\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        ConfigurationCardWrapper={false}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard {...props} hasSAP={false} />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard\n              {...props}\n              hasKernelModules={false}\n              extra={[\n                { title: 'Running rpm-ostree version', value: runningVersion },\n                {\n                  title: 'Staged rpm-ostree version',\n                  value: stagedVersion,\n                },\n                {\n                  title: 'Non-active (available rollback version(s))',\n                  value: nonActiveVersion?.length,\n                  plural: 'versions',\n                  singular: 'version',\n                  onClick: (_e, handleClick) =>\n                    handleClick(\n                      'Non-active (available rollback version(s))',\n                      generalMapper(nonActiveVersion || [], 'Version'),\n                      'small'\n                    ),\n                },\n                {\n                  title: 'Health check status',\n                  value: statusHelper[heathCheck?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  AppInfo,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={uuid ? `/groups` : '/fleet-management'}>\n              {uuid ? 'Groups' : 'Fleet management'}\n            </Link>\n          </BreadcrumbItem>\n          {uuid && (\n            <BreadcrumbItem>\n              {groupName ? (\n                <Link to={`/groups/${uuid}`}>{groupName}</Link>\n              ) : (\n                <Skeleton size={SkeletonSize.xs} />\n              )}\n            </BreadcrumbItem>\n          )}\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead fallback=\"\" hideBack showTags hideInvDrawer />\n      </PageHeader>\n      <Main className=\"edge-c-device--detail\">\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <AppInfo showTags fallback=\"\" />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary</CardTitle>\n    <CardBody>\n      <Grid>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {active}\n              </Button>{' '}\n              Active\n            </StackItem>\n            <StackItem>\n              <Button isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {orphaned}\n              </Button>{' '}\n              Orphaned\n            </StackItem>\n          </Stack>\n        </GridItem>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {noReports}\n              </Button>\n              Stale\n            </StackItem>\n            <StackItem>\n              <Button isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {neverReported}\n              </Button>\n              Registered but never reported\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [getEntities, setGetEntities] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('create_image') === 'true') {\n      setIsOpen(() => true);\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles\n          onNewImageClick={() => {\n            history.push({\n              pathname: history.location.pathname,\n              search: new URLSearchParams({\n                create_image: true,\n              }).toString(),\n            });\n            setIsOpen(true);\n          }}\n        />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n          }}\n          getEntities={async (_i, config) => {\n            const data = await getEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                ],\n              },\n            });\n            return data;\n          }}\n          hideFilters={{ registeredWith: true }}\n          filterConfig={{\n            items: [\n              {\n                label: activeFilters?.deviceStatus?.label,\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value) => {\n                    setActiveFilters(() => ({\n                      ...(activeFilters || {}),\n                      deviceStatus: {\n                        ...(activeFilters?.deviceStatus || {}),\n                        value,\n                      },\n                    }));\n                    inventory.current.onRefreshData();\n                  },\n                  items: deviceStatusMapper,\n                  value: activeFilters?.deviceStatus?.value || [],\n                },\n              },\n            ],\n          }}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            onDelete: (event, itemsToRemove, isAll) => {\n              if (isAll) {\n                setActiveFilters(defaultFilters);\n              } else {\n                setActiveFilters(() =>\n                  onDeleteFilter(activeFilters, itemsToRemove)\n                );\n              }\n              inventory.current.onRefreshData();\n            },\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities, api }) => {\n            setGetEntities(() => api?.getEntities);\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React, {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  Suspense,\n  useReducer,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { loadEdgeImages } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport { edgeImagesReducer } from '../../store/reducers';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n  Button,\n  Skeleton,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { DisconnectedIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport flatten from 'lodash/flatten';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { useHistory } from 'react-router-dom';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport {\n  imageTypeMapper,\n  composeStatus,\n  distributionMapper,\n} from '../ImageManagerDetail/constants';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst columns = [\n  {\n    title: 'Name',\n    type: 'name',\n    transforms: [sortable],\n  },\n  'Version',\n  {\n    title: 'Distribution',\n    type: 'distribution',\n    transforms: [sortable],\n  },\n  {\n    title: 'Type',\n    type: 'image_type',\n    transforms: [sortable],\n  },\n  {\n    title: 'Created',\n    type: 'created_at',\n    transforms: [sortable],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    transforms: [sortable],\n  },\n];\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    key: 'name',\n    value: '',\n  },\n  distribution: {\n    label: 'Distribution',\n    key: 'distribution',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    key: 'status',\n    value: [],\n  },\n  imageType: {\n    label: 'Image type',\n    key: 'image_type',\n    value: [],\n  },\n};\n\nconst updateFilter = (state, action) => ({\n  ...state,\n  [action.property]: {\n    ...(state[action.property] || {}),\n    value: action.value,\n  },\n});\n\nconst deleteFilter = (_state, action) => action.payload;\n\nconst activeFilterMapper = {\n  UPDATE_FILTER: updateFilter,\n  DELETE_FILTER: deleteFilter,\n};\n\nconst activeFilterReducer = applyReducerHash(\n  activeFilterMapper,\n  defaultFilters\n);\n\nconst Images = () => {\n  const history = useHistory();\n  const [activeFilters, dispatchActiveFilters] = useReducer(\n    activeFilterReducer,\n    defaultFilters\n  );\n  const [perPage, setPerPage] = useState(100);\n  const [page, setPage] = useState(1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [opened, setOpened] = useState([]);\n  const [sortBy, setSortBy] = useState({ index: 4, direction: 'desc' });\n  const dispatch = useDispatch();\n  const { getRegistry } = useContext(RegistryContext);\n  const { isLoading, hasError, data } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      isLoading:\n        edgeImagesReducer?.isLoading !== undefined\n          ? edgeImagesReducer?.isLoading\n          : true,\n      hasError: edgeImagesReducer?.hasError || false,\n      data: edgeImagesReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  const filterConfig = {\n    items: [\n      {\n        label: defaultFilters.name.label,\n        type: 'text',\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'name',\n              value,\n            }),\n          value: activeFilters?.name?.value || '',\n          placeholder: 'Filter by name',\n        },\n      },\n      {\n        label: defaultFilters.distribution.label,\n        type: 'text',\n        filterValues: {\n          key: 'distribution-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'distribution',\n              value,\n            }),\n          value: activeFilters?.distribution?.value || '',\n        },\n      },\n      {\n        label: defaultFilters.status.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'status-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'status',\n              value,\n            }),\n          items: composeStatus.map((item) => ({\n            value: item,\n            label: item,\n          })),\n          value: activeFilters?.status?.value || [],\n        },\n      },\n      {\n        label: defaultFilters.imageType.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'image-type-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'imageType',\n              value,\n            }),\n          items: Object.entries(imageTypeMapper).map(([value, label]) => ({\n            value,\n            label,\n          })),\n          value: activeFilters?.imageType?.value || [],\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    const tid = setTimeout(() => {\n      loadEdgeImages(\n        dispatch,\n        Object.keys(activeFilters).reduce((filters, key) => {\n          const filter = activeFilters[key];\n          if (typeof filter.value === 'string') {\n            return { ...filters, [key]: filter.value };\n          }\n          if (typeof filter.value === 'object') {\n            if (typeof filter.value.length !== 'number') {\n              return filters;\n            }\n            const prevValues = filters[key] || [];\n            return { ...filters, [key]: [...prevValues, ...filter.value] };\n          }\n          return filters;\n        }, {})\n      );\n    }, 570);\n    return () => clearTimeout(tid);\n  }, [activeFilters]);\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      edgeImagesReducer,\n    });\n    return () => registered();\n  }, []);\n\n  useEffect(() => {\n    if (sortBy.direction === 'asc') {\n      loadEdgeImages(dispatch, {\n        limit: perPage,\n        offset: (page - 1) * perPage,\n        sort_by: columns[sortBy.index].type,\n      });\n    } else {\n      loadEdgeImages(dispatch, {\n        limit: perPage,\n        offset: (page - 1) * perPage,\n        sort_by: `-${columns[sortBy.index].type}`,\n      });\n    }\n  }, [page, perPage, sortBy]);\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  const actionResolver = (rowData) => {\n    if (rowData?.isoURL === undefined) {\n      return [];\n    }\n\n    return [\n      {\n        title: (\n          <a href={rowData.isoURL} rel=\"noopener noreferrer\" target=\"_blank\">\n            Download\n          </a>\n        ),\n      },\n    ];\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Fragment>\n          {isLoading ? (\n            <Fragment>\n              <PrimaryToolbar pagination={<Skeleton />} />\n              <SkeletonTable colSize={5} rowSize={15} />\n            </Fragment>\n          ) : null}\n          {!isLoading && hasError ? (\n            <EmptyState>\n              <EmptyStateIcon icon={DisconnectedIcon} />\n              <Title headingLevel=\"h4\" size=\"lg\">\n                Error!\n              </Title>\n              <EmptyStateBody>\n                There was an error while loading images list!\n              </EmptyStateBody>\n            </EmptyState>\n          ) : null}\n          {!isLoading && !hasError ? (\n            <Fragment>\n              {data.length > 0 ? (\n                <PrimaryToolbar\n                  filterConfig={filterConfig}\n                  activeFiltersConfig={{\n                    filters: isEmptyFilters(activeFilters)\n                      ? constructActiveFilters(activeFilters)\n                      : [],\n                    onDelete: (_event, itemsToRemove, isAll) => {\n                      if (isAll) {\n                        dispatchActiveFilters({\n                          type: 'DELETE_FILTER',\n                          payload: defaultFilters,\n                        });\n                      } else {\n                        dispatchActiveFilters({\n                          type: 'DELETE_FILTER',\n                          payload: onDeleteFilter(activeFilters, itemsToRemove),\n                        });\n                      }\n                    },\n                  }}\n                  pagination={{\n                    itemCount: data?.length || 0,\n                    page,\n                    perPage,\n                    onSetPage: (_evt, newPage) => setPage(newPage),\n                    onPerPageSelect: (_evt, newPerPage) =>\n                      setPerPage(newPerPage),\n                    isCompact: true,\n                  }}\n                  dedicatedAction={\n                    <Button\n                      onClick={() => {\n                        history.push({\n                          pathname: history.location.pathname,\n                          search: new URLSearchParams({\n                            create_image: true,\n                          }).toString(),\n                        });\n                        setIsOpen(true);\n                      }}\n                      isDisabled={isLoading !== false}\n                    >\n                      Create new image\n                    </Button>\n                  }\n                />\n              ) : null}\n              <Table\n                aria-label=\"Manage Images table\"\n                onExpand={(_e, _rowIndex, _colIndex, isExpanded, rowData) => {\n                  const imageId = rowData.id;\n                  setOpened(\n                    isExpanded\n                      ? opened.filter((item) => item !== imageId)\n                      : [...opened, imageId]\n                  );\n                }}\n                ariaLabel=\"Images table\"\n                variant=\"compact\"\n                actionResolver={actionResolver}\n                sortBy={sortBy}\n                onSort={handleSort}\n                cells={columns}\n                rows={\n                  data.length > 0\n                    ? flatten(\n                        data.map((item) => [\n                          {\n                            id: item.ID,\n                            cells: [\n                              {\n                                title: (\n                                  <Link\n                                    to={`${paths['manage-images']}/${item.ID}`}\n                                  >\n                                    {item.Name}\n                                  </Link>\n                                ),\n                              },\n                              item?.Version,\n                              {\n                                title: distributionMapper[item?.Distribution],\n                              },\n                              {\n                                title: imageTypeMapper[item?.ImageType],\n                              },\n                              {\n                                title: <DateFormat date={item?.CreatedAt} />,\n                              },\n                              {\n                                title: <StatusLabel status={item?.Status} />,\n                              },\n                            ],\n                            isoURL: item?.Installer?.InstallerISOURL,\n                          },\n                        ])\n                      )\n                    : [\n                        {\n                          heightAuto: true,\n                          cells: [\n                            {\n                              props: { colSpan: 8 },\n                              title: (\n                                <Bullseye>\n                                  <EmptyState variant=\"small\">\n                                    <EmptyStateIcon icon={PlusCircleIcon} />\n                                    <Title headingLevel=\"h2\" size=\"lg\">\n                                      No images found\n                                    </Title>\n                                    <Button\n                                      onClick={() => {\n                                        history.push({\n                                          pathname: history.location.pathname,\n                                          search: new URLSearchParams({\n                                            create_image: true,\n                                          }).toString(),\n                                        });\n                                        setIsOpen(true);\n                                      }}\n                                      isDisabled={isLoading !== false}\n                                    >\n                                      Create new images\n                                    </Button>\n                                  </EmptyState>\n                                </Bullseye>\n                              ),\n                            },\n                          ],\n                        },\n                      ]\n                }\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n            </Fragment>\n          ) : null}\n        </Fragment>\n      </Main>\n      {isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React from 'react';\nimport {\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n} from '@patternfly/react-core';\nimport StatusLabel from './StatusLabel';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DetailsHead = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ imageStatusReducer }) => ({\n      isLoading:\n        imageStatusReducer?.isLoading !== undefined\n          ? imageStatusReducer?.isLoading\n          : true,\n      hasError: imageStatusReducer?.hasError || false,\n      data: imageStatusReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  const status = !isLoading && !hasError ? data.Status : null;\n\n  return (\n    <TextContent>\n      <TextList component=\"dl\">\n        <TextListItem component=\"dt\" className=\"grid-align-center\">\n          Status\n        </TextListItem>\n        <TextListItem component=\"dd\">\n          {isLoading ? <Skeleton /> : <StatusLabel status={status} />}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport default DetailsHead;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Title,\n} from '@patternfly/react-core';\nimport { routes as paths } from '../../../package.json';\nimport { useDispatch } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { loadImageStatus } from '../../store/actions';\nimport { imageStatusReducer } from '../../store/reducers';\nimport DetailsHead from './DetailsHeader';\n\nconst ImageDetail = () => {\n  const { imageId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({ imageStatusReducer });\n    loadImageStatus(dispatch, imageId);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={paths['manage-images']}>Manage Images</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>{imageId}</BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              {imageId}\n            </Title>\n          </StackItem>\n          <StackItem>\n            <DetailsHead />\n          </StackItem>\n        </Stack>\n      </PageHeader>\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">{icon(color)}</SplitItem>\n      <SplitItem>{text}</SplitItem>\n    </Split>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = ['CREATED', 'BUILDING', 'ERROR', 'SUCCESS'];\n\nexport const DEFAULT_RELEASE = 'rhel-84';\n\n//For this object, it's need to sisable lint once this is not a react component\nexport const statusIcons = {\n  // eslint-disable-next-line react/display-name\n  unknown: (color) => <QuestionCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  CREATED: (color) => <CheckCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  BUILDING: (color) => <InProgressIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  ERROR: (color) => <TimesCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  SUCCESS: (color) => <CheckCircleIcon color={color} />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  CREATED: 'green',\n  BUILDING: 'blue',\n  ERROR: 'red',\n  SUCCESS: 'green',\n};\n\nexport const imageStatusMapper = {\n  CREATED: 'CREATED',\n  BUILDING: 'Image build in progress',\n  ERROR: 'ERROR',\n  SUCCESS: 'SUCCESS',\n};\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n};\n\nexport const releaseMapper = {\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const imageTypeMapper = {\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n};\n"],"sourceRoot":""}