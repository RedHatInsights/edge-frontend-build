{"version":3,"file":"js/Groups.903db7cc9d5fa0d0007a.js","mappings":"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","sources":["webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/api/index.js","webpack:///./src/utils/apiWithToast.js","webpack:///./node_modules/lodash/_arrayAggregator.js","webpack:///./node_modules/lodash/_baseAggregator.js","webpack:///./node_modules/lodash/_baseEach.js","webpack:///./node_modules/lodash/_createAggregator.js","webpack:///./node_modules/lodash/_createBaseEach.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  addDevicesToGroup,\n  validateGroupName,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={validatorMapper}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchGroups,\n}) => {\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData.rowInfo;\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled:\n            devices.length > 0\n              ? !(rowData?.rowInfo?.hasValidUpdate && hasUpdate)\n              : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n        hasValidUpdate: rowData?.DeviceGroup?.ValidUpdate,\n      },\n      cells: [\n        {\n          title: <Link to={`${paths.fleetManagement}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={[\n          {\n            title: 'Create group',\n            click: handleCreateModal,\n          },\n        ]}\n        hasModalSubmitted={hasModalSubmitted}\n        setHasModalSubmitted={setHasModalSubmitted}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={async () => {\n              await fetchGroups();\n              setHasModalSubmitted(true);\n            }}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  closeModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React, { useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/groups';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { useLocation } from 'react-router-dom';\nimport { emptyStateNoFilters } from '../../utils';\n\nconst Groups = () => {\n  const { search } = useLocation();\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const reloadData = async () => {\n    await fetchGroups();\n    setHasModalSubmitted(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <section className=\"edge-groups pf-l-page__main-section pf-c-page__main-section\">\n        {!emptyStateNoFilters(isLoading, data?.count, search) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </section>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={reloadData}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const EDGE_API = '/api/edge/v1';\nexport const CONTENT_SOURCES_API = '/api/content-sources/v1';\n\nexport const getTableParams = (q) => {\n  if (q === undefined) {\n    return '';\n  }\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayAggregator;\n","var baseEach = require('./_baseEach');\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nmodule.exports = baseAggregator;\n","var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var arrayAggregator = require('./_arrayAggregator'),\n    baseAggregator = require('./_baseAggregator'),\n    baseIteratee = require('./_baseIteratee'),\n    isArray = require('./isArray');\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nmodule.exports = createAggregator;\n","var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n"],"names":["asyncGroupNameValidation","value","length","undefined","validateGroupName","data","isValid","validatorMapper","groupName","createGroupSchema","fields","component","componentTypes","name","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","CreateGroupModal","isModalOpen","setIsModalOpen","deviceIds","reloadData","dispatch","useDispatch","handleCreateGroup","values","statusMessages","onSuccess","title","description","onError","apiWithToast","createGroup","handleAddDevicesToNewGroup","ID","addDevicesToGroup","parseInt","isOpen","closeModal","submitLabel","schema","onSubmit","propTypes","PropTypes","UpdateDeviceModal","React","filters","columns","sort","GroupTable","count","isLoading","hasError","handleCreateModal","handleRenameModal","handleDeleteModal","hasModalSubmitted","setHasModalSubmitted","fetchGroups","history","useHistory","pathname","useLocation","useState","deviceData","imageData","updateModal","setUpdateModal","buildRows","map","rowData","DeviceGroup","Name","Devices","DevicesImageInfo","systems","image","Tooltip","content","device","index","key","rowInfo","id","devicesImageInfo","devices","hasValidUpdate","ValidUpdate","cells","Link","to","paths","GeneralTable","apiFilterSort","isUseApi","loadTableData","tableData","columnNames","rows","actionResolver","hasUpdate","some","UpdateAvailable","onClick","prevState","UUID","display_name","imageId","find","ImageID","isDisabled","areActionsDisabled","defaultSort","direction","emptyFilterState","body","toolbarButtons","click","Suspense","fallback","Bullseye","Spinner","navigateBack","push","refreshTable","search","useApi","api","getGroups","tableReload","response","modalState","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","PageHeader","className","PageHeaderTitle","emptyStateNoFilters","Flex","justifyContent","default","Empty","icon","primaryAction","text","secondaryActions","link","RenameGroupModal","DeleteGroupModal","IMAGE_BUILDER_API","EDGE_API","CONTENT_SOURCES_API","getTableParams","q","Object","keys","reduce","acc","curr","multiVals","val","includes","notificationProp","hasSuccess","hasInfo","onInfo","fetchData","addNotification","variant","err","Title","module","exports","array","setter","iteratee","accumulator","baseEach","collection","baseForOwn","createBaseEach","arrayAggregator","baseAggregator","baseIteratee","isArray","initializer","func","isArrayLike","eachFunc","fromRight","iterable"],"sourceRoot":""}