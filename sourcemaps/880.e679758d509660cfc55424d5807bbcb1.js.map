{"version":3,"file":"js/880.6548a35055d68f174430.js","mappings":"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","sources":["webpack:///./src/Routes/Repositories/Empty.js","webpack:///./src/Routes/Repositories/modals/Modal.js","webpack:///./src/Routes/Repositories/modals/AddModal.js","webpack:///./src/Routes/Repositories/modals/EditModal.js","webpack:///./src/Routes/Repositories/modals/RemoveModal.js","webpack:///./src/Routes/Repositories/TableHeader.js","webpack:///./src/Routes/Repositories/ToolbarHeader.js","webpack:///./src/Routes/Repositories/ToolbarFooter.js","webpack:///./src/Routes/Repositories/Table.js","webpack:///./src/Routes/Repositories/RepositoryTable.js","webpack:///./src/Routes/Repositories/RepositoryHeader.js","webpack:///./src/Routes/Repositories/Repositories.js"],"sourcesContent":["import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport RepositoryIcon from '@patternfly/react-icons/dist/esm/icons/repository-icon';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst emptyStateIconMapper = {\n  repository: RepositoryIcon,\n};\n\nconst Empty = ({ icon, title, body, primaryAction, secondaryActions }) => (\n  <EmptyState>\n    <EmptyStateIcon icon={emptyStateIconMapper[icon]} />\n    <Title headingLevel=\"h4\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody>{body}</EmptyStateBody>\n    <Button onClick={primaryAction.click} variant=\"primary\">\n      {primaryAction.text}\n    </Button>\n    <EmptyStateSecondaryActions>\n      {secondaryActions.map(({ title, link }, index) => (\n        <Button variant=\"link\" key={index}>\n          <a href={link}>{title}</a>\n          <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n        </Button>\n      ))}\n    </EmptyStateSecondaryActions>\n  </EmptyState>\n);\n\nEmpty.propTypes = {\n  icon: PropTypes.string,\n  title: PropTypes.string,\n  body: PropTypes.string,\n  primaryAction: PropTypes.object,\n  secondaryActions: PropTypes.array,\n};\n\nexport default Empty;\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  toggle,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  onSubmit,\n}) => {\n  return (\n    <Modal variant=\"small\" title={title} isOpen={isOpen} onClose={toggle}>\n      <FormRenderer\n        schema={schema}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={componentMapper}\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          toggle();\n          reloadData();\n        }}\n        onCancel={() => toggle()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  toggle: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n\nexport default RepoModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { createCustomRepository } from '../../../api/index';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst AddModal = ({ isOpen, toggle, reloadData }) => {\n  const addSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'title',\n        label:\n          'Link to a third-party repository to add packages to RHEL for Edge images.',\n      },\n      {\n        component: 'text-field',\n        name: 'name',\n        label: 'Name',\n        placeholder: 'Repository name',\n        helperText:\n          'Can only contain letters, numbers, spaces, hypthon ( - ), and underscores( _ ).',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n      {\n        component: 'textarea',\n        name: 'baseURL',\n        label: 'BaseURL',\n        placeholder: 'https://',\n        helperText: 'Enter the baseURL for the third-party repository.',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title=\"Add Repository\"\n      isOpen={isOpen}\n      toggle={() => toggle({ type: 'add' })}\n      submitLabel=\"Add\"\n      schema={addSchema}\n      onSubmit={(values) => createCustomRepository(values)}\n      reloadData={reloadData}\n    />\n  );\n};\n\nAddModal.propTypes = {\n  toggle: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n};\n\nexport default AddModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { HelperText, HelperTextItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst EditModal = ({ toggle, isOpen, id, name, baseURL, reloadData }) => {\n  const editSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'title',\n        label: 'Update information about this third-party repository.',\n      },\n      {\n        component: 'text-field',\n        name: 'name',\n        label: 'Name',\n        placeholder: 'Repository name',\n        helperText:\n          'Can only contain letters, numbers, spaces, hypthon ( - ), and underscores( _ ).',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n      {\n        component: 'textarea',\n        name: 'baseURL',\n        label: 'BaseURL',\n        placeholder: 'https://',\n        helperText: (\n          <HelperText hasIcon>\n            <HelperTextItem className=\"pf-u-pb-md\" variant=\"warning\" hasIcon>\n              If you change the repo URL, you may not have access to the\n              packages that were used to build images that reference this\n              repository.\n            </HelperTextItem>\n          </HelperText>\n        ),\n\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title=\"Edit Repository\"\n      isOpen={isOpen}\n      toggle={() => toggle({ type: 'edit' })}\n      submitLabel=\"Update\"\n      schema={editSchema}\n      initialValues={{ id, name, baseURL }}\n      onSubmit={console.log}\n      reloadData={reloadData}\n    />\n  );\n};\n\nEditModal.propTypes = {\n  toggle: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  baseURL: PropTypes.string,\n  setData: PropTypes.func,\n};\nexport default EditModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { TextContent, Text } from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport PropTypes from 'prop-types';\n\nconst LabelWithText = ({ label, text }) => {\n  return (\n    <TextContent>\n      <Text component={'b'}>{label}</Text>\n      <Text>{text}</Text>\n    </TextContent>\n  );\n};\n\nLabelWithText.propTypes = {\n  label: PropTypes.string,\n  text: PropTypes.string,\n};\n\nconst RemoveModal = ({ toggle, isOpen, name, baseURL, reloadData }) => {\n  const addSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'description',\n        label:\n          'Removing a repository could affect your ability to update images.',\n      },\n      {\n        component: 'plain-text',\n        name: 'name',\n        label: <LabelWithText label=\"Name\" text={name} />,\n      },\n      {\n        component: 'plain-text',\n        name: 'baseURL',\n        label: <LabelWithText label=\"baseURL\" text={baseURL} />,\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title={\n        <>\n          <ExclamationTriangleIcon\n            color={warningColor.value}\n            className=\"pf-u-mr-md\"\n          />\n          Remove Repository\n        </>\n      }\n      isOpen={isOpen}\n      toggle={() => toggle({ type: 'remove' })}\n      submitLabel=\"Remove\"\n      schema={addSchema}\n      variant=\"danger\"\n      onSubmit={console.log}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRemoveModal.propTypes = {\n  toggle: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  baseURL: PropTypes.string,\n  setData: PropTypes.func,\n};\nexport default RemoveModal;\n","import React from 'react';\nimport { TextContent, Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst Header = () => {\n  return (\n    <TextContent style={{ padding: '15px', backgroundColor: 'white' }}>\n      <Text component={TextVariants.h1}>Third-party repositories</Text>\n      <Text component={TextVariants.p}>\n        Add third-party repositories to build RHEL for Edge images with\n        additional packages.{' '}\n        <Text\n          style={{ display: 'inline' }}\n          component={TextVariants.small}\n          href=\"#\"\n        >\n          <Text component={TextVariants.a} href=\"#\">\n            Learn more\n            <ExternalLinkAltIcon size=\"sm\" className=\"pf-u-ml-sm\" />\n          </Text>\n        </Text>\n      </Text>\n    </TextContent>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n  Button,\n  InputGroup,\n  TextInput,\n} from '@patternfly/react-core';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport PropTypes from 'prop-types';\n\nconst ToolbarButtons = ({ buttons }) => {\n  return buttons.map(({ title, click }, index) => (\n    <ToolbarItem key={index}>\n      <Button onClick={click} variant=\"primary\">\n        {title}\n      </Button>\n    </ToolbarItem>\n  ));\n};\n\nconst ToolbarHeader = ({\n  toolbarButtons,\n  setInput,\n  count,\n  perPage,\n  setPerPage,\n  page,\n  setPage,\n}) => {\n  return (\n    <Toolbar id=\"toolbar\">\n      <ToolbarContent>\n        <ToolbarItem>\n          <InputGroup>\n            <TextInput\n              name=\"textInput1\"\n              id=\"textInput1\"\n              type=\"search\"\n              aria-label=\"search input example\"\n              placeholder=\"Filter by name\"\n              onChange={(value) => setInput(value)}\n            />\n            <Button\n              variant=\"control\"\n              aria-label=\"search button for search input\"\n            >\n              <SearchIcon />\n            </Button>\n          </InputGroup>\n        </ToolbarItem>\n        <ToolbarButtons buttons={toolbarButtons} />\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <Pagination\n            isCompact\n            itemCount={count}\n            perPage={perPage}\n            page={page}\n            onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n            widgetId=\"pagination-options-menu-top\"\n            onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarHeader.propTypes = {\n  toolbarButtons: PropTypes.array,\n  setInput: PropTypes.func,\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n};\nexport default ToolbarHeader;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst ToolbarFooter = ({ count, perPage, setPerPage, page, setPage }) => {\n  return (\n    <Toolbar id=\"toolbar\">\n      <ToolbarContent>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          <Pagination\n            itemCount={count}\n            perPage={perPage}\n            page={page}\n            onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n            widgetId=\"pagination-options-menu-top\"\n            onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarFooter.propTypes = {\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n};\n\nexport default ToolbarFooter;\n","import React from 'react';\nimport {\n  TableComposable,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from '@patternfly/react-table';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst Table = ({ toggle, columns, rows }) => {\n  return (\n    <React.Fragment>\n      <TableComposable aria-label=\"Simple table\" variant=\"compact\">\n        <Thead>\n          <Tr>\n            {columns.map((column, columnIndex) => (\n              <Th key={columnIndex}>{column}</Th>\n            ))}\n          </Tr>\n        </Thead>\n        <Tbody>\n          {rows.map(({ id, name, baseURL }, rowIndex) => (\n            <Tr key={rowIndex}>\n              <Td key={`${rowIndex}_0`} dataLabel={columns[0]}>\n                <Text classname=\"pf-u-mb-xs\" component={TextVariants.p}>\n                  {name}\n                </Text>\n                <Text component={TextVariants.a}>\n                  <a href={baseURL}>{baseURL}</a>{' '}\n                  <ExternalLinkAltIcon classname=\"pf-u-ml-sm\" />\n                </Text>\n              </Td>\n              <Td\n                actions={{\n                  items: [\n                    {\n                      title: 'Edit',\n                      onClick: () =>\n                        toggle({\n                          type: 'edit',\n                          id,\n                          name,\n                          baseURL,\n                        }),\n                    },\n                    {\n                      title: 'Remove',\n                      onClick: () =>\n                        toggle({\n                          type: 'remove',\n                          id,\n                          name,\n                          baseURL,\n                        }),\n                    },\n                  ],\n                }}\n              />\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </React.Fragment>\n  );\n};\n\nTable.propTypes = {\n  columns: PropTypes.array,\n  rows: PropTypes.array,\n  toggle: PropTypes.func,\n};\nexport default Table;\n","import React, { useState } from 'react';\nimport ToolbarHeader from './ToolbarHeader';\nimport ToolbarFooter from './ToolbarFooter';\nimport Table from './Table';\nimport PropTypes from 'prop-types';\n\nconst RepositoryTable = ({ data, toolbarButtons, toggle }) => {\n  const [input, setInput] = useState('');\n  const [perPage, setPerPage] = useState(10);\n  const [page, setPage] = useState(1);\n  const filteredByName = () =>\n    data\n      .filter((repo) => repo.Name.toLowerCase().includes(input.toLowerCase()))\n      .reverse();\n  return (\n    <>\n      <ToolbarHeader\n        count={data.length}\n        toolbarButtons={toolbarButtons}\n        setInput={setInput}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n      />\n      <Table\n        toggle={toggle}\n        columns={['Name']}\n        rows={filteredByName().slice(\n          (page - 1) * perPage,\n          (page - 1) * perPage + perPage\n        )}\n      />\n      <ToolbarFooter\n        count={data.length}\n        setInput={setInput}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n      />\n    </>\n  );\n};\nRepositoryTable.propTypes = {\n  data: PropTypes.array,\n  toolbarButtons: PropTypes.array,\n  toggle: PropTypes.func,\n};\n\nexport default RepositoryTable;\n","import React from 'react';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Popover, Button } from '@patternfly/react-core';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst RepositoryHeader = () => {\n  return (\n    <PageHeader>\n      <>\n        <PageHeaderTitle title=\"Applications settings\" />\n        <p className=\"pf-u-mt-sm\">\n          Settings for Fleet Management\n          <Popover\n            aria-label=\"Basic popover\"\n            headerContent={<div>About Fleet Management</div>}\n            bodyContent={\n              <div>\n                Fleet Management is a service that allows you to provision,\n                update and maintain edge systems.\n              </div>\n            }\n            footerContent={\n              <Button variant=\"link\" style={{ 'padding-left': 0 }}>\n                <a href=\"#\">Documentation</a>\n                <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            }\n          >\n            <QuestionCircleIcon\n              style={{ cursor: 'pointer' }}\n              className=\"pf-u-ml-xs\"\n            />\n          </Popover>\n        </p>\n      </>\n    </PageHeader>\n  );\n};\n\nexport default RepositoryHeader;\n","import React, { useEffect, useState } from 'react';\nimport EmptyState from './Empty';\nimport AddModal from './modals/AddModal';\nimport EditModal from './modals/EditModal';\nimport RemoveModal from './modals/RemoveModal';\nimport TableHeader from './TableHeader';\nimport RepositoryTable from './RepositoryTable';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport RepositoryHeader from './RepositoryHeader';\nimport { getCustomRepositories } from '../../api/index';\nimport { Skeleton } from '@patternfly/react-core';\n\nconst Repository = () => {\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [modalDetails, setModalDetails] = useState({\n    isOpen: {\n      add: false,\n      edit: false,\n      remove: false,\n    },\n    id: null,\n    name: '',\n    baseURL: '',\n  });\n\n  const toggle = ({ type, id = null, name = '', baseURL = '' }) => {\n    setModalDetails((prevState) => ({\n      ...prevState,\n      id,\n      name,\n      baseURL,\n      isOpen: {\n        ...prevState.isOpen,\n        [type]: !prevState.isOpen[type],\n      },\n    }));\n  };\n\n  const reloadData = async () => {\n    const repos = await getCustomRepositories();\n    setData(\n      repos.data.map((repo) => ({\n        id: repo.ID,\n        name: repo.Name,\n        baseURL: repo.URL,\n        ...repo,\n      }))\n    );\n    setLoaded(true);\n  };\n\n  useEffect(() => reloadData(), []);\n\n  return (\n    <>\n      <RepositoryHeader />\n      <Main>\n        {loaded ? (\n          data.length > 0 ? (\n            <>\n              <TableHeader />\n              <RepositoryTable\n                data={data}\n                columns={['Name']}\n                toolbarButtons={[\n                  {\n                    title: 'Add repository',\n                    click: () => toggle({ type: 'add' }),\n                  },\n                ]}\n                toggle={toggle}\n              />\n            </>\n          ) : (\n            <EmptyState\n              icon=\"repository\"\n              title=\"Add a third-party repository\"\n              body=\"Add third-party repositories to build RHEL for Edge images with additional packages.\"\n              primaryAction={{\n                text: 'Add Repository',\n                click: () => toggle({ type: 'add' }),\n              }}\n              secondaryActions={[\n                {\n                  title: 'Learn more about third-party repositories',\n                  link: '#',\n                },\n              ]}\n            />\n          )\n        ) : (\n          <Skeleton />\n        )}\n        <AddModal\n          isOpen={modalDetails.isOpen.add}\n          toggle={toggle}\n          reloadData={reloadData}\n        />\n        <EditModal\n          isOpen={modalDetails.isOpen.edit}\n          id={modalDetails.id}\n          name={modalDetails.name}\n          baseURL={modalDetails.baseURL}\n          toggle={toggle}\n          reloadData={reloadData}\n        />\n        <RemoveModal\n          isOpen={modalDetails.isOpen.remove}\n          id={modalDetails.id}\n          name={modalDetails.name}\n          baseURL={modalDetails.baseURL}\n          toggle={toggle}\n          reloadData={reloadData}\n        />\n      </Main>\n    </>\n  );\n};\n\nexport default Repository;\n"],"names":["emptyStateIconMapper","repository","RepositoryIcon","Empty","icon","title","body","primaryAction","secondaryActions","EmptyState","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","Button","onClick","click","variant","text","EmptyStateSecondaryActions","map","index","link","key","href","className","propTypes","PropTypes","RepoModal","isOpen","toggle","submitLabel","schema","initialValues","reloadData","onSubmit","Modal","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","values","onCancel","AddModal","addSchema","fields","component","name","label","placeholder","helperText","isRequired","validate","type","validatorTypes","createCustomRepository","EditModal","id","baseURL","editSchema","HelperText","hasIcon","HelperTextItem","console","log","setData","LabelWithText","TextContent","Text","RemoveModal","color","warningColor","style","padding","backgroundColor","TextVariants","display","ToolbarButtons","buttons","ToolbarItem","ToolbarHeader","toolbarButtons","setInput","count","perPage","setPerPage","page","setPage","Toolbar","ToolbarContent","InputGroup","TextInput","onChange","value","align","default","Pagination","isCompact","itemCount","onSetPage","_e","pageNumber","widgetId","onPerPageSelect","ToolbarFooter","Table","columns","rows","TableComposable","Thead","Tr","column","columnIndex","Th","Tbody","rowIndex","Td","dataLabel","classname","actions","items","RepositoryTable","data","useState","input","length","filter","repo","Name","toLowerCase","includes","reverse","slice","PageHeader","PageHeaderTitle","Popover","headerContent","bodyContent","footerContent","cursor","loaded","setLoaded","add","edit","remove","modalDetails","setModalDetails","prevState","getCustomRepositories","repos","ID","URL","useEffect","Main","TableHeader","Skeleton"],"sourceRoot":""}