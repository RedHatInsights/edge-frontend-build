{"version":3,"file":"js/551.c6d3eb8b1a626ad53ffa.js","mappings":"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","sources":["webpack:///./src/api/index.js","webpack:///./src/constants.js"],"sourcesContent":["import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchImage = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/devices/${id}`);\n  } catch (err) {\n    // temp error solution\n    console.log('');\n  }\n};\n\nexport const updateDeviceLatestImage = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const getCustomRepositories = () => {\n  return instance.get(`${EDGE_API}/thirdpartyrepo`);\n};\n\nexport const createCustomRepository = (payload) => {\n  return instance.post(`${EDGE_API}/thirdpartyrepo`, {\n    Name: payload.name,\n    URL: payload.baseURL,\n  });\n};\n\nexport const editCustomRepository = (payload) => {\n  return instance.put(`${EDGE_API}/thirdpartyrepo/${payload.id}`, {\n    Name: payload.name,\n    URL: payload.baseURL,\n  });\n};\n\nexport const removeCustomRepository = (id) =>\n  instance.delete(`${EDGE_API}/thirdpartyrepo/${id}`);\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n"],"names":["IMAGE_BUILDER_API","EDGE_API","fetchActiveImages","limit","offset","instance","fetchImage","id","fetchDeviceSummary","client","HostsApi","undefined","Promise","all","apiHostGetHostList","query","generateFilter","inventoryFields","system_profile","then","resp","reduce","acc","curr","index","deviceSummaryMapper","total","getPackages","distribution","architecture","search","params","URLSearchParams","toString","createImage","Id","name","version","description","release","username","credentials","imageTypes","imageType","packages","length","payload","map","item","outputTypes","commit","arch","installer","sshkey","endpoint","fetchEdgeImages","q","sort_by","Object","keys","value","multiVals","val","includes","getEdgeImageStatus","getDeviceHasUpdate","console","log","updateDeviceLatestImage","getImageDataOnDevice","checkImageName","getCustomRepositories","createCustomRepository","Name","URL","baseURL","editCustomRepository","removeCustomRepository","statusMapper","statusToIcon","done","icon","CheckCircleIcon","color","successColor","title","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","isEmptyFilters","activeFilters","values","find","constructActiveFilters","getLabel","entries","key","label","category","chipKey","chips","Array","isArray","onDeleteFilter","itemsToRemove","currItem","filter","host_type"],"sourceRoot":""}