{"version":3,"file":"js/GroupsDetailPage.1657063580520.216a8a00f621b1f8aacf.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Devices/AddSystemsToGroupModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport { imageTypeMapper, releaseMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail, loadEdgeImageSets } from '../../store/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Update image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Create image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      //onSubmit={handleUpdateModal}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Create Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/images';\n\nconst getActiveAlert = (\n  CVEs,\n  deviceData,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    deviceData?.UpdateTransactions[deviceData?.UpdateTransactions?.length - 1]\n      ?.Status === 'BUILDING' ||\n    deviceData?.UpdateTransactions[deviceData?.UpdateTransactions?.length - 1]\n      ?.Status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (deviceData?.Device?.UpdateAvailable) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  deviceData,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { params } = useRouteMatch('/inventory/:deviceId');\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!deviceData) {\n        return;\n      }\n      const id = {\n        id: deviceData?.ImageInfo?.Image?.ImageSetID,\n      };\n      const newImageData = await getImageSet(id);\n      setNewImageStatus(newImageData?.Data?.images?.[0]?.image?.Status);\n    })();\n  }, [deviceData]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, deviceData, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your device.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update device to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update Device\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Device updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <Main className=\"add-100vh\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: params.deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </Main>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.string,\n  deviceData: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n          <VulnerabilityTab\n            deviceData={systemProfile}\n            setUpdateModal={setUpdateModal}\n            imageId={imageId}\n            setReload={setReload}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.string,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport { getDeviceHasUpdate } from '../../api/devices';\nimport Status from '../../components/Status';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [imageData, setImageData] = useState();\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setImageData(image_data);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n          },\n        ],\n        imageSetId: image_data?.ImageInfo?.Image?.ImageSetID,\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/inventory'}>\n                {uuid ? 'Groups' : 'Systems'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  imageData?.UpdateTransactions?.[\n                    imageData?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  imageData?.UpdateTransactions?.[\n                    imageData?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !imageData?.ImageInfo?.UpdatesAvailable?.length > 0 ||\n                  !updateModal.imageSetId,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : imageData?.UpdateTransactions[\n              imageData?.UpdateTransactions?.length - 1\n            ]?.Status === 'BUILDING' ||\n            imageData?.UpdateTransactions[\n              imageData?.UpdateTransactions?.length - 1\n            ]?.Status === 'CREATED' ? (\n            <Status type=\"updating\" isLabel={true} className=\"pf-u-mt-sm\" />\n          ) : imageData?.Device?.UpdateAvailable ? (\n            <Status\n              type=\"updateAvailable\"\n              isLabel={true}\n              className=\"pf-u-mt-sm\"\n            />\n          ) : (\n            <Status type=\"running\" isLabel={true} className=\"pf-u-mt-sm\" />\n          )}\n        </PageHeader>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <DeviceDetailTabs\n              systemProfile={imageData}\n              imageId={imageId}\n              setUpdateModal={setUpdateModal}\n              setReload={setReload}\n            />\n          </GridItem>\n        </Grid>\n        {updateModal.isOpen && (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <UpdateDeviceModal\n              navigateBack={() => {\n                history.push({ pathname: history.location.pathname });\n                setUpdateModal((prevState) => {\n                  return {\n                    ...prevState,\n                    isOpen: false,\n                  };\n                });\n              }}\n              setUpdateModal={setUpdateModal}\n              updateModal={updateModal}\n              refreshTable={() => setReload(true)}\n            />\n          </Suspense>\n        )}\n      </DetailWrapper>\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\nimport DeviceStatus from '../../components/Status';\n\nconst getDeviceStatus = (deviceStatus, isUpdateAvailable) =>\n  deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'running';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      // { option: 'Booting', value: 'booting' },\n      // { option: 'Running', value: 'running' },\n      { option: 'Update available', value: 'updateAvailable' },\n      // { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(30)],\n  },\n  {\n    title: 'Image',\n    type: 'image',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Groups',\n    type: 'groups',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last seen',\n    type: 'last_seen',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n];\n\nconst createRows = (devices, hasLinks) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n    } = device;\n\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(Status, UpdateAvailable),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: hasLinks ? (\n            <Link to={`${paths['inventory']}/${DeviceUUID}`}>{DeviceName}</Link>\n          ) : (\n            DeviceName\n          ),\n        },\n        {\n          title: ImageName ? (\n            hasLinks ? (\n              <Link to={`${paths['manage-images']}/${ImageSetID}/`}>\n                {ImageName}\n              </Link>\n            ) : (\n              ImageName\n            )\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title:\n            DeviceGroups.length === 0\n              ? '-'\n              : DeviceGroups.length === 1\n              ? DeviceGroups[0].Name\n              : deviceGroupTooltip,\n        },\n        {\n          title: LastSeen ? <DateFormat date={LastSeen} /> : 'Unknown',\n        },\n        {\n          title: (\n            <DeviceStatus type={getDeviceStatus(Status, UpdateAvailable)} />\n          ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  hasCheckbox = false,\n  selectedItems,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  setUpdateModal,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n  isSystemsView = false,\n  isAddSystemsView = false,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup) {\n      actions.push({\n        title: 'Add to group',\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup) {\n      actions.push({\n        title: 'Remove from group',\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData)) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          setUpdateModal((prevState) => {\n            return {\n              ...prevState,\n              isOpen: true,\n              deviceData: [\n                {\n                  id: rowData.rowInfo.id,\n                  display_name: rowData.rowInfo.display_name,\n                },\n              ],\n              imageSetId: rowData.rowInfo.imageSetId,\n            };\n          });\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: 'Remove from group',\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.deviceStatus !== 'updateAvailable';\n\n  return (\n    <>\n      {isSystemsView && emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Connect edge systems'}\n          body={\n            'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n          }\n          secondaryActions={[\n            {\n              title:\n                'Create RHEL for Edge images and configure automated management',\n              link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n              type: 'link',\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchDevices}\n          tableData={{\n            count: count,\n            isLoading: isLoading,\n            hasError: hasError,\n          }}\n          columnNames={columnNames}\n          rows={createRows(data || [], isAddSystemsView || isSystemsView)}\n          actionResolver={actionResolver}\n          defaultSort={{ index: 3, direction: 'desc' }}\n          toolbarButtons={\n            canBeAdded\n              ? [\n                  {\n                    title: 'Add systems',\n                    click: () => setIsAddModalOpen(true),\n                  },\n                ]\n              : []\n          }\n          hasCheckbox={hasCheckbox}\n          skeletonRowQuantity={skeletonRowQuantity}\n          selectedItems={selectedItems}\n          kebabItems={kebabItems}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\nDeviceTable.propTypes = {\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.func,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  setUpdateModal: PropTypes.func,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isSystemsView: PropTypes.bool,\n  isAddSystemsView: PropTypes.bool,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInput = ({ defaultOptions }) => {\n  const { change } = useFormApi();\n  const [options, setOptions] = useState(defaultOptions);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    setIsOpen(false);\n    setOptions(defaultOptions);\n  };\n\n  return (\n    <div>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {options?.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </div>\n  );\n};\n\nSelectInput.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { getGroups, addDevicesToGroup } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport {\n  Backdrop,\n  Bullseye,\n  Spinner,\n  Button,\n  Text,\n} from '@patternfly/react-core';\n\nconst CreateGroupButton = ({ openModal }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={openModal}>\n      Create Group\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  openModal: PropTypes.bool,\n};\n\nconst createDescription = (deviceIds) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a group to add <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds),\n    },\n    {\n      component: 'search-input',\n      name: 'name',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n  const [response] = useApi({ api: getGroups });\n  const { data, isLoading } = response;\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add device to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(group.groupId), deviceIds),\n      statusMessages\n    );\n  };\n  return isLoading ? (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  ) : (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Add to group\"\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions: data?.data || [],\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          openModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n        },\n      }}\n      schema={createSchema(deviceIds)}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { removeDeviceFromGroupById } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'name',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceInfo[0].name} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to remove device from group',\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, deviceInfo[0].ID),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      openModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useHistory } from 'react-router-dom';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api/devices';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst Inventory = () => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const history = useHistory();\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <DeviceTable\n          isSystemsView={true}\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          kebabItems={[\n            {\n              isDisabled: !(checkedDeviceIds.length > 0),\n              title: 'Add to group',\n              onClick: () =>\n                handleAddDevicesToGroup(\n                  checkedDeviceIds.map((device) => ({\n                    ID: device.deviceID,\n                    name: device.display_name,\n                  })),\n                  false\n                ),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Inventory;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  addDevicesToGroup,\n  validateGroupName,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  // isValid should be isNotValid\n  // who wrote that Go code :thinking_face:\n  // spoiler: it was me\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    /*\n      temp focus solution, better approach to pass a ref input and set it\n      when form inputs are mounted\n    */\n\n    setTimeout(() => {\n      const input = document.querySelector('#name');\n      if (input) input.focus();\n    }, 50);\n  }, []);\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add device to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  fetchGroups,\n}) => {\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData?.rowInfo;\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled:\n            devices.length > 0\n              ? !(rowData?.rowInfo?.hasValidUpdate && hasUpdate)\n              : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData?.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n        hasValidUpdate: rowData?.DeviceGroup?.ValidUpdate,\n      },\n      cells: [\n        {\n          title: <Link to={`${paths['fleet-management']}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={[\n          {\n            title: 'Create group',\n            click: handleCreateModal,\n          },\n        ]}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchGroups}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  openModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React, { useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/groups';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\n\nconst Groups = () => {\n  const history = useHistory();\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(isLoading, data?.count, history) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your devices more effectively.\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={fetchGroups}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={fetchGroups}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={fetchGroups}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Button, Modal } from '@patternfly/react-core';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { getInventory } from '../../api/devices';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst AddSystemsToGroupModal = ({\n  groupId,\n  closeModal,\n  isOpen,\n  reloadData,\n  groupName,\n}) => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [deviceIds, setDeviceIds] = useState([]);\n  const dispatch = useDispatch();\n\n  const handleAddDevicesToGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `An error occurred making the request`,\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () =>\n        addDevicesToGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(async () => await reloadData(), 500);\n    closeModal();\n  };\n\n  return (\n    <Modal\n      id=\"add-systems-modal\"\n      title=\"Add systems\"\n      position=\"top\"\n      isOpen={isOpen}\n      onClose={closeModal}\n      variant=\"large\"\n      actions={[\n        <Button\n          isDisabled={deviceIds.length === 0}\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={handleAddDevicesToGroup}\n        >\n          Add systems\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <DeviceTable\n        selectedItems={setDeviceIds}\n        skeletonRowQuantity={15}\n        hasCheckbox={true}\n        isLoading={isLoading}\n        hasError={hasError}\n        count={data?.count}\n        data={data?.data?.devices || []}\n        fetchDevices={fetchDevices}\n      />\n    </Modal>\n  );\n};\nAddSystemsToGroupModal.propTypes = {\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n  groupName: PropTypes.string,\n};\n\nexport default AddSystemsToGroupModal;\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Flex,\n  FlexItem,\n  Skeleton,\n} from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Empty from '../../components/Empty';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/groups';\nimport AddSystemsToGroupModal from '../Devices/AddSystemsToGroupModal';\nimport {\n  canUpdateSelectedDevices,\n  emptyStateNoFliters,\n  stateToUrlSearch,\n} from '../../utils';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\nimport RenameGroupModal from '../Groups/RenameGroupModal';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst GroupsDetail = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const history = useHistory();\n  const { groupId } = params;\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchDevices] = useApi({\n    api: getGroupById,\n    id: groupId,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  useEffect(() => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('add_system_modal=true', isAddModalOpen),\n    });\n  }, [isAddModalOpen]);\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove device' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} systems have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove systems' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={`${paths['fleet-management']}`}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb isActive>\n            <Skeleton width=\"100px\" />\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id=\"image-set-details-dropdown\"\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                >\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"rename-device-group\"\n                  onClick={() => handleRenameModal(groupId, groupName)}\n                >\n                  Rename group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.DevicesView?.devices?.map((device) => ({\n                      imageSetId: device?.ImageSetID,\n                    })),\n                    imageData: data?.DevicesView?.devices?.some(\n                      (device) => device.ImageID\n                    ),\n                  })}\n                  onClick={() => {\n                    setIsDropdownOpen(false);\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.DevicesView?.devices?.map((device) => ({\n                        id: device?.DeviceUUID,\n                        display_name:\n                          device?.DeviceName === ''\n                            ? 'localhost'\n                            : device?.DeviceName,\n                      })),\n                      imageSetId: data?.DevicesView?.devices.find(\n                        (device) => device.ImageSetID\n                      )?.ImageSetID,\n                    }));\n                  }}\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(\n          isLoading,\n          data?.DeviceGroup?.Devices.length,\n          history\n        ) ? (\n          <DeviceTable\n            data={data?.DevicesView?.devices || []}\n            count={data?.DevicesView?.total}\n            isLoading={isLoading}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: 'Remove from group',\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageSetId: deviceIds.find((device) => device?.imageSetId)\n                      .imageSetId,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            setUpdateModal={setUpdateModal}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchDevices={fetchDevices}\n            isAddSystemsView={true}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Add systems to the group\"\n              body=\"Create groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n      {isAddModalOpen && (\n        <AddSystemsToGroupModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchDevices}\n          groupName={data?.DeviceGroup?.Name}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          openModal={() => setRemoveModal(false)}\n          title={'Remove from group'}\n          submitLabel={'Remove'}\n          variant=\"danger\"\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchDevices}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths['fleet-management'])}\n          modalState={modalState}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={() => fetchDevices()}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GroupsDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\nimport Status from '../../components/Status';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Current version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(30)],\n  },\n];\n\nconst createRows = (data) => {\n  return data.map(({ image_set, image_build_iso_url }, index) => ({\n    rowInfo: {\n      id: image_set?.ID,\n      imageStatus: image_set?.Images[0].Status,\n      isoURL: image_build_iso_url || null,\n      latestImageID: image_set?.Images[0].ID,\n    },\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Images[0].Version, // remove when image_set.Version is accurate\n      {\n        title: image_set?.UpdatedAt ? (\n          <DateFormat date={image_set?.UpdatedAt} />\n        ) : (\n          'Unknown'\n        ),\n      },\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <Status type={image_set?.Images[0].Status.toLowerCase()} />\n          </>\n        ),\n      },\n    ],\n  }));\n};\n\nconst ImageTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  fetchImageSets,\n  openCreateWizard,\n  openUpdateWizard,\n}) => {\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.rowInfo?.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo?.latestImageID);\n        },\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'No images found'}\n          body={''}\n          primaryAction={{\n            click: openCreateWizard,\n            text: 'Create new image',\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchImageSets}\n          tableData={{ count, data, isLoading, hasError }}\n          columnNames={columnNames}\n          rows={data ? createRows(data) : []}\n          actionResolver={actionResolver}\n          areActionsDisabled={areActionsDisabled}\n          defaultSort={{ index: 2, direction: 'desc' }}\n          toolbarButtons={[\n            {\n              title: 'Create new image',\n              click: () => openCreateWizard(),\n            },\n          ]}\n        />\n      )}\n    </>\n  );\n};\n\nImageTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  fetchImageSets: PropTypes.func,\n  clearFilters: PropTypes.func,\n  openCreateWizard: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n  filters: PropTypes.array,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }),\n};\n\nexport default ImageTable;\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport ImageSetsTable from './ImageSetsTable';\nimport { stateToUrlSearch } from '../../utils';\nimport { getImageSets } from '../../api/images';\nimport useApi from '../../hooks/useApi';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const history = useHistory();\n\n  const [response, fetchImageSets] = useApi({\n    api: getImageSets,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('create_image=true', true),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('update_image=true', true),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          data={data?.Data || []}\n          count={data?.Count}\n          isLoading={isLoading}\n          hasError={hasError}\n          fetchImageSets={fetchImageSets}\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('create_image=true', false),\n              });\n              setIsCreateWizardOpen(false);\n            }}\n            reload={fetchImageSets}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('update_image=true', false),\n              });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            reload={fetchImageSets}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  openModal, // should be closeModal, update here and other places that use it\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={openModal}\n    >\n      <FormRenderer\n        schema={schema}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          openModal();\n        }}\n        onCancel={() => openModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n  const hasSuccess = statusMessages?.onSuccess;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n      return response;\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","data","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","key","onClick","payload","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","addNotification","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","deviceData","setUpdateModal","params","useRouteMatch","useState","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","ImageInfo","Image","ImageSetID","getImageSet","newImageData","Data","images","isLoading","filter","length","UpdateTransactions","Device","UpdateAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","Main","AsyncComponent","appName","module","customIntlProvider","entity","deviceId","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","AppInfo","showTags","Vulnerability","UpdateDeviceModal","React","setImageId","useParams","inventoryId","uuid","entityDetails","groupName","groupsDetailReducer","imageData","setImageData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","image_data","imageSetId","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","isDisabled","UpdatesAvailable","hideBack","hideInvDrawer","type","isLabel","Grid","gutter","GridItem","span","navigateBack","history","push","pathname","location","refreshTable","getDeviceStatus","deviceStatus","isUpdateAvailable","defaultFilters","label","options","option","columnNames","sort","columnTransforms","cellWidth","DeviceTable","devices","hasLinks","hasCheckbox","selectedItems","skeletonRowQuantity","count","hasError","kebabItems","setRemoveModal","setIsAddModalOpen","handleAddDevicesToGroup","handleRemoveDevicesFromGroup","hasModalSubmitted","setHasModalSubmitted","fetchDevices","isSystemsView","isAddSystemsView","canBeRemoved","canBeAdded","useHistory","emptyStateNoFliters","icon","body","secondaryActions","link","apiFilterSort","isUseApi","loadTableData","tableData","rows","device","DeviceName","DeviceGroups","DeviceID","DeviceUUID","LastSeen","ImageName","deviceGroupTooltip","group","index","rowInfo","deviceID","updateImageData","imageName","deviceGroups","noApiSortFilter","cells","paths","date","actionResolver","rowData","areActionsDisabled","_rowId","defaultSort","direction","toolbarButtons","click","urlParam","openUpdateWizard","temp","setIsModalOpen","handleSingleDeviceRemoval","SelectInput","defaultOptions","change","useFormApi","setOptions","setIsOpen","selected","setSelected","clearSelection","Select","typeAheadAriaLabel","onToggle","selection","isPlaceholder","onClear","selections","placeholderText","DeviceGroup","SelectOption","toString","groupId","CreateGroupButton","openModal","createDescription","deviceIds","systemText","createSchema","fields","componentTypes","validate","validatorTypes","AddDeviceModal","isModalOpen","setIsCreateGroupModalOpen","reloadData","useApi","api","getGroups","response","submitLabel","additionalMappers","SearchInput","schema","onSubmit","values","statusMessages","onSuccess","onError","apiWithToast","addDevicesToGroup","parseInt","removeDescription","deviceInfo","groupText","WarningIcon","warningColor","RemoveDeviceModal","titleIconVariant","hasManyGroups","removeDeviceFromGroupById","getInventory","tableReload","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","setDeviceId","checkedDeviceIds","setCheckedDeviceIds","isRowSelected","setIsRowSelected","isCreateGroupModalOpen","ids","isRow","Fragment","PageHeaderTitle","setTimeout","CreateGroupModal","asyncGroupNameValidation","validateGroupName","isValid","createGroupSchema","helperText","threshold","nameValidator","input","document","querySelector","focus","handleCreateGroup","createGroup","handleAddDevicesToNewGroup","DeleteGroupModal","modalState","deleteGroupById","columns","GroupTable","handleCreateModal","handleRenameModal","handleDeleteModal","fetchGroups","buildRows","Devices","DevicesImageInfo","systems","devicesImageInfo","hasValidUpdate","ValidUpdate","GeneralTable","hasUpdate","some","UUID","find","ImageID","emptyFilterState","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","Flex","justifyContent","default","Empty","primaryAction","text","RenameGroupModal","initialValues","updateGroupById","AddSystemsToGroupModal","closeModal","setDeviceIds","position","isDropdownOpen","setIsDropdownOpen","isAddModalOpen","removeModal","getGroupById","getDeviceIds","search","stateToUrlSearch","width","FlexItem","Dropdown","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","newState","dropdownItems","DropdownItem","canUpdateSelectedDevices","DevicesView","total","removeDevicesFromGroup","TooltipSelectorRef","reference","getElementById","createRows","image_set","image_build_iso_url","imageStatus","Images","isoURL","latestImageID","UpdatedAt","DateFormat","toLowerCase","ImageTable","fetchImageSets","openCreateWizard","actionsArray","href","rel","target","clearFilters","pagination","page","perPage","CreateImageWizard","UpdateImageWizard","getImageSets","isCreateWizardOpen","setIsCreateWizardOpen","UpdateWizard","setUpdateWizard","ImageSetsTable","Count","updateImageID","instance","EDGE_API","Type","query","q","getTableParams","RepoModal","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","onCancel","hasSuccess","fetchData"],"sourceRoot":""}