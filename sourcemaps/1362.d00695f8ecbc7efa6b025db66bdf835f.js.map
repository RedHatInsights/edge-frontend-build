{"version":3,"file":"js/1362.19b30734ad35dae5dbad.js","mappings":"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","sources":["webpack:///./src/store/action-types.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/edgeImageSets.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/imageSetDetail.js","webpack:///./src/store/edgeImagePackages.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/deviceTable.js","webpack:///./src/store/actions.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/api/devices/index.js","webpack:///./src/api/images/index.js","webpack:///./src/api/index.js","webpack:///./src/constants/index.js"],"sourcesContent":["import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No system summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_SETS } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImageSetsPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImageSetsFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImageSetsRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_SETS}_PENDING`]: loadEdgeImageSetsPending,\n    [`${LOAD_EDGE_IMAGE_SETS}_FULFILLED`]: loadEdgeImageSetsFulfilled,\n    [`${LOAD_EDGE_IMAGE_SETS}_REJECTED`]: loadEdgeImageSetsRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_SET_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageSetDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageSetDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageSetDetailRejected = (state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_SET_DETAIL}_PENDING`]: loadImageSetDetailPending,\n    [`${LOAD_IMAGE_SET_DETAIL}_FULFILLED`]: loadImageSetDetailFulfilled,\n    [`${LOAD_IMAGE_SET_DETAIL}_REJECTED`]: loadImageSetDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_PACKAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagePackagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagePackagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagePackagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_PENDING`]: loadEdgeImagePackagesPending,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_FULFILLED`]: loadEdgeImagePackagesFulfilled,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_REJECTED`]: loadEdgeImagePackagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_TABLE } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceTablePending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceTableFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceTableRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_TABLE}_PENDING`]: loadDeviceTablePending,\n    [`${LOAD_DEVICE_TABLE}_FULFILLED`]: loadDeviceTableFulfilled,\n    [`${LOAD_DEVICE_TABLE}_REJECTED`]: loadDeviceTableRejected,\n  },\n  initialState\n);\n","import {\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show system summary data',\n          description: 'Failed receiving system summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport { imageTypeMapper, releaseMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  createNewImage,\n  addImageToPoll,\n  loadImageDetail,\n  loadEdgeImageSets,\n} from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Update image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Update Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDevice = (id) => {\n  return instance.get(`${EDGE_API}/devices/${id}`);\n};\n\nexport const getDeviceUpdates = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/${id}?${q}`);\n};\n\nexport const updateSystem = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const EDGE_API = '/api/edge/v1';\nexport const CONTENT_SOURCES_API = '/api/content-sources/v1';\n\nexport const getTableParams = (q) => {\n  if (q === undefined) {\n    return '';\n  }\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n","import {\n  BellIcon,\n  CheckCircleIcon,\n  CircleNotchIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  PauseCircleIcon,\n  PlusCircleIcon,\n  UnknownIcon,\n  RepositoryIcon,\n  SearchIcon,\n  ModuleIcon,\n  CubeIcon,\n  TimesCircleIcon,\n  InProgressIcon,\n  QuestionCircleIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\nimport activeColor from '@patternfly/react-tokens/dist/esm/global_active_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const sortByDirection = (data, direction = 'asc') =>\n  data.sort((a, b) =>\n    direction === 'asc'\n      ? a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n      : b.name.toLowerCase().localeCompare(a.name.toLowerCase())\n  );\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const composeStatus = [\n  'CREATED',\n  'BUILDING',\n  'ERROR',\n  'SUCCESS',\n  'INTERRUPTED',\n];\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n  'rhel-85': 'RHEL 8.5',\n  'rhel-86': 'RHEL 8.6',\n  'rhel-87': 'RHEL 8.7',\n  'rhel-88': 'RHEL 8.8',\n  'rhel-90': 'RHEL 9.0',\n  'rhel-91': 'RHEL 9.1',\n  'rhel-92': 'RHEL 9.2',\n};\n\nexport const releaseMapper = {\n  'rhel-92': 'Red Hat Enterprise Linux (RHEL) 9.2',\n  'rhel-91': 'Red Hat Enterprise Linux (RHEL) 9.1',\n  'rhel-90': 'Red Hat Enterprise Linux (RHEL) 9.0',\n  'rhel-88': 'Red Hat Enterprise Linux (RHEL) 8.8',\n  'rhel-87': 'Red Hat Enterprise Linux (RHEL) 8.7',\n  'rhel-86': 'Red Hat Enterprise Linux (RHEL) 8.6',\n  'rhel-85': 'Red Hat Enterprise Linux (RHEL) 8.5',\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const supportedReleases = [\n  'rhel-84',\n  'rhel-85',\n  'rhel-86',\n  'rhel-87',\n  'rhel-88',\n  'rhel-90',\n  'rhel-91',\n  'rhel-92',\n];\n\nexport const temporaryReleases = ['rhel-92'];\n\nexport const DEFAULT_RELEASE = 'rhel-92';\nexport const TEMPORARY_RELEASE = 'rhel-92';\n\nexport const imageTypeMapper = {\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n};\n\nexport const iconMapper = {\n  unknown: UnknownIcon,\n  repository: RepositoryIcon,\n  search: SearchIcon,\n  module: ModuleIcon,\n  cube: CubeIcon,\n  question: QuestionCircleIcon,\n  plus: PlusCircleIcon,\n  checkCircle: CheckCircleIcon,\n  exclamationTriangle: ExclamationTriangleIcon,\n  timesCircle: TimesCircleIcon,\n  inProgress: InProgressIcon,\n  exclamationCircle: ExclamationCircleIcon,\n};\n\nexport const colorMapper = {\n  green: successColor.value,\n  yellow: warningColor.value,\n  lightBlue: infoColor.value,\n  blue: activeColor.value,\n  red: dangerColor.value,\n};\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n"],"names":["LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","keyBy","k","applyReducerHash","isLoading","hasError","data","state","payload","groups","results","meta","threshold","devicesInfo","canariesInfo","PropTypes","statusMapper","SecureIcon","isSecure","props","Icon","LockIcon","LockOpenIcon","propTypes","defaultProps","name","uuid","devices","error","_state","loadEdgeImageSets","dispatch","query","type","fetchEdgeImageSets","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","useDispatch","getRegistry","useContext","RegistryContext","useSelector","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","getImageById","id","loadImageDetail","handleClose","prevState","isOpen","Modal","variant","title","image","Name","description","onClose","actions","Button","key","onClick","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","callback","createImage","then","createNewImage","resp","addNotification","value","polling","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","addImageToPoll","TextContent","TextListItem","T","component","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","className","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","getInventory","q","getTableParams","instance","EDGE_API","getDevice","getDeviceUpdates","updateSystem","checkImageName","imageTypes","packages","thirdPartyRepositories","customPackages","length","distribution","item","outputTypes","commit","arch","installer","sshkey","repo","URL","endpoint","getImageSet","limit","offset","sort_by","getImageSetViewVersions","imageSetID","getImageSetView","getImageDataOnDevice","getPackages","search","params","URLSearchParams","IMAGE_BUILDER_API","toString","getImageSets","postRpmsNames","urls","CONTENT_SOURCES_API","undefined","Object","keys","reduce","acc","curr","multiVals","val","includes","sortByDirection","direction","sort","b","toLowerCase","localeCompare","distributionMapper","supportedReleases","temporaryReleases","DEFAULT_RELEASE","TEMPORARY_RELEASE","iconMapper","unknown","UnknownIcon","repository","RepositoryIcon","SearchIcon","module","ModuleIcon","cube","CubeIcon","question","QuestionCircleIcon","plus","PlusCircleIcon","checkCircle","CheckCircleIcon","exclamationTriangle","ExclamationTriangleIcon","timesCircle","TimesCircleIcon","inProgress","InProgressIcon","exclamationCircle","ExclamationCircleIcon","colorMapper","green","successColor","yellow","warningColor","lightBlue","infoColor","blue","activeColor","red","dangerColor","statusToIcon","done","icon","color","pending","PauseCircleIcon","updating","CircleNotchIcon","warning","notification","BellIcon"],"sourceRoot":""}