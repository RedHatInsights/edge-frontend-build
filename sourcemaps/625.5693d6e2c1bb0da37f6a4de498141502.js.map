{"version":3,"file":"js/625.3765c6e036b17ce68947.js","mappings":"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","sources":["webpack:///./src/api/index.js","webpack:///./src/components/Empty.js","webpack:///./src/components/general-table/FilterDropdown.js","webpack:///./src/components/general-table/FilterInput.js","webpack:///./src/components/general-table/FilterControls.js","webpack:///./src/components/general-table/FilterChips.js","webpack:///./src/components/general-table/ToolbarHeader.js","webpack:///./src/components/general-table/ToolbarFooter.js","webpack:///./src/components/general-table/createFilterValues.js","webpack:///./src/components/general-table/BulkSelect.js","webpack:///./src/components/general-table/GeneralTable.js","webpack:///./src/Routes/ImageManager/constants.js","webpack:///./src/constants.js"],"sourcesContent":["import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst getTableParams = (q) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/devices/${id}`);\n  } catch (err) {\n    // temp error solution\n    console.log('');\n  }\n};\n\nexport const updateDeviceLatestImage = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const getCustomRepositories = () => {\n  return instance.get(`${EDGE_API}/thirdpartyrepo`);\n};\n\nexport const createCustomRepository = (payload) => {\n  return instance.post(`${EDGE_API}/thirdpartyrepo`, {\n    Name: payload.name,\n    URL: payload.baseURL,\n  });\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const editCustomRepository = (payload) => {\n  return instance.put(`${EDGE_API}/thirdpartyrepo/${payload.id}`, {\n    Name: payload.name,\n    URL: payload.baseURL,\n  });\n};\n\nexport const removeCustomRepository = (id) =>\n  instance.delete(`${EDGE_API}/thirdpartyrepo/${id}`);\n\nexport const getInventory = async () => {\n  return await instance.get(`${EDGE_API}/devices`);\n};\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const getGroups = () => {\n  return instance.get(`${EDGE_API}/device-groups`);\n};\n\nexport const getGroupById = (id) => {\n  return instance.get(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.post(`${EDGE_API}/device-groups/${id}`);\n};\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport RepositoryIcon from '@patternfly/react-icons/dist/esm/icons/repository-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport ModuleIcon from '@patternfly/react-icons/dist/esm/icons/module-icon';\nimport CubeIcon from '@patternfly/react-icons/dist/esm/icons/cube-icon';\nimport {\n  ExternalLinkAltIcon,\n  QuestionCircleIcon,\n} from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst emptyStateIconMapper = {\n  repository: RepositoryIcon,\n  search: SearchIcon,\n  module: ModuleIcon,\n  cube: CubeIcon,\n  question: QuestionCircleIcon,\n};\n\nconst Empty = ({\n  bgColor,\n  icon,\n  title,\n  body,\n  primaryAction,\n  secondaryActions,\n}) => (\n  <EmptyState style={{ backgroundColor: bgColor || '' }}>\n    {icon && <EmptyStateIcon icon={emptyStateIconMapper[icon]} />}\n    <Title headingLevel=\"h4\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody>{body}</EmptyStateBody>\n    {primaryAction && (\n      <>\n        {primaryAction.href ? (\n          <Button component={Link} to={primaryAction.href}>\n            {primaryAction.text}\n          </Button>\n        ) : (\n          <Button onClick={primaryAction.click} variant=\"primary\">\n            {primaryAction.text}\n          </Button>\n        )}\n      </>\n    )}\n    <EmptyStateSecondaryActions>\n      {secondaryActions.map(({ type, title, link, onClick }, index) => (\n        <Button\n          component={type === 'link' ? 'a' : 'button'}\n          href={link}\n          variant=\"link\"\n          key={index}\n          onClick={onClick}\n        >\n          {title}\n          {link && <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />}\n        </Button>\n      ))}\n    </EmptyStateSecondaryActions>\n  </EmptyState>\n);\n\nEmpty.propTypes = {\n  bgColor: PropTypes.string,\n  icon: PropTypes.string,\n  title: PropTypes.string,\n  body: PropTypes.string,\n  primaryAction: PropTypes.object,\n  secondaryActions: PropTypes.array,\n};\n\nexport default Empty;\n","import React from 'react';\nimport { ToolbarItem, Select, SelectOption } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst FilterDropdown = ({ filters, dropdown, setDropdown }) => {\n  const toggle = () => {\n    setDropdown((prevState) => ({\n      ...prevState,\n      isOpen: !prevState.isOpen,\n    }));\n  };\n\n  const select = (_e, selection) => {\n    setDropdown({\n      selected: selection,\n      isOpen: false,\n    });\n  };\n\n  return (\n    <>\n      {filters.length > 1 ? (\n        <ToolbarItem data-testid=\"filter-dropdown-testid\" className=\"pf-u-mr-0\">\n          <Select\n            variant=\"single\"\n            aria-label=\"Select input for filters\"\n            width=\"11rem\"\n            onToggle={toggle}\n            onSelect={select}\n            selections={dropdown.selected}\n            isOpen={dropdown.isOpen}\n            toggleIcon={<FilterIcon />}\n          >\n            {filters.map((filter, index) => (\n              <SelectOption key={index} value={filter.label} />\n            ))}\n          </Select>\n        </ToolbarItem>\n      ) : null}\n    </>\n  );\n};\n\nFilterDropdown.propTypes = {\n  filters: PropTypes.array,\n  dropdown: PropTypes.object,\n  setDropdown: PropTypes.func,\n};\n\nexport default FilterDropdown;\n","import React, { useState } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  SearchInput,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\n\nconst FilterInput = ({ filterValues, setFilterValues, input }) => {\n  const selectedFilter = filterValues.find((filter) => filter.label === input);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleFilterChange = () => (value, checkboxValue) => {\n    setFilterValues((prevState) => {\n      const selectedIndex = prevState.findIndex(\n        (filter) => filter.label === selectedFilter.label\n      );\n      const checkedType = prevState.find(\n        (filter) => filter.label === selectedFilter.label\n      );\n      const checkboxIndex =\n        selectedFilter.type === 'checkbox'\n          ? checkedType.value.findIndex((i) => i.option === checkboxValue)\n          : 0;\n      const newValueArray = Object.values({\n        ...checkedType.value,\n        [checkboxIndex]: {\n          ...checkedType.value[checkboxIndex],\n          isChecked: !checkedType?.value[checkboxIndex]?.isChecked,\n        },\n      });\n      const newTextValue = value;\n\n      return Object.values({\n        ...prevState,\n        [selectedIndex]: {\n          ...prevState[selectedIndex],\n          value:\n            selectedFilter.type === 'checkbox' ? newValueArray : newTextValue,\n        },\n      });\n    });\n  };\n\n  const handleDeleteTextInput = () => {\n    const filterLabelIndex = filterValues.findIndex(\n      (value) => value.type === 'text'\n    );\n    setFilterValues((prevState) => {\n      const changedValue = prevState[filterLabelIndex];\n      if (changedValue.type === 'text') {\n        return [\n          ...prevState.slice(0, filterLabelIndex),\n          { ...prevState[filterLabelIndex], value: '' },\n          ...prevState.slice(filterLabelIndex + 1, prevState.length),\n        ];\n      }\n      return prevState;\n    });\n  };\n\n  if (selectedFilter.type === 'text') {\n    return (\n      <ToolbarItem data-testid=\"filter-input-testid\">\n        <InputGroup>\n          <SearchInput\n            name=\"textInput1\"\n            id=\"textInput1\"\n            type=\"search\"\n            aria-label={`Select input for ${selectedFilter.label}`}\n            placeholder={`Filter by ${selectedFilter.label}`}\n            onChange={debounce(handleFilterChange(), 500)}\n            onClear={handleDeleteTextInput}\n            value={filterValues.find((filter) => filter.type === 'text').value}\n          />\n        </InputGroup>\n      </ToolbarItem>\n    );\n  }\n\n  if (selectedFilter.type === 'checkbox') {\n    return (\n      <ToolbarItem data-testid=\"filter-input-testid\">\n        <InputGroup>\n          <Select\n            variant=\"checkbox\"\n            aria-label={`Select input for ${selectedFilter.label}`}\n            width=\"11rem\"\n            placeholderText={`Filter by ${selectedFilter.label}`}\n            isCheckboxSelectionBadgeHidden\n            onToggle={() => setIsOpen((prevState) => !prevState)}\n            onSelect={handleFilterChange()}\n            selections={selectedFilter.value\n              .filter((value) => value.isChecked == true)\n              .map((arr) => arr.option)}\n            isOpen={isOpen}\n          >\n            {selectedFilter.value.map((filter, index) => (\n              <SelectOption\n                key={index}\n                value={filter.option}\n                isChecked={filter.isChecked}\n              />\n            ))}\n          </Select>\n        </InputGroup>\n      </ToolbarItem>\n    );\n  }\n};\n\nFilterInput.propTypes = {\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  input: PropTypes.string,\n};\n\nexport default FilterInput;\n","import React, { useState } from 'react';\nimport FilterDropdown from './FilterDropdown';\nimport FilterInput from './FilterInput';\nimport PropTypes from 'prop-types';\n\nconst FilterControls = ({\n  filters,\n  filterValues,\n  setFilterValues,\n  children,\n}) => {\n  const [dropdown, setDropdown] = useState({\n    isOpen: false,\n    selected: filters[0].label,\n  });\n\n  return (\n    <>\n      {children}\n      <FilterDropdown\n        dropdown={dropdown}\n        setDropdown={setDropdown}\n        filters={filters}\n      />\n      <FilterInput\n        filterValues={filterValues}\n        setFilterValues={setFilterValues}\n        input={dropdown.selected}\n      />\n    </>\n  );\n};\n\nFilterControls.propTypes = {\n  filters: PropTypes.array,\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  setCheckBoxState: PropTypes.func,\n  checkBoxState: PropTypes.object,\n  children: PropTypes.element,\n};\n\nexport default FilterControls;\n","import React, { useEffect } from 'react';\nimport { ChipGroup, Chip, Button } from '@patternfly/react-core';\nimport { groupBy } from 'lodash';\nimport PropTypes from 'prop-types';\n\nconst FilterChips = ({\n  filterValues,\n  setFilterValues,\n  chipsArray,\n  setChipsArray,\n}) => {\n  const buildChipsArray = () => {\n    filterValues.forEach((filter) => {\n      if (filter.type === 'checkbox') {\n        filter.value.forEach((filterOption) => {\n          if (\n            filterOption.isChecked === true &&\n            !chipsArray.find((chip) => chip.label === filterOption.option)\n          ) {\n            setChipsArray((prevState) => [\n              ...prevState,\n              {\n                label: filterOption.option,\n                value: filterOption.value || filterOption.option,\n                apiName: filterOption.optionApiName,\n                key: filter.label,\n              },\n            ]);\n          } else if (\n            filterOption.isChecked === false &&\n            chipsArray.find((chip) => chip.label === filterOption.option)\n          ) {\n            setChipsArray((prevState) => {\n              const index = prevState.findIndex(\n                (state) => state.label === filterOption.option\n              );\n              return [\n                ...prevState.slice(0, index),\n                ...prevState.slice(index + 1, prevState.length),\n              ];\n            });\n          }\n        });\n      }\n      if (filter.type === 'text' && filter.value.length > 0) {\n        const addTextFilter = { label: filter.value, key: filter.label };\n        if (chipsArray.find((chip) => chip.key === filter.label)) {\n          setChipsArray((prevState) =>\n            prevState.map((f) => {\n              return f.key === filter.label ? addTextFilter : f;\n            })\n          );\n        } else {\n          setChipsArray((prevState) => [...prevState, addTextFilter]);\n        }\n      } else if (\n        filter.type === 'text' &&\n        chipsArray.find((chip) => chip.key === filter.label)\n      ) {\n        setChipsArray((prevState) => {\n          const index = prevState.findIndex(\n            (state) => state.key === filter.label\n          );\n          return [\n            ...prevState.slice(0, index),\n            ...prevState.slice(index + 1, prevState.length),\n          ];\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    buildChipsArray();\n  }, [filterValues]);\n\n  const handleResetFilters = () => {\n    setFilterValues((prevState) => {\n      const removedValues = prevState.map((filter) => {\n        if (filter.type === 'text') {\n          return { ...filter, value: '' };\n        }\n        if (filter.type === 'checkbox') {\n          const setFalse = filter.value.map((checkbox) => {\n            checkbox.isChecked = false;\n            return { ...checkbox, isChecked: false };\n          });\n          return { ...filter, value: setFalse };\n        }\n      });\n      return removedValues;\n    });\n    setChipsArray([]);\n  };\n\n  const handleDeleteFilter = (filter) => {\n    const filterLabelIndex = filterValues.findIndex(\n      (value) => value.label === filter.key\n    );\n    setFilterValues((prevState) => {\n      const changedValue = prevState[filterLabelIndex];\n      if (changedValue.type === 'text') {\n        return [\n          ...prevState.slice(0, filterLabelIndex),\n          { ...prevState[filterLabelIndex], value: '' },\n          ...prevState.slice(filterLabelIndex + 1, prevState.length),\n        ];\n      }\n      if (changedValue.type === 'checkbox') {\n        const changeFalse = changedValue.value.map((option) =>\n          option.option === filter.label\n            ? { ...option, isChecked: false }\n            : option\n        );\n        setChipsArray((prevState) => {\n          const removeIndex = prevState.findIndex((state) => state === filter);\n          return [\n            ...prevState.slice(0, removeIndex),\n            ...prevState.slice(removeIndex + 1, prevState.length),\n          ];\n        });\n        return [\n          ...prevState.slice(0, filterLabelIndex),\n          { ...prevState[filterLabelIndex], value: changeFalse },\n          ...prevState.slice(filterLabelIndex + 1, prevState.length),\n        ];\n      }\n      return prevState;\n    });\n  };\n\n  return (\n    <>\n      {chipsArray.length > 0\n        ? Object.entries(groupBy(chipsArray, 'key')).map(([key, value]) => (\n            <ChipGroup\n              data-testid=\"filter-chip\"\n              className=\"pf-u-mr-xs\"\n              categoryName={key}\n              key={key}\n            >\n              {value.map((filter) => (\n                <Chip onClick={() => handleDeleteFilter(filter)} key={key}>\n                  {filter.label}\n                </Chip>\n              ))}\n            </ChipGroup>\n          ))\n        : null}\n      {chipsArray.length > 0 ? (\n        <Button variant=\"link\" onClick={handleResetFilters}>\n          Clear filters\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nFilterChips.propTypes = {\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  chipsArray: PropTypes.array,\n  setChipsArray: PropTypes.func,\n};\n\nexport default FilterChips;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n  Button,\n  ToggleGroup,\n  ToggleGroupItem,\n  Skeleton,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport FilterControls from './FilterControls';\nimport FilterChip from './FilterChips';\n\nconst ToolbarButtons = ({ buttons }) => {\n  return buttons.map(({ title, click }, index) => (\n    <ToolbarItem key={index}>\n      <Button onClick={click} variant=\"primary\">\n        {title}\n      </Button>\n    </ToolbarItem>\n  ));\n};\n\nconst ToolbarHeader = ({\n  toolbarButtons,\n  filters,\n  setFilterValues,\n  filterValues,\n  chipsArray,\n  setChipsArray,\n  isLoading,\n  count,\n  perPage,\n  setPerPage,\n  page,\n  setPage,\n  toggleButton,\n  toggleAction,\n  toggleState,\n  checkBoxState,\n  setCheckBoxState,\n  children,\n}) => {\n  return (\n    <Toolbar id=\"toolbar\" data-testid=\"toolbar-header-testid\">\n      <ToolbarContent>\n        <FilterControls\n          filters={filters}\n          filterValues={filterValues}\n          setFilterValues={setFilterValues}\n          checkBoxState={checkBoxState}\n          setCheckBoxState={setCheckBoxState}\n        >\n          {children}\n        </FilterControls>\n        {toolbarButtons && <ToolbarButtons buttons={toolbarButtons} />}\n        {toggleButton && (\n          <ToggleGroup>\n            {toggleButton.map((btn) => (\n              <ToggleGroupItem\n                key={btn.key}\n                text={btn.title}\n                isSelected={toggleState === btn.key}\n                onChange={() => toggleAction(btn.key)}\n              />\n            ))}\n          </ToggleGroup>\n        )}\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          {isLoading ? (\n            <Skeleton width=\"200px\" />\n          ) : count > 0 ? (\n            <Pagination\n              data-testid=\"pagination-header-test-id\"\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n              widgetId=\"pagination-options-menu-top\"\n              onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n              isCompact\n            />\n          ) : null}\n        </ToolbarItem>\n      </ToolbarContent>\n      <ToolbarContent>\n        <ToolbarItem variant=\"chip-group\" spacer={{ default: 'spacerNone' }}>\n          <FilterChip\n            filterValues={filterValues}\n            setFilterValues={setFilterValues}\n            chipsArray={chipsArray}\n            setChipsArray={setChipsArray}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarHeader.propTypes = {\n  filters: PropTypes.array,\n  toolbarButtons: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  filterValues: PropTypes.array,\n  input: PropTypes.string,\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n  chipsArray: PropTypes.array,\n  setChipsArray: PropTypes.func,\n  isLoading: PropTypes.bool,\n  toggleButton: PropTypes.array,\n  toggleAction: PropTypes.func,\n  toggleState: PropTypes.number,\n  setCheckBoxState: PropTypes.func,\n  checkBoxState: PropTypes.object,\n  children: PropTypes.element,\n};\nexport default ToolbarHeader;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n  Skeleton,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst ToolbarFooter = ({\n  isLoading,\n  count,\n  perPage,\n  setPerPage,\n  page,\n  setPage,\n}) => {\n  return (\n    <Toolbar id=\"toolbar\">\n      <ToolbarContent>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          {isLoading ? (\n            <Skeleton width=\"400px\" />\n          ) : count > 0 ? (\n            <Pagination\n              data-testid=\"pagination-footer-test-id\"\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n              widgetId=\"pagination-options-menu-top\"\n              onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n            />\n          ) : null}\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarFooter.propTypes = {\n  isLoading: PropTypes.bool,\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n};\n\nexport default ToolbarFooter;\n","const createFilterValues = (filters) =>\n  filters.map((filter) => {\n    const config = {\n      type: filter.type,\n      label: filter.label,\n    };\n\n    if (filter.type === 'text') config.value = filter.value || '';\n    if (filter.type === 'checkbox')\n      config.value = filter.options.map((option, index) => ({\n        ...option,\n        id: 'option' + index,\n        isChecked: option.isChecked || false,\n      }));\n    return config;\n  });\n\nexport default createFilterValues;\n","import React, { useState } from 'react';\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownToggleCheckbox,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BulkSelect = ({ checkBoxState, setCheckBoxState }) => {\n  const [selectAllToggle, setSelectAllToggle] = useState(false);\n\n  const handleChange = () => {\n    setCheckBoxState((prevState) => {\n      if (prevState.selectAll) {\n        return {\n          ...prevState,\n          checkedRows: [],\n          selectAll: false,\n        };\n      }\n      return {\n        ...prevState,\n        selectAll: true,\n      };\n    });\n  };\n\n  return (\n    <>\n      {checkBoxState.hasCheckbox && (\n        <ToolbarItem variant=\"bulk-select\">\n          <Dropdown\n            onSelect={handleChange}\n            toggle={\n              <DropdownToggle\n                id=\"stacked-example-toggle\"\n                splitButtonItems={[\n                  <DropdownToggleCheckbox\n                    id=\"example-checkbox-2\"\n                    key=\"split-checkbox\"\n                    aria-label=\"Select all\"\n                    isChecked={checkBoxState.selectAll}\n                    onChange={handleChange}\n                  >\n                    {checkBoxState.checkedRows.length > 0 &&\n                      `${checkBoxState.checkedRows.length} selected`}\n                  </DropdownToggleCheckbox>,\n                ]}\n                onToggle={() => setSelectAllToggle((prevState) => !prevState)}\n              />\n            }\n            isOpen={selectAllToggle}\n            dropdownItems={[\n              //<DropdownItem key='all'>Select all</DropdownItem>,\n              <DropdownItem key=\"page\" isDisabled={checkBoxState.selectAll}>\n                Select page\n              </DropdownItem>,\n              <DropdownItem key=\"none\" isDisabled={!checkBoxState.selectAll}>\n                Select none\n              </DropdownItem>,\n            ]}\n          />\n        </ToolbarItem>\n      )}\n    </>\n  );\n};\nBulkSelect.propTypes = {\n  setCheckBoxState: PropTypes.func,\n  checkBoxState: PropTypes.object,\n};\n\nexport default BulkSelect;\n","import React, { useState, useEffect } from 'react';\nimport ToolbarHeader from './ToolbarHeader';\nimport ToolbarFooter from './ToolbarFooter';\nimport createFilterValues from '../../components/general-table/createFilterValues';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport { Skeleton } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport CustomEmptyState from '../Empty';\nimport { useDispatch } from 'react-redux';\nimport { transformSort } from '../../Routes/ImageManager/constants';\nimport BulkSelect from './BulkSelect';\n\nconst filterParams = (chipsArray) => {\n  const filterParamsObj =\n    chipsArray.length > 0\n      ? chipsArray.reduce((acc, filter) => {\n          if (acc[filter.key.toLowerCase()]) {\n            const returnAcc =\n              typeof acc[filter.key.toLowerCase()] === 'string'\n                ? [acc[filter.key.toLowerCase()]]\n                : [...acc[filter.key.toLowerCase()]];\n            return {\n              ...acc,\n              [filter.key.toLowerCase()]: [\n                ...returnAcc,\n                filter.apiName ? filter.apiName : filter.value,\n              ],\n            };\n          } else {\n            return {\n              ...acc,\n              [filter.key.toLowerCase()]: filter.apiName\n                ? filter.apiName\n                : filter.value || filter.label,\n            };\n          }\n        }, {})\n      : {};\n  return filterParamsObj;\n};\n\nconst GeneralTable = ({\n  apiFilterSort,\n  urlParam,\n  filters,\n  loadTableData,\n  tableData,\n  columnNames,\n  rows,\n  toolbarButtons,\n  actionResolver,\n  areActionsDisabled,\n  defaultSort,\n  emptyStateMessage,\n  emptyStateAction,\n  emptyStateActionMessage,\n  emptyFilterMessage,\n  emptyFilterBody,\n  emptyFilterIcon,\n  toggleButton,\n  toggleAction,\n  toggleState,\n  hasCheckbox = false,\n  skeletonRowQuantity,\n}) => {\n  const [filterValues, setFilterValues] = useState(createFilterValues(filters));\n  const [chipsArray, setChipsArray] = useState([]);\n  const [sortBy, setSortBy] = useState(\n    hasCheckbox ? { ...defaultSort, index: defaultSort.index + 1 } : defaultSort\n  );\n  const [perPage, setPerPage] = useState(20);\n  const [page, setPage] = useState(1);\n  const [checkBoxState, setCheckBoxState] = useState({\n    hasCheckbox: hasCheckbox,\n    selectAll: false,\n    checkedRows: [],\n  });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const query = apiFilterSort\n      ? {\n          ...filterParams(chipsArray),\n          limit: perPage,\n          offset: (page - 1) * perPage,\n          ...transformSort({\n            direction: sortBy.direction,\n            name: columns[sortBy.index].type,\n          }),\n        }\n      : null;\n    apiFilterSort && urlParam\n      ? loadTableData(dispatch, urlParam, query)\n      : apiFilterSort\n      ? loadTableData(dispatch, query)\n      : null;\n  }, [chipsArray, perPage, page, sortBy]);\n\n  const { count, isLoading, hasError } = tableData;\n\n  //Used for repos until the api can sort and filter\n  const filteredByName = () => {\n    const activeFilters = filterValues.filter(\n      (filter) =>\n        (filter?.type === 'text' && filter?.value !== '') ||\n        (filter?.type === 'checkbox' &&\n          filter?.value.find((checked) => checked.isChecked))\n    );\n    const filteredArray = rows.filter((row) => {\n      if (activeFilters.length > 0) {\n        return activeFilters?.every((filter) => {\n          if (filter.type === 'text') {\n            return row.noApiSortFilter[\n              columnNames.findIndex((row) => row.title === filter.label)\n            ]\n              .toLowerCase()\n              .includes(filter.value.toLowerCase());\n          } else if (filter.type === 'checkbox') {\n            return filter.value.some(\n              (value) =>\n                value.isChecked &&\n                row.noApiSortFilter[\n                  columnNames.findIndex((row) => row.title === filter.label)\n                ].toLowerCase() === value.value.toLowerCase()\n            );\n          }\n        });\n      } else {\n        return row;\n      }\n    });\n    return filteredArray;\n  };\n\n  const filteredByNameRows = !apiFilterSort && filteredByName();\n\n  //non-api sort function\n  const sortedByDirection = (rows) =>\n    rows.sort((a, b) => {\n      const index = hasCheckbox ? sortBy.index - 1 : sortBy.index;\n      return typeof a?.noApiSortFilter[index] === 'number'\n        ? sortBy.direction === 'asc'\n          ? a?.noApiSortFilter[index] - b?.noApiSortFilter[index]\n          : b?.noApiSortFilter[index] - a?.noApiSortFilter[index]\n        : sortBy.direction === 'asc'\n        ? a?.noApiSortFilter[index].localeCompare(\n            b?.noApiSortFilter[index],\n            undefined,\n            { sensitivity: 'base' }\n          )\n        : b?.noApiSortFilter[index].localeCompare(\n            a?.noApiSortFilter[index],\n            undefined,\n            { sensitivity: 'base' }\n          );\n    });\n\n  const nonApiCount = !apiFilterSort\n    ? sortedByDirection(filteredByNameRows)?.length\n    : 0;\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  const toShowSort =\n    isLoading || hasError || (count?.length > 0 && filters.length > 0);\n\n  const columns = columnNames.map((columnName) => ({\n    title: columnName.title,\n    type: columnName.type,\n    transforms: toShowSort ? [] : columnName.sort ? [sortable] : [],\n    columnTransforms: columnName.columnTransforms\n      ? columnName.columnTransforms\n      : [],\n  }));\n\n  const filteredRows = apiFilterSort\n    ? rows\n    : rows.length > 0\n    ? sortedByDirection(filteredByNameRows).slice(\n        (page - 1) * perPage,\n        (page - 1) * perPage + perPage\n      )\n    : rows;\n\n  const selectedRows = () =>\n    filteredRows.map((row) =>\n      checkBoxState.checkedRows.some((checkedRow) => checkedRow.id === row.id)\n        ? {\n            ...row,\n            selected: true,\n          }\n        : {\n            ...row,\n            selected: false,\n          }\n    );\n\n  const handleSelect = (_event, isSelecting, rowIndex) => {\n    setCheckBoxState((prevState) => ({\n      ...prevState,\n      selectAll: false,\n      checkedRows: isSelecting\n        ? [\n            ...prevState.checkedRows,\n            {\n              id: filteredRows[rowIndex].id,\n            },\n          ]\n        : prevState.checkedRows.filter(\n            (row) => row.id !== filteredRows[rowIndex].id\n          ),\n    }));\n  };\n\n  useEffect(() => {\n    if (\n      checkBoxState.checkedRows.length > 0 &&\n      checkBoxState.checkedRows.length === filteredRows.length\n    ) {\n      setCheckBoxState((prevState) => ({\n        ...prevState,\n        selectAll: true,\n      }));\n    }\n  }, [checkBoxState.checkedRows]);\n\n  useEffect(() => {\n    if (checkBoxState.selectAll) {\n      setCheckBoxState((prevState) => ({\n        ...prevState,\n        checkedRows: [\n          ...filteredRows.map((row) => ({\n            id: row?.id,\n          })),\n        ],\n      }));\n    }\n  }, [checkBoxState.selectAll]);\n\n  const loadingRows = (perPage) =>\n    [...Array(skeletonRowQuantity ?? perPage)].map(() => ({\n      cells: columnNames.map(() => ({ title: <Skeleton width=\"100%\" /> })),\n    }));\n\n  return (\n    <>\n      <ToolbarHeader\n        count={apiFilterSort ? count : nonApiCount}\n        toolbarButtons={toolbarButtons}\n        filters={filters}\n        filterValues={filterValues}\n        setFilterValues={setFilterValues}\n        chipsArray={chipsArray}\n        setChipsArray={setChipsArray}\n        isLoading={isLoading}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n        toggleButton={toggleButton}\n        toggleAction={toggleAction}\n        toggleState={toggleState}\n      >\n        {!isLoading && (\n          <BulkSelect\n            checkBoxState={checkBoxState}\n            setCheckBoxState={setCheckBoxState}\n          />\n        )}\n      </ToolbarHeader>\n      {!isLoading && count < 1 ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-match\"\n          bgColor=\"white\"\n          icon=\"search\"\n          title={emptyStateMessage}\n          secondaryActions={[\n            {\n              title: emptyStateActionMessage,\n              onClick: () => emptyStateAction(),\n            },\n          ]}\n        />\n      ) : !isLoading && !filteredRows?.length > 0 ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-match\"\n          bgColor=\"white\"\n          icon={emptyFilterIcon ?? 'search'}\n          title={emptyFilterMessage ?? 'No match found'}\n          body={emptyFilterBody ?? ''}\n          secondaryActions={[\n            {\n              title: 'Clear all filters',\n              onClick: () => setFilterValues(createFilterValues(filters)),\n            },\n          ]}\n        />\n      ) : (\n        <Table\n          data-testid=\"general-table-testid\"\n          variant=\"compact\"\n          aria-label=\"General Table Component\"\n          sortBy={sortBy}\n          onSort={handleSort}\n          actionResolver={actionResolver ? actionResolver : null}\n          areActionsDisabled={areActionsDisabled}\n          cells={columns}\n          rows={\n            isLoading\n              ? loadingRows(perPage)\n              : checkBoxState.hasCheckbox\n              ? selectedRows()\n              : filteredRows\n          }\n          onSelect={!isLoading && checkBoxState.hasCheckbox && handleSelect}\n          canSelectAll={false}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n\n      <ToolbarFooter\n        isLoading={isLoading}\n        count={apiFilterSort ? count : nonApiCount}\n        setFilterValues={setFilterValues}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n      />\n    </>\n  );\n};\n\nGeneralTable.propTypes = {\n  apiFilterSort: PropTypes.bool,\n  filters: PropTypes.array,\n  urlParam: PropTypes.string,\n  loadTableData: PropTypes.func,\n  tableData: PropTypes.object,\n  columnNames: PropTypes.array,\n  rows: PropTypes.array,\n  actionResolver: PropTypes.func,\n  areActionsDisabled: PropTypes.func,\n  defaultSort: PropTypes.object,\n  toolbarButtons: PropTypes.array,\n  emptyStateMessage: PropTypes.string,\n  emptyStateActionMessage: PropTypes.string,\n  emptyStateAction: PropTypes.func,\n  toggleButton: PropTypes.array,\n  toggleAction: PropTypes.func,\n  toggleState: PropTypes.number,\n  hasCheckbox: PropTypes.bool,\n  skeletonRowQuantity: PropTypes.number,\n  emptyFilterMessage: PropTypes.string,\n  emptyFilterBody: PropTypes.string,\n  emptyFilterIcon: PropTypes.string,\n};\n\nexport default GeneralTable;\n","export const transformPaginationParams = ({ perPage, page }) => ({\n  limit: perPage,\n  offset: (page - 1) * perPage,\n});\n\nexport const transformFilters = (filters) => {\n  const f = filters.reduce((acc, filter) => {\n    if (!filter.chipKey || filter.chips.length === 0) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [filter.chipKey]: filter.chips.map((chip) => chip.value),\n    };\n  }, {});\n  return f;\n};\n\nexport const transformSort = ({ direction, name }) => {\n  return {\n    sort_by: direction === 'asc' ? name : `-${name}`,\n  };\n};\n\nexport const getFilterDep = (filter = undefined) => {\n  return filter?.chips?.map((chip) => chip.value).join('.') || undefined;\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const sortByDirection = (data, direction = 'asc') =>\n  data.sort((a, b) =>\n    direction === 'asc'\n      ? a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n      : b.name.toLowerCase().localeCompare(a.name.toLowerCase())\n  );\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n\nexport const nameValidator = {\n  type: validatorTypes.PATTERN,\n  pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-\\s]*$/,\n  message:\n    'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n};\n\nexport const mapUrlToObj = (url, keys) => {\n  const splitUrl = url.split('/');\n  const obj = {};\n\n  for (let i = 1; i < splitUrl.length; i++) {\n    if (splitUrl[i]) {\n      obj[keys[i - 1]] = splitUrl[i];\n    }\n  }\n\n  obj.buildUrl = function () {\n    return Object.values(this).reduce(\n      (acc, curr) => (typeof curr !== 'function' ? `${acc}/${curr}` : acc),\n      ''\n    );\n  };\n\n  return obj;\n};\n"],"names":["EDGE_API","getTableParams","q","Object","keys","reduce","acc","curr","value","undefined","length","multiVals","val","includes","getImageById","id","instance","getPackages","distribution","architecture","search","params","URLSearchParams","toString","createImage","Id","name","version","description","release","username","credentials","imageTypes","imageType","packages","payload","map","item","outputTypes","commit","arch","installer","sshkey","endpoint","fetchEdgeImageSets","limit","offset","sort_by","query","getEdgeImageStatus","getDeviceHasUpdate","console","log","updateDeviceLatestImage","getImageDataOnDevice","checkImageName","getCustomRepositories","createCustomRepository","Name","URL","baseURL","getImageSet","editCustomRepository","removeCustomRepository","getInventory","createGroup","Type","getGroups","getGroupById","updateGroupById","emptyStateIconMapper","repository","RepositoryIcon","SearchIcon","module","ModuleIcon","cube","CubeIcon","question","QuestionCircleIcon","Empty","bgColor","icon","title","body","primaryAction","secondaryActions","style","backgroundColor","headingLevel","size","href","component","Link","to","text","onClick","click","variant","index","type","link","key","className","propTypes","PropTypes","FilterDropdown","filters","dropdown","setDropdown","ToolbarItem","Select","width","onToggle","prevState","isOpen","onSelect","_e","selection","selected","selections","toggleIcon","filter","SelectOption","label","FilterInput","filterValues","setFilterValues","input","selectedFilter","find","useState","setIsOpen","handleFilterChange","checkboxValue","selectedIndex","findIndex","checkedType","checkboxIndex","i","option","newValueArray","values","isChecked","newTextValue","InputGroup","SearchInput","placeholder","onChange","onClear","filterLabelIndex","slice","placeholderText","isCheckboxSelectionBadgeHidden","arr","FilterControls","children","setCheckBoxState","checkBoxState","FilterChips","chipsArray","setChipsArray","useEffect","forEach","filterOption","chip","state","apiName","optionApiName","addTextFilter","f","entries","ChipGroup","categoryName","Chip","changedValue","changeFalse","removeIndex","handleDeleteFilter","Button","setFalse","checkbox","ToolbarButtons","buttons","ToolbarHeader","toolbarButtons","isLoading","count","perPage","setPerPage","page","setPage","toggleButton","toggleAction","toggleState","Toolbar","ToolbarContent","ToggleGroup","btn","ToggleGroupItem","isSelected","align","default","Skeleton","Pagination","itemCount","onSetPage","pageNumber","widgetId","onPerPageSelect","isCompact","spacer","ToolbarFooter","config","options","BulkSelect","selectAllToggle","setSelectAllToggle","handleChange","selectAll","checkedRows","hasCheckbox","Dropdown","toggle","DropdownToggle","splitButtonItems","DropdownToggleCheckbox","dropdownItems","DropdownItem","isDisabled","GeneralTable","apiFilterSort","urlParam","loadTableData","tableData","columnNames","rows","actionResolver","areActionsDisabled","defaultSort","emptyStateMessage","emptyStateAction","emptyStateActionMessage","emptyFilterMessage","emptyFilterBody","emptyFilterIcon","skeletonRowQuantity","createFilterValues","sortBy","setSortBy","dispatch","useDispatch","toLowerCase","returnAcc","filterParams","direction","columns","activeFilters","hasError","filteredByNameRows","checked","row","every","noApiSortFilter","some","sortedByDirection","sort","a","b","localeCompare","sensitivity","nonApiCount","toShowSort","columnName","transforms","sortable","columnTransforms","filteredRows","Table","onSort","_event","cells","Array","loadingRows","checkedRow","isSelecting","rowIndex","canSelectAll","TableHeader","TableBody","statusMapper","statusToIcon","done","CheckCircleIcon","color","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","sortByDirection","data","nameValidator","validatorTypes","pattern","message","mapUrlToObj","url","splitUrl","split","obj","buildUrl","this"],"sourceRoot":""}