{"version":3,"file":"js/940.f273d74a223a7f875004.js","mappings":"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","sources":["webpack:///./src/components/BuildModalReview.js","webpack:///./src/Routes/Devices/UpdateDeviceModal.js"],"sourcesContent":["import React from 'react';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextListItemVariants,\n  TextListVariants,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BuildModalReview = ({ reviewObject }) => {\n  return (\n    <TextContent>\n      <Title headingLevel=\"h3\">\n        <Text component={'b'}>{reviewObject.title}</Text>\n      </Title>\n      <TextList component={TextListVariants.dl}>\n        {reviewObject.rows.map((row) => (\n          <>\n            <TextListItem component={TextListItemVariants.dt}>\n              {row.title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {row.value}\n            </TextListItem>\n          </>\n        ))}\n      </TextList>\n    </TextContent>\n  );\n};\n\nBuildModalReview.propTypes = {\n  reviewObject: PropTypes.object,\n};\n\nexport default BuildModalReview;\n","import React from 'react';\nimport { TextContent, Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { updateDeviceLatestImage } from '../../api/index';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Modal from '../../components/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport BuildModalReview from '../../components/BuildModalReview';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../ImageManagerDetail/constants';\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const dispatch = useDispatch();\n  const imageData = updateModal?.imageData;\n  const deviceId = updateModal?.deviceData?.id;\n  const deviceName = updateModal?.deviceData?.display_name;\n\n  const handleUpdateModal = async () => {\n    try {\n      await updateDeviceLatestImage({\n        DeviceUUID: deviceId,\n        CommitId: imageData?.Image?.CommitID,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating device',\n          description: ` ${deviceName} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a device was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  const WarningText = () => (\n    <TextContent className=\"pf-u-pt-md\">\n      <Text\n        style={{ color: 'var(--pf-global--palette--gold-500)' }}\n        component=\"small\"\n      >\n        <ExclamationTriangleIcon /> After the update is installed, the device\n        will apply the changes.\n      </Text>\n    </TextContent>\n  );\n\n  const updateToDetails = {\n    title: 'Update to',\n    rows: [\n      { title: 'Image Name', value: imageData?.Image.Name },\n      { title: 'Version', value: imageData?.Image.Version },\n      {\n        title: 'Created',\n        value: <DateFormat date={imageData?.Image.CreatedAt} />,\n      },\n      {\n        title: 'Release',\n        value: distributionMapper[imageData?.Image.Distribution],\n      },\n    ],\n  };\n\n  const packageDetails = {\n    title: 'Package Details',\n    rows: [\n      { title: 'Added', value: imageData?.PackageDiff?.Added?.length || 0 },\n      { title: 'Removed', value: imageData?.PackageDiff?.Removed?.length || 0 },\n      { title: 'Updated', value: imageData?.PackageDiff?.Updated?.length || 0 },\n    ],\n  };\n\n  const updateSchema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label:\n          'Update this device to use the latest version of the image linked to it.',\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({ reviewObject: updateToDetails }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({ reviewObject: packageDetails }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-text',\n        label: WarningText(),\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      size=\"medium\"\n      title={`Update ${deviceName} to latest image`}\n      isOpen={updateModal.isOpen}\n      openModal={() =>\n        setUpdateModal((prevState) => ({ ...prevState, isOpen: false }))\n      }\n      submitLabel=\"Update Device\"\n      schema={updateSchema}\n      onSubmit={handleUpdateModal}\n      reloadData={refreshTable}\n    />\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.object.isRequired,\n    imageData: PropTypes.object,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n"],"names":["BuildModalReview","reviewObject","TextContent","Title","headingLevel","Text","component","title","TextList","TextListVariants","rows","map","row","TextListItem","T","TextListItemVariants","value","propTypes","PropTypes","UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","dispatch","useDispatch","imageData","deviceId","deviceData","id","deviceName","display_name","handleUpdateModal","updateDeviceLatestImage","DeviceUUID","CommitId","Image","CommitID","addNotification","variant","description","statusText","handleClose","prevState","isOpen","updateToDetails","Name","Version","DateFormat","date","CreatedAt","distributionMapper","Distribution","packageDetails","PackageDiff","Added","length","Removed","Updated","updateSchema","fields","componentTypes","name","label","className","style","color","Modal","size","openModal","submitLabel","schema","onSubmit","reloadData","isRequired"],"sourceRoot":""}