{"version":3,"file":"js/CreateImageWizard.3fa1cd5ae38a22cac91f.js","mappings":"26BAuBA,IAAMA,EAAc,SAAH,GAAiC,IAA3BC,EAAY,EAAZA,aAAcC,EAAM,EAANA,OACnC,GAAwBC,EAAAA,EAAAA,YAAU,eAA3BC,EAAI,KAAEC,EAAO,KACdC,GAAWC,EAAAA,EAAAA,eACXC,GAAwBC,EAAAA,EAAAA,IAC5B,uCAGIC,GAAyBD,EAAAA,EAAAA,IAC7B,mCAGIE,EAAc,WAClBV,IACAC,GAAUA,GACZ,GAEAU,EAAAA,EAAAA,YAAU,YACR,iBAAC,wFACS,QAAR,EAAAC,gBAAQ,OAAQ,QAAR,EAAR,EAAUC,cAAM,OAAM,QAAN,EAAhB,EAAkBC,YAAI,OAAtB,EACIC,UACDC,MAAK,SAACC,GAAM,OAAKb,EAAkBc,MAAVD,EAAsBA,EAAS,CAAC,EAAE,IAAE,0CAHlE,EAKF,GAAG,IAIH,IAAME,GAAkBC,EAAAA,EAAAA,MAExB,OAAOjB,EACL,kBAAC,IAAY,CACXkB,QAASX,EACTY,sBAAuB,CACrBC,OAAQC,EAAAA,GAEVC,SAAU,YAA6B,IAA1BC,EAAM,EAANA,QACXC,EAD8B,EAAXA,cACP,kBAAM,CAAI,IACtB,IAAMC,EAAU,EAAH,KACRF,GAAM,IACTG,aAAc,YAEhBC,EAAAA,EAAAA,IAAezB,EAAUuB,GAAS,SAACG,GACjC1B,EAAS,EAAD,MACH2B,EAAAA,EAAAA,IAAgB,CACjBC,QAAS,OACTC,MAAO,iBACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMC,KAAI,qCAC/B,IACFC,KAAM,CACJC,QAAS,CACPC,GAAI,eAAF,OAAiBT,EAAKK,MAAMK,GAAE,iBAChCC,QAAS,kBAAMC,EAAAA,EAAAA,IAAmBZ,EAAKK,MAAMK,GAAG,EAChDG,UAAW,SAACb,GACV,OAAQA,EAAKc,QACX,IAAK,WACH,MAAO,EAAC,EAAM,IAChB,IAAK,QACH,MAAO,EAAC,EAAO,WACjB,QACE,MAAO,EAAC,EAAO,WAErB,EACAC,QAAS,CACPC,QAAS,CACP,SAAC1C,GAAQ,OACPA,GACE2B,EAAAA,EAAAA,IAAgB,CACdC,QAAS,SACTC,MAAO,qBACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMC,KAAI,8CAElC,GAELW,QAAS,CACP,SAAC3C,GAAQ,OACPA,GACE2B,EAAAA,EAAAA,IAAgB,CACdC,QAAS,UACTC,MAAO,iBACPC,YAAa,GAAF,OAAKJ,EAAKK,MAAMC,KAAI,+BAElC,SAMb3B,GACF,GACF,EACAuC,YAAY,SACZC,cAAe,CACbC,QAAS,EACTC,QAAS7C,EAAwB8C,EAAAA,GAAoBC,EAAAA,IAEvDC,OAAQ,CACNC,OAAQ,CACN,CACEC,UAAWC,EAAAA,EAAAA,OACXC,KAAM,uBACNC,UAAW,gBACXC,WAAW,EACXC,SAAS,EACTC,aAAc,CACZC,OAAQ,gBAEVC,YAAY,EACZ/B,MAAO,eACPgC,WAAY,CACV,UACA,YACA,2BACA,eAIFV,OAAQ,CACNrC,EACAgD,EAAAA,GACAC,EAAAA,IACAC,EAAAA,EAAAA,IAAa5D,GACb6D,EAAAA,GACA/C,EAAAA,GACAgD,EAAAA,GACAC,EAAAA,SAOV,kBAAC,IAAO,KAEZ,EAEAzE,EAAY0E,UAAY,CACtBzE,aAAc0E,IAAAA,KACdzE,OAAQyE,IAAAA,MAEV3E,EAAY4E,aAAe,CACzB3E,aAAc,WAAe,GAG/B,S","sources":["webpack:///./src/Routes/ImageManager/CreateImageWizard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  registration,\n  review,\n  packages,\n  repositories,\n  getImageSetDetailsSchema,\n  imageOutput,\n  customPackages,\n  additionalCustomPackages,\n} from './steps';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage } from '../../store/actions';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getEdgeImageStatus } from '../../api/images';\nimport { useFeatureFlags } from '../../utils';\nimport { DEFAULT_RELEASE, TEMPORARY_RELEASE } from '../../constants';\n\nconst CreateImage = ({ navigateBack, reload }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const imageWizardFeatureFlag = useFeatureFlags(\n    'edge-management.image_wizard_ui'\n  );\n\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  // Re-initialize imageSetDetails schema each render, to avoid cache\n  // of async validator results across multiple instances of the form.\n  const imageSetDetails = getImageSetDetailsSchema();\n\n  return user ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          architecture: 'x86_64',\n        };\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Creating image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        version: 0,\n        release: temporaryReleasesFlag ? TEMPORARY_RELEASE : DEFAULT_RELEASE,\n      }}\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Create image',\n            },\n            showTitles: true,\n            title: 'Create image',\n            crossroads: [\n              'release',\n              'imageType',\n              'third-party-repositories',\n              'imageOutput',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              imageSetDetails,\n              imageOutput,\n              registration,\n              repositories(imageWizardFeatureFlag),\n              packages,\n              review,\n              customPackages,\n              additionalCustomPackages,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  reload: PropTypes.func,\n};\nCreateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default CreateImage;\n"],"names":["CreateImage","navigateBack","reload","useState","user","setUser","dispatch","useDispatch","temporaryReleasesFlag","useFeatureFlags","imageWizardFeatureFlag","closeAction","useEffect","insights","chrome","auth","getUser","then","result","undefined","imageSetDetails","getImageSetDetailsSchema","onClose","customComponentMapper","review","ReviewStep","onSubmit","values","setIsSaving","payload","architecture","createNewImage","resp","addNotification","variant","title","description","value","Name","meta","polling","id","ID","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","defaultArch","initialValues","version","release","TEMPORARY_RELEASE","DEFAULT_RELEASE","schema","fields","component","componentTypes","name","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","imageOutput","registration","repositories","packages","customPackages","additionalCustomPackages","propTypes","PropTypes","defaultProps"],"sourceRoot":""}