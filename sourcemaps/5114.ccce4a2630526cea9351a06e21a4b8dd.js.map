{"version":3,"file":"js/5114.775edba78e2854050b78.js","mappings":"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","sources":["webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/hooks/useApi.js","webpack:///./src/hooks/useInventoryGroups.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  createInventoryGroup,\n  addDevicesToGroup,\n  validateGroupName,\n  validateInventoryGroupName,\n  addDevicesToInventoryGroup,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport useInventoryGroups from '../../hooks/useInventoryGroups';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst asyncInventoryGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateInventoryGroupName(value);\n  if (resp.results.length > 0 && resp.results[0].name === value) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst inventoryValidatorMapper = {\n  groupName: () => asyncInventoryGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const [inventoryGroupsEnabled] = useInventoryGroups(false);\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n\n    let createGroupFunc;\n    if (inventoryGroupsEnabled) {\n      createGroupFunc = () => createInventoryGroup(values);\n    } else {\n      createGroupFunc = () => createGroup(values);\n    }\n    return apiWithToast(dispatch, createGroupFunc, statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    let addDevicesToGroupFunc;\n    if (inventoryGroupsEnabled) {\n      const { id } = await handleCreateGroup(values);\n      addDevicesToGroupFunc = () => addDevicesToInventoryGroup(id, deviceIds);\n    } else {\n      const { ID } = await handleCreateGroup(values);\n      addDevicesToGroupFunc = () => addDevicesToGroup(parseInt(ID), deviceIds);\n    }\n    apiWithToast(dispatch, addDevicesToGroupFunc, statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={\n        inventoryGroupsEnabled ? inventoryValidatorMapper : validatorMapper\n      }\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import { EDGE_API, INVENTORY_API_BASE, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const createInventoryGroup = (payload) => {\n  return instance.post(`${INVENTORY_API_BASE}/groups`, { name: payload.name });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getInventoryGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${INVENTORY_API_BASE}/groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const addDevicesToInventoryGroup = (groupId, devices) => {\n  const devicesIDS = [];\n  devices.forEach((device) => devicesIDS.push(device.UUID));\n\n  return instance.post(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts`,\n    devicesIDS\n  );\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDevicesFromInventoryGroup = (groupId, devices) => {\n  return instance.delete(\n    `${INVENTORY_API_BASE}/groups/${groupId}/hosts/` + devices.join(',')\n  );\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n\nexport const getEnforceEdgeGroups = () => {\n  return instance.get(`${EDGE_API}/device-groups/enforce-edge-groups`);\n};\n\nexport const validateInventoryGroupName = (name) => {\n  return instance.get(\n    `${INVENTORY_API_BASE}/groups?name=${name}&order_by=name&order_how=ASC`\n  );\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n","import { useState, useEffect } from 'react';\nimport { useFeatureFlags } from '../utils';\nimport { FEATURE_PARITY_INVENTORY_GROUPS } from '../constants/features';\nimport { getEnforceEdgeGroups } from '../api/groups';\n\nconst useInventoryGroups = (value) => {\n  const [data, setData] = useState(value);\n  const [ready, setReady] = useState(false);\n  const inventoryGroupsEnabled = useFeatureFlags(\n    FEATURE_PARITY_INVENTORY_GROUPS\n  );\n\n  useEffect(() => {\n    (async () => {\n      const response = await getEnforceEdgeGroups();\n      const enforceEdgeGroups = response?.enforce_edge_groups;\n      setData(!enforceEdgeGroups && inventoryGroupsEnabled);\n      setReady(true);\n    })();\n  }, []);\n\n  return [data, ready];\n};\n\nexport default useInventoryGroups;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["asyncGroupNameValidation","value","length","undefined","validateGroupName","data","isValid","asyncInventoryGroupNameValidation","validateInventoryGroupName","resp","results","name","validatorMapper","groupName","inventoryValidatorMapper","createGroupSchema","fields","component","componentTypes","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","CreateGroupModal","isModalOpen","setIsModalOpen","deviceIds","reloadData","dispatch","useDispatch","useInventoryGroups","inventoryGroupsEnabled","handleCreateGroup","values","createGroupFunc","statusMessages","onSuccess","title","description","onError","createInventoryGroup","createGroup","apiWithToast","handleAddDevicesToNewGroup","id","addDevicesToGroupFunc","addDevicesToInventoryGroup","ID","addDevicesToGroup","parseInt","isOpen","closeModal","submitLabel","schema","onSubmit","propTypes","PropTypes","payload","instance","EDGE_API","Name","Type","INVENTORY_API_BASE","getGroups","query","q","getTableParams","getInventoryGroups","getGroupById","updateGroupById","deleteGroupById","groupId","devices","Devices","devicesIDS","forEach","device","push","UUID","removeDevicesFromGroup","removeDevicesFromInventoryGroup","join","removeDeviceFromGroupById","getEnforceEdgeGroups","RepoModal","titleIconVariant","initialValues","variant","size","additionalMappers","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","onCancel","api","tableReload","useState","setData","isLoading","setIsLoading","hasError","setHasError","apiFunc","setAPIFunc","hasSuccess","fetchData","addNotification","useEffect","ready","setReady","useFeatureFlags","FEATURE_PARITY_INVENTORY_GROUPS","response","enforceEdgeGroups","enforce_edge_groups","_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}