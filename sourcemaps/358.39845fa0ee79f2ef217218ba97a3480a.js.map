{"version":3,"file":"js/358.a9c412cf265168846bce.js","mappings":"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","sources":["webpack:///./src/Routes/Devices/UpdateDeviceModal.js"],"sourcesContent":["import React from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../ImageManagerDetail/constants';\nimport PropTypes from 'prop-types';\nimport { updateDeviceLatestImage } from '../../api/index';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const dispatch = useDispatch();\n  const imageData = updateModal?.imageData;\n  const deviceId = updateModal?.deviceData?.id;\n  const deviceName = updateModal?.deviceData?.display_name;\n\n  const handleUpdateModal = async () => {\n    try {\n      await updateDeviceLatestImage({\n        DeviceUUID: deviceId,\n        CommitId: imageData?.Image?.CommitID,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating device',\n          description: ` ${deviceName} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a device was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={`Update ${deviceName} to latest image`}\n      description=\"Update this device to use the latest version of the image linked to it.\"\n      isOpen={updateModal.isOpen}\n      onClose={handleClose}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Update Device\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Update to</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Image Name\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.Image.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.Image.Version}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Created\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            <DateFormat date={imageData?.Image.CreatedAt} />\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {distributionMapper[imageData?.Image.Distribution]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Package Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Added</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.PackageDiff?.Added?.length || 0}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Removed\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.PackageDiff?.Removed?.length || 0}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageData?.PackageDiff?.Updated?.length || 0}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n      <TextContent className=\"pf-u-pt-md\">\n        <Text\n          style={{ color: 'var(--pf-global--palette--gold-500)' }}\n          component=\"small\"\n        >\n          <ExclamationTriangleIcon /> After the update is installed, the device\n          will apply the changes.\n        </Text>\n      </TextContent>\n    </Modal>\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.object.isRequired,\n    imageData: PropTypes.object,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n"],"names":["UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","dispatch","useDispatch","imageData","deviceId","deviceData","id","deviceName","display_name","handleUpdateModal","updateDeviceLatestImage","DeviceUUID","CommitId","Image","CommitID","addNotification","variant","title","description","statusText","handleClose","prevState","isOpen","onClose","actions","key","onClick","T","component","TextVariants","TextListVariants","TextListItemVariants","Name","Version","date","CreatedAt","distributionMapper","Distribution","PackageDiff","Added","length","Removed","Updated","className","style","color","propTypes","PropTypes","isRequired"],"sourceRoot":""}