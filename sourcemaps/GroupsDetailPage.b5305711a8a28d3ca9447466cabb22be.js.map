{"version":3,"file":"js/GroupsDetailPage.1651179236710.a178d0f85ec8bda28359.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Devices/AddSystemsToGroupModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/components/Modal.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  imageTypeMapper,\n  releaseMapper,\n} from '../ImageManagerDetail/constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail, loadEdgeImageSets } from '../../store/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Update image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Create image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      //onSubmit={handleUpdateModal}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Create Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/index';\n\nconst getActiveAlert = (\n  CVEs,\n  deviceData,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    deviceData?.UpdateTransactions[deviceData?.UpdateTransactions?.length - 1]\n      ?.Status === 'BUILDING' ||\n    deviceData?.UpdateTransactions[deviceData?.UpdateTransactions?.length - 1]\n      ?.Status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (deviceData?.Device?.UpdateAvailable) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  deviceData,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { params } = useRouteMatch('/inventory/:deviceId');\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!deviceData) {\n        return;\n      }\n      const id = {\n        id: deviceData?.ImageInfo?.Image?.ImageSetID,\n      };\n      const newImageData = await getImageSet(id);\n      setNewImageStatus(newImageData?.Data?.images?.[0]?.image?.Status);\n    })();\n  }, [deviceData]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, deviceData, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your device.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update device to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update Device\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Device updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <Main className=\"add-100vh\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: params.deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </Main>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.string,\n  deviceData: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n          <VulnerabilityTab\n            deviceData={systemProfile}\n            setUpdateModal={setUpdateModal}\n            imageId={imageId}\n            setReload={setReload}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.string,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.bool,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { getDeviceHasUpdate } from '../../api/index';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [imageData, setImageData] = useState();\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setImageData(image_data);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n          },\n        ],\n        imageSetId: image_data?.ImageInfo?.Image?.ImageSetID,\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/inventory'}>\n                {uuid ? 'Groups' : 'Systems'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  imageData?.UpdateTransactions?.[\n                    imageData?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  imageData?.UpdateTransactions?.[\n                    imageData?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !imageData?.ImageInfo?.UpdatesAvailable?.length > 0 ||\n                  !updateModal.imageSetId,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : imageData?.UpdateTransactions[\n              imageData?.UpdateTransactions?.length - 1\n            ]?.Status === 'BUILDING' ||\n            imageData?.UpdateTransactions[\n              imageData?.UpdateTransactions?.length - 1\n            ]?.Status === 'CREATED' ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"blue\"\n              icon={<InProgressIcon />}\n            >\n              Updating\n            </Label>\n          ) : imageData?.Device?.UpdateAvailable ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"orange\"\n              icon={<ExclamationTriangleIcon />}\n            >\n              Update Available\n            </Label>\n          ) : (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"green\"\n              icon={<CheckCircleIcon color=\"green\" />}\n            >\n              Running\n            </Label>\n          )}\n        </PageHeader>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <DeviceDetailTabs\n              systemProfile={imageData}\n              imageId={imageId}\n              setUpdateModal={setUpdateModal}\n              setReload={setReload}\n            />\n          </GridItem>\n        </Grid>\n        {updateModal.isOpen && (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <UpdateDeviceModal\n              navigateBack={() => {\n                history.push({ pathname: history.location.pathname });\n                setUpdateModal((prevState) => {\n                  return {\n                    ...prevState,\n                    isOpen: false,\n                  };\n                });\n              }}\n              setUpdateModal={setUpdateModal}\n              updateModal={updateModal}\n              refreshTable={() => setReload(true)}\n            />\n          </Suspense>\n        )}\n      </DetailWrapper>\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Split, SplitItem, Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport {\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  InProgressIcon,\n} from '@patternfly/react-icons';\nimport { emptyStateNoFliters } from '../../constants';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_active_color_300';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\n\nconst getDeviceStatus = (deviceStatus, isUpdateAvailable) =>\n  deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'running';\n\nconst DeviceStatus = ({ status }) => {\n  const statusType = {\n    booting: (\n      <Split className=\"pf-u-info-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    ),\n    running: (\n      <Split className=\"pf-u-success-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <CheckCircleIcon />\n        </SplitItem>\n        <SplitItem>Running</SplitItem>\n      </Split>\n    ),\n    updateAvailable: (\n      <Split className=\"pf-u-warning-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon color={warningColor.value} />\n        </SplitItem>\n        <SplitItem>Update Available</SplitItem>\n      </Split>\n    ),\n    updating: (\n      <Split className=\"pf-u-active-color-100\">\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color={infoColor.value} />\n        </SplitItem>\n        <SplitItem>Updating</SplitItem>\n      </Split>\n    ),\n  };\n\n  return statusType[status];\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Booting', value: 'booting' },\n      { option: 'Running', value: 'running' },\n      { option: 'Update Available', value: 'updateAvailable' },\n      { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(30)],\n  },\n  {\n    title: 'Image',\n    type: 'image',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Groups',\n    type: 'groups',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last Seen',\n    type: 'last_seen',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n];\n\nconst createRows = (devices) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n    } = device;\n\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(Status, UpdateAvailable),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: (\n            <Link to={`${paths['inventory']}/${DeviceUUID}`}>{DeviceName}</Link>\n          ),\n        },\n        {\n          title: ImageName ? (\n            <Link to={`${paths['manage-images']}/${ImageSetID}/`}>\n              {ImageName}\n            </Link>\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title:\n            DeviceGroups.length === 0\n              ? '-'\n              : DeviceGroups.length === 1\n              ? DeviceGroups[0].Name\n              : deviceGroupTooltip,\n        },\n        {\n          title: <DateFormat date={LastSeen} />,\n        },\n        {\n          title: (\n            <DeviceStatus status={getDeviceStatus(Status, UpdateAvailable)} />\n          ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  hasCheckbox = false,\n  selectedItems,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  setUpdateModal,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup) {\n      actions.push({\n        title: 'Add to group',\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup) {\n      actions.push({\n        title: 'Remove from group',\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData)) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          setUpdateModal((prevState) => {\n            return {\n              ...prevState,\n              isOpen: true,\n              deviceData: [\n                {\n                  id: rowData.rowInfo.id,\n                  display_name: rowData.rowInfo.display_name,\n                },\n              ],\n              imageSetId: rowData.rowInfo.imageSetId,\n            };\n          });\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: 'Remove from group',\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.deviceStatus !== 'updateAvailable';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Connect edge systems'}\n          body={\n            'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n          }\n          secondaryActions={[\n            {\n              title:\n                'Create RHEL for Edge images and configure automated management',\n              link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n              type: 'link',\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchDevices}\n          tableData={{\n            count: count,\n            isLoading: isLoading,\n            hasError: hasError,\n          }}\n          columnNames={columnNames}\n          rows={createRows(data || [])}\n          actionResolver={actionResolver}\n          defaultSort={{ index: 4, direction: 'desc' }}\n          toolbarButtons={\n            canBeAdded\n              ? [\n                  {\n                    title: 'Add systems',\n                    click: () => setIsAddModalOpen(true),\n                  },\n                ]\n              : []\n          }\n          hasCheckbox={hasCheckbox}\n          skeletonRowQuantity={skeletonRowQuantity}\n          selectedItems={selectedItems}\n          kebabItems={kebabItems}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\nDeviceTable.propTypes = {\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.array,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  setUpdateModal: PropTypes.func,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  fetchDevices: PropTypes.func,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInput = ({ defaultOptions }) => {\n  const { change } = useFormApi();\n  const [options, setOptions] = useState(defaultOptions);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    setIsOpen(false);\n    setOptions(defaultOptions);\n  };\n\n  return (\n    <div>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {options?.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </div>\n  );\n};\n\nSelectInput.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { getGroups, addDevicesToGroup } from '../../api';\nimport { useDispatch } from 'react-redux';\nimport { Button, Text } from '@patternfly/react-core';\n\nconst CreateGroupButton = ({ openModal }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={openModal}>\n      Create Group\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  openModal: PropTypes.bool,\n};\n\nconst createDescription = (deviceIds) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a group to add <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds),\n    },\n    {\n      component: 'search-input',\n      name: 'name',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n  const [response] = useApi({ api: getGroups });\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add device to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(group.groupId), deviceIds),\n      statusMessages\n    );\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Add to group\"\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions: response?.data?.data || [],\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          openModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n        },\n      }}\n      schema={createSchema(deviceIds)}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { removeDeviceFromGroupById } from '../../api';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'name',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceInfo[0].name} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to remove device from group',\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, deviceInfo[0].ID),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      openModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useHistory } from 'react-router-dom';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst Inventory = () => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const history = useHistory();\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <DeviceTable\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          kebabItems={[\n            {\n              isDisabled: !(checkedDeviceIds.length > 0),\n              title: 'Add to group',\n              onClick: () =>\n                handleAddDevicesToGroup(\n                  checkedDeviceIds.map((device) => ({\n                    ID: device.deviceID,\n                    name: device.display_name,\n                  })),\n                  false\n                ),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Inventory;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { createGroup, addDevicesToGroup, validateGroupName } from '../../api';\nimport { nameValidator } from '../../constants';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  // isValid should be isNotValid\n  // who wrote that Go code :thinking_face:\n  // spoiler: it was me\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    /*\n      temp focus solution, better approach to pass a ref input and set it\n      when form inputs are mounted\n    */\n\n    setTimeout(() => {\n      const input = document.querySelector('#name');\n      if (input) input.focus();\n    }, 50);\n  }, []);\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add device to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\nimport { validateImage } from '../../api';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  fetchGroups,\n}) => {\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData?.rowInfo;\n    const hasValidImage =\n      devices.length > 0 &&\n      !validateImage(\n        devices.map((device) => ({\n          ID: device.ImageID,\n        }))\n      ).UpdateValid;\n\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled: devices.length > 0 ? !(hasValidImage && hasUpdate) : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData?.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n      },\n      // noApiSortFilter: [\n      //   Name,\n      //   '',\n      //   DevicesImageInfo.length === 0\n      //     ? '-'\n      //     : DevicesImageInfo.length > 1\n      //     ? 'Multiple images'\n      //     : DevicesImageInfo[0]?.Name,\n      // ],\n      cells: [\n        {\n          title: <Link to={`${paths['fleet-management']}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={[\n          {\n            title: 'Create group',\n            click: handleCreateModal,\n          },\n        ]}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchGroups}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  openModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api';\nimport { nameValidator } from '../../constants';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/index';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../constants';\n\nconst Groups = () => {\n  const history = useHistory();\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(isLoading, data?.count, history) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"module\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your devices more effectively\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={fetchGroups}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={fetchGroups}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={fetchGroups}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","import React, { useState } from 'react';\nimport { Button, Modal } from '@patternfly/react-core';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/index';\nimport { getInventory } from '../../api';\nimport useApi from '../../hooks/useApi';\n\nconst AddSystemsToGroupModal = ({\n  groupId,\n  closeModal,\n  isOpen,\n  reloadData,\n}) => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [deviceIds, setDeviceIds] = useState([]);\n\n  return (\n    <Modal\n      id=\"add-systems-modal\"\n      title=\"Add systems\"\n      position=\"top\"\n      isOpen={isOpen}\n      onClose={closeModal}\n      variant=\"large\"\n      actions={[\n        <Button\n          isDisabled={deviceIds.length === 0}\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => {\n            addDevicesToGroup(\n              parseInt(groupId),\n              deviceIds.map((device) => ({ ID: device.deviceID }))\n            );\n            setTimeout(async () => await reloadData(), 500);\n            closeModal();\n          }}\n        >\n          Add systems\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <DeviceTable\n        selectedItems={setDeviceIds}\n        skeletonRowQuantity={15}\n        hasCheckbox={true}\n        isLoading={isLoading}\n        hasError={hasError}\n        count={data?.count}\n        data={data?.data?.devices || []}\n        fetchDevices={fetchDevices}\n      />\n    </Modal>\n  );\n};\nAddSystemsToGroupModal.propTypes = {\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n};\n\nexport default AddSystemsToGroupModal;\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Flex,\n  FlexItem,\n  Skeleton,\n} from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Empty from '../../components/Empty';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/index';\nimport AddSystemsToGroupModal from '../Devices/AddSystemsToGroupModal';\nimport {\n  canUpdateSelectedDevices,\n  emptyStateNoFliters,\n  stateToUrlSearch,\n} from '../../constants';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst GroupsDetail = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const history = useHistory();\n  const { groupId } = params;\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchDevices] = useApi({\n    api: getGroupById,\n    id: groupId,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  useEffect(() => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('add_system_modal=true', isAddModalOpen),\n    });\n  }, [isAddModalOpen]);\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove device' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} systems have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove systems' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={`${paths['fleet-management']}`}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb isActive>\n            <Skeleton width=\"100px\" />\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id=\"image-set-details-dropdown\"\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                >\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete Group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.DevicesView?.devices?.map((device) => ({\n                      imageSetId: device?.ImageSetID,\n                    })),\n                    imageData: data?.DevicesView?.devices?.some(\n                      (device) => device.ImageID\n                    ),\n                  })}\n                  onClick={() =>\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.DevicesView?.devices?.map((device) => ({\n                        id: device?.DeviceUUID,\n                        display_name:\n                          device?.DeviceName === ''\n                            ? 'localhost'\n                            : device?.DeviceName,\n                      })),\n                      imageSetId: data?.DevicesView?.devices.find(\n                        (device) => device.ImageSetID\n                      )?.ImageSetID,\n                    }))\n                  }\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(\n          isLoading,\n          data?.DeviceGroup?.Devices.length,\n          history\n        ) ? (\n          <DeviceTable\n            data={data?.DevicesView?.devices || []}\n            count={data?.DevicesView?.total}\n            isLoading={isLoading}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: 'Remove from group',\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageSetId: deviceIds.find((device) => device?.imageSetId)\n                      .imageSetId,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            setUpdateModal={setUpdateModal}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchDevices={fetchDevices}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"cube\"\n              title=\"Add systems to the group\"\n              body=\"Create groups to help manage your systems more effectively\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n      {isAddModalOpen && (\n        <AddSystemsToGroupModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchDevices}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          openModal={() => setRemoveModal(false)}\n          title={'Remove from group'}\n          submitLabel={'Remove'}\n          variant=\"danger\"\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchDevices}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths['fleet-management'])}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GroupsDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImageSets } from '../../store/actions';\nimport { cellWidth } from '@patternfly/react-table';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../constants';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Current Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last Updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(30)],\n  },\n];\n\nconst createRows = (data) => {\n  return data.map(({ image_set, image_build_iso_url }, index) => ({\n    rowInfo: {\n      id: image_set?.ID,\n      imageStatus: image_set?.Images[0].Status,\n      isoURL: image_build_iso_url || null,\n      latestImageID: image_set?.Images[0].ID,\n    },\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Images[0].Version, // remove when image_set.Version is accurate\n      {\n        title: <DateFormat date={image_set?.UpdatedAt} />,\n      },\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <StatusLabel status={image_set?.Images[0].Status} />\n          </>\n        ),\n      },\n    ],\n  }));\n};\n\nconst ImageTable = ({ openCreateWizard, openUpdateWizard }) => {\n  const { count, data, isLoading, hasError } = useSelector(\n    ({ edgeImageSetsReducer }) => ({\n      count: edgeImageSetsReducer?.data?.Count || 0,\n      data: edgeImageSetsReducer?.data?.Data || [],\n      isLoading:\n        edgeImageSetsReducer?.isLoading === undefined\n          ? true\n          : edgeImageSetsReducer.isLoading,\n      hasError: edgeImageSetsReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.rowInfo?.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo?.latestImageID);\n        },\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'No images found'}\n          body={''}\n          primaryAction={{\n            click: openCreateWizard,\n            text: 'Create new image',\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          filters={defaultFilters}\n          loadTableData={loadEdgeImageSets}\n          tableData={{ count, data, isLoading, hasError }}\n          columnNames={columnNames}\n          rows={data ? createRows(data) : []}\n          actionResolver={actionResolver}\n          areActionsDisabled={areActionsDisabled}\n          defaultSort={{ index: 2, direction: 'desc' }}\n          toolbarButtons={[\n            {\n              title: 'Create new image',\n              click: () => openCreateWizard(),\n            },\n          ]}\n        />\n      )}\n    </>\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func,\n  openCreateWizard: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n  filters: PropTypes.array,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }),\n};\n\nexport default ImageTable;\n","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport { edgeImageSetsReducer } from '../../store/reducers';\nimport ImageSetsTable from './ImageSetsTable';\nimport { stateToUrlSearch } from '../../constants';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('create_image=true', true),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('update_image=true', true),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImageSetsReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('create_image=true', false),\n              });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('update_image=true', false),\n              });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  openModal, // should be closeModal, update here and other places that use it\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={openModal}\n    >\n      <FormRenderer\n        schema={schema}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          openModal();\n        }}\n        onCancel={() => openModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n  const hasSuccess = statusMessages?.onSuccess;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n      return response;\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","data","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","key","onClick","payload","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","addNotification","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","deviceData","setUpdateModal","params","useRouteMatch","useState","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","ImageInfo","Image","ImageSetID","getImageSet","newImageData","Data","images","isLoading","filter","length","UpdateTransactions","Device","UpdateAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","Main","AsyncComponent","appName","module","customIntlProvider","entity","deviceId","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","AppInfo","showTags","Vulnerability","UpdateDeviceModal","React","setImageId","useParams","inventoryId","uuid","entityDetails","groupName","groupsDetailReducer","imageData","setImageData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","image_data","imageSetId","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","isDisabled","UpdatesAvailable","hideBack","hideInvDrawer","Label","icon","Grid","gutter","GridItem","span","navigateBack","history","push","pathname","location","refreshTable","getDeviceStatus","deviceStatus","isUpdateAvailable","DeviceStatus","booting","running","updateAvailable","warningColor","updating","infoColor","defaultFilters","label","type","options","option","columnNames","sort","columnTransforms","cellWidth","DeviceTable","devices","hasCheckbox","selectedItems","skeletonRowQuantity","count","hasError","kebabItems","setRemoveModal","setIsAddModalOpen","handleAddDevicesToGroup","handleRemoveDevicesFromGroup","hasModalSubmitted","setHasModalSubmitted","fetchDevices","canBeRemoved","canBeAdded","useHistory","emptyStateNoFliters","body","secondaryActions","link","apiFilterSort","isUseApi","loadTableData","tableData","rows","device","DeviceName","DeviceGroups","DeviceID","DeviceUUID","LastSeen","ImageName","deviceGroupTooltip","group","index","rowInfo","deviceID","updateImageData","imageName","deviceGroups","noApiSortFilter","cells","paths","date","actionResolver","rowData","areActionsDisabled","_rowId","defaultSort","direction","toolbarButtons","click","urlParam","openUpdateWizard","temp","setIsModalOpen","handleSingleDeviceRemoval","SelectInput","defaultOptions","change","useFormApi","setOptions","setIsOpen","selected","setSelected","clearSelection","Select","typeAheadAriaLabel","onToggle","selection","isPlaceholder","onClear","selections","placeholderText","DeviceGroup","SelectOption","toString","groupId","CreateGroupButton","openModal","createDescription","deviceIds","systemText","createSchema","fields","componentTypes","validate","validatorTypes","AddDeviceModal","isModalOpen","setIsCreateGroupModalOpen","reloadData","useApi","api","getGroups","response","submitLabel","additionalMappers","SearchInput","schema","onSubmit","values","statusMessages","onSuccess","onError","apiWithToast","addDevicesToGroup","parseInt","removeDescription","deviceInfo","groupText","WarningIcon","RemoveDeviceModal","titleIconVariant","hasManyGroups","removeDeviceFromGroupById","getInventory","tableReload","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","setDeviceId","checkedDeviceIds","setCheckedDeviceIds","isRowSelected","setIsRowSelected","isCreateGroupModalOpen","ids","isRow","Fragment","PageHeaderTitle","setTimeout","CreateGroupModal","asyncGroupNameValidation","validateGroupName","isValid","createGroupSchema","helperText","threshold","nameValidator","input","document","querySelector","focus","handleCreateGroup","createGroup","handleAddDevicesToNewGroup","DeleteGroupModal","modalState","deleteGroupById","columns","GroupTable","handleCreateModal","handleRenameModal","handleDeleteModal","fetchGroups","buildRows","Devices","DevicesImageInfo","systems","devicesImageInfo","GeneralTable","hasValidImage","validateImage","ImageID","UpdateValid","hasUpdate","some","UUID","find","emptyFilterState","RenameGroupModal","initialValues","updateGroupById","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","Flex","justifyContent","default","Empty","primaryAction","text","AddSystemsToGroupModal","closeModal","setDeviceIds","position","isDropdownOpen","setIsDropdownOpen","isAddModalOpen","removeModal","getGroupById","getDeviceIds","search","stateToUrlSearch","width","FlexItem","Dropdown","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","newState","dropdownItems","DropdownItem","canUpdateSelectedDevices","DevicesView","total","removeDevicesFromGroup","TooltipSelectorRef","reference","getElementById","createRows","image_set","image_build_iso_url","imageStatus","Images","isoURL","latestImageID","DateFormat","UpdatedAt","StatusLabel","ImageTable","openCreateWizard","edgeImageSetsReducer","Count","undefined","actionsArray","href","rel","target","clearFilters","pagination","page","perPage","CreateImageWizard","UpdateImageWizard","isCreateWizardOpen","setIsCreateWizardOpen","UpdateWizard","setUpdateWizard","ImageSetsTable","updateImageID","RepoModal","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","onCancel","hasSuccess","fetchData"],"sourceRoot":""}