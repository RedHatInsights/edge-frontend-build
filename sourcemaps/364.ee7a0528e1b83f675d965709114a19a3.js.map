{"version":3,"file":"js/364.775edba78e2854050b78.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManager/UpdateImageWizard.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageVersionsTab.js","webpack:///./src/Routes/ImageManagerDetail/ImagePackagesTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTabs.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/utils.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  review,\n  packages,\n  updateDetails,\n  registration,\n  activationKey,\n  repositories,\n  imageOutput,\n  customPackages,\n  additionalCustomPackages,\n} from './steps';\nimport { Bullseye, Backdrop, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { useDispatch } from 'react-redux';\nimport { getImageById, createImage } from '../../api/images';\nimport { useFeatureFlags, getReleases } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\n\nimport { temporaryReleases, supportedReleases } from '../../constants';\nimport useApi from '../../hooks/useApi';\n\nconst UpdateImage = ({\n  navigateBack,\n  updateImageID,\n  reload,\n  notificationProp,\n  locationProp,\n}) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  const [response] = useApi({\n    api: getImageById,\n    id: updateImageID,\n  });\n\n  const { data, isLoading } = response;\n\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const imageWizardFeatureFlag = useFeatureFlags(\n    'edge-management.image_wizard_ui'\n  );\n\n  const statusMessages = {\n    onSuccess: {\n      title: `Successfully started image update`,\n    },\n    onError: { title: 'Error', description: 'Failed to create image' },\n  };\n\n  return user && data && !isLoading ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          Id: data?.image?.ID,\n          name: data?.image?.Name,\n          version: data?.image?.Version + 1,\n          architecture: 'x86_64',\n          credentials: values.credentials\n            ? values.credentials\n            : data?.image?.Installer.SshKey,\n          username: values.username\n            ? values.username\n            : data?.image?.Installer.Username,\n        };\n\n        apiWithToast(\n          dispatch,\n          () => createImage(payload),\n          statusMessages,\n          notificationProp\n        );\n        closeAction();\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        imageID: data?.image.ID,\n        name: data?.image?.Name,\n        isUpdate: true,\n        description: data?.image?.Description,\n        credentials: data?.image?.Installer.SshKey,\n        username: data?.image?.Installer.Username,\n        version: data?.image?.Version,\n        activationKey: data?.image?.activationKey,\n        release: data?.image?.Distribution,\n        release_options: temporaryReleasesFlag\n          ? getReleases(data?.image?.Distribution, [\n              ...supportedReleases,\n              ...temporaryReleases,\n            ])\n          : getReleases(data?.image?.Distribution),\n        imageType: ['rhel-edge-commit'],\n        'selected-packages': data?.image?.Packages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n        'third-party-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'initial-custom-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'custom-packages': data?.image?.CustomPackages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n      }}\n      test=\"\"\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Update image',\n            },\n            showTitles: true,\n            title: `Update image: ${data?.image?.Name}`,\n            crossroads: [\n              'target-environment',\n              'release',\n              'imageType',\n              'third-party-repositories',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              updateDetails,\n              imageOutput,\n              registration,\n              repositories(imageWizardFeatureFlag, locationProp),\n              packages,\n              additionalCustomPackages,\n              review,\n              customPackages,\n              activationKey,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  updateImageID: PropTypes.number,\n  reload: PropTypes.func,\n  notificationProp: PropTypes.object,\n  locationProp: PropTypes.object,\n};\nUpdateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default UpdateImage;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useNavigate } from 'react-router-dom';\nimport { createLink } from '../../utils';\nimport PropTypes from 'prop-types';\n\nimport {\n  Text,\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Tooltip,\n} from '@patternfly/react-core';\nimport Status from '../../components/Status';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { getBaseURLFromPrefixAndName } from './utils';\n\nconst dropdownItems = (data, imageVersion, isoURL, openUpdateWizard) => {\n  const imageData = imageVersion ? imageVersion : data?.LastImageDetails;\n\n  const actionsArray = [];\n\n  imageData?.image?.ID &&\n    actionsArray.push(\n      <DropdownItem\n        key=\"create-new-version-button\"\n        component=\"button\"\n        onClick={() => openUpdateWizard(imageData?.image?.ID)}\n      >\n        Create new version\n      </DropdownItem>\n    );\n\n  isoURL &&\n    actionsArray.push(\n      <DropdownItem key=\"download-button\" component=\"button\">\n        <Text\n          className=\"force-text-black remove-underline\"\n          component=\"a\"\n          href={isoURL}\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Download installable .iso for newest image\n        </Text>\n      </DropdownItem>\n    );\n  return actionsArray;\n};\n\nconst DetailsHead = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  navigateProp,\n  imageData,\n  imageVersion,\n  openUpdateWizard,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [data, setData] = useState({});\n\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n\n  useEffect(() => {\n    setData(imageData?.data);\n  }, [imageData]);\n\n  const actionsLabel = 'Actions for image set details view';\n  const dropdownId = 'image-set-details-dropdown';\n  const baseURL = getBaseURLFromPrefixAndName(\n    `edge${paths.manageImages}`,\n    pathPrefix,\n    urlName\n  );\n\n  return (\n    <>\n      {!imageData.isLoading && imageData.hasError ? (\n        <Breadcrumb>\n          <BreadcrumbItem>\n            {createLink({\n              pathname: baseURL,\n              linkText: 'Back to Manage Images',\n              history,\n              navigate,\n            })}\n          </BreadcrumbItem>\n        </Breadcrumb>\n      ) : (\n        <>\n          <Breadcrumb>\n            <BreadcrumbItem>\n              {createLink({\n                pathname: baseURL,\n                linkText: 'Manage Images',\n                history,\n                navigate,\n              })}\n            </BreadcrumbItem>\n            {imageVersion ? (\n              <BreadcrumbItem>\n                {createLink({\n                  pathname: `${baseURL}/${data?.ImageSet?.ID}`,\n                  linkText: data?.ImageSet?.Name,\n                  history,\n                  navigate,\n                })}\n              </BreadcrumbItem>\n            ) : (\n              <BreadcrumbItem isActive>\n                {data?.ImageSet?.Name || <Skeleton width=\"100px\" />}\n              </BreadcrumbItem>\n            )}\n            {imageVersion && (\n              <BreadcrumbItem isActive>\n                {imageVersion?.image?.Version}\n              </BreadcrumbItem>\n            )}\n          </Breadcrumb>\n\n          <TextContent>\n            <Split>\n              <SplitItem>\n                <TextList component=\"dl\">\n                  <TextListItem\n                    component=\"h1\"\n                    className=\"grid-align-center pf-u-mb-0\"\n                  >\n                    {data?.ImageSet?.Name || <Skeleton width=\"150px\" />}\n                  </TextListItem>\n                  <TextListItem className=\"pf-u-pt-sm\" component=\"dd\">\n                    {imageVersion?.image?.Status ||\n                    data?.LastImageDetails?.image?.Status ? (\n                      <Status\n                        type={\n                          imageVersion\n                            ? imageVersion?.image?.Status.toLowerCase()\n                            : data?.LastImageDetails?.image?.Status.toLowerCase()\n                        }\n                      />\n                    ) : (\n                      <Skeleton width=\"100px\" />\n                    )}\n                  </TextListItem>\n                  {imageVersion?.image?.UpdatedAt ||\n                  data?.LastImageDetails?.image?.UpdatedAt ? (\n                    <TextListItem component=\"p\">\n                      {`Last updated `}\n                      <DateFormat\n                        date={\n                          imageVersion\n                            ? imageVersion?.image?.UpdatedAt\n                            : data?.LastImageDetails?.image?.UpdatedAt\n                        }\n                      />\n                    </TextListItem>\n                  ) : (\n                    <Skeleton width=\"200px\" />\n                  )}\n                </TextList>\n              </SplitItem>\n              <SplitItem isFilled></SplitItem>\n              <SplitItem>\n                <Dropdown\n                  position={DropdownPosition.right}\n                  toggle={\n                    <DropdownToggle\n                      id={dropdownId}\n                      toggleIndicator={CaretDownIcon}\n                      onToggle={(newState) => setIsOpen(newState)}\n                      isDisabled={\n                        (imageVersion\n                          ? imageVersion?.image?.Status\n                          : data?.LastImageDetails?.image.Status) ===\n                          'BUILDING' || false\n                      }\n                      aria-label={actionsLabel}\n                    >\n                      <Tooltip\n                        content={actionsLabel}\n                        reference={() => document.getElementById(dropdownId)}\n                      />\n                      Actions\n                    </DropdownToggle>\n                  }\n                  isOpen={isOpen}\n                  dropdownItems={dropdownItems(\n                    data,\n                    imageVersion,\n                    data?.ImageBuildIsoURL,\n                    openUpdateWizard\n                  )}\n                />\n              </SplitItem>\n            </Split>\n          </TextContent>\n        </>\n      )}\n    </>\n  );\n};\n\nDetailsHead.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n  openUpdateWizard: PropTypes.func,\n};\n\nexport default DetailsHead;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n  Text,\n  TextVariants,\n  Grid,\n  GridItem,\n  ClipboardCopy,\n  Skeleton,\n} from '@patternfly/react-core';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { createLink } from '../../utils';\nimport { getBaseURLFromPrefixAndName } from './utils';\nimport { useHistory, useNavigate } from 'react-router-dom';\n\nconst ImageDetailTab = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  navigateProp,\n  imageData,\n  imageVersion,\n}) => {\n  const [data, setData] = useState({});\n  const baseURL = getBaseURLFromPrefixAndName(\n    `edge${paths.manageImages}`,\n    pathPrefix,\n    urlName\n  );\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n\n  useEffect(() => {\n    imageVersion\n      ? setData(imageVersion)\n      : setData(imageData?.data?.LastImageDetails);\n  }, [imageData, imageVersion]);\n\n  const createSkeleton = (rows) =>\n    [...Array(rows * 2)].map((_, key) => <Skeleton width=\"180px\" key={key} />);\n\n  const dateFormat = () => <DateFormat date={data?.image?.['CreatedAt']} />;\n\n  const detailsMapper = {\n    Version: 'Version',\n    Created: () => dateFormat(),\n    'Type(s)': () =>\n      data?.image?.['OutputTypes']?.map((outputType, index) => (\n        <div key={index}>{outputType}</div>\n      )),\n    Release: () => distributionMapper?.[data?.image?.['Distribution']],\n    //Size: 'Size',\n    Description: 'Description',\n  };\n  const activationKeyMapper = {\n    'Activation Key': () => data?.image?.activationKey,\n  };\n  const userInfoMapper = {\n    Username: () => data?.image?.Installer?.Username,\n    'SSH key': () => data?.image?.Installer?.SshKey,\n  };\n  const renderAdditionalPackageLink = () => {\n    return createLink({\n      pathname: `${baseURL}/${data?.image?.ImageSetID}/versions/${data?.image?.ID}/packages/additional`,\n      linkText: data?.additional_packages,\n      history,\n      navigate,\n    });\n  };\n\n  const renderTotalPackageLink = () => {\n    return createLink({\n      pathname: `${baseURL}/${data?.image?.ImageSetID}/versions/${data?.image?.ID}/packages/all`,\n      linkText: data?.packages,\n      history,\n      navigate,\n    });\n  };\n\n  const packageMapper = {\n    'Total additional packages': renderAdditionalPackageLink,\n    'Total packages': renderTotalPackageLink,\n  };\n\n  const packageDiffMapper = {\n    Added: () => data?.update_added,\n    Removed: () => data?.update_removed,\n    Updated: () => data?.update_updated,\n  };\n\n  if (data?.image?.Installer?.Checksum) {\n    detailsMapper['SHA-256 checksum'] = () => data?.image?.Installer?.Checksum;\n  }\n\n  if (data?.image?.Commit?.OSTreeCommit) {\n    detailsMapper['Ostree commit hash'] = () =>\n      data?.image?.Commit?.OSTreeCommit;\n  }\n\n  const buildTextList = (labelsToValueMapper) =>\n    data\n      ? Object.entries(labelsToValueMapper).map(([label, value], index) => {\n          return (\n            <Fragment key={index}>\n              <TextListItem\n                className=\"details-label\"\n                component={TextListItemVariants.dt}\n              >\n                {label}\n              </TextListItem>\n              {label === 'SHA-256 checksum' ||\n              label === 'Ostree commit hash' ||\n              (label === 'SSH key' && value()) ? (\n                <TextListItem component={TextListItemVariants.dd}>\n                  <ClipboardCopy\n                    hoverTip=\"Copy\"\n                    clickTip=\"Copied\"\n                    variant=\"expansion\"\n                    className=\"pf-u-text-break-word\"\n                    id={`${label\n                      .replace(/\\s+/g, '-')\n                      .toLowerCase()}-clipboard-copy`}\n                  >\n                    {typeof value === 'function'\n                      ? value() || 'Unavailable'\n                      : data?.image?.[value] || 'Unavailable'}\n                  </ClipboardCopy>\n                </TextListItem>\n              ) : (\n                <TextListItem\n                  className=\"pf-u-text-break-word\"\n                  component={TextListItemVariants.dd}\n                >\n                  {typeof value === 'function'\n                    ? value() === 0\n                      ? 0\n                      : value() || 'Unavailable'\n                    : data?.image?.[value] || 'Unavailable'}\n                </TextListItem>\n              )}\n            </Fragment>\n          );\n        })\n      : null;\n\n  return (\n    <TextContent className=\"pf-u-ml-lg pf-u-mt-md\">\n      <Grid span={12}>\n        <GridItem span={5}>\n          <Text component={TextVariants.h2}>\n            {imageVersion ? 'Details' : 'Most recent image'}\n          </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(detailsMapper) || createSkeleton(6)}\n          </TextList>\n          <Text component={TextVariants.h2}>User information </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(userInfoMapper) || createSkeleton(2)}\n          </TextList>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(activationKeyMapper) || createSkeleton(2)}\n          </TextList>\n        </GridItem>\n        <GridItem span={1} />\n        <GridItem span={6}>\n          <Text component={TextVariants.h2}>Packages </Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(packageMapper) || createSkeleton(3)}\n          </TextList>\n          <Text component={TextVariants.h2}>Changes from previous version</Text>\n          <TextList component={TextListVariants.dl}>\n            {buildTextList(packageDiffMapper) || createSkeleton(3)}\n          </TextList>\n        </GridItem>\n      </Grid>\n    </TextContent>\n  );\n};\n\nImageDetailTab.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n};\n\nexport default ImageDetailTab;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { useHistory, useNavigate } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport Status from '../../components/Status';\nimport { imageTypeMapper } from '../../constants';\nimport { getImageSetViewVersions } from '../../api/images';\nimport { cellWidth } from '@patternfly/react-table';\nimport { createLink, truncateString } from '../../utils';\nimport useApi from '../../hooks/useApi';\nimport { getBaseURLFromPrefixAndName } from './utils';\n\nconst defaultFilters = [\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Version',\n    type: 'version',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Output',\n    type: 'image_type',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Ostree commit hash',\n    type: 'ostree_commit_hash',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Created',\n    type: 'created_at',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(35)],\n  },\n];\n\nconst createRows = (\n  data,\n  imageSetId,\n  latestImageVersion,\n  pathPrefix,\n  urlName,\n  history,\n  navigate\n) => {\n  const baseURL = getBaseURLFromPrefixAndName(\n    `edge${paths.manageImages}`,\n    pathPrefix,\n    urlName\n  );\n\n  return data?.map((image) => ({\n    rowInfo: {\n      id: image?.ID,\n      imageStatus: image?.Status,\n      isoURL: image?.ImageBuildIsoURL,\n      latestImageVersion,\n      currentImageVersion: image.Version,\n    },\n    noApiSortFilter: [\n      image?.Version,\n      imageTypeMapper[image?.ImageType],\n      image?.CreatedAt,\n      image?.Status,\n    ],\n    cells: [\n      {\n        title: createLink({\n          pathname: `${baseURL}/${imageSetId}/versions/${image.ID}/details`,\n          linkText: image?.Version,\n          history,\n          navigate,\n        }),\n      },\n      {\n        title: imageTypeMapper[image?.ImageType],\n      },\n      {\n        title: image?.CommitCheckSum ? (\n          <Tooltip content={<div>{image.CommitCheckSum}</div>}>\n            <span>{truncateString(image.CommitCheckSum, 5, 5)}</span>\n          </Tooltip>\n        ) : (\n          <Text>Unavailable</Text>\n        ),\n      },\n      {\n        title: <DateFormat date={image?.CreatedAt} />,\n      },\n      {\n        title: <Status type={image?.Status.toLowerCase()} />,\n      },\n    ],\n  }));\n};\n\nconst ImageVersionsTab = ({\n  pathPrefix,\n  urlName,\n  navigateProp,\n  historyProp,\n  locationProp,\n  imageData,\n  openUpdateWizard,\n}) => {\n  const imageSetID = imageData?.data?.ImageSet?.ID;\n  const latestImageVersion = imageData?.data?.ImageSet?.Version;\n\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n\n  const [response, fetchImageSetVersions] = useApi({\n    api: ({ query }) =>\n      getImageSetViewVersions({\n        imageSetID: imageSetID,\n        query,\n      }),\n    tableReload: true,\n  });\n\n  const { data, isLoading, hasError } = response;\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: 'Download',\n        onClick: (_event, _rowId, rowData) => {\n          window.open(rowData.rowInfo.isoURL);\n        },\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo.id);\n        },\n        isDisabled:\n          rowData?.rowInfo?.latestImageVersion !==\n          rowData?.rowInfo?.currentImageVersion,\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <GeneralTable\n        navigateProp={navigateProp}\n        historyProp={historyProp}\n        locationProp={locationProp}\n        apiFilterSort={true}\n        isUseApi={true}\n        filters={defaultFilters}\n        loadTableData={fetchImageSetVersions}\n        tableData={{\n          count: data?.count,\n          data: data?.data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columnNames}\n        rows={createRows(\n          data?.data,\n          imageSetID,\n          latestImageVersion,\n          pathPrefix,\n          urlName,\n          history,\n          navigate\n        )}\n        actionResolver={actionResolver}\n        areActionsDisabled={areActionsDisabled}\n        defaultSort={{ index: 3, direction: 'desc' }}\n      />\n    </section>\n  );\n};\nImageVersionsTab.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  navigateProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  imageSetID: PropTypes.number,\n  createRows: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n};\n\nexport default ImageVersionsTab;\n","import React, { useState, useEffect } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { cellWidth } from '@patternfly/react-table';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport Empty from '../../components/Empty';\nimport { restorePrefixURL } from './utils';\n\nconst defaultFilters = [{ label: 'Name', type: 'text' }];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Release',\n    type: 'release',\n    sort: false,\n    columnTransforms: [cellWidth(35)],\n  },\n  //{ title: 'Type', type: 'type', sort: false, columnTransforms: [cellWidth(35)] },\n];\n\nconst createRows = ({\n  distribution,\n  installedPackages,\n  addedPackages,\n  showAll,\n}) => {\n  const rowData =\n    showAll === 0\n      ? installedPackages.filter(\n          (pack) =>\n            addedPackages?.filter((image) => pack.name === image.Name).length >\n            0\n        )\n      : installedPackages;\n  return rowData.map((packageData) => ({\n    noApiSortFilter: [\n      packageData?.name,\n      packageData?.version,\n      packageData?.release,\n      //packageData?.type,\n    ],\n    cells: [\n      packageData?.name,\n      packageData?.version,\n      packageData?.release,\n      //packageData?.type,\n      {\n        title: (\n          <a\n            href={`https://access.redhat.com/downloads/content/rhel---${distribution}/x86_64/7416/${packageData?.name}/${packageData?.version}-${packageData?.release}/${packageData?.arch}/fd431d51/package`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Button\n              variant=\"link\"\n              isSmall\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n            >\n              More information\n            </Button>\n          </a>\n        ),\n      },\n    ],\n  }));\n};\n\nconst indexToTabs = {\n  0: 'additional',\n  1: 'all',\n};\n\nconst tabsToIndex = {\n  additional: 0,\n  all: 1,\n};\n\nconst ImagePackagesTab = ({\n  pathPrefix,\n  historyProp,\n  locationProp,\n  navigateProp,\n  imageVersion,\n}) => {\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname } = locationProp ? locationProp() : useLocation();\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  let currentPathName = pathname;\n  if (pathPrefix && pathname.startsWith(pathPrefix)) {\n    // remove the prefix from pathname\n    currentPathName = pathname.slice(pathPrefix.length);\n  }\n\n  const splitUrl = currentPathName.split('/');\n  const defaultToggle = splitUrl.length === 7 ? tabsToIndex[splitUrl[6]] : 1;\n  // Distribution examples would be: rhel-86, rhel-90, and rhel-100\n  const distribution = imageVersion?.image?.Distribution?.split('-')[1].slice(\n    0,\n    -1\n  );\n\n  const [packageData, setPackageData] = useState({});\n  const [toggleTable, setToggleTable] = useState(defaultToggle);\n\n  useEffect(() => {\n    setPackageData(imageVersion);\n  }, [imageVersion]);\n\n  useEffect(() => {\n    splitUrl[5] !== indexToTabs[toggleTable] && setToggleTable(defaultToggle);\n  }, [splitUrl]);\n\n  const handleToggleTable = (toggleIndex) => {\n    const currentTab = splitUrl[5]?.toLowerCase();\n    setToggleTable(toggleIndex);\n    if (currentTab === 'packages') {\n      if (splitUrl.length === 7) {\n        splitUrl[6] = indexToTabs[toggleIndex];\n      } else {\n        splitUrl.push(indexToTabs[toggleIndex]);\n      }\n      const url = restorePrefixURL(splitUrl.join('/'), pathPrefix);\n      if (navigateProp) {\n        navigate(url);\n      } else {\n        history.push(url);\n      }\n    }\n  };\n\n  return imageVersion?.image?.Commit?.Status === 'SUCCESS' ? (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <GeneralTable\n        navigateProp={navigateProp}\n        historyProp={historyProp}\n        locationProp={locationProp}\n        apiFilterSort={false}\n        filters={defaultFilters}\n        tableData={{\n          count:\n            toggleTable === 0\n              ? packageData?.additional_packages\n              : packageData?.packages,\n          isLoading: false,\n          hasError: false,\n        }}\n        columnNames={columnNames}\n        rows={\n          packageData?.image?.Commit?.InstalledPackages\n            ? createRows({\n                distribution: distribution,\n                installedPackages:\n                  packageData?.image?.Commit?.InstalledPackages,\n                addedPackages: packageData?.image?.Packages,\n                showAll: toggleTable,\n              })\n            : []\n        }\n        actionResolver={() => []}\n        areActionsDisabled={() => true}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        toggleButton={[\n          { title: 'Additional', key: 0 },\n          { title: 'All', key: 1 },\n        ]}\n        toggleAction={handleToggleTable}\n        toggleState={toggleTable}\n        emptyFilterState={{\n          icon: 'search',\n          title: 'No packages to display',\n        }}\n      />\n    </section>\n  ) : (\n    <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n      <Empty\n        bgColor=\"white\"\n        title=\"Package data currently unavailable\"\n        body=\"Packages will be displayed as soon as the image is finished being built.\"\n        primaryAction={null}\n        secondaryActions={[]}\n      />\n    </section>\n  );\n};\n\nImagePackagesTab.propTypes = {\n  pathPrefix: PropTypes.string,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  imageVersion: PropTypes.object,\n};\n\nexport default ImagePackagesTab;\n","import React, { useState, useEffect } from 'react';\nimport { Tabs, Tab, TabTitleText, Skeleton } from '@patternfly/react-core';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\n\nimport ImageDetailTab from './ImageDetailTab';\nimport ImageVersionTab from './ImageVersionsTab';\nimport ImagePackagesTab from './ImagePackagesTab';\nimport PropTypes from 'prop-types';\nimport EmptyState from '../../components/Empty';\n\nimport { mapUrlToObj } from '../../utils';\nimport { restorePrefixURL } from './utils';\n\n// conditional render for same index\nconst tabs = {\n  details: 0,\n  packages: 1,\n  versions: 1,\n};\n\nconst ImageDetailTabs = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  locationProp,\n  navigateProp,\n  imageData,\n  openUpdateWizard,\n  imageVersion,\n  isLoading,\n}) => {\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname } = locationProp ? locationProp() : useLocation();\n  let currentPathName = pathname;\n  if (pathPrefix && pathname.startsWith(pathPrefix)) {\n    // remove the prefix from pathname\n    currentPathName = pathname.slice(pathPrefix.length);\n  }\n\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const [activeTabKey, setActiveTabkey] = useState(tabs.details);\n  const activeTab = imageVersion ? 'imageTab' : 'imageSetTab';\n\n  const keys = [\n    'baseURL',\n    'imageSetVersion',\n    'imageSetTab',\n    'imageVersion',\n    'imageTab',\n    'packagesToggle',\n  ];\n  const imageUrlMapper = mapUrlToObj(currentPathName, keys);\n\n  const handleTabClick = (_event, tabIndex) => {\n    const selectedTab =\n      tabIndex === 0 ? 'details' : imageVersion ? 'packages' : 'versions';\n\n    imageUrlMapper[activeTab] = selectedTab;\n\n    const url = restorePrefixURL(imageUrlMapper.buildUrl(), pathPrefix);\n\n    if (navigateProp) {\n      navigate(url);\n    } else {\n      history.push(url);\n    }\n\n    setActiveTabkey(tabIndex);\n  };\n\n  useEffect(() => {\n    imageUrlMapper['imageTab']\n      ? setActiveTabkey(tabs[imageUrlMapper['imageTab']])\n      : setActiveTabkey(tabs[imageUrlMapper['imageSetTab']]);\n  }, [pathname]);\n\n  return (\n    <>\n      {!imageData.isLoading && imageData.hasError ? (\n        <EmptyState\n          icon=\"question\"\n          title=\"Image not found\"\n          body=\"Please check you have the correct link with the correct image Id.\"\n          primaryAction={{\n            text: 'Back to Manage Images',\n            href: paths.manageImages,\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <div className=\"edge-c-device--detail add-100vh\">\n          <Tabs\n            className=\"pf-u-ml-md\"\n            activeKey={activeTabKey}\n            onSelect={handleTabClick}\n          >\n            <Tab\n              eventKey={tabs.details}\n              title={<TabTitleText>Details</TabTitleText>}\n            >\n              <ImageDetailTab\n                pathPrefix={pathPrefix}\n                urlName={urlName}\n                historyProp={historyProp}\n                navigateProp={navigateProp}\n                imageData={imageData}\n                imageVersion={imageVersion}\n              />\n            </Tab>\n            {isLoading ? (\n              <Tab\n                title={\n                  <TabTitleText>\n                    <Skeleton width=\"75px\" />\n                  </TabTitleText>\n                }\n              ></Tab>\n            ) : imageVersion ? (\n              <Tab\n                eventKey={tabs.packages}\n                title={<TabTitleText>Packages</TabTitleText>}\n              >\n                <ImagePackagesTab\n                  pathPrefix={pathPrefix}\n                  urlName={urlName}\n                  navigateProp={navigateProp}\n                  historyProp={historyProp}\n                  locationProp={locationProp}\n                  imageVersion={imageVersion}\n                />\n              </Tab>\n            ) : (\n              <Tab\n                eventKey={tabs.versions}\n                title={<TabTitleText>Versions</TabTitleText>}\n              >\n                <ImageVersionTab\n                  pathPrefix={pathPrefix}\n                  urlName={urlName}\n                  navigateProp={navigateProp}\n                  historyProp={historyProp}\n                  locationProp={locationProp}\n                  imageData={imageData}\n                  openUpdateWizard={openUpdateWizard}\n                />\n              </Tab>\n            )}\n          </Tabs>\n        </div>\n      )}\n    </>\n  );\n};\n\nImageDetailTabs.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  imageData: PropTypes.object,\n  imageVersion: PropTypes.object,\n  openUpdateWizard: PropTypes.func,\n  isLoading: PropTypes.bool,\n};\n\nexport default ImageDetailTabs;\n","import React, { Fragment, Suspense, useEffect, useState } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Stack, StackItem, Spinner, Bullseye } from '@patternfly/react-core';\nimport {\n  useParams,\n  useHistory,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport DetailsHead from './DetailsHeader';\nimport ImageDetailTabs from './ImageDetailTabs';\nimport UpdateImageWizard from '../ImageManager/UpdateImageWizard';\nimport useApi from '../../hooks/useApi';\nimport { getImageSetView } from '../../api/images';\nimport { stateToUrlSearch } from '../../utils';\n\nconst ImageDetail = ({\n  pathPrefix,\n  urlName,\n  paramsProp,\n  historyProp,\n  locationProp,\n  navigateProp,\n  notificationProp,\n}) => {\n  const { imageId, imageVersionId } = paramsProp\n    ? paramsProp()\n    : useParams\n    ? useParams()\n    : null;\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const { pathname, search } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const [updateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    updateId: null,\n  });\n  const [imageVersion, setImageVersion] = useState(null);\n\n  const [response, fetchImageSetDetails] = useApi({\n    api: getImageSetView,\n    id: imageVersionId ? `${imageId}/versions/${imageVersionId}` : `${imageId}`,\n    tableReload: true,\n  });\n\n  const { data, isLoading } = response;\n\n  const updateHistoryObj = {\n    pathname,\n    search: stateToUrlSearch('update_image=true', true, search),\n  };\n\n  const openUpdateWizard = (id) => {\n    if (navigateProp) {\n      navigate({ ...updateHistoryObj, replace: true });\n    } else {\n      history.push({ ...updateHistoryObj });\n    }\n    setUpdateWizard((prevState) => ({\n      ...prevState,\n      isOpen: !prevState.isLoading,\n      updateId: id,\n    }));\n  };\n\n  useEffect(() => {\n    imageVersionId\n      ? setImageVersion(data?.ImageDetails)\n      : setImageVersion(null);\n  }, [response, imageVersionId]);\n\n  useEffect(() => {\n    fetchImageSetDetails();\n  }, [imageId, imageVersionId]);\n\n  const reload = async () => {\n    await fetchImageSetDetails();\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Stack hasGutter>\n          <StackItem>\n            <DetailsHead\n              pathPrefix={pathPrefix}\n              urlName={urlName}\n              historyProp={historyProp}\n              navigateProp={navigateProp}\n              imageData={response}\n              imageVersion={imageVersion}\n              openUpdateWizard={openUpdateWizard}\n            />\n          </StackItem>\n        </Stack>\n      </PageHeader>\n      <ImageDetailTabs\n        pathPrefix={pathPrefix}\n        urlName={urlName}\n        historyProp={historyProp}\n        locationProp={locationProp}\n        navigateProp={navigateProp}\n        imageData={response}\n        urlParam={imageId}\n        imageVersion={imageVersion}\n        openUpdateWizard={openUpdateWizard}\n        isLoading={isLoading}\n      />\n      {updateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              if (navigateProp) {\n                navigate({ pathname });\n              } else {\n                history.push({ pathname });\n              }\n              setUpdateWizard((prevState) => ({ ...prevState, isOpen: false }));\n            }}\n            updateImageID={updateWizard.updateId}\n            reload={reload}\n            notificationProp={notificationProp}\n            locationProp={locationProp}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nImageDetail.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  paramsProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  notificationProp: PropTypes.object,\n};\n\nexport default ImageDetail;\n","const getBaseURLFromPrefixAndName = (defaultBaseURL, pathPrefix, urlName) => {\n  let baseURL = defaultBaseURL;\n  if (pathPrefix || urlName) {\n    let urlNames = [];\n    if (pathPrefix) {\n      urlNames.push(pathPrefix);\n    }\n    if (urlName) {\n      urlNames.push(urlName);\n    }\n    baseURL = urlNames.join('/');\n  }\n  return baseURL;\n};\n\nconst restorePrefixURL = (url, pathPrefix) => {\n  const separator = '/';\n  if (!pathPrefix || url.startsWith(pathPrefix)) {\n    return url;\n  }\n  if (pathPrefix.endsWith(separator) || url.startsWith(separator)) {\n    return [pathPrefix, url].join('');\n  }\n  return [pathPrefix, url].join(separator);\n};\n\nexport { getBaseURLFromPrefixAndName, restorePrefixURL };\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n"],"names":["UpdateImage","navigateBack","updateImageID","reload","notificationProp","locationProp","useState","user","setUser","dispatch","useDispatch","closeAction","useEffect","insights","chrome","auth","getUser","then","result","undefined","useApi","api","getImageById","id","response","data","isLoading","temporaryReleasesFlag","useFeatureFlags","imageWizardFeatureFlag","statusMessages","onSuccess","title","onError","description","onClose","customComponentMapper","review","ReviewStep","onSubmit","values","setIsSaving","payload","Id","image","ID","name","Name","version","Version","architecture","credentials","Installer","SshKey","username","Username","apiWithToast","createImage","defaultArch","initialValues","imageID","isUpdate","Description","activationKey","release","Distribution","release_options","getReleases","supportedReleases","temporaryReleases","imageType","Packages","map","pkg","ThirdPartyRepositories","repo","CustomPackages","test","schema","fields","component","componentTypes","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","updateDetails","imageOutput","registration","repositories","packages","additionalCustomPackages","customPackages","isSVG","diameter","propTypes","PropTypes","defaultProps","dropdownItems","imageVersion","isoURL","openUpdateWizard","imageData","LastImageDetails","actionsArray","push","DropdownItem","key","onClick","Text","href","rel","target","DetailsHead","pathPrefix","urlName","historyProp","navigateProp","isOpen","setIsOpen","setData","history","useHistory","navigate","useNavigate","actionsLabel","dropdownId","baseURL","getBaseURLFromPrefixAndName","paths","hasError","Breadcrumb","BreadcrumbItem","createLink","pathname","linkText","ImageSet","isActive","Skeleton","width","TextContent","Split","SplitItem","TextList","TextListItem","T","Status","type","toLowerCase","UpdatedAt","DateFormat","date","isFilled","Dropdown","position","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","onToggle","newState","isDisabled","Tooltip","content","reference","document","getElementById","ImageBuildIsoURL","ImageDetailTab","createSkeleton","rows","Array","_","detailsMapper","Created","outputType","index","Release","distributionMapper","activationKeyMapper","userInfoMapper","packageMapper","ImageSetID","additional_packages","packageDiffMapper","Added","update_added","Removed","update_removed","Updated","update_updated","Checksum","Commit","OSTreeCommit","buildTextList","labelsToValueMapper","Object","entries","label","value","Fragment","TextListItemVariants","ClipboardCopy","hoverTip","clickTip","variant","replace","Grid","span","GridItem","TextVariants","TextListVariants","defaultFilters","options","option","columnNames","sort","columnTransforms","cellWidth","createRows","imageSetId","latestImageVersion","rowInfo","imageStatus","currentImageVersion","noApiSortFilter","imageTypeMapper","ImageType","CreatedAt","cells","CommitCheckSum","truncateString","ImageVersionsTab","imageSetID","query","getImageSetViewVersions","tableReload","fetchImageSetVersions","GeneralTable","apiFilterSort","isUseApi","filters","loadTableData","tableData","count","actionResolver","rowData","_event","_rowId","window","open","areActionsDisabled","defaultSort","direction","urlParam","distribution","installedPackages","addedPackages","showAll","filter","pack","length","packageData","arch","Button","isSmall","icon","iconPosition","indexToTabs","tabsToIndex","additional","all","ImagePackagesTab","useLocation","currentPathName","startsWith","slice","splitUrl","split","defaultToggle","setPackageData","toggleTable","setToggleTable","InstalledPackages","toggleButton","toggleAction","toggleIndex","currentTab","url","restorePrefixURL","join","toggleState","emptyFilterState","Empty","bgColor","body","primaryAction","secondaryActions","tabs","details","versions","ImageDetailTabs","activeTabKey","setActiveTabkey","activeTab","imageUrlMapper","mapUrlToObj","text","Tabs","activeKey","onSelect","tabIndex","selectedTab","buildUrl","Tab","eventKey","TabTitleText","ImageDetail","paramsProp","useParams","imageId","imageVersionId","search","updateId","updateWizard","setUpdateWizard","setImageVersion","getImageSetView","fetchImageSetDetails","updateHistoryObj","stateToUrlSearch","prevState","ImageDetails","PageHeader","Stack","hasGutter","StackItem","Suspense","fallback","Bullseye","Spinner","UpdateImageWizard","defaultBaseURL","urlNames","endsWith","statusMapper","booting","Icon","iconMapper","color","colorMapper","labelColor","building","created","upToDate","success","passed","updateAvailable","updating","error","default","interrupted","unresponsive","errorWithExclamationCircle","getDeviceStatus","deviceStatus","isUpdateAvailable","dispatcherStatus","isLabel","toolTipContent","isLink","prototype","hasOwnProperty","call","Label","style","textDecoration","cursor","setIsLoading","setHasError","apiFunc","setAPIFunc","hasSuccess","fetchData","addNotification"],"sourceRoot":""}