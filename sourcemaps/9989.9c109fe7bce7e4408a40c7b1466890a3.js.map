{"version":3,"file":"js/9989.1656354945369.866c0437e2885e879a24.js","mappings":"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","sources":["webpack:///./src/api/devices/index.js","webpack:///./src/api/images/index.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/edgeImageSets.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/imageSetDetail.js","webpack:///./src/store/edgeImagePackages.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/deviceTable.js"],"sourcesContent":["import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/devices/${id}`);\n  } catch (err) {\n    // temp error solution\n    console.log('');\n  }\n};\n\nexport const updateDeviceLatestImage = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","import { EDGE_API, IMAGE_BUILDER_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets?${q}`);\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  running: {\n    text: 'Running',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nconst Status = ({\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p>{text}</p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_SETS } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImageSetsPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImageSetsFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImageSetsRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_SETS}_PENDING`]: loadEdgeImageSetsPending,\n    [`${LOAD_EDGE_IMAGE_SETS}_FULFILLED`]: loadEdgeImageSetsFulfilled,\n    [`${LOAD_EDGE_IMAGE_SETS}_REJECTED`]: loadEdgeImageSetsRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_SET_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageSetDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageSetDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageSetDetailRejected = (state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_SET_DETAIL}_PENDING`]: loadImageSetDetailPending,\n    [`${LOAD_IMAGE_SET_DETAIL}_FULFILLED`]: loadImageSetDetailFulfilled,\n    [`${LOAD_IMAGE_SET_DETAIL}_REJECTED`]: loadImageSetDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_PACKAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagePackagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagePackagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagePackagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_PENDING`]: loadEdgeImagePackagesPending,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_FULFILLED`]: loadEdgeImagePackagesFulfilled,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_REJECTED`]: loadEdgeImagePackagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_TABLE } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceTablePending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceTableFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceTableRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_TABLE}_PENDING`]: loadDeviceTablePending,\n    [`${LOAD_DEVICE_TABLE}_FULFILLED`]: loadDeviceTableFulfilled,\n    [`${LOAD_DEVICE_TABLE}_REJECTED`]: loadDeviceTableRejected,\n  },\n  initialState\n);\n"],"names":["getInventory","query","q","getTableParams","instance","EDGE_API","getDeviceHasUpdate","id","console","log","updateDeviceLatestImage","payload","checkImageName","name","createImage","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","length","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","Name","URL","endpoint","getImageSet","limit","offset","sort_by","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","search","params","URLSearchParams","IMAGE_BUILDER_API","toString","getImageById","getImageSets","statusMapper","booting","text","Icon","iconMapper","color","colorMapper","labelColor","building","created","running","success","passed","updateAvailable","updating","error","default","interrupted","Status","type","isLabel","toolTipContent","className","Object","prototype","hasOwnProperty","call","Label","icon","Split","style","SplitItem","Tooltip","content","propTypes","PropTypes","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_EDGE_IMAGE_SETS","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","CREATE_NEW_IMAGE","POLLING_IMAGES","LOAD_DEVICE_TABLE","asyncActions","flatMap","a","keyBy","k","loadImageDetail","dispatch","imageId","createNewImage","callback","then","loadEdgeImageSets","addImageToPoll","loadImageSetDetail","urlParam","applyReducerHash","isLoading","hasError","data","state","groups","results","meta","threshold","devicesInfo","canariesInfo","SecureIcon","isSecure","props","LockIcon","LockOpenIcon","defaultProps","uuid","devices","_state"],"sourceRoot":""}