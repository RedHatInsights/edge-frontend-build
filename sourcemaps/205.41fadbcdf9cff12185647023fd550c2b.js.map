{"version":3,"file":"js/205.4f5a3b78a156eaade921.js","mappings":"29BASA,IAAMA,EAAoB,wBACpBC,EAAW,eAkCXC,EAAiB,SAACC,GAwBtB,OAvBcC,OAAOC,KAAKF,GAAGG,QAAO,SAACC,EAAKC,GACxC,IAAIC,OAAQC,EAeZ,MAbqB,YAAnB,OAAOP,EAAEK,KACiB,iBAAnBL,EAAEK,GAAMG,QACfR,EAAEK,GAAMG,OAAS,IAEjBF,EAAQN,EAAEK,GAAMF,QACd,SAACM,EAAWC,GAAZ,MACgB,KAAdD,EAAA,UAAsBJ,EAAtB,YAA8BK,GAA9B,UAAyCD,EAAzC,YAAsDJ,EAAtD,YAA8DK,KAChE,KAGA,CAAC,SAAU,UAAUC,UAArB,OAAqCX,EAAEK,MAAsB,KAAZL,EAAEK,KACrDC,EAAQ,GAAH,OAAMD,EAAN,YAAcL,EAAEK,UAENE,IAAVD,EACHF,EACQ,KAARA,EAAA,UACGE,GADH,UAEGF,EAFH,YAEUE,KACb,KA4GQM,EAAoB,WAAsC,6DAAP,GAAO,IAAnCC,MAAAA,OAAmC,MAA3B,IAA2B,MAAtBC,OAAAA,OAAsB,MAAb,EAAa,EACrE,OAAOC,EAAAA,GAAAA,IAAA,UACFlB,EADE,2BACkCgB,EADlC,mBACkDC,KAQ9CE,EAAe,SAAC,GAAW,IAATC,EAAS,EAATA,GAC7B,OAAOF,EAAAA,GAAAA,IAAA,UAAgBjB,EAAhB,mBAAmCmB,EAAnC,cAGIC,EAAkB,mCAAG,2FAC1BC,EAAS,IAAIC,EAAAA,cAASb,EAAW,qBAAsBQ,EAAAA,IAD7B,SAEnBM,QAAQC,IAAI,CACvBH,EAAOI,wBACLhB,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,CAAC,cACDA,OACAA,OACAA,OACAA,EACA,CACEiB,MAAO,EAAF,MACAC,EAAAA,EAAAA,IAAeC,EAAAA,MACfD,EAAAA,EAAAA,IAAe,CAAEE,eAAgB,CAAC,cAAgB,aAI3DR,EAAOI,wBACLhB,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,CAAC,cACDA,OACAA,OACAA,OACAA,EACA,CACEiB,MAAO,EAAF,MACAC,EAAAA,EAAAA,IAAeC,EAAAA,MACfD,EAAAA,EAAAA,IAAe,CAAEE,eAAgB,CAAC,cAAgB,aAI3DR,EAAOI,wBACLhB,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,CAAC,sBACDA,OACAA,OACAA,OACAA,EACA,CACEiB,MAAO,EAAF,MACAC,EAAAA,EAAAA,IAAeC,EAAAA,MACfD,EAAAA,EAAAA,IAAe,CAAEE,eAAgB,CAAC,cAAgB,aAI3DR,EAAOI,wBACLhB,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,OACAA,EACA,CAAC,gBACDA,OACAA,OACAA,OACAA,EACA,CACEiB,MAAO,EAAF,MACAC,EAAAA,EAAAA,IAAeC,EAAAA,MACfD,EAAAA,EAAAA,IAAe,CAAEE,eAAgB,CAAC,cAAgB,eAI1DC,MAAK,SAACC,GACP,OAAOA,EAAK1B,QAAO,SAACC,EAAKC,EAAMyB,GAC7B,cAAY1B,GAAZ,cAAkB2B,EAAAA,GAAoBD,GAASzB,EAAK2B,UACnD,OAtG2B,mFAAH,qDA0GlBC,EAAW,mCAAG,WAAOC,EAAcC,EAAcC,GAAnC,8EACnBC,EAAS,IAAIC,gBAAgB,CACjCJ,aAAAA,EACAC,aAAAA,EACAC,OAAAA,IAJuB,mBAMlBrB,EAAAA,EAAAA,IAAS,GAAD,OAAIlB,EAAJ,qBAAkCwC,EAAOE,cAN/B,2CAAH,0DASXC,EAAc,SAAC,GAWtB,IAVJC,EAUI,EAVJA,GACAC,EASI,EATJA,KACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,QACAV,EAKI,EALJA,aACAW,EAII,EAJJA,SACAC,EAGI,EAHJA,YACWC,EAEP,EAFJC,UACqBC,EACjB,EADJ,qBAEA,EAAkBF,GAAc,GAA3BC,GAAL,eACID,EAAWxC,OAAS,IACtByC,EAAY,uBAEd,IAAME,EAAU,CACdT,KAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAV,aAAcW,EACdI,UAAWA,EACXC,SAAUA,EAASE,KAAI,SAACC,GAAD,MAAW,CAAEX,KAAMW,EAAKX,SAC/CY,YAAaN,EACbO,OAAQ,CACNC,KAAMrB,GAERsB,UAAW,CACTX,SAAAA,EACAY,OAAQX,IAIRY,EAAW,GAAH,OAAM7D,EAAN,WAMZ,OAJI6C,EAAU,IACZgB,GAAY,IAAJ,OAAQlB,EAAR,YAGH1B,EAAAA,GAAAA,KAAc4C,EAAUR,IAcpBS,EAAqB,WAM7B,IALH5D,EAKG,uDALC,CACFa,MAAO,IACPC,OAAQ,EACR+C,QAAS,eAGLrC,EAAQzB,EAAeC,GAC7B,OAAOe,EAAAA,GAAAA,IAAA,UAAgBjB,EAAhB,uBAAuC0B,KAGnCsC,EAAqB,SAAC7C,GACjC,OAAOF,EAAAA,GAAAA,IAAA,UAAgBjB,EAAhB,mBAAmCmB,EAAnC,aAGI8C,EAAkB,mCAAG,WAAO9C,GAAP,0FAEjBF,EAAAA,GAAAA,IAAA,UAAgBjB,EAAhB,oBAAoCmB,IAFnB,wEAK9B+C,QAAQC,IAAI,IALkB,wDAAH,sDASlBC,EAAuB,mCAAG,WAAOf,GAAP,iFACxBpC,EAAAA,GAAAA,KAAA,UAAiBjB,EAAjB,YAAqCqD,GADb,mFAAH,sDAIvBgB,EAAuB,SAAClD,GACnC,OAAOF,EAAAA,GAAAA,IAAA,UAAgBjB,EAAhB,2BAA2CmB,EAA3C,YAGImD,EAAiB,SAAC1B,GAC7B,IAAMS,EAAU,CACdT,KAAAA,GAEF,OAAO3B,EAAAA,GAAAA,KAAA,UAAiBjB,EAAjB,0BAAmDqD,IAG/CkB,EAAwB,WACnC,OAAOtD,EAAAA,GAAAA,IAAA,UAAgBjB,EAAhB,qBAGIwE,EAAyB,SAACnB,GACrC,OAAOpC,EAAAA,GAAAA,KAAA,UAAiBjB,EAAjB,mBAA4C,CACjDyE,KAAMpB,EAAQT,KACd8B,IAAKrB,EAAQsB,WAIJC,EAAc,SAAC,GAOtB,IANJzD,EAMI,EANJA,GAMI,IALJjB,EAMMwB,EAAQzB,OADV,MALA,CACFc,MAAO,IACPC,OAAQ,EACR+C,QAAS,eAEP,GAEJ,OAAO9C,EAAAA,GAAAA,IAAA,UAAgBjB,EAAhB,uBAAuCmB,EAAvC,YAA6CO,KAWzCmD,EAAuB,SAACxB,GACnC,OAAOpC,EAAAA,GAAAA,IAAA,UAAgBjB,EAAhB,2BAA2CqD,EAAQlC,IAAM,CAC9DsD,KAAMpB,EAAQT,KACd8B,IAAKrB,EAAQsB,WAIJG,EAAyB,SAAC3D,GAAD,OACpCF,EAAAA,GAAAA,OAAA,UAAmBjB,EAAnB,2BAA8CmB,M,8KCpa1C4D,EAAuB,CAC3BC,WAAYC,EAAAA,GACZ3C,OAAQ4C,EAAAA,IAGJC,EAAQ,SAAC,GAAD,IACZC,EADY,EACZA,QACAC,EAFY,EAEZA,KACAC,EAHY,EAGZA,MACAC,EAJY,EAIZA,KACAC,EALY,EAKZA,cACAC,EANY,EAMZA,iBANY,OAQZ,kBAAC,IAAD,CAAYC,MAAO,CAAEC,gBAAiBP,GAAW,KAC9CC,GAAQ,kBAAC,IAAD,CAAgBA,KAAMN,EAAqBM,KACpD,kBAAC,IAAD,CAAOO,aAAa,KAAKC,KAAK,MAC3BP,GAEH,kBAAC,IAAD,KAAiBC,GAChBC,GACC,kBAAC,KAAD,CAAQM,QAASN,EAAcO,MAAOC,QAAQ,WAC3CR,EAAcS,MAGnB,kBAAC,IAAD,KACGR,EAAiBnC,KAAI,WAAiCtB,GAAjC,IAAGkE,EAAH,EAAGA,KAAMZ,EAAT,EAASA,MAAOa,EAAhB,EAAgBA,KAAML,EAAtB,EAAsBA,QAAtB,OACpB,kBAAC,KAAD,CACEM,UAAoB,SAATF,EAAkB,IAAM,SACnCG,KAAMF,EACNH,QAAQ,OACRM,IAAKtE,EACL8D,QAASA,GAERR,EACAa,GAAQ,kBAAC,KAAD,CAAqBI,UAAU,sBAOlDpB,EAAMqB,UAAY,CAChBpB,QAASqB,IAAAA,OACTpB,KAAMoB,IAAAA,OACNnB,MAAOmB,IAAAA,OACPlB,KAAMkB,IAAAA,OACNjB,cAAeiB,IAAAA,OACfhB,iBAAkBgB,IAAAA,OAGpB,W,yyBC3DA,IAAMC,EAAiB,SAAC,GAAuC,IAArCC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAe3C,OACE,oCACGF,EAAQjG,OAAS,EAChB,kBAACoG,EAAA,EAAD,CAAa,cAAY,yBAAyBP,UAAU,aAC1D,kBAACQ,EAAA,EAAD,CACEf,QAAQ,SACR,aAAW,2BACXgB,MAAM,QACNC,SAtBK,WACbJ,GAAY,SAACK,GAAD,cACPA,GADO,IAEVC,QAASD,EAAUC,aAoBbC,SAhBK,SAACC,EAAIC,GAClBT,EAAY,CACVU,SAAUD,EACVH,QAAQ,KAcFK,WAAYZ,EAASW,SACrBJ,OAAQP,EAASO,OACjBM,WAAY,kBAAC,KAAD,OAEXd,EAAQrD,KAAI,SAACoE,EAAQ1F,GAAT,OACX,kBAAC2F,EAAA,EAAD,CAAcrB,IAAKtE,EAAOxB,MAAOkH,EAAOE,aAI5C,OAKVlB,EAAeF,UAAY,CACzBG,QAASF,IAAAA,MACTG,SAAUH,IAAAA,OACVI,YAAaJ,IAAAA,MAGf,U,mnBCvCA,IAAMoB,EAAc,SAAC,GAA6C,IAA3CC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,gBAAiBC,EAAY,EAAZA,MAC9CC,EAAiBH,EAAaI,MAAK,SAACR,GAAD,OAAYA,EAAOE,QAAUI,KACtE,GAA4BG,EAAAA,EAAAA,WAAS,GAArC,eAAOhB,EAAP,KAAeiB,EAAf,KAEMC,EAAqB,kBAAM,SAAC7H,EAAO8H,GACvCP,GAAgB,SAACb,GAAc,MACvBqB,EAAgBrB,EAAUsB,WAC9B,SAACd,GAAD,OAAYA,EAAOE,QAAUK,EAAeL,SAExCa,EAAcvB,EAAUgB,MAC5B,SAACR,GAAD,OAAYA,EAAOE,QAAUK,EAAeL,SAExCc,EACoB,aAAxBT,EAAe/B,KACXuC,EAAYjI,MAAMgI,WAAU,SAACG,GAAD,OAAOA,EAAEC,SAAWN,KAChD,EACAO,EAAgB1I,OAAO2I,OAAP,OACjBL,EAAYjI,OADK,cAEnBkI,EAFmB,OAGfD,EAAYjI,MAAMkI,IAHH,IAIlBK,YAAYN,MAAAA,GAAD,UAACA,EAAajI,MAAMkI,UAApB,OAAC,EAAmCK,gBAG7CC,EAAexI,EAErB,OAAOL,OAAO2I,OAAP,OACF5B,GADE,cAEJqB,EAFI,OAGArB,EAAUqB,IAHV,IAIH/H,MAC0B,aAAxByH,EAAe/B,KAAsB2C,EAAgBG,YAuB/D,MAA4B,SAAxBf,EAAe/B,KAEf,kBAACY,EAAA,EAAD,CAAa,cAAY,uBACvB,kBAACmC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEtG,KAAK,aACLzB,GAAG,aACH+E,KAAK,SACL,wCAAgC+B,EAAeL,OAC/CuB,YAAW,oBAAelB,EAAeL,OACzCwB,SAAU,IAASf,IAAsB,KACzCgB,QA5BoB,WAC5B,IAAMC,EAAmBxB,EAAaU,WACpC,SAAChI,GAAD,MAA0B,SAAfA,EAAM0F,QAEnB6B,GAAgB,SAACb,GAEf,MAA0B,SADLA,EAAUoC,GACdpD,KACf,kBACKgB,EAAUqC,MAAM,EAAGD,IADxB,QAEOpC,EAAUoC,IAFjB,IAEoC9I,MAAO,OAF3C,OAGK0G,EAAUqC,MAAMD,EAAmB,EAAGpC,EAAUxG,UAGhDwG,MAgBD1G,MAAOsH,EAAaI,MAAK,SAACR,GAAD,MAA4B,SAAhBA,EAAOxB,QAAiB1F,UAO3C,aAAxByH,EAAe/B,KAEf,kBAACY,EAAA,EAAD,CAAa,cAAY,uBACvB,kBAACmC,EAAA,EAAD,KACE,kBAAClC,EAAA,EAAD,CACEf,QAAQ,WACR,wCAAgCiC,EAAeL,OAC/CZ,MAAM,QACNwC,gBAAe,oBAAevB,EAAeL,OAC7C6B,gCAA8B,EAC9BxC,SAAU,kBAAMmB,GAAU,SAAClB,GAAD,OAAgBA,MAC1CE,SAAUiB,IACVb,WAAYS,EAAezH,MACxBkH,QAAO,SAAClH,GAAD,OAA8B,GAAnBA,EAAMuI,aACxBzF,KAAI,SAACoG,GAAD,OAASA,EAAId,UACpBzB,OAAQA,GAEPc,EAAezH,MAAM8C,KAAI,SAACoE,EAAQ1F,GAAT,OACxB,kBAAC2F,EAAA,EAAD,CACErB,IAAKtE,EACLxB,MAAOkH,EAAOkB,OACdG,UAAWrB,EAAOqB,uBArBhC,GA+BFlB,EAAYrB,UAAY,CACtBsB,aAAcrB,IAAAA,MACdsB,gBAAiBtB,IAAAA,KACjBuB,MAAOvB,IAAAA,QAGT,UCnHA,IAAMkD,EAAiB,SAAC,GAA+C,IAA7ChD,EAA6C,EAA7CA,QAASmB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,gBAC/C,GAAgCI,EAAAA,EAAAA,UAAS,CACvChB,QAAQ,EACRI,SAAUZ,EAAQ,GAAGiB,QAFvB,eAAOhB,EAAP,KAAiBC,EAAjB,KAKA,OACE,oCACE,kBAAC,EAAD,CACED,SAAUA,EACVC,YAAaA,EACbF,QAASA,IAEX,kBAAC,EAAD,CACEmB,aAAcA,EACdC,gBAAiBA,EACjBC,MAAOpB,EAASW,aAMxBoC,EAAenD,UAAY,CACzBG,QAASF,IAAAA,MACTqB,aAAcrB,IAAAA,MACdsB,gBAAiBtB,IAAAA,MAGnB,U,knBC5BA,IAAMmD,EAAc,SAAC,GAKf,IAJJ9B,EAII,EAJJA,aACAC,EAGI,EAHJA,gBACA8B,EAEI,EAFJA,WACAC,EACI,EADJA,cA0HA,OA3DAC,EAAAA,EAAAA,YAAU,WA5DRjC,EAAakC,SAAQ,SAACtC,GAgCpB,GA/BoB,aAAhBA,EAAOxB,MACTwB,EAAOlH,MAAMwJ,SAAQ,SAACC,IAES,IAA3BA,EAAalB,WACZc,EAAW3B,MAAK,SAACgC,GAAD,OAAUA,EAAKtC,QAAUqC,EAAarB,WAY5B,IAA3BqB,EAAalB,WACbc,EAAW3B,MAAK,SAACgC,GAAD,OAAUA,EAAKtC,QAAUqC,EAAarB,WAEtDkB,GAAc,SAAC5C,GACb,IAAMlF,EAAQkF,EAAUsB,WACtB,SAAC2B,GAAD,OAAWA,EAAMvC,QAAUqC,EAAarB,UAE1C,wBACK1B,EAAUqC,MAAM,EAAGvH,KADxB,OAEKkF,EAAUqC,MAAMvH,EAAQ,EAAGkF,EAAUxG,aAnB5CoJ,GAAc,SAAC5C,GAAD,wBACTA,GADS,CAEZ,CACEU,MAAOqC,EAAarB,OACpBpI,MAAOyJ,EAAazJ,OAASyJ,EAAarB,OAC1CwB,QAASH,EAAaI,cACtB/D,IAAKoB,EAAOE,eAmBF,SAAhBF,EAAOxB,MAAmBwB,EAAOlH,MAAME,OAAS,EAAG,CACrD,IAAM4J,EAAgB,CAAE1C,MAAOF,EAAOlH,MAAO8F,IAAKoB,EAAOE,OACrDiC,EAAW3B,MAAK,SAACgC,GAAD,OAAUA,EAAK5D,MAAQoB,EAAOE,SAChDkC,GAAc,SAAC5C,GAAD,OACZA,EAAU5D,KAAI,SAACiH,GACb,OAAOA,EAAEjE,MAAQoB,EAAOE,MAAQ0C,EAAgBC,QAIpDT,GAAc,SAAC5C,GAAD,wBAAmBA,GAAnB,CAA8BoD,WAG9B,SAAhB5C,EAAOxB,MACP2D,EAAW3B,MAAK,SAACgC,GAAD,OAAUA,EAAK5D,MAAQoB,EAAOE,UAE9CkC,GAAc,SAAC5C,GACb,IAAMlF,EAAQkF,EAAUsB,WACtB,SAAC2B,GAAD,OAAWA,EAAM7D,MAAQoB,EAAOE,SAElC,wBACKV,EAAUqC,MAAM,EAAGvH,KADxB,OAEKkF,EAAUqC,MAAMvH,EAAQ,EAAGkF,EAAUxG,kBAS/C,CAACoH,IA0DF,oCACG+B,EAAWnJ,OAAS,EACjBP,OAAOqK,QAAQ,IAAQX,EAAY,QAAQvG,KAAI,+BAAEgD,EAAF,KAAO9F,EAAP,YAC7C,kBAACiK,EAAA,EAAD,CACE,cAAY,cACZlE,UAAU,aACVmE,aAAcpE,EACdA,IAAKA,GAEJ9F,EAAM8C,KAAI,SAACoE,GAAD,OACT,kBAACiD,EAAA,EAAD,CAAM7E,QAAS,kBA/CF,SAAC4B,GAC1B,IAAM4B,EAAmBxB,EAAaU,WACpC,SAAChI,GAAD,OAAWA,EAAMoH,QAAUF,EAAOpB,OAEpCyB,GAAgB,SAACb,GACf,IAAM0D,EAAe1D,EAAUoC,GAC/B,GAA0B,SAAtBsB,EAAa1E,KACf,wBACKgB,EAAUqC,MAAM,EAAGD,IADxB,QAEOpC,EAAUoC,IAFjB,IAEoC9I,MAAO,OAF3C,OAGK0G,EAAUqC,MAAMD,EAAmB,EAAGpC,EAAUxG,UAGvD,GAA0B,aAAtBkK,EAAa1E,KAAqB,CACpC,IAAM2E,EAAcD,EAAapK,MAAM8C,KAAI,SAACsF,GAAD,OACzCA,EAAOA,SAAWlB,EAAOE,MAAzB,OACSgB,GADT,IACiBG,WAAW,IACxBH,KASN,OAPAkB,GAAc,SAAC5C,GACb,IAAM4D,EAAc5D,EAAUsB,WAAU,SAAC2B,GAAD,OAAWA,IAAUzC,KAC7D,wBACKR,EAAUqC,MAAM,EAAGuB,KADxB,OAEK5D,EAAUqC,MAAMuB,EAAc,EAAG5D,EAAUxG,aAGlD,kBACKwG,EAAUqC,MAAM,EAAGD,IADxB,QAEOpC,EAAUoC,IAFjB,IAEoC9I,MAAOqK,MAF3C,OAGK3D,EAAUqC,MAAMD,EAAmB,EAAGpC,EAAUxG,UAGvD,OAAOwG,KAewB6D,CAAmBrD,IAASpB,IAAKA,GACnDoB,EAAOE,cAKhB,KACHiC,EAAWnJ,OAAS,EACnB,kBAACsK,EAAA,GAAD,CAAQhF,QAAQ,OAAOF,QA1EF,WACzBiC,GAAgB,SAACb,GAaf,OAZsBA,EAAU5D,KAAI,SAACoE,GACnC,GAAoB,SAAhBA,EAAOxB,KACT,cAAYwB,GAAZ,IAAoBlH,MAAO,KAE7B,GAAoB,aAAhBkH,EAAOxB,KAAqB,CAC9B,IAAM+E,EAAWvD,EAAOlH,MAAM8C,KAAI,SAAC4H,GAEjC,OADAA,EAASnC,WAAY,EACrB,OAAYmC,GAAZ,IAAsBnC,WAAW,OAEnC,cAAYrB,GAAZ,IAAoBlH,MAAOyK,WAKjCnB,EAAc,MA0DV,iBAGE,OAKVF,EAAYpD,UAAY,CACtBsB,aAAcrB,IAAAA,MACdsB,gBAAiBtB,IAAAA,KACjBoD,WAAYpD,IAAAA,MACZqD,cAAerD,IAAAA,MAGjB,UCtJA,IAAM0E,EAAiB,SAAC,GACtB,OADsC,EAAdC,QACT9H,KAAI,WAAmBtB,GAAnB,IAAGsD,EAAH,EAAGA,MAAOS,EAAV,EAAUA,MAAV,OACjB,kBAACe,EAAA,EAAD,CAAaR,IAAKtE,GAChB,kBAACgJ,EAAA,GAAD,CAAQlF,QAASC,EAAOC,QAAQ,WAC7BV,QAMH+F,EAAgB,SAAC,GAgBjB,IAfJC,EAeI,EAfJA,eACA3E,EAcI,EAdJA,QACAoB,EAaI,EAbJA,gBACAD,EAYI,EAZJA,aACA+B,EAWI,EAXJA,WACAC,EAUI,EAVJA,cACAyB,EASI,EATJA,UACAC,EAQI,EARJA,MACAC,EAOI,EAPJA,QACAC,EAMI,EANJA,WACAC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,YAEA,OACE,kBAACC,EAAA,EAAD,CAAS7K,GAAG,UAAU,cAAY,yBAChC,kBAAC8K,EAAA,EAAD,KACE,kBAAC,EAAD,CACEtF,QAASA,EACTmB,aAAcA,EACdC,gBAAiBA,IAElBuD,GAAkB,kBAACH,EAAD,CAAgBC,QAASE,IAC3CO,GACC,kBAACK,EAAA,EAAD,KACGL,EAAavI,KAAI,SAAC6I,GAAD,OAChB,kBAACC,EAAA,EAAD,CACE9F,IAAK6F,EAAI7F,IACTL,KAAMkG,EAAI7G,MACV+G,WAAYN,IAAgBI,EAAI7F,IAChC8C,SAAU,kBAAM0C,EAAaK,EAAI7F,YAKzC,kBAACQ,EAAA,EAAD,CAAad,QAAQ,aAAasG,MAAO,CAAEC,QAAS,eACjDhB,EACC,kBAACiB,EAAA,EAAD,CAAUxF,MAAM,UACdwE,EAAQ,EACV,kBAACiB,EAAA,EAAD,CACE,cAAY,4BACZC,UAAWlB,EACXC,QAASA,EACTE,KAAMA,EACNgB,UAAW,SAACtF,EAAIuF,GAAL,OAAoBhB,EAAQgB,IACvCC,SAAS,8BACTC,gBAAiB,SAACzF,EAAIoE,GAAL,OAAiBC,EAAWD,IAC7CsB,WAAS,IAET,OAGR,kBAACd,EAAA,EAAD,KACE,kBAACnF,EAAA,EAAD,CAAad,QAAQ,aAAagH,OAAQ,CAAET,QAAS,eACnD,kBAAC,EAAD,CACEzE,aAAcA,EACdC,gBAAiBA,EACjB8B,WAAYA,EACZC,cAAeA,QAQ3BuB,EAAc7E,UAAY,CACxBG,QAASF,IAAAA,MACT6E,eAAgB7E,IAAAA,MAChBsB,gBAAiBtB,IAAAA,KACjBqB,aAAcrB,IAAAA,MACduB,MAAOvB,IAAAA,OACP+E,MAAO/E,IAAAA,OACPgF,QAAShF,IAAAA,OACTiF,WAAYjF,IAAAA,KACZkF,KAAMlF,IAAAA,OACNmF,QAASnF,IAAAA,KACToD,WAAYpD,IAAAA,MACZqD,cAAerD,IAAAA,KACf8E,UAAW9E,IAAAA,KACXoF,aAAcpF,IAAAA,MACdqF,aAAcrF,IAAAA,KACdsF,YAAatF,IAAAA,QAEf,UCtGA,IAAMwG,EAAgB,SAAC,GAOjB,IANJ1B,EAMI,EANJA,UACAC,EAKI,EALJA,MACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,KACAC,EACI,EADJA,QAEA,OACE,kBAACI,EAAA,EAAD,CAAS7K,GAAG,WACV,kBAAC8K,EAAA,EAAD,KACE,kBAACnF,EAAA,EAAD,CAAad,QAAQ,aAAasG,MAAO,CAAEC,QAAS,eACjDhB,EACC,kBAACiB,EAAA,EAAD,CAAUxF,MAAM,UACdwE,EAAQ,EACV,kBAACiB,EAAA,EAAD,CACE,cAAY,4BACZC,UAAWlB,EACXC,QAASA,EACTE,KAAMA,EACNgB,UAAW,SAACtF,EAAIuF,GAAL,OAAoBhB,EAAQgB,IACvCC,SAAS,8BACTC,gBAAiB,SAACzF,EAAIoE,GAAL,OAAiBC,EAAWD,MAE7C,SAOdwB,EAAczG,UAAY,CACxB+E,UAAW9E,IAAAA,KACX+E,MAAO/E,IAAAA,OACPgF,QAAShF,IAAAA,OACTiF,WAAYjF,IAAAA,KACZkF,KAAMlF,IAAAA,OACNmF,QAASnF,IAAAA,MAGX,U,qkBCjCA,QAjB2B,SAACE,GAAD,OACzBA,EAAQrD,KAAI,SAACoE,GACX,IAAMwF,EAAS,CACbhH,KAAMwB,EAAOxB,KACb0B,MAAOF,EAAOE,OAUhB,MAPoB,SAAhBF,EAAOxB,OAAiBgH,EAAO1M,MAAQkH,EAAOlH,OAAS,IACvC,aAAhBkH,EAAOxB,OACTgH,EAAO1M,MAAQkH,EAAOyF,QAAQ7J,KAAI,SAACsF,EAAQ5G,GAAT,SAAC,KAC9B4G,GAD6B,IAEhCzH,GAAI,SAAWa,EACf+G,UAAWH,EAAOG,YAAa,QAE5BmE,M,6mBCEX,IA6BME,GAAe,SAAC,GAkBhB,MAjBJC,EAiBI,EAjBJA,cACAC,EAgBI,EAhBJA,SACA3G,EAeI,EAfJA,QACA4G,EAcI,EAdJA,cACAC,EAaI,EAbJA,UACAC,EAYI,EAZJA,YACAC,EAWI,EAXJA,KACApC,EAUI,EAVJA,eACAqC,EASI,EATJA,eACAC,EAQI,EARJA,mBACAC,EAOI,EAPJA,YACAC,EAMI,EANJA,kBACAC,EAKI,EALJA,iBACAC,EAII,EAJJA,wBACAnC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,YAEA,GAAwC5D,EAAAA,EAAAA,UAAS8F,EAAmBtH,IAApE,eAAOmB,EAAP,KAAqBC,EAArB,KACA,GAAoCI,EAAAA,EAAAA,UAAS,IAA7C,eAAO0B,EAAP,KAAmBC,EAAnB,KACA,GAA4B3B,EAAAA,EAAAA,UAAS0F,GAArC,eAAOK,EAAP,KAAeC,EAAf,KACA,GAA8BhG,EAAAA,EAAAA,UAAS,IAAvC,eAAOsD,EAAP,KAAgBC,EAAhB,KACA,GAAwBvD,EAAAA,EAAAA,UAAS,GAAjC,eAAOwD,EAAP,KAAaC,EAAb,KACMwC,GAAWC,EAAAA,EAAAA,gBAEjBtE,EAAAA,EAAAA,YAAU,WACR,ICtD0B,EAAanH,EDsDjClB,EAAQ2L,EAAa,SAxDV,SAACxD,GA0BpB,OAxBEA,EAAWnJ,OAAS,EAChBmJ,EAAWxJ,QAAO,SAACC,EAAKoH,GACtB,GAAIpH,EAAIoH,EAAOpB,IAAIgI,eAAgB,CACjC,IAAMC,EACqC,iBAAlCjO,EAAIoH,EAAOpB,IAAIgI,eAClB,CAAChO,EAAIoH,EAAOpB,IAAIgI,iBADpB,OAEQhO,EAAIoH,EAAOpB,IAAIgI,gBACzB,gBACKhO,GADL,cAEGoH,EAAOpB,IAAIgI,cAFd,kBAGOC,GAHP,CAII7G,EAAO0C,QAAU1C,EAAO0C,QAAU1C,EAAOlH,UAI7C,gBACKF,GADL,cAEGoH,EAAOpB,IAAIgI,cAAgB5G,EAAO0C,QAC/B1C,EAAO0C,QACP1C,EAAOlH,OAASkH,EAAOE,UAG9B,IACH,GAiCK4G,CAAa3E,IAFK,IAGrB9I,MAAO0K,EACPzK,QAAS2K,EAAO,GAAKF,IC1DY7I,GAAb,ED2DH,CACf6L,UAAWP,EAAOO,UAClB7L,KAAM8L,GAAQR,EAAOlM,OAAOkE,OC7DGtD,KAClC,CACLmB,QAAuB,QAF2B,EAAtB0K,UAEG7L,EAAtB,WAAiCA,MD8DtC,KACJyK,GAAiBC,EACbC,EAAca,EAAUd,EAAU5L,GAClC2L,GACAE,EAAca,EAAU1M,KAE3B,CAACmI,EAAY4B,EAASE,EAAMuC,IAE/B,IAIQS,EAJAnD,EAA+BgC,EAA/BhC,MAAOD,GAAwBiC,EAAxBjC,UAAWqD,GAAapB,EAAboB,SAoCpBC,IAAsBxB,IAhCpBsB,EAAgB7G,EAAaJ,QACjC,SAACA,GAAD,MACoB,UAAjBA,MAAAA,OAAA,EAAAA,EAAQxB,OAAqC,MAAlBwB,MAAAA,OAAA,EAAAA,EAAQlH,QAClB,cAAjBkH,MAAAA,OAAA,EAAAA,EAAQxB,QACPwB,MAAAA,OADD,EACCA,EAAQlH,MAAM0H,MAAK,SAAC4G,GAAD,OAAaA,EAAQ/F,iBAExB2E,EAAKhG,QAAO,SAACqH,GACjC,OAAIJ,EAAcjO,OAAS,EAClBiO,MAAAA,OAAP,EAAOA,EAAeK,OAAM,SAACtH,GAC3B,MAAoB,SAAhBA,EAAOxB,KACF6I,EAAIE,gBACTxB,EAAYjF,WAAU,SAACuG,GAAD,OAASA,EAAIzJ,QAAUoC,EAAOE,UAEnD0G,cACAzN,SAAS6G,EAAOlH,MAAM8N,eACA,aAAhB5G,EAAOxB,KACTwB,EAAOlH,MAAM0O,MAClB,SAAC1O,GAAD,OACEA,EAAMuI,WACNgG,EAAIE,gBACFxB,EAAYjF,WAAU,SAACuG,GAAD,OAASA,EAAIzJ,QAAUoC,EAAOE,UACpD0G,gBAAkB9N,EAAMA,MAAM8N,sBAN/B,KAWFS,MASPI,GAAoB,SAACzB,GAAD,OACxBA,EAAK0B,MAAK,SAACC,EAAGC,GAAJ,MACoC,iBAArCD,MAAAA,OAAP,EAAOA,EAAGJ,gBAAgBf,EAAOlM,QACR,QAArBkM,EAAOO,WACLY,MAAAA,OAAA,EAAAA,EAAGJ,gBAAgBf,EAAOlM,SAASsN,MAAAA,OAAnC,EAAmCA,EAAGL,gBAAgBf,EAAOlM,SAC7DsN,MAAAA,OAAA,EAAAA,EAAGL,gBAAgBf,EAAOlM,SAASqN,MAAAA,OAAnC,EAAmCA,EAAGJ,gBAAgBf,EAAOlM,QAC1C,QAArBkM,EAAOO,UACPY,MAAAA,OADA,EACAA,EAAGJ,gBAAgBf,EAAOlM,OAAOuN,cAC/BD,MAAAA,OADF,EACEA,EAAGL,gBAAgBf,EAAOlM,YAC1BvB,EACA,CAAE+O,YAAa,SAEjBF,MAAAA,OANA,EAMAA,EAAGL,gBAAgBf,EAAOlM,OAAOuN,cAC/BF,MAAAA,OADF,EACEA,EAAGJ,gBAAgBf,EAAOlM,YAC1BvB,EACA,CAAE+O,YAAa,aAInBC,GAAepC,EAEjB,EAFgB,UAChB8B,GAAkBN,WADF,aAChB,EAAuCnO,OAOrCgP,GACJnE,IAAaqD,KAAapD,MAAAA,OAAA,EAAAA,EAAO9K,QAAS,GAAKiG,EAAQjG,OAAS,EAE5DgO,GAAUjB,EAAYnK,KAAI,SAACqM,GAAD,MAAiB,CAC/CrK,MAAOqK,EAAWrK,MAClBY,KAAMyJ,EAAWzJ,KACjB0J,WAAYF,GAAa,GAAKC,EAAWP,KAAO,CAACS,EAAAA,UAAY,GAC7DC,iBAAkBH,EAAWG,iBACzBH,EAAWG,iBACX,OAGAC,GAAe1C,EACjBK,EACAA,EAAKhN,OAAS,EACdyO,GAAkBN,IAAoBtF,OACnCoC,EAAO,GAAKF,GACZE,EAAO,GAAKF,EAAUA,GAEzBiC,EAOJ,OACE,oCACE,kBAAC,EAAD,CACElC,MAAO6B,EAAgB7B,EAAQiE,GAC/BnE,eAAgBA,EAChB3E,QAASA,EACTmB,aAAcA,EACdC,gBAAiBA,EACjB8B,WAAYA,EACZC,cAAeA,EACfyB,UAAWA,GACXE,QAASA,EACTC,WAAYA,EACZC,KAAMA,EACNC,QAASA,EACTC,aAAcA,EACdC,aAAcA,EACdC,YAAaA,KAEbR,IAAaC,EAAQ,EACrB,kBAAC,IAAD,CACE,cAAY,qCACZpG,QAAQ,QACRC,KAAK,SACLC,MAAOwI,EACPrI,iBAAkB,CAChB,CACEH,MAAO0I,EACPlI,QAAS,kBAAMiI,UAIlBxC,MAAcwE,MAAAA,IAAAA,GAAcrP,QAAS,EACxC,kBAAC,IAAD,CACE,cAAY,qCACZ0E,QAAQ,QACRC,KAAK,SACLC,MAAM,iBACNG,iBAAkB,CAChB,CACEH,MAAO,oBACPQ,QAAS,kBAAMiC,EAAgBkG,EAAmBtH,SAKxD,kBAAC,EAAAqJ,MAAD,CACE,cAAY,uBACZhK,QAAQ,UACR,aAAW,sBACXkI,OAAQA,EACR+B,OAjFW,SAACC,EAAQlO,EAAOyM,GACjCN,EAAU,CAAEnM,MAAAA,EAAOyM,UAAAA,KAiFbd,eAAgBA,GAAkC,KAClDC,mBAAoBA,EACpBuC,MAAOzB,GACPhB,KAAMnC,GA5DM,SAACE,GAAD,OAClB,OAAI2E,MAAM3E,IAAUnI,KAAI,iBAAO,CAC7B6M,MAAO1C,EAAYnK,KAAI,iBAAO,CAAEgC,MAAO,kBAACkH,EAAA,EAAD,CAAUxF,MAAM,iBA0DjCqJ,CAAY5E,GAAWsE,IAEzC,kBAAC,EAAAO,YAAD,MACA,kBAAC,EAAAC,UAAD,OAIJ,kBAAC,EAAD,CACEhF,UAAWA,GACXC,MAAO6B,EAAgB7B,EAAQiE,GAC/B1H,gBAAiBA,EACjB0D,QAASA,EACTC,WAAYA,EACZC,KAAMA,EACNC,QAASA,MAMjBwB,GAAa5G,UAAY,CACvB6G,cAAe5G,IAAAA,KACfE,QAASF,IAAAA,MACT6G,SAAU7G,IAAAA,OACV8G,cAAe9G,IAAAA,KACf+G,UAAW/G,IAAAA,OACXgH,YAAahH,IAAAA,MACbiH,KAAMjH,IAAAA,MACNkH,eAAgBlH,IAAAA,KAChBmH,mBAAoBnH,IAAAA,KACpBoH,YAAapH,IAAAA,OACb6E,eAAgB7E,IAAAA,MAChBqH,kBAAmBrH,IAAAA,OACnBuH,wBAAyBvH,IAAAA,OACzBsH,iBAAkBtH,IAAAA,KAClBoF,aAAcpF,IAAAA,MACdqF,aAAcrF,IAAAA,KACdsF,YAAatF,IAAAA,QAGf,a,6NEtQa+J,EAAe,CAC1B,OACA,QACA,UACA,UACA,WACA,UACA,gBAGWC,EAAe,CAC1BC,KAAM,CACJrL,KAAMsL,EAAAA,GACNC,MAAOC,EAAAA,EAAAA,MACPvL,MAAO,iBAETwL,MAAO,CACLzL,KAAM0L,EAAAA,GACNH,MAAOI,EAAAA,EAAAA,MACP1L,MAAO,wBAET2L,QAAS,CAAE5L,KAAM6L,EAAAA,GAAiB5L,MAAO,oBACzC6L,SAAU,CAAE9L,KAAM+L,EAAAA,GAAiB9L,MAAO,YAC1C+L,QAAS,CAAEhM,KAAMiM,EAAAA,GAAahM,MAAO,iBACrCiM,QAAS,CACPlM,KAAMmM,EAAAA,GACNZ,MAAOa,EAAAA,EAAAA,MACPnM,MAAO,0BAEToM,aAAc,CACZrM,KAAMsM,EAAAA,GACNf,MAAOgB,EAAAA,EAAAA,MACPtM,MAAO,eAIEuM,EAAkB,SAACC,GAAD,IAAOrD,EAAP,uDAAmB,MAAnB,OAC7BqD,EAAK1C,MAAK,SAACC,EAAGC,GAAJ,MACM,QAAdb,EACIY,EAAEzM,KAAK0L,cAAciB,cAAcD,EAAE1M,KAAK0L,eAC1CgB,EAAE1M,KAAK0L,cAAciB,cAAcF,EAAEzM,KAAK0L,mBAGrCyD,EAAiB,SAACpD,GAAD,OAC5BxO,OAAO2I,OAAO6F,GAAezG,MAC3B,SAAC3E,GAAD,aAAUA,MAAAA,GAAA,UAAAA,EAAM/C,aAAN,eAAaE,QAAS,IAAK6C,MAAAA,OAAA,EAAAA,EAAM7C,QAAS,MAG3CsR,EAAyB,SAACrD,EAAesD,GAAhB,OACpC9R,OAAOqK,QAAQmE,GAAerL,KAAI,+BAAEgD,EAAF,YAASsB,GAAT,aAA0B,GAA1B,GAASA,MAAOpH,EAAhB,EAAgBA,MAAhB,MAAmC,CACnE0R,SAAUtK,EACVuK,QAAS7L,EACT8L,OACE5R,MAAAA,OAAA,EAAAA,EAAOE,QAAS,EACZ0P,MAAMiC,QAAQ7R,GACZA,EAAM8C,KAAI,SAACC,GAAD,MAAW,CACnBX,MAAMqP,MAAAA,OAAA,EAAAA,EAAW1O,KAASA,EAC1B/C,MAAO+C,MAET,CACE,CACEX,MAAMqP,MAAAA,OAAA,EAAAA,EAAWzR,KAAUA,EAC3BA,MAAAA,IAGN,QAkBGyB,EAAsB,CACjC,SACA,YACA,gBACA,YAGWL,EAAkB,CAC7BC,eAAgB,CAAEyQ,UAAW","sources":["webpack:///./src/api/index.js","webpack:///./src/components/Empty.js","webpack:///./src/components/general-table/FilterDropdown.js","webpack:///./src/components/general-table/FilterInput.js","webpack:///./src/components/general-table/FilterControls.js","webpack:///./src/components/general-table/FilterChips.js","webpack:///./src/components/general-table/ToolbarHeader.js","webpack:///./src/components/general-table/ToolbarFooter.js","webpack:///./src/components/general-table/createFilterValues.js","webpack:///./src/components/general-table/GeneralTable.js","webpack:///./src/Routes/ImageManager/constants.js","webpack:///./src/constants.js"],"sourcesContent":["import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst getTableParams = (q) => {\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getDeviceHasUpdate = async (id) => {\n  try {\n    return await instance.get(`${EDGE_API}/devices/${id}`);\n  } catch (err) {\n    // temp error solution\n    console.log('');\n  }\n};\n\nexport const updateDeviceLatestImage = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const getCustomRepositories = () => {\n  return instance.get(`${EDGE_API}/thirdpartyrepo`);\n};\n\nexport const createCustomRepository = (payload) => {\n  return instance.post(`${EDGE_API}/thirdpartyrepo`, {\n    Name: payload.name,\n    URL: payload.baseURL,\n  });\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 100,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const editCustomRepository = (payload) => {\n  return instance.put(`${EDGE_API}/thirdpartyrepo/${payload.id}`, {\n    Name: payload.name,\n    URL: payload.baseURL,\n  });\n};\n\nexport const removeCustomRepository = (id) =>\n  instance.delete(`${EDGE_API}/thirdpartyrepo/${id}`);\n","import React from 'react';\nimport {\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport RepositoryIcon from '@patternfly/react-icons/dist/esm/icons/repository-icon';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst emptyStateIconMapper = {\n  repository: RepositoryIcon,\n  search: SearchIcon,\n};\n\nconst Empty = ({\n  bgColor,\n  icon,\n  title,\n  body,\n  primaryAction,\n  secondaryActions,\n}) => (\n  <EmptyState style={{ backgroundColor: bgColor || '' }}>\n    {icon && <EmptyStateIcon icon={emptyStateIconMapper[icon]} />}\n    <Title headingLevel=\"h4\" size=\"lg\">\n      {title}\n    </Title>\n    <EmptyStateBody>{body}</EmptyStateBody>\n    {primaryAction && (\n      <Button onClick={primaryAction.click} variant=\"primary\">\n        {primaryAction.text}\n      </Button>\n    )}\n    <EmptyStateSecondaryActions>\n      {secondaryActions.map(({ type, title, link, onClick }, index) => (\n        <Button\n          component={type === 'link' ? 'a' : 'button'}\n          href={link}\n          variant=\"link\"\n          key={index}\n          onClick={onClick}\n        >\n          {title}\n          {link && <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />}\n        </Button>\n      ))}\n    </EmptyStateSecondaryActions>\n  </EmptyState>\n);\n\nEmpty.propTypes = {\n  bgColor: PropTypes.string,\n  icon: PropTypes.string,\n  title: PropTypes.string,\n  body: PropTypes.string,\n  primaryAction: PropTypes.object,\n  secondaryActions: PropTypes.array,\n};\n\nexport default Empty;\n","import React from 'react';\nimport { ToolbarItem, Select, SelectOption } from '@patternfly/react-core';\nimport { FilterIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst FilterDropdown = ({ filters, dropdown, setDropdown }) => {\n  const toggle = () => {\n    setDropdown((prevState) => ({\n      ...prevState,\n      isOpen: !prevState.isOpen,\n    }));\n  };\n\n  const select = (_e, selection) => {\n    setDropdown({\n      selected: selection,\n      isOpen: false,\n    });\n  };\n\n  return (\n    <>\n      {filters.length > 1 ? (\n        <ToolbarItem data-testid=\"filter-dropdown-testid\" className=\"pf-u-mr-0\">\n          <Select\n            variant=\"single\"\n            aria-label=\"Select input for filters\"\n            width=\"11rem\"\n            onToggle={toggle}\n            onSelect={select}\n            selections={dropdown.selected}\n            isOpen={dropdown.isOpen}\n            toggleIcon={<FilterIcon />}\n          >\n            {filters.map((filter, index) => (\n              <SelectOption key={index} value={filter.label} />\n            ))}\n          </Select>\n        </ToolbarItem>\n      ) : null}\n    </>\n  );\n};\n\nFilterDropdown.propTypes = {\n  filters: PropTypes.array,\n  dropdown: PropTypes.object,\n  setDropdown: PropTypes.func,\n};\n\nexport default FilterDropdown;\n","import React, { useState } from 'react';\nimport {\n  ToolbarItem,\n  InputGroup,\n  SearchInput,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\n\nconst FilterInput = ({ filterValues, setFilterValues, input }) => {\n  const selectedFilter = filterValues.find((filter) => filter.label === input);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleFilterChange = () => (value, checkboxValue) => {\n    setFilterValues((prevState) => {\n      const selectedIndex = prevState.findIndex(\n        (filter) => filter.label === selectedFilter.label\n      );\n      const checkedType = prevState.find(\n        (filter) => filter.label === selectedFilter.label\n      );\n      const checkboxIndex =\n        selectedFilter.type === 'checkbox'\n          ? checkedType.value.findIndex((i) => i.option === checkboxValue)\n          : 0;\n      const newValueArray = Object.values({\n        ...checkedType.value,\n        [checkboxIndex]: {\n          ...checkedType.value[checkboxIndex],\n          isChecked: !checkedType?.value[checkboxIndex]?.isChecked,\n        },\n      });\n      const newTextValue = value;\n\n      return Object.values({\n        ...prevState,\n        [selectedIndex]: {\n          ...prevState[selectedIndex],\n          value:\n            selectedFilter.type === 'checkbox' ? newValueArray : newTextValue,\n        },\n      });\n    });\n  };\n\n  const handleDeleteTextInput = () => {\n    const filterLabelIndex = filterValues.findIndex(\n      (value) => value.type === 'text'\n    );\n    setFilterValues((prevState) => {\n      const changedValue = prevState[filterLabelIndex];\n      if (changedValue.type === 'text') {\n        return [\n          ...prevState.slice(0, filterLabelIndex),\n          { ...prevState[filterLabelIndex], value: '' },\n          ...prevState.slice(filterLabelIndex + 1, prevState.length),\n        ];\n      }\n      return prevState;\n    });\n  };\n\n  if (selectedFilter.type === 'text') {\n    return (\n      <ToolbarItem data-testid=\"filter-input-testid\">\n        <InputGroup>\n          <SearchInput\n            name=\"textInput1\"\n            id=\"textInput1\"\n            type=\"search\"\n            aria-label={`Select input for ${selectedFilter.label}`}\n            placeholder={`Filter by ${selectedFilter.label}`}\n            onChange={debounce(handleFilterChange(), 500)}\n            onClear={handleDeleteTextInput}\n            value={filterValues.find((filter) => filter.type === 'text').value}\n          />\n        </InputGroup>\n      </ToolbarItem>\n    );\n  }\n\n  if (selectedFilter.type === 'checkbox') {\n    return (\n      <ToolbarItem data-testid=\"filter-input-testid\">\n        <InputGroup>\n          <Select\n            variant=\"checkbox\"\n            aria-label={`Select input for ${selectedFilter.label}`}\n            width=\"11rem\"\n            placeholderText={`Filter by ${selectedFilter.label}`}\n            isCheckboxSelectionBadgeHidden\n            onToggle={() => setIsOpen((prevState) => !prevState)}\n            onSelect={handleFilterChange()}\n            selections={selectedFilter.value\n              .filter((value) => value.isChecked == true)\n              .map((arr) => arr.option)}\n            isOpen={isOpen}\n          >\n            {selectedFilter.value.map((filter, index) => (\n              <SelectOption\n                key={index}\n                value={filter.option}\n                isChecked={filter.isChecked}\n              />\n            ))}\n          </Select>\n        </InputGroup>\n      </ToolbarItem>\n    );\n  }\n};\n\nFilterInput.propTypes = {\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  input: PropTypes.string,\n};\n\nexport default FilterInput;\n","import React, { useState } from 'react';\nimport FilterDropdown from './FilterDropdown';\nimport FilterInput from './FilterInput';\nimport PropTypes from 'prop-types';\n\nconst FilterControls = ({ filters, filterValues, setFilterValues }) => {\n  const [dropdown, setDropdown] = useState({\n    isOpen: false,\n    selected: filters[0].label,\n  });\n\n  return (\n    <>\n      <FilterDropdown\n        dropdown={dropdown}\n        setDropdown={setDropdown}\n        filters={filters}\n      />\n      <FilterInput\n        filterValues={filterValues}\n        setFilterValues={setFilterValues}\n        input={dropdown.selected}\n      />\n    </>\n  );\n};\n\nFilterControls.propTypes = {\n  filters: PropTypes.array,\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n};\n\nexport default FilterControls;\n","import React, { useEffect } from 'react';\nimport { ChipGroup, Chip, Button } from '@patternfly/react-core';\nimport { groupBy } from 'lodash';\nimport PropTypes from 'prop-types';\n\nconst FilterChips = ({\n  filterValues,\n  setFilterValues,\n  chipsArray,\n  setChipsArray,\n}) => {\n  const buildChipsArray = () => {\n    filterValues.forEach((filter) => {\n      if (filter.type === 'checkbox') {\n        filter.value.forEach((filterOption) => {\n          if (\n            filterOption.isChecked === true &&\n            !chipsArray.find((chip) => chip.label === filterOption.option)\n          ) {\n            setChipsArray((prevState) => [\n              ...prevState,\n              {\n                label: filterOption.option,\n                value: filterOption.value || filterOption.option,\n                apiName: filterOption.optionApiName,\n                key: filter.label,\n              },\n            ]);\n          } else if (\n            filterOption.isChecked === false &&\n            chipsArray.find((chip) => chip.label === filterOption.option)\n          ) {\n            setChipsArray((prevState) => {\n              const index = prevState.findIndex(\n                (state) => state.label === filterOption.option\n              );\n              return [\n                ...prevState.slice(0, index),\n                ...prevState.slice(index + 1, prevState.length),\n              ];\n            });\n          }\n        });\n      }\n      if (filter.type === 'text' && filter.value.length > 0) {\n        const addTextFilter = { label: filter.value, key: filter.label };\n        if (chipsArray.find((chip) => chip.key === filter.label)) {\n          setChipsArray((prevState) =>\n            prevState.map((f) => {\n              return f.key === filter.label ? addTextFilter : f;\n            })\n          );\n        } else {\n          setChipsArray((prevState) => [...prevState, addTextFilter]);\n        }\n      } else if (\n        filter.type === 'text' &&\n        chipsArray.find((chip) => chip.key === filter.label)\n      ) {\n        setChipsArray((prevState) => {\n          const index = prevState.findIndex(\n            (state) => state.key === filter.label\n          );\n          return [\n            ...prevState.slice(0, index),\n            ...prevState.slice(index + 1, prevState.length),\n          ];\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    buildChipsArray();\n  }, [filterValues]);\n\n  const handleResetFilters = () => {\n    setFilterValues((prevState) => {\n      const removedValues = prevState.map((filter) => {\n        if (filter.type === 'text') {\n          return { ...filter, value: '' };\n        }\n        if (filter.type === 'checkbox') {\n          const setFalse = filter.value.map((checkbox) => {\n            checkbox.isChecked = false;\n            return { ...checkbox, isChecked: false };\n          });\n          return { ...filter, value: setFalse };\n        }\n      });\n      return removedValues;\n    });\n    setChipsArray([]);\n  };\n\n  const handleDeleteFilter = (filter) => {\n    const filterLabelIndex = filterValues.findIndex(\n      (value) => value.label === filter.key\n    );\n    setFilterValues((prevState) => {\n      const changedValue = prevState[filterLabelIndex];\n      if (changedValue.type === 'text') {\n        return [\n          ...prevState.slice(0, filterLabelIndex),\n          { ...prevState[filterLabelIndex], value: '' },\n          ...prevState.slice(filterLabelIndex + 1, prevState.length),\n        ];\n      }\n      if (changedValue.type === 'checkbox') {\n        const changeFalse = changedValue.value.map((option) =>\n          option.option === filter.label\n            ? { ...option, isChecked: false }\n            : option\n        );\n        setChipsArray((prevState) => {\n          const removeIndex = prevState.findIndex((state) => state === filter);\n          return [\n            ...prevState.slice(0, removeIndex),\n            ...prevState.slice(removeIndex + 1, prevState.length),\n          ];\n        });\n        return [\n          ...prevState.slice(0, filterLabelIndex),\n          { ...prevState[filterLabelIndex], value: changeFalse },\n          ...prevState.slice(filterLabelIndex + 1, prevState.length),\n        ];\n      }\n      return prevState;\n    });\n  };\n\n  return (\n    <>\n      {chipsArray.length > 0\n        ? Object.entries(groupBy(chipsArray, 'key')).map(([key, value]) => (\n            <ChipGroup\n              data-testid=\"filter-chip\"\n              className=\"pf-u-mr-xs\"\n              categoryName={key}\n              key={key}\n            >\n              {value.map((filter) => (\n                <Chip onClick={() => handleDeleteFilter(filter)} key={key}>\n                  {filter.label}\n                </Chip>\n              ))}\n            </ChipGroup>\n          ))\n        : null}\n      {chipsArray.length > 0 ? (\n        <Button variant=\"link\" onClick={handleResetFilters}>\n          Clear filters\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nFilterChips.propTypes = {\n  filterValues: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  chipsArray: PropTypes.array,\n  setChipsArray: PropTypes.func,\n};\n\nexport default FilterChips;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n  Button,\n  ToggleGroup,\n  ToggleGroupItem,\n  Skeleton,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport FilterControls from './FilterControls';\nimport FilterChip from './FilterChips';\n\nconst ToolbarButtons = ({ buttons }) => {\n  return buttons.map(({ title, click }, index) => (\n    <ToolbarItem key={index}>\n      <Button onClick={click} variant=\"primary\">\n        {title}\n      </Button>\n    </ToolbarItem>\n  ));\n};\n\nconst ToolbarHeader = ({\n  toolbarButtons,\n  filters,\n  setFilterValues,\n  filterValues,\n  chipsArray,\n  setChipsArray,\n  isLoading,\n  count,\n  perPage,\n  setPerPage,\n  page,\n  setPage,\n  toggleButton,\n  toggleAction,\n  toggleState,\n}) => {\n  return (\n    <Toolbar id=\"toolbar\" data-testid=\"toolbar-header-testid\">\n      <ToolbarContent>\n        <FilterControls\n          filters={filters}\n          filterValues={filterValues}\n          setFilterValues={setFilterValues}\n        />\n        {toolbarButtons && <ToolbarButtons buttons={toolbarButtons} />}\n        {toggleButton && (\n          <ToggleGroup>\n            {toggleButton.map((btn) => (\n              <ToggleGroupItem\n                key={btn.key}\n                text={btn.title}\n                isSelected={toggleState === btn.key}\n                onChange={() => toggleAction(btn.key)}\n              />\n            ))}\n          </ToggleGroup>\n        )}\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          {isLoading ? (\n            <Skeleton width=\"200px\" />\n          ) : count > 0 ? (\n            <Pagination\n              data-testid=\"pagination-header-test-id\"\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n              widgetId=\"pagination-options-menu-top\"\n              onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n              isCompact\n            />\n          ) : null}\n        </ToolbarItem>\n      </ToolbarContent>\n      <ToolbarContent>\n        <ToolbarItem variant=\"chip-group\" spacer={{ default: 'spacerNone' }}>\n          <FilterChip\n            filterValues={filterValues}\n            setFilterValues={setFilterValues}\n            chipsArray={chipsArray}\n            setChipsArray={setChipsArray}\n          />\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarHeader.propTypes = {\n  filters: PropTypes.array,\n  toolbarButtons: PropTypes.array,\n  setFilterValues: PropTypes.func,\n  filterValues: PropTypes.array,\n  input: PropTypes.string,\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n  chipsArray: PropTypes.array,\n  setChipsArray: PropTypes.func,\n  isLoading: PropTypes.bool,\n  toggleButton: PropTypes.array,\n  toggleAction: PropTypes.func,\n  toggleState: PropTypes.number,\n};\nexport default ToolbarHeader;\n","import React from 'react';\nimport {\n  Toolbar,\n  Pagination,\n  ToolbarItem,\n  ToolbarContent,\n  Skeleton,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst ToolbarFooter = ({\n  isLoading,\n  count,\n  perPage,\n  setPerPage,\n  page,\n  setPage,\n}) => {\n  return (\n    <Toolbar id=\"toolbar\">\n      <ToolbarContent>\n        <ToolbarItem variant=\"pagination\" align={{ default: 'alignRight' }}>\n          {isLoading ? (\n            <Skeleton width=\"400px\" />\n          ) : count > 0 ? (\n            <Pagination\n              data-testid=\"pagination-footer-test-id\"\n              itemCount={count}\n              perPage={perPage}\n              page={page}\n              onSetPage={(_e, pageNumber) => setPage(pageNumber)}\n              widgetId=\"pagination-options-menu-top\"\n              onPerPageSelect={(_e, perPage) => setPerPage(perPage)}\n            />\n          ) : null}\n        </ToolbarItem>\n      </ToolbarContent>\n    </Toolbar>\n  );\n};\n\nToolbarFooter.propTypes = {\n  isLoading: PropTypes.bool,\n  count: PropTypes.number,\n  perPage: PropTypes.number,\n  setPerPage: PropTypes.func,\n  page: PropTypes.number,\n  setPage: PropTypes.func,\n};\n\nexport default ToolbarFooter;\n","const createFilterValues = (filters) =>\n  filters.map((filter) => {\n    const config = {\n      type: filter.type,\n      label: filter.label,\n    };\n\n    if (filter.type === 'text') config.value = filter.value || '';\n    if (filter.type === 'checkbox')\n      config.value = filter.options.map((option, index) => ({\n        ...option,\n        id: 'option' + index,\n        isChecked: option.isChecked || false,\n      }));\n    return config;\n  });\n\nexport default createFilterValues;\n","import React, { useState, useEffect } from 'react';\nimport ToolbarHeader from './ToolbarHeader';\nimport ToolbarFooter from './ToolbarFooter';\nimport createFilterValues from '../../components/general-table/createFilterValues';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport { Skeleton } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport CustomEmptyState from '../Empty';\nimport { useDispatch } from 'react-redux';\nimport { transformSort } from '../../Routes/ImageManager/constants';\n\nconst filterParams = (chipsArray) => {\n  const filterParamsObj =\n    chipsArray.length > 0\n      ? chipsArray.reduce((acc, filter) => {\n          if (acc[filter.key.toLowerCase()]) {\n            const returnAcc =\n              typeof acc[filter.key.toLowerCase()] === 'string'\n                ? [acc[filter.key.toLowerCase()]]\n                : [...acc[filter.key.toLowerCase()]];\n            return {\n              ...acc,\n              [filter.key.toLowerCase()]: [\n                ...returnAcc,\n                filter.apiName ? filter.apiName : filter.value,\n              ],\n            };\n          } else {\n            return {\n              ...acc,\n              [filter.key.toLowerCase()]: filter.apiName\n                ? filter.apiName\n                : filter.value || filter.label,\n            };\n          }\n        }, {})\n      : {};\n  return filterParamsObj;\n};\n\nconst GeneralTable = ({\n  apiFilterSort,\n  urlParam,\n  filters,\n  loadTableData,\n  tableData,\n  columnNames,\n  rows,\n  toolbarButtons,\n  actionResolver,\n  areActionsDisabled,\n  defaultSort,\n  emptyStateMessage,\n  emptyStateAction,\n  emptyStateActionMessage,\n  toggleButton,\n  toggleAction,\n  toggleState,\n}) => {\n  const [filterValues, setFilterValues] = useState(createFilterValues(filters));\n  const [chipsArray, setChipsArray] = useState([]);\n  const [sortBy, setSortBy] = useState(defaultSort);\n  const [perPage, setPerPage] = useState(20);\n  const [page, setPage] = useState(1);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const query = apiFilterSort\n      ? {\n          ...filterParams(chipsArray),\n          limit: perPage,\n          offset: (page - 1) * perPage,\n          ...transformSort({\n            direction: sortBy.direction,\n            name: columns[sortBy.index].type,\n          }),\n        }\n      : null;\n    apiFilterSort && urlParam\n      ? loadTableData(dispatch, urlParam, query)\n      : apiFilterSort\n      ? loadTableData(dispatch, query)\n      : null;\n  }, [chipsArray, perPage, page, sortBy]);\n\n  const { count, isLoading, hasError } = tableData;\n\n  //Used for repos until the api can sort and filter\n  const filteredByName = () => {\n    const activeFilters = filterValues.filter(\n      (filter) =>\n        (filter?.type === 'text' && filter?.value !== '') ||\n        (filter?.type === 'checkbox' &&\n          filter?.value.find((checked) => checked.isChecked))\n    );\n    const filteredArray = rows.filter((row) => {\n      if (activeFilters.length > 0) {\n        return activeFilters?.every((filter) => {\n          if (filter.type === 'text') {\n            return row.noApiSortFilter[\n              columnNames.findIndex((row) => row.title === filter.label)\n            ]\n              .toLowerCase()\n              .includes(filter.value.toLowerCase());\n          } else if (filter.type === 'checkbox') {\n            return filter.value.some(\n              (value) =>\n                value.isChecked &&\n                row.noApiSortFilter[\n                  columnNames.findIndex((row) => row.title === filter.label)\n                ].toLowerCase() === value.value.toLowerCase()\n            );\n          }\n        });\n      } else {\n        return row;\n      }\n    });\n    return filteredArray;\n  };\n\n  const filteredByNameRows = !apiFilterSort && filteredByName();\n\n  //non-api sort function\n  const sortedByDirection = (rows) =>\n    rows.sort((a, b) =>\n      typeof a?.noApiSortFilter[sortBy.index] === 'number'\n        ? sortBy.direction === 'asc'\n          ? a?.noApiSortFilter[sortBy.index] - b?.noApiSortFilter[sortBy.index]\n          : b?.noApiSortFilter[sortBy.index] - a?.noApiSortFilter[sortBy.index]\n        : sortBy.direction === 'asc'\n        ? a?.noApiSortFilter[sortBy.index].localeCompare(\n            b?.noApiSortFilter[sortBy.index],\n            undefined,\n            { sensitivity: 'base' }\n          )\n        : b?.noApiSortFilter[sortBy.index].localeCompare(\n            a?.noApiSortFilter[sortBy.index],\n            undefined,\n            { sensitivity: 'base' }\n          )\n    );\n\n  const nonApiCount = !apiFilterSort\n    ? sortedByDirection(filteredByNameRows)?.length\n    : 0;\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  const toShowSort =\n    isLoading || hasError || (count?.length > 0 && filters.length > 0);\n\n  const columns = columnNames.map((columnName) => ({\n    title: columnName.title,\n    type: columnName.type,\n    transforms: toShowSort ? [] : columnName.sort ? [sortable] : [],\n    columnTransforms: columnName.columnTransforms\n      ? columnName.columnTransforms\n      : [],\n  }));\n\n  const filteredRows = apiFilterSort\n    ? rows\n    : rows.length > 0\n    ? sortedByDirection(filteredByNameRows).slice(\n        (page - 1) * perPage,\n        (page - 1) * perPage + perPage\n      )\n    : rows;\n\n  const loadingRows = (perPage) =>\n    [...Array(perPage)].map(() => ({\n      cells: columnNames.map(() => ({ title: <Skeleton width=\"100%\" /> })),\n    }));\n\n  return (\n    <>\n      <ToolbarHeader\n        count={apiFilterSort ? count : nonApiCount}\n        toolbarButtons={toolbarButtons}\n        filters={filters}\n        filterValues={filterValues}\n        setFilterValues={setFilterValues}\n        chipsArray={chipsArray}\n        setChipsArray={setChipsArray}\n        isLoading={isLoading}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n        toggleButton={toggleButton}\n        toggleAction={toggleAction}\n        toggleState={toggleState}\n      />\n      {!isLoading && count < 1 ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-match\"\n          bgColor=\"white\"\n          icon=\"search\"\n          title={emptyStateMessage}\n          secondaryActions={[\n            {\n              title: emptyStateActionMessage,\n              onClick: () => emptyStateAction(),\n            },\n          ]}\n        />\n      ) : !isLoading && !filteredRows?.length > 0 ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-match\"\n          bgColor=\"white\"\n          icon=\"search\"\n          title=\"No match found\"\n          secondaryActions={[\n            {\n              title: 'Clear all filters',\n              onClick: () => setFilterValues(createFilterValues(filters)),\n            },\n          ]}\n        />\n      ) : (\n        <Table\n          data-testid=\"general-table-testid\"\n          variant=\"compact\"\n          aria-label=\"Manage Images table\"\n          sortBy={sortBy}\n          onSort={handleSort}\n          actionResolver={actionResolver ? actionResolver : null}\n          areActionsDisabled={areActionsDisabled}\n          cells={columns}\n          rows={isLoading ? loadingRows(perPage) : filteredRows}\n        >\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n\n      <ToolbarFooter\n        isLoading={isLoading}\n        count={apiFilterSort ? count : nonApiCount}\n        setFilterValues={setFilterValues}\n        perPage={perPage}\n        setPerPage={setPerPage}\n        page={page}\n        setPage={setPage}\n      />\n    </>\n  );\n};\n\nGeneralTable.propTypes = {\n  apiFilterSort: PropTypes.bool,\n  filters: PropTypes.array,\n  urlParam: PropTypes.string,\n  loadTableData: PropTypes.func,\n  tableData: PropTypes.object,\n  columnNames: PropTypes.array,\n  rows: PropTypes.array,\n  actionResolver: PropTypes.func,\n  areActionsDisabled: PropTypes.func,\n  defaultSort: PropTypes.object,\n  toolbarButtons: PropTypes.array,\n  emptyStateMessage: PropTypes.string,\n  emptyStateActionMessage: PropTypes.string,\n  emptyStateAction: PropTypes.func,\n  toggleButton: PropTypes.array,\n  toggleAction: PropTypes.func,\n  toggleState: PropTypes.number,\n};\n\nexport default GeneralTable;\n","export const transformPaginationParams = ({ perPage, page }) => ({\n  limit: perPage,\n  offset: (page - 1) * perPage,\n});\n\nexport const transformFilters = (filters) => {\n  const f = filters.reduce((acc, filter) => {\n    if (!filter.chipKey || filter.chips.length === 0) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [filter.chipKey]: filter.chips.map((chip) => chip.value),\n    };\n  }, {});\n  return f;\n};\n\nexport const transformSort = ({ direction, name }) => {\n  return {\n    sort_by: direction === 'asc' ? name : `-${name}`,\n  };\n};\n\nexport const getFilterDep = (filter = undefined) => {\n  return filter?.chips?.map((chip) => chip.value).join('.') || undefined;\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const sortByDirection = (data, direction = 'asc') =>\n  data.sort((a, b) =>\n    direction === 'asc'\n      ? a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n      : b.name.toLowerCase().localeCompare(a.name.toLowerCase())\n  );\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n"],"names":["IMAGE_BUILDER_API","EDGE_API","getTableParams","q","Object","keys","reduce","acc","curr","value","undefined","length","multiVals","val","includes","fetchActiveImages","limit","offset","instance","getImageById","id","fetchDeviceSummary","client","HostsApi","Promise","all","apiHostGetHostList","query","generateFilter","inventoryFields","system_profile","then","resp","index","deviceSummaryMapper","total","getPackages","distribution","architecture","search","params","URLSearchParams","toString","createImage","Id","name","version","description","release","username","credentials","imageTypes","imageType","packages","payload","map","item","outputTypes","commit","arch","installer","sshkey","endpoint","fetchEdgeImageSets","sort_by","getEdgeImageStatus","getDeviceHasUpdate","console","log","updateDeviceLatestImage","getImageDataOnDevice","checkImageName","getCustomRepositories","createCustomRepository","Name","URL","baseURL","getImageSet","editCustomRepository","removeCustomRepository","emptyStateIconMapper","repository","RepositoryIcon","SearchIcon","Empty","bgColor","icon","title","body","primaryAction","secondaryActions","style","backgroundColor","headingLevel","size","onClick","click","variant","text","type","link","component","href","key","className","propTypes","PropTypes","FilterDropdown","filters","dropdown","setDropdown","ToolbarItem","Select","width","onToggle","prevState","isOpen","onSelect","_e","selection","selected","selections","toggleIcon","filter","SelectOption","label","FilterInput","filterValues","setFilterValues","input","selectedFilter","find","useState","setIsOpen","handleFilterChange","checkboxValue","selectedIndex","findIndex","checkedType","checkboxIndex","i","option","newValueArray","values","isChecked","newTextValue","InputGroup","SearchInput","placeholder","onChange","onClear","filterLabelIndex","slice","placeholderText","isCheckboxSelectionBadgeHidden","arr","FilterControls","FilterChips","chipsArray","setChipsArray","useEffect","forEach","filterOption","chip","state","apiName","optionApiName","addTextFilter","f","entries","ChipGroup","categoryName","Chip","changedValue","changeFalse","removeIndex","handleDeleteFilter","Button","setFalse","checkbox","ToolbarButtons","buttons","ToolbarHeader","toolbarButtons","isLoading","count","perPage","setPerPage","page","setPage","toggleButton","toggleAction","toggleState","Toolbar","ToolbarContent","ToggleGroup","btn","ToggleGroupItem","isSelected","align","default","Skeleton","Pagination","itemCount","onSetPage","pageNumber","widgetId","onPerPageSelect","isCompact","spacer","ToolbarFooter","config","options","GeneralTable","apiFilterSort","urlParam","loadTableData","tableData","columnNames","rows","actionResolver","areActionsDisabled","defaultSort","emptyStateMessage","emptyStateAction","emptyStateActionMessage","createFilterValues","sortBy","setSortBy","dispatch","useDispatch","toLowerCase","returnAcc","filterParams","direction","columns","activeFilters","hasError","filteredByNameRows","checked","row","every","noApiSortFilter","some","sortedByDirection","sort","a","b","localeCompare","sensitivity","nonApiCount","toShowSort","columnName","transforms","sortable","columnTransforms","filteredRows","Table","onSort","_event","cells","Array","loadingRows","TableHeader","TableBody","statusMapper","statusToIcon","done","CheckCircleIcon","color","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","unknown","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","sortByDirection","data","isEmptyFilters","constructActiveFilters","getLabel","category","chipKey","chips","isArray","host_type"],"sourceRoot":""}