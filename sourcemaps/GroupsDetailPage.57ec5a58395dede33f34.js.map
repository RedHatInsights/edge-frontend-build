{"version":3,"sources":["webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/AvailableImagesTile.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/constants.js","webpack:///./src/api/index.js","webpack:///./src/constants.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js"],"names":["GeneralInformation","lazy","SystemCard","OperatingSystemCard","CollectionCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","runningVersion","systemProfile","running_rpm_os_tree_version","stagedVersion","staged_rpm_os_tree_version","nonActiveVersion","non_active_rpm_os_tree_version","heathCheck","health_check","rhcHealth","rhc_health","Suspense","fallback","store","useStore","ConfigurationCardWrapper","SystemCardWrapper","props","hasSAP","OperatingSystemCardWrapper","hasKernelModules","extra","title","value","length","plural","singular","onClick","_e","handleClick","generalMapper","statusHelper","toUpperCase","Tooltip","content","className","CollectionCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","hideBack","hideInvDrawer","Main","Grid","gutter","GridItem","span","AppInfo","AvailableImageTileBase","children","Card","CardTitle","propTypes","PropTypes","AvailableImageTile","onNewImageClick","imagesReducer","isLoading","undefined","hasError","data","shallowEqual","CardBody","Bullseye","Spinner","Button","variant","style","paddingLeft","meta","count","CardFooter","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Stack","StackItem","deviceSummaryReducer","Tiles","dispatch","useDispatch","registered","notifications","notificationsReducer","loadImages","loadDeviceSummary","Flex","FlexItem","AvailableImagesTile","CreateImageWizard","React","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","useState","getEntities","setGetEntities","isOpen","setIsOpen","activeFilters","setActiveFilters","inventory","useRef","history","useHistory","URLSearchParams","location","search","get","cleanEntities","Fragment","PageHeaderTitle","push","pathname","create_image","toString","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","_i","config","filter","system_profile","host_type","fields","hideFilters","registeredWith","filterConfig","items","type","filterValues","onChange","event","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onDelete","itemsToRemove","isAll","onDeleteFilter","onRowClick","id","mergeWithEntities","api","navigateBack","columns","perPage","setPerPage","page","setPage","opened","setOpened","edgeImagesReducer","loadEdgeImages","limit","offset","pagination","colSize","rowSize","icon","DisconnectedIcon","headingLevel","itemCount","onSetPage","_evt","newPage","onPerPageSelect","newPerPage","isCompact","dedicatedAction","isDisabled","Table","aria-label","onExpand","_rowIndex","_colIndex","isExpanded","rowData","imageId","ariaLabel","cells","rows","flatten","map","ID","paths","Name","Version","Distribution","imageTypeMapper","ImageType","date","CreatedAt","status","Status","heightAuto","colSpan","PlusCircleIcon","TableHeader","TableBody","imageStatusReducer","TextContent","TextList","TextListItem","T","StatusLabel","loadImageStatus","hasGutter","Title","statusIcons","color","statusColors","text","composeStatus","imageStatusMapper","charAt","slice","unknown","CREATED","BUILDING","ERROR","SUCCESS","releaseMapper","IMAGE_BUILDER_API","EDGE_API","fetchActiveImages","instance","fetchImageStatus","fetchDeviceSummary","client","HostsApi","Promise","all","apiHostGetHostList","query","generateFilter","inventoryFields","then","resp","reduce","acc","curr","index","deviceSummaryMapper","total","getPackages","distribution","architecture","params","createImage","description","release","payload","imageType","commit","arch","packages","fetchEdgeImages","statusMapper","statusToIcon","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","pending","PauseCircleIcon","updating","CircleNotchIcon","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","Object","values","getLabel","entries","key","category","chipKey","chips","Array","isArray","currItem","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","asyncActions","flatMap","a","CLEAN_ENTITIES","keyBy","k","rejected","createNewImage","groups","results","threshold","devicesInfo","canariesInfo","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","defaultProps","devices","_state"],"mappings":"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","file":"js/GroupsDetailPage.f2700b660f52771473f5.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nimport {\n  generalMapper,\n  statusHelper,\n} from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const {\n    runningVersion,\n    stagedVersion,\n    nonActiveVersion,\n    heathCheck,\n    rhcHealth,\n  } = useSelector(({ systemProfileStore }) => ({\n    runningVersion:\n      systemProfileStore?.systemProfile?.running_rpm_os_tree_version,\n    stagedVersion:\n      systemProfileStore?.systemProfile?.staged_rpm_os_tree_version,\n    nonActiveVersion:\n      systemProfileStore?.systemProfile?.non_active_rpm_os_tree_version || [],\n    heathCheck: systemProfileStore?.systemProfile?.health_check,\n    rhcHealth: systemProfileStore?.systemProfile?.rhc_health,\n  }));\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        ConfigurationCardWrapper={false}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard {...props} hasSAP={false} />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard\n              {...props}\n              hasKernelModules={false}\n              extra={[\n                { title: 'Running rpm-ostree version', value: runningVersion },\n                {\n                  title: 'Staged rpm-ostree version',\n                  value: stagedVersion,\n                },\n                {\n                  title: 'Non-active (available rollback version(s))',\n                  value: nonActiveVersion?.length,\n                  plural: 'versions',\n                  singular: 'version',\n                  onClick: (_e, handleClick) =>\n                    handleClick(\n                      'Non-active (available rollback version(s))',\n                      generalMapper(nonActiveVersion || [], 'Version'),\n                      'small'\n                    ),\n                },\n                {\n                  title: 'Health check status',\n                  value: statusHelper[heathCheck?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  AppInfo,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={uuid ? `/groups` : '/fleet-management'}>\n              {uuid ? 'Groups' : 'Fleet management'}\n            </Link>\n          </BreadcrumbItem>\n          {uuid && (\n            <BreadcrumbItem>\n              {groupName ? (\n                <Link to={`/groups/${uuid}`}>{groupName}</Link>\n              ) : (\n                <Skeleton size={SkeletonSize.xs} />\n              )}\n            </BreadcrumbItem>\n          )}\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead fallback=\"\" hideBack showTags hideInvDrawer />\n      </PageHeader>\n      <Main className=\"edge-c-device--detail\">\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <AppInfo showTags fallback=\"\" />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardFooter,\n  Button,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst AvailableImageTileBase = ({ children }) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Available images</CardTitle>\n    {children}\n  </Card>\n);\n\nAvailableImageTileBase.propTypes = {\n  children: PropTypes.children,\n};\n\nconst AvailableImageTile = ({ onNewImageClick }) => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ imagesReducer }) => ({\n      isLoading:\n        imagesReducer?.isLoading !== undefined\n          ? imagesReducer?.isLoading\n          : true,\n      hasError: imagesReducer?.hasError || false,\n      data: imagesReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  return (\n    <AvailableImageTileBase>\n      <CardBody>\n        {isLoading ? (\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        ) : hasError ? (\n          data\n        ) : (\n          <Button variant=\"link\" style={{ paddingLeft: 0 }}>\n            {data.meta.count} images\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter>\n        <Button variant=\"primary\" onClick={() => onNewImageClick()}>\n          Create new image\n        </Button>\n      </CardFooter>\n    </AvailableImageTileBase>\n  );\n};\n\nAvailableImageTile.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n\nexport default AvailableImageTile;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary information</CardTitle>\n    <CardBody>\n      <Stack>\n        <StackItem>\n          <Button variant=\"link\">{orphaned}</Button> orphaned devices\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{active}</Button> active devices\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{noReports}</Button> devices has not reported\n          in the last 6 months\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{neverReported}</Button> devices were\n          registered but never reported\n        </StackItem>\n      </Stack>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport AvailableImagesTile from './AvailableImagesTile';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = ({ onNewImageClick }) => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n      notifications: notificationsReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <AvailableImagesTile onNewImageClick={onNewImageClick} />\n      </FlexItem>\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [getEntities, setGetEntities] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('create_image') === 'true') {\n      setIsOpen(() => true);\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles\n          onNewImageClick={() => {\n            history.push({\n              pathname: history.location.pathname,\n              search: new URLSearchParams({\n                create_image: true,\n              }).toString(),\n            });\n            setIsOpen(true);\n          }}\n        />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n          }}\n          getEntities={async (_i, config) => {\n            const data = await getEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                ],\n              },\n            });\n            return data;\n          }}\n          hideFilters={{ registeredWith: true }}\n          filterConfig={{\n            items: [\n              {\n                label: activeFilters?.deviceStatus?.label,\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value) => {\n                    setActiveFilters(() => ({\n                      ...(activeFilters || {}),\n                      deviceStatus: {\n                        ...(activeFilters?.deviceStatus || {}),\n                        value,\n                      },\n                    }));\n                    inventory.current.onRefreshData();\n                  },\n                  items: deviceStatusMapper,\n                  value: activeFilters?.deviceStatus?.value || [],\n                },\n              },\n            ],\n          }}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            onDelete: (event, itemsToRemove, isAll) => {\n              if (isAll) {\n                setActiveFilters(defaultFilters);\n              } else {\n                setActiveFilters(() =>\n                  onDeleteFilter(activeFilters, itemsToRemove)\n                );\n              }\n              inventory.current.onRefreshData();\n            },\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities, api }) => {\n            setGetEntities(() => api?.getEntities);\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React, {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { loadEdgeImages } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport { edgeImagesReducer } from '../../store/reducers';\nimport { SkeletonTable } from '@redhat-cloud-services/frontend-components/SkeletonTable';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n  Button,\n  Skeleton,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { DisconnectedIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport flatten from 'lodash/flatten';\nimport { Table, TableHeader, TableBody } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { useHistory } from 'react-router-dom';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { imageTypeMapper } from '../ImageManagerDetail/constants';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst columns = ['Name', 'Version', 'RHEL', 'Type', 'Created', 'Status'];\n\nconst Images = () => {\n  const history = useHistory();\n  const [perPage, setPerPage] = useState(100);\n  const [page, setPage] = useState(1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [opened, setOpened] = useState([]);\n  const dispatch = useDispatch();\n  const { getRegistry } = useContext(RegistryContext);\n  const { isLoading, hasError, data } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      isLoading:\n        edgeImagesReducer?.isLoading !== undefined\n          ? edgeImagesReducer?.isLoading\n          : true,\n      hasError: edgeImagesReducer?.hasError || false,\n      data: edgeImagesReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      edgeImagesReducer,\n    });\n    return () => registered();\n  }, []);\n\n  useEffect(() => {\n    loadEdgeImages(dispatch, { limit: perPage, offset: (page - 1) * perPage });\n  }, [page, perPage]);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Fragment>\n          {isLoading ? (\n            <Fragment>\n              <PrimaryToolbar pagination={<Skeleton />} />\n              <SkeletonTable colSize={5} rowSize={15} />\n            </Fragment>\n          ) : null}\n          {!isLoading && hasError ? (\n            <EmptyState>\n              <EmptyStateIcon icon={DisconnectedIcon} />\n              <Title headingLevel=\"h4\" size=\"lg\">\n                Error!\n              </Title>\n              <EmptyStateBody>\n                There was an error while loading images list!\n              </EmptyStateBody>\n            </EmptyState>\n          ) : null}\n          {!isLoading && !hasError ? (\n            <Fragment>\n              {data.length > 0 ? (\n                <PrimaryToolbar\n                  pagination={{\n                    itemCount: data?.length || 0,\n                    page,\n                    perPage,\n                    onSetPage: (_evt, newPage) => setPage(newPage),\n                    onPerPageSelect: (_evt, newPerPage) =>\n                      setPerPage(newPerPage),\n                    isCompact: true,\n                  }}\n                  dedicatedAction={\n                    <Button\n                      onClick={() => {\n                        history.push({\n                          pathname: history.location.pathname,\n                          search: new URLSearchParams({\n                            create_image: true,\n                          }).toString(),\n                        });\n                        setIsOpen(true);\n                      }}\n                      isDisabled={isLoading !== false}\n                    >\n                      Create new image\n                    </Button>\n                  }\n                />\n              ) : null}\n              <Table\n                aria-label=\"Manage Images table\"\n                onExpand={(_e, _rowIndex, _colIndex, isExpanded, rowData) => {\n                  const imageId = rowData.id;\n                  setOpened(\n                    isExpanded\n                      ? opened.filter((item) => item !== imageId)\n                      : [...opened, imageId]\n                  );\n                }}\n                ariaLabel=\"Images table\"\n                variant=\"compact\"\n                cells={columns}\n                rows={\n                  data.length > 0\n                    ? flatten(\n                        data.map((item) => [\n                          {\n                            id: item.ID,\n                            cells: [\n                              {\n                                title: (\n                                  <Link\n                                    to={`${paths['manage-images']}/${item.ID}`}\n                                  >\n                                    {item.Name}\n                                  </Link>\n                                ),\n                              },\n                              item?.Version,\n                              item?.Distribution,\n                              {\n                                title: imageTypeMapper[item?.ImageType],\n                              },\n                              {\n                                title: <DateFormat date={item?.CreatedAt} />,\n                              },\n                              {\n                                title: <StatusLabel status={item?.Status} />,\n                              },\n                            ],\n                          },\n                        ])\n                      )\n                    : [\n                        {\n                          heightAuto: true,\n                          cells: [\n                            {\n                              props: { colSpan: 8 },\n                              title: (\n                                <Bullseye>\n                                  <EmptyState variant=\"small\">\n                                    <EmptyStateIcon icon={PlusCircleIcon} />\n                                    <Title headingLevel=\"h2\" size=\"lg\">\n                                      No images found\n                                    </Title>\n                                    <Button\n                                      onClick={() => {\n                                        history.push({\n                                          pathname: history.location.pathname,\n                                          search: new URLSearchParams({\n                                            create_image: true,\n                                          }).toString(),\n                                        });\n                                        setIsOpen(true);\n                                      }}\n                                      isDisabled={isLoading !== false}\n                                    >\n                                      Create new images\n                                    </Button>\n                                  </EmptyState>\n                                </Bullseye>\n                              ),\n                            },\n                          ],\n                        },\n                      ]\n                }\n              >\n                <TableHeader />\n                <TableBody />\n              </Table>\n            </Fragment>\n          ) : null}\n        </Fragment>\n      </Main>\n      {isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React from 'react';\nimport {\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n} from '@patternfly/react-core';\nimport StatusLabel from './StatusLabel';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DetailsHead = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ imageStatusReducer }) => ({\n      isLoading:\n        imageStatusReducer?.isLoading !== undefined\n          ? imageStatusReducer?.isLoading\n          : true,\n      hasError: imageStatusReducer?.hasError || false,\n      data: imageStatusReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  const status = !isLoading && !hasError ? data.Status : null;\n\n  return (\n    <TextContent>\n      <TextList component=\"dl\">\n        <TextListItem component=\"dt\" className=\"grid-align-center\">\n          Status\n        </TextListItem>\n        <TextListItem component=\"dd\">\n          {isLoading ? <Skeleton /> : <StatusLabel status={status} />}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport default DetailsHead;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Title,\n} from '@patternfly/react-core';\nimport { routes as paths } from '../../../package.json';\nimport { useDispatch } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { loadImageStatus } from '../../store/actions';\nimport { imageStatusReducer } from '../../store/reducers';\nimport DetailsHead from './DetailsHeader';\n\nconst ImageDetail = () => {\n  const { imageId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({ imageStatusReducer });\n    loadImageStatus(dispatch, imageId);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={paths['manage-images']}>Manged images</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>{imageId}</BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              {imageId}\n            </Title>\n          </StackItem>\n          <StackItem>\n            <DetailsHead />\n          </StackItem>\n        </Stack>\n      </PageHeader>\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1);\n  }\n  return (\n    <Label color={color} icon={icon}>\n      {text}\n    </Label>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = ['CREATED', 'BUILDING', 'ERROR', 'SUCCESS'];\n\nexport const statusIcons = {\n  unknown: <QuestionCircleIcon />,\n  CREATED: <CheckCircleIcon />,\n  BUILDING: <InProgressIcon />,\n  ERROR: <TimesCircleIcon />,\n  SUCCESS: <CheckCircleIcon />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  CREATED: 'green',\n  BUILDING: 'blue',\n  ERROR: 'red',\n  SUCCESS: 'green',\n};\n\nexport const imageStatusMapper = {\n  CREATED: 'CREATED',\n  BUILDING: 'Image build in progress',\n  ERROR: 'ERROR',\n  SUCCESS: 'SUCCESS',\n};\n\nexport const releaseMapper = {\n  'rhel-8': 'Red Hat Enterprise Linux (RHEL) 8.3',\n};\n\nexport const imageTypeMapper = {\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n};\n","import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst IMAGE_BUILDER_API = '/api/image-builder/v1';\nconst EDGE_API = '/api/edge/v1';\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const createImage = ({\n  name,\n  description,\n  release,\n  architecture,\n  imageType,\n  'selected-packages': packages,\n}) => {\n  const payload = {\n    name,\n    description,\n    distribution: release,\n    imageType,\n    commit: {\n      arch: architecture,\n      packages: packages.map((item) => ({ name: item })),\n    },\n  };\n  return instance.post(`${EDGE_API}/images`, payload);\n};\n\nexport const fetchEdgeImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(`${EDGE_API}/images?limit=${limit}&offset=${offset}`);\n};\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const imageArchMapper = {\n  x86_64: '64bit',\n  arm: 'Arm',\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    CREATE_NEW_IMAGE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  CREATE_NEW_IMAGE,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n  fetchEdgeImages,\n  createImage,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(() => callback())\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n"],"sourceRoot":""}