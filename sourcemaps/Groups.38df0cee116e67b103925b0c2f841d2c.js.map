{"version":3,"file":"js/Groups.22255de2740da17a8e60.js","mappings":"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","sources":["webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/hooks/useApi.js","webpack:///./src/utils/apiWithToast.js","webpack:///./node_modules/lodash/_baseFlatten.js","webpack:///./node_modules/lodash/_isFlattenable.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  addDevicesToGroup,\n  validateGroupName,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={validatorMapper}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\nimport { useFeatureFlags } from '../../utils';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchGroups,\n}) => {\n  const hideCreateGroupsEnabled = useFeatureFlags(\n    'edge-management.hide-create-group'\n  );\n\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData.rowInfo;\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled:\n            devices.length > 0\n              ? !(rowData?.rowInfo?.hasValidUpdate && hasUpdate)\n              : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n        hasValidUpdate: rowData?.DeviceGroup?.ValidUpdate,\n      },\n      cells: [\n        {\n          title: <Link to={`${paths.fleetManagement}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={\n          hideCreateGroupsEnabled\n            ? []\n            : [\n                {\n                  title: 'Create group',\n                  click: handleCreateModal,\n                },\n              ]\n        }\n        hasModalSubmitted={hasModalSubmitted}\n        setHasModalSubmitted={setHasModalSubmitted}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={async () => {\n              await fetchGroups();\n              setHasModalSubmitted(true);\n            }}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  closeModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React, { useEffect, useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/groups';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { useLocation } from 'react-router-dom';\nimport { emptyStateNoFilters, useFeatureFlags } from '../../utils';\n\nconst Groups = () => {\n  const hideCreateGroupsEnabled = useFeatureFlags(\n    'edge-management.hide-create-group'\n  );\n  const { search } = useLocation();\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const chrome = useChrome();\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const reloadData = async () => {\n    await fetchGroups();\n    setHasModalSubmitted(true);\n  };\n\n  useEffect(() => {\n    chrome?.updateDocumentTitle?.('Groups - Inventory | Edge management');\n  }, [chrome]);\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <section className=\"edge-groups pf-l-page__main-section pf-c-page__main-section\">\n        {!emptyStateNoFilters(isLoading, data?.count, search) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            {hideCreateGroupsEnabled}?{}:\n            <Empty\n              icon=\"plus\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n            {}\n          </Flex>\n        )}\n      </section>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={reloadData}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["asyncGroupNameValidation","value","length","undefined","validateGroupName","data","isValid","validatorMapper","groupName","createGroupSchema","fields","component","componentTypes","name","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","CreateGroupModal","isModalOpen","setIsModalOpen","deviceIds","reloadData","dispatch","useDispatch","handleCreateGroup","values","statusMessages","onSuccess","title","description","onError","apiWithToast","createGroup","handleAddDevicesToNewGroup","ID","addDevicesToGroup","parseInt","isOpen","closeModal","submitLabel","schema","onSubmit","propTypes","PropTypes","WarningIcon","color","warningColor","DeleteGroupModal","modalState","id","titleIconVariant","variant","deleteGroupById","UpdateDeviceModal","React","filters","columns","sort","GroupTable","count","isLoading","hasError","handleCreateModal","handleRenameModal","handleDeleteModal","hasModalSubmitted","setHasModalSubmitted","fetchGroups","hideCreateGroupsEnabled","useFeatureFlags","history","useHistory","pathname","useLocation","useState","deviceData","imageData","updateModal","setUpdateModal","buildRows","map","rowData","DeviceGroup","Name","Devices","DevicesImageInfo","systems","image","Tooltip","content","device","index","key","rowInfo","devicesImageInfo","devices","hasValidUpdate","ValidUpdate","cells","to","paths","GeneralTable","apiFilterSort","isUseApi","loadTableData","tableData","columnNames","rows","actionResolver","hasUpdate","some","UpdateAvailable","onClick","prevState","UUID","display_name","imageId","find","ImageID","isDisabled","areActionsDisabled","defaultSort","direction","emptyFilterState","body","toolbarButtons","click","Suspense","fallback","Bullseye","Spinner","navigateBack","push","refreshTable","search","useApi","api","getGroups","tableReload","response","chrome","useChrome","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","useEffect","updateDocumentTitle","PageHeader","className","PageHeaderTitle","emptyStateNoFilters","Flex","justifyContent","default","Empty","icon","primaryAction","text","secondaryActions","link","RenameGroupModal","initialValues","updateGroupById","payload","instance","EDGE_API","Type","query","q","getTableParams","getGroupById","groupId","removeDevicesFromGroup","removeDeviceFromGroupById","RepoModal","size","additionalMappers","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","onCancel","setData","setIsLoading","setHasError","hasSuccess","fetchData","addNotification","notificationProp","hasInfo","onInfo","hasWarning","onWarning","err","Title","arrayPush","isFlattenable","module","exports","baseFlatten","array","depth","predicate","isStrict","result","Symbol","isArguments","isArray","spreadableSymbol","isConcatSpreadable","_objectWithoutProperties","source","excluded","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}