{"version":3,"file":"js/DeviceDetail.34eb6f180780dddfbd5a.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/api/images/index.js","webpack:///./src/api/index.js","webpack:///./src/components/CmpLoader.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/constants/index.js","webpack:///./src/hooks/useApi.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport CmpLoader from './CmpLoader';\n\nconst GeneralInformation = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./GeneralInformation\"\n    fallback={<CmpLoader numberOfRows={3} />}\n    {...props}\n  />\n);\n\nconst SystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./SystemCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst OperatingSystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./OperatingSystemCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst BiosCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./BiosCard\"\n    fallback={<CmpLoader numberOfRows={4} />}\n    {...props}\n  />\n);\n\nconst CollectionCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./CollectionCard\"\n    fallback={<CmpLoader numberOfRows={7} />}\n    {...props}\n  />\n);\n\nconst InfrastructureCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./InfrastructureCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"ImageInformationCard\" */ './ImageInformationCard'\n  )\n);\n\nconst InfrastructureCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      {' '}\n      <InfrastructureCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst ImageInformationCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      {' '}\n      <ImageInformationCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst BiosCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      <BiosCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst OperatingSystemCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      <OperatingSystemCard {...props} hasKernelModules={true} store={store} />\n    </Suspense>\n  );\n};\n\nconst CollectionCardWrapper = (props) => {\n  const store = useStore();\n  // TODO: fix rhcHealth display\n  const rhcHealth = null;\n  return (\n    <Suspense fallback=\"\">\n      <CollectionCard\n        {...props}\n        extra={[\n          {\n            title: 'RHC Health (broker functioning)',\n            value: rhcHealth || (\n              <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n              </Tooltip>\n            ),\n          },\n        ]}\n        store={store}\n      />\n    </Suspense>\n  );\n};\n\nconst SystemCardWrapper = (props) => {\n  const store = useStore();\n  const { greenbootStatus } = useSelector(({ systemProfileStore }) => {\n    return {\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n    };\n  });\n\n  return (\n    <Suspense fallback=\"\">\n      <SystemCard\n        {...props}\n        store={store}\n        hasCPUs={false}\n        hasSockets={false}\n        hasCores={false}\n        hasCPUFlags={false}\n        hasRAM={false}\n        hasSAP={false}\n        extra={[\n          {\n            title: (\n              <TitleWithPopover\n                title=\"GreenBoot Status\"\n                content=\"This is a description about greenboot status\"\n              />\n            ),\n            value: <GreenbootStatus status={greenbootStatus} />,\n          },\n        ]}\n      />\n    </Suspense>\n  );\n};\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const store = useStore();\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={store}\n        writePermissions={writePermissions}\n        SystemCardWrapper={SystemCardWrapper}\n        OperatingSystemCardWrapper={InfrastructureCardWrapper}\n        BiosCardWrapper={ImageInformationCardWrapper}\n        InfrastructureCardWrapper={BiosCardWrapper}\n        ConfigurationCardWrapper={OperatingSystemCardWrapper}\n        CollectionCardWrapper={CollectionCardWrapper}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport { imageTypeMapper, releaseMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  createNewImage,\n  addImageToPoll,\n  loadImageDetail,\n  loadEdgeImageSets,\n} from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Update image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Update Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/images';\n\nconst getActiveAlert = (\n  CVEs,\n  deviceData,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    deviceData?.UpdateTransactions[0]?.Status === 'BUILDING' ||\n    deviceData?.UpdateTransactions[0]?.Status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (deviceData?.Device?.UpdateAvailable) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  deviceData,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { deviceId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!deviceData) {\n        return;\n      }\n      // Use view API to get current image set status\n      const params = {\n        id: 'view',\n        q: { id: deviceData?.ImageInfo?.Image?.ImageSetID },\n      };\n      const resp = await getImageSet(params);\n      setNewImageStatus(resp?.data?.[0]?.Status);\n    })();\n  }, [deviceData]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, deviceData, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your system.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update system to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update system\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"System updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </section>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.number,\n  deviceData: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport GeneralInformationTab from '../../components/DeviceDetail';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <Tabs\n      className=\"pf-u-ml-md\"\n      activeKey={activeTabKey}\n      onSelect={handleTabClick}\n    >\n      <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n        <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n          <GeneralInformationTab />\n        </section>\n      </Tab>\n      <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n        <VulnerabilityTab\n          deviceData={systemProfile}\n          setUpdateModal={setUpdateModal}\n          imageId={imageId}\n          setReload={setReload}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.number,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useHistory, useLocation, useParams, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport { getDevice, getInventory } from '../../api/devices';\nimport Status, { getDeviceStatus } from '../../components/Status';\nimport useApi from '../../hooks/useApi';\nimport RetryUpdatePopover from '../Devices/RetryUpdatePopover';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { routes as paths } from '../../constants/routeMapper';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [{ default: systemProfileStore }] = useLoadModule(\n    {\n      appName: 'inventory',\n      scope: 'inventory',\n      module: './systemProfileStore',\n    },\n    {}\n  );\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const { deviceId, groupId } = useParams();\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const hasEntityFinishedLoading = useSelector(\n    (store) => store?.entityDetails?.loaded\n  );\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n\n  const [imageData, setImageData] = useState();\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n\n  const [deviceData, fetchDeviceData] = useApi({\n    api: () =>\n      getInventory({\n        query: {\n          uuid: deviceId,\n        },\n      }),\n  });\n\n  const [deviceView] = deviceData.data?.data?.devices || [];\n  const {\n    Status: deviceViewStatus,\n    UpdateAvailable: updateAvailable,\n    DispatcherStatus: updateStatus,\n    LastSeen: lastSeen,\n    DeviceGroups: deviceGroups,\n  } = deviceView || {};\n\n  const groupName = groupId\n    ? deviceGroups?.find((group) => group.ID.toString() === groupId)?.Name\n    : null;\n\n  const deviceStatus = getDeviceStatus(\n    deviceViewStatus,\n    updateAvailable,\n    updateStatus\n  );\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDevice(deviceId);\n      setImageData(image_data);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n            deviceStatus: deviceStatus,\n          },\n        ],\n        imageSetId: image_data?.ImageInfo?.Image?.ImageSetID,\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  return systemProfileStore ? (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n      inventoryId={deviceId}\n    >\n      <PageHeader>\n        {!groupName ? (\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={paths.inventory}>Systems</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb ouiaId=\"groups-list\">\n            <BreadcrumbItem>\n              <Link to={paths.fleetManagement}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>\n              <Link to={`${paths.fleetManagement}/${groupId}`}>\n                {groupName}\n              </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <InventoryDetailHead\n          fallback=\"\"\n          actions={[\n            {\n              title: 'Update',\n              isDisabled:\n                imageData?.UpdateTransactions?.[0]?.Status === 'BUILDING' ||\n                imageData?.UpdateTransactions?.[0]?.Status === 'CREATED' ||\n                !imageData?.ImageInfo?.UpdatesAvailable?.length > 0,\n              onClick: () => {\n                history.push({\n                  pathname: `${pathname}/update`,\n                  search: '?from_details=true',\n                });\n              },\n            },\n          ]}\n          hideBack\n          hideInvDrawer\n          inventoryId={deviceId}\n        />\n\n        {isDeviceStatusLoading ? (\n          <Skeleton size={SkeletonSize.xs} />\n        ) : deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n          <RetryUpdatePopover\n            lastSeen={lastSeen}\n            device={deviceView}\n            position={'right'}\n            fetchDevices={fetchDeviceData}\n          >\n            <Status\n              id={'device-status'}\n              type={\n                deviceStatus === 'error'\n                  ? 'errorWithExclamationCircle'\n                  : deviceStatus\n              }\n              isLink={true}\n              isLabel={true}\n              className=\"pf-u-mt-sm cursor-pointer\"\n            />\n          </RetryUpdatePopover>\n        ) : (\n          <Status\n            id={'device-status'}\n            type={deviceStatus}\n            isLabel={true}\n            className=\"pf-u-mt-sm\"\n          />\n        )}\n      </PageHeader>\n      {hasEntityFinishedLoading && (\n        <DeviceDetailTabs\n          systemProfile={imageData}\n          imageId={imageId}\n          setUpdateModal={setUpdateModal}\n          setReload={setReload}\n        />\n      )}\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={() => setReload(true)}\n          />\n        </Suspense>\n      )}\n    </DetailWrapper>\n  ) : (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default DeviceDetail;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const EDGE_API = '/api/edge/v1';\nexport const CONTENT_SOURCES_API = '/api/content-sources/v1';\n\nexport const getTableParams = (q) => {\n  if (q === undefined) {\n    return '';\n  }\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n","import React from 'react';\nimport { Skeleton } from '@patternfly/react-core';\nimport { PropTypes } from 'prop-types';\n\nconst CmpLoader = ({ numberOfRows }) => {\n  var CmpRows = [];\n\n  for (var i = 0; i < numberOfRows; i++) {\n    CmpRows.push(\n      <React.Fragment key={i}>\n        <Skeleton />\n        <br />\n      </React.Fragment>\n    );\n  }\n  return <React.Fragment>{CmpRows}</React.Fragment>;\n};\n\nexport default CmpLoader;\n\nCmpLoader.propTypes = {\n  numberOfRows: PropTypes.number,\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import {\n  BellIcon,\n  CheckCircleIcon,\n  CircleNotchIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  PauseCircleIcon,\n  PlusCircleIcon,\n  UnknownIcon,\n  RepositoryIcon,\n  SearchIcon,\n  ModuleIcon,\n  CubeIcon,\n  TimesCircleIcon,\n  InProgressIcon,\n  QuestionCircleIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\nimport activeColor from '@patternfly/react-tokens/dist/esm/global_active_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const sortByDirection = (data, direction = 'asc') =>\n  data.sort((a, b) =>\n    direction === 'asc'\n      ? a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n      : b.name.toLowerCase().localeCompare(a.name.toLowerCase())\n  );\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const composeStatus = [\n  'CREATED',\n  'BUILDING',\n  'ERROR',\n  'SUCCESS',\n  'INTERRUPTED',\n];\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n  'rhel-85': 'RHEL 8.5',\n  'rhel-86': 'RHEL 8.6',\n  'rhel-87': 'RHEL 8.7',\n  'rhel-90': 'RHEL 9.0',\n  'rhel-91': 'RHEL 9.1',\n};\n\nexport const releaseMapper = {\n  'rhel-91': 'Red Hat Enterprise Linux (RHEL) 9.1',\n  'rhel-90': 'Red Hat Enterprise Linux (RHEL) 9.0',\n  'rhel-87': 'Red Hat Enterprise Linux (RHEL) 8.7',\n  'rhel-86': 'Red Hat Enterprise Linux (RHEL) 8.6',\n  'rhel-85': 'Red Hat Enterprise Linux (RHEL) 8.5',\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const supportedReleases = [\n  'rhel-84',\n  'rhel-85',\n  'rhel-86',\n  'rhel-87',\n  'rhel-90',\n  'rhel-91',\n];\n\nexport const temporaryReleases = ['rhel-91'];\n\nexport const DEFAULT_RELEASE = 'rhel-90';\nexport const TEMPORARY_RELEASE = 'rhel-91';\n\nexport const imageTypeMapper = {\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n};\n\nexport const iconMapper = {\n  unknown: UnknownIcon,\n  repository: RepositoryIcon,\n  search: SearchIcon,\n  module: ModuleIcon,\n  cube: CubeIcon,\n  question: QuestionCircleIcon,\n  plus: PlusCircleIcon,\n  checkCircle: CheckCircleIcon,\n  exclamationTriangle: ExclamationTriangleIcon,\n  timesCircle: TimesCircleIcon,\n  inProgress: InProgressIcon,\n  exclamationCircle: ExclamationCircleIcon,\n};\n\nexport const colorMapper = {\n  green: successColor.value,\n  yellow: warningColor.value,\n  lightBlue: infoColor.value,\n  blue: activeColor.value,\n  red: dangerColor.value,\n};\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await api({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData];\n};\n\nexport default useApi;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      hasInfo &&\n        dispatch({\n          ...addNotification({\n            variant: 'info',\n            ...statusMessages.onInfo,\n          }),\n        });\n      hasSuccess &&\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      return response;\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n          // Add error message from API, if present\n          description: err?.Title\n            ? `${statusMessages.onError.description}: ${err.Title}`\n            : statusMessages.onError.description,\n        }),\n      });\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","props","AsyncComponent","appName","module","fallback","CmpLoader","numberOfRows","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","React","InfrastructureCardWrapper","store","useStore","Suspense","ImageInformationCardWrapper","BiosCardWrapper","OperatingSystemCardWrapper","hasKernelModules","CollectionCardWrapper","extra","value","Tooltip","SystemCardWrapper","greenbootStatus","useSelector","systemProfileStore","systemProfile","greenboot_status","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","writePermissions","permissionsReducer","ConfigurationCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","data","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","key","onClick","payload","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","addNotification","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","deviceData","setUpdateModal","deviceId","useParams","useState","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","params","q","ImageInfo","Image","ImageSetID","getImageSet","isLoading","filter","length","UpdateTransactions","Device","UpdateAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","customIntlProvider","entity","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","Vulnerability","UpdateDeviceModal","useLoadModule","scope","history","useHistory","pathname","useLocation","groupId","setImageId","hasEntityFinishedLoading","entityDetails","imageData","setImageData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","useApi","api","getInventory","query","uuid","fetchDeviceData","devices","deviceView","deviceViewStatus","updateAvailable","updateStatus","DispatcherStatus","lastSeen","LastSeen","deviceGroups","DeviceGroups","groupName","find","group","toString","deviceStatus","getDeviceStatus","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDevice","image_data","imageSetId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","inventoryId","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","paths","isActive","Skeleton","size","SkeletonSize","InventoryDetailHead","isDisabled","UpdatesAvailable","push","search","hideBack","hideInvDrawer","RetryUpdatePopover","device","position","fetchDevices","type","isLink","isLabel","navigateBack","refreshTable","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","date","children","isVisible","setIsVisible","statusMessages","onSuccess","DeviceName","shouldOpen","shouldClose","alertseverityvariant","style","DispatcherReason","icon","headerComponent","footerContent","apiWithToast","updateSystem","DevicesUUID","DeviceUUID","defaultProps","checkImageName","instance","EDGE_API","createImage","imageTypes","packages","thirdPartyRepositories","customPackages","distribution","item","outputTypes","commit","arch","installer","sshkey","repo","URL","endpoint","limit","offset","sort_by","getTableParams","getImageSetViewVersions","imageSetID","getImageSetView","fetchEdgeImageSets","getImageDataOnDevice","getPackages","URLSearchParams","IMAGE_BUILDER_API","getImageById","getImageSets","postRpmsNames","urls","CONTENT_SOURCES_API","undefined","Object","keys","reduce","acc","curr","multiVals","val","includes","CmpRows","i","statusMapper","booting","text","Icon","iconMapper","colorMapper","labelColor","building","created","upToDate","passed","updating","error","default","interrupted","unresponsive","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","toolTipContent","prototype","hasOwnProperty","call","Label","Split","SplitItem","textDecoration","cursor","sortByDirection","direction","sort","a","b","toLowerCase","localeCompare","distributionMapper","supportedReleases","temporaryReleases","DEFAULT_RELEASE","TEMPORARY_RELEASE","unknown","UnknownIcon","repository","RepositoryIcon","SearchIcon","ModuleIcon","cube","CubeIcon","question","QuestionCircleIcon","plus","PlusCircleIcon","checkCircle","CheckCircleIcon","exclamationTriangle","ExclamationTriangleIcon","timesCircle","TimesCircleIcon","inProgress","InProgressIcon","exclamationCircle","ExclamationCircleIcon","green","successColor","yellow","warningColor","lightBlue","infoColor","blue","activeColor","red","dangerColor","statusToIcon","done","pending","PauseCircleIcon","CircleNotchIcon","warning","notification","BellIcon","tableReload","setData","setIsLoading","hasError","setHasError","hasSuccess","onError","fetchData","hasInfo","onInfo","response","Title"],"sourceRoot":""}