{"version":3,"file":"js/1286.ebe16b810fa4af33ca82.js","mappings":"8OAMMA,EAAc,SAACC,GAAU,QAC7B,GAAiCC,EAAAA,EAAAA,GAAO,CACtCC,IAAKF,SAAAA,EAAOG,UAAYC,EAAAA,GAAsBC,EAAAA,GAC9CC,GAAIN,SAAAA,EAAOG,UAAYH,aAAK,EAALA,EAAOG,UAAUI,WAAa,GACrDC,aAAa,IACb,eAJKC,EAAQ,KAAEC,EAAY,KAKrBC,EAA8BF,EAA9BE,KAAMC,EAAwBH,EAAxBG,UAAWC,EAAaJ,EAAbI,SAEzB,OACE,kBAAC,WAAW,QACVD,UAAWA,EACXC,SAAUA,EACVC,MAAOH,aAAI,EAAJA,EAAMG,MACbH,MAAMA,SAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYI,UAAW,GAC7BL,aAAcA,EACdM,kBAAmBL,SAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYM,qBAC3BjB,GAGV,EAEAD,EAAYmB,UAAY,CACtBf,UAAWgB,IAAAA,QAGb,S,+CC/BO,IAAMC,EAAS,CACpBC,OAAQ,UACRC,aAAc,gBACdC,aAAc,6BACdC,SAAU,YACVC,gBAAiB,oBACjBC,sBAAuB,6BACvBC,4BAA6B,+CAC7BC,kCACE,sDACFC,UAAW,aACXC,kBAAmB,4CACnBC,gBAAiB,uBACjBC,qBAAsB,gCACtBC,sBAAuB,8BACvBC,8BAA+B,uCAC/BC,aAAc,iBACdC,mBAAoB,0BACpBC,0BAA2B,mDAC3BC,aAAc,gBACdC,kBAAmB,sBACnBC,2BAA4B,4B,8sBCyC9B,QA1De,SAAH,GAAgE,MAA1DtC,EAAG,EAAHA,IAAG,IAAEI,GAAAA,OAAE,IAAG,OAAI,EAAEmC,EAAc,EAAdA,eAAc,IAAEjC,YAAAA,OAAW,IAAG,GAAK,EAC7DkC,GAAWC,EAAAA,EAAAA,eACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAG,eAA7BjC,EAAI,KAAEkC,EAAO,KACpB,GAAkCD,EAAAA,EAAAA,WAAS,GAAK,eAAzChC,EAAS,KAAEkC,EAAY,KAC9B,GAAgCF,EAAAA,EAAAA,WAAS,GAAM,eAAxC/B,EAAQ,KAAEkC,EAAW,KAC5B,GAA8BH,EAAAA,EAAAA,WAAS,kBAAM1C,CAAG,IAAC,eAA1C8C,EAAO,KAAEC,EAAU,KAEpBC,EAA2B,QAAjB,EAAGT,SAAc,aAAd,EAAgBU,UAC9BV,IACHA,EAAiB,CACfU,UAAW,CACTC,MAAO,UACPC,YAAa,0CAEfC,QAAS,CACPF,MAAO,QACPC,YAAa,0CAKnB,IAAME,EAAS,mCAAG,kGACG,OADIC,EAAQ,EAAH,6BAAG,GAC/BV,GAAa,GAAM,kBAEEE,EAAQ,CAAE1C,GAAAA,EAAIkD,MAAAA,IAAQ,OAAnC7C,EAAO,EAAH,KACVkC,EAAQlC,GAEJuC,GACFR,EAAS,EAAD,IACHe,EAAAA,EAAAA,IAAgB,EAAD,CAChBC,QAAS,WACNjB,EAAeU,cAGvB,kDAEDJ,GAAY,GAEZL,EAAS,EAAD,IACHe,EAAAA,EAAAA,IAAgB,EAAD,CAChBC,QAAS,UACNjB,EAAea,YAEnB,QAEiB,OAFjB,UAEHR,GAAa,GAAO,6EAEvB,kBA1Bc,mCAkCf,OANAa,EAAAA,EAAAA,YAAU,WACHnD,GACH+C,GAEJ,GAAG,IAEI,CAAC,CAAE5C,KAAAA,EAAMC,UAAAA,EAAWC,SAAAA,GAAY0C,EAAWP,EAASC,EAC7D,C","sources":["webpack:///./src/Routes/Devices/DevicesView.js","webpack:///./src/constants/routeMapper.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React from 'react';\nimport DeviceTable from './DeviceTable';\nimport useApi from '../../hooks/useApi';\nimport PropTypes from 'prop-types';\nimport { getInventory, getInventoryByGroup } from '../../api/devices';\n\nconst DevicesView = (props) => {\n  const [response, fetchDevices] = useApi({\n    api: props?.groupUUID ? getInventoryByGroup : getInventory,\n    id: props?.groupUUID ? props?.groupUUID.toString() : '',\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  return (\n    <DeviceTable\n      isLoading={isLoading}\n      hasError={hasError}\n      count={data?.count}\n      data={data?.data?.devices || []}\n      fetchDevices={fetchDevices}\n      enforceEdgeGroups={data?.data?.enforce_edge_groups}\n      {...props}\n    />\n  );\n};\n\nDevicesView.propTypes = {\n  groupUUID: PropTypes.string,\n};\n\nexport default DevicesView;\n","export const routes = {\n  groups: '/groups',\n  groupsDetail: '/groups/:uuid',\n  deviceDetail: '/groups/:uuid/:inventoryId',\n  canaries: '/canaries',\n  fleetManagement: '/fleet-management',\n  fleetManagementDetail: '/fleet-management/:groupId',\n  fleetManagementSystemDetail: '/fleet-management/:groupId/systems/:deviceId',\n  fleetManagementSystemDetailUpdate:\n    '/fleet-management/:groupId/systems/:deviceId/update',\n  inventory: '/inventory',\n  insightsInventory: '/insights/inventory/manage-edge-inventory',\n  inventoryDetail: '/inventory/:deviceId',\n  inventoryDetailModal: '/inventory/:deviceId/:modalId',\n  inventoryDetailUpdate: '/inventory/:deviceId/update',\n  insightsInventoryDetailUpdate: '/insights/inventory/:deviceId/update',\n  manageImages: '/manage-images',\n  manageImagesDetail: '/manage-images/:imageId',\n  manageImagesDetailVersion: '/manage-images/:imageId/versions/:imageVersionId',\n  repositories: '/repositories',\n  learningResources: '/learning-resources',\n  contentSourcesRepositories: '/preview/insights/content',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n"],"names":["DevicesView","props","useApi","api","groupUUID","getInventoryByGroup","getInventory","id","toString","tableReload","response","fetchDevices","data","isLoading","hasError","count","devices","enforceEdgeGroups","enforce_edge_groups","propTypes","PropTypes","routes","groups","groupsDetail","deviceDetail","canaries","fleetManagement","fleetManagementDetail","fleetManagementSystemDetail","fleetManagementSystemDetailUpdate","inventory","insightsInventory","inventoryDetail","inventoryDetailModal","inventoryDetailUpdate","insightsInventoryDetailUpdate","manageImages","manageImagesDetail","manageImagesDetailVersion","repositories","learningResources","contentSourcesRepositories","statusMessages","dispatch","useDispatch","useState","setData","setIsLoading","setHasError","apiFunc","setAPIFunc","hasSuccess","onSuccess","title","description","onError","fetchData","query","addNotification","variant","useEffect"],"sourceRoot":""}