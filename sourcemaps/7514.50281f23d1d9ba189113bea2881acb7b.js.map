{"version":3,"file":"js/7514.d2b17e2cf6916b31d16d.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Text/Text.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Text/TextContent.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Content/content.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/notifications.js","webpack:///./src/api/images/index.js","webpack:///./src/store/polling.js","webpack:///./src/store/index.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/Content/content';\nimport { useOUIAProps } from '../../helpers';\nexport var TextVariants;\n(function (TextVariants) {\n    TextVariants[\"h1\"] = \"h1\";\n    TextVariants[\"h2\"] = \"h2\";\n    TextVariants[\"h3\"] = \"h3\";\n    TextVariants[\"h4\"] = \"h4\";\n    TextVariants[\"h5\"] = \"h5\";\n    TextVariants[\"h6\"] = \"h6\";\n    TextVariants[\"p\"] = \"p\";\n    TextVariants[\"a\"] = \"a\";\n    TextVariants[\"small\"] = \"small\";\n    TextVariants[\"blockquote\"] = \"blockquote\";\n    TextVariants[\"pre\"] = \"pre\";\n})(TextVariants || (TextVariants = {}));\nexport const Text = (_a) => {\n    var { children = null, className = '', component = TextVariants.p, isVisitedLink = false, ouiaId, ouiaSafe = true } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isVisitedLink\", \"ouiaId\", \"ouiaSafe\"]);\n    const Component = component;\n    const ouiaProps = useOUIAProps(Text.displayName, ouiaId, ouiaSafe);\n    return (React.createElement(Component, Object.assign({}, ouiaProps, props, { \"data-pf-content\": true, className: css(isVisitedLink && component === TextVariants.a && styles.modifiers.visited, className) }), children));\n};\nText.displayName = 'Text';\n//# sourceMappingURL=Text.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Content/content';\nimport { css } from '@patternfly/react-styles';\nexport const TextContent = (_a) => {\n    var { children = null, className = '', isVisited = false } = _a, props = __rest(_a, [\"children\", \"className\", \"isVisited\"]);\n    return (React.createElement(\"div\", Object.assign({}, props, { className: css(styles.content, isVisited && styles.modifiers.visited, className) }), children));\n};\nTextContent.displayName = 'TextContent';\n//# sourceMappingURL=TextContent.js.map","import './content.css';\nexport default {\n  \"content\": \"pf-c-content\",\n  \"modifiers\": {\n    \"visited\": \"pf-m-visited\",\n    \"overpassFont\": \"pf-m-overpass-font\"\n  }\n};","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from './action-types';\nfunction generateID(type) {\n    return 'cloud-services' + type + '-' + new Date().getTime() + Math.random().toString(36).slice(2);\n}\nexport var addNotification = function (notification) { return ({\n    type: ADD_NOTIFICATION,\n    payload: __assign({ id: generateID('notification') }, notification),\n}); };\nexport var removeNotification = function (index) { return ({\n    type: REMOVE_NOTIFICATION,\n    payload: index,\n}); };\nexport var clearNotifications = function () { return ({\n    type: CLEAR_NOTIFICATIONS,\n}); };\nexport default {\n    addNotification: addNotification,\n    removeNotification: removeNotification,\n    clearNotifications: clearNotifications,\n};\n//# sourceMappingURL=notifications.js.map","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","const POLLING_SUFFIX = 'POLLING';\n\nconst hasPollingData = (polling = {}) => {\n  return polling?.id && polling?.fetcher && polling?.condition;\n};\n\nconst ofPollingType = (type) => type.endsWith(`_${POLLING_SUFFIX}`);\n\nexport const polling =\n  (pollHash = {}) =>\n  ({ dispatch }) =>\n  (next) =>\n  (action) => {\n    const { type, payload, meta } = action;\n    if (ofPollingType(type) && hasPollingData(payload)) {\n      const { id, fetcher, condition, onEvent } = payload;\n      if (pollHash[id]) {\n        return;\n      }\n      pollHash[id] = true;\n      setTimeout(() => {\n        dispatch({\n          type: id,\n          payload: fetcher().then((resp) => {\n            pollHash[id] = false;\n            const [toContinue, stateName] = condition(resp);\n            const nextActions = onEvent?.[stateName] || [];\n            nextActions.forEach((action) => action(dispatch));\n            if (toContinue) {\n              dispatch(action);\n            }\n          }),\n        }).catch(() => null);\n      }, 15 * 1000);\n      return;\n    }\n\n    if (hasPollingData(meta?.polling)) {\n      const { id, fetcher, condition, onEvent } = meta.polling;\n      dispatch({\n        type: `${id}_POLLING`,\n        payload: {\n          id,\n          fetcher,\n          condition,\n          onEvent,\n        },\n      });\n    }\n\n    next(action);\n  };\n","import { createContext } from 'react';\nimport { ReducerRegistry } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { polling } from './polling';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nexport function init(...middleware) {\n  return new ReducerRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({\n      errorDescriptionKey: ['detail', 'stack'],\n    }),\n    polling(),\n    ...middleware,\n  ]);\n}\n"],"names":["TextVariants","Text","_a","children","className","component","p","isVisitedLink","ouiaId","ouiaSafe","props","__rest","Component","ouiaProps","displayName","Object","assign","a","TextContent","isVisited","__assign","t","s","i","n","arguments","length","prototype","hasOwnProperty","call","apply","this","addNotification","notification","type","payload","id","Date","getTime","Math","random","toString","slice","removeNotification","index","clearNotifications","checkImageName","name","instance","EDGE_API","createImage","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","Name","URL","uuid","endpoint","getImageSet","q","limit","offset","sort_by","query","getTableParams","getImageSetViewVersions","imageSetID","getImageSetView","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","search","params","URLSearchParams","IMAGE_BUILDER_API","getImageById","getImageSets","postRpmsNames","urls","CONTENT_SOURCES_API","hasPollingData","polling","fetcher","condition","ofPollingType","endsWith","pollHash","dispatch","next","action","meta","onEvent","setTimeout","then","resp","toContinue","stateName","forEach","RegistryContext","createContext","getRegistry","init","middleware","ReducerRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey"],"sourceRoot":""}