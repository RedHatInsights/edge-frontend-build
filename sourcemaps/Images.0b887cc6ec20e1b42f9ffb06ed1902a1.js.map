{"version":3,"file":"js/Images.e29a52c4cd29ce191b81.js","mappings":"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","sources":["webpack:///./src/api/images/index.js"],"sourcesContent":["import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  RHSM_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchActivationKeys = ({ limit = 10, offset = 0 } = {}) => {\n  return instance.get(\n    `${RHSM_API}/activation_keys?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n  activationKey,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n    activationKey: activationKey,\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n"],"names":["checkImageName","name","payload","instance","EDGE_API","fetchActivationKeys","limit","offset","RHSM_API","createImage","Id","version","description","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","activationKey","length","distribution","map","item","outputTypes","commit","arch","installer","sshkey","repo","ID","id","Name","URL","uuid","endpoint","getImageSet","q","sort_by","query","getTableParams","getImageSetViewVersions","imageSetID","getImageSetView","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","search","params","URLSearchParams","IMAGE_BUILDER_API","toString","getImageById","getImageSets","postRpmsNames","urls","CONTENT_SOURCES_API"],"sourceRoot":""}