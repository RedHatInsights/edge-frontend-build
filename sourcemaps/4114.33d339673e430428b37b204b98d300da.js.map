{"version":3,"file":"js/4114.47380c722f357e3fdb50.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/components/CmpLoader.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/hooks/useApi.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport CmpLoader from './CmpLoader';\n\nconst GeneralInformation = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./GeneralInformation\"\n    fallback={<CmpLoader numberOfRows={3} />}\n    {...props}\n  />\n);\n\nconst SystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./SystemCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst OperatingSystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./OperatingSystemCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst BiosCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./BiosCard\"\n    fallback={<CmpLoader numberOfRows={4} />}\n    {...props}\n  />\n);\n\nconst CollectionCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./CollectionCard\"\n    fallback={<CmpLoader numberOfRows={7} />}\n    {...props}\n  />\n);\n\nconst InfrastructureCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./InfrastructureCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"ImageInformationCard\" */ './ImageInformationCard'\n  )\n);\n\nconst InfrastructureCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      {' '}\n      <InfrastructureCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst ImageInformationCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      {' '}\n      <ImageInformationCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst BiosCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      <BiosCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst OperatingSystemCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      <OperatingSystemCard {...props} hasKernelModules={true} store={store} />\n    </Suspense>\n  );\n};\n\nconst CollectionCardWrapper = (props) => {\n  const store = useStore();\n  // TODO: fix rhcHealth display\n  const rhcHealth = null;\n  return (\n    <Suspense fallback=\"\">\n      <CollectionCard\n        {...props}\n        extra={[\n          {\n            title: 'RHC Health (broker functioning)',\n            value: rhcHealth || (\n              <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n              </Tooltip>\n            ),\n          },\n        ]}\n        store={store}\n      />\n    </Suspense>\n  );\n};\n\nconst SystemCardWrapper = (props) => {\n  const store = useStore();\n  const { greenbootStatus } = useSelector(({ systemProfileStore }) => {\n    return {\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n    };\n  });\n\n  return (\n    <Suspense fallback=\"\">\n      <SystemCard\n        {...props}\n        store={store}\n        hasCPUs={false}\n        hasSockets={false}\n        hasCores={false}\n        hasCPUFlags={false}\n        hasRAM={false}\n        hasSAP={false}\n        extra={[\n          {\n            title: (\n              <TitleWithPopover\n                title=\"GreenBoot Status\"\n                content=\"This is a description about greenboot status\"\n              />\n            ),\n            value: <GreenbootStatus status={greenbootStatus} />,\n          },\n        ]}\n      />\n    </Suspense>\n  );\n};\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const store = useStore();\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={store}\n        writePermissions={writePermissions}\n        SystemCardWrapper={SystemCardWrapper}\n        OperatingSystemCardWrapper={InfrastructureCardWrapper}\n        BiosCardWrapper={ImageInformationCardWrapper}\n        InfrastructureCardWrapper={BiosCardWrapper}\n        ConfigurationCardWrapper={OperatingSystemCardWrapper}\n        CollectionCardWrapper={CollectionCardWrapper}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/images';\n\nconst getActiveAlert = (\n  CVEs,\n  deviceData,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    deviceData?.UpdateTransactions[0]?.Status === 'BUILDING' ||\n    deviceData?.UpdateTransactions[0]?.Status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (deviceData?.Device?.UpdateAvailable) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  deviceData,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { deviceId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!deviceData) {\n        return;\n      }\n      // Use view API to get current image set status\n      const params = {\n        id: 'view',\n        q: { id: deviceData?.ImageInfo?.Image?.ImageSetID },\n      };\n      const resp = await getImageSet(params);\n      setNewImageStatus(resp?.data?.[0]?.Status);\n    })();\n  }, [deviceData]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, deviceData, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            size=\"sm\"\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your system.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update system to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            size=\"sm\"\n            onClick={handleUpdateDeviceButton}\n          >\n            Update system\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"System updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={['synopsis', 'public_date', 'impact', 'cvss_score']}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </section>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.number,\n  deviceData: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport GeneralInformationTab from '../../components/DeviceDetail';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <Tabs\n      className=\"pf-u-ml-md\"\n      activeKey={activeTabKey}\n      onSelect={handleTabClick}\n    >\n      <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n        <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n          <GeneralInformationTab />\n        </section>\n      </Tab>\n      <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n        <VulnerabilityTab\n          deviceData={systemProfile}\n          setUpdateModal={setUpdateModal}\n          imageId={imageId}\n          setReload={setReload}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.number,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useHistory, useLocation, useParams, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport { getDevice, getInventory } from '../../api/devices';\nimport Status, { getDeviceStatus } from '../../components/Status';\nimport useApi from '../../hooks/useApi';\nimport RetryUpdatePopover from '../Devices/RetryUpdatePopover';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { routes as paths } from '../../constants/routeMapper';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [{ default: systemProfileStore }] = useLoadModule(\n    {\n      appName: 'inventory',\n      scope: 'inventory',\n      module: './systemProfileStore',\n    },\n    {}\n  );\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const { deviceId, groupId } = useParams();\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const hasEntityFinishedLoading = useSelector(\n    (store) => store?.entityDetails?.loaded\n  );\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n\n  const [imageData, setImageData] = useState();\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n\n  const [deviceData, fetchDeviceData] = useApi({\n    api: () =>\n      getInventory({\n        query: {\n          uuid: deviceId,\n        },\n      }),\n  });\n\n  const [deviceView] = deviceData.data?.data?.devices || [];\n  const {\n    Status: deviceViewStatus,\n    UpdateAvailable: updateAvailable,\n    DispatcherStatus: updateStatus,\n    LastSeen: lastSeen,\n    DeviceGroups: deviceGroups,\n  } = deviceView || {};\n\n  const groupName = groupId\n    ? deviceGroups?.find((group) => group.ID.toString() === groupId)?.Name\n    : null;\n\n  const deviceStatus = getDeviceStatus(\n    deviceViewStatus,\n    updateAvailable,\n    updateStatus\n  );\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDevice(deviceId);\n      setImageData(image_data);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n            deviceStatus: deviceStatus,\n          },\n        ],\n        imageSetId: image_data?.ImageInfo?.Image?.ImageSetID,\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  return systemProfileStore ? (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n      inventoryId={deviceId}\n    >\n      <PageHeader>\n        {!groupName ? (\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={paths.inventory}>Systems</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb ouiaId=\"groups-list\">\n            <BreadcrumbItem>\n              <Link to={paths.fleetManagement}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>\n              <Link to={`${paths.fleetManagement}/${groupId}`}>\n                {groupName}\n              </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <InventoryDetailHead\n          fallback=\"\"\n          showDelete={true}\n          actions={[\n            {\n              title: 'Update',\n              isDisabled:\n                imageData?.UpdateTransactions?.[0]?.Status === 'BUILDING' ||\n                imageData?.UpdateTransactions?.[0]?.Status === 'CREATED' ||\n                !imageData?.ImageInfo?.UpdatesAvailable?.length > 0,\n              onClick: () => {\n                history.push({\n                  pathname: `${pathname}/update`,\n                  search: '?from_details=true',\n                });\n              },\n            },\n          ]}\n          hideBack\n          hideInvDrawer\n          inventoryId={deviceId}\n        />\n\n        {isDeviceStatusLoading ? (\n          <Skeleton size={SkeletonSize.xs} />\n        ) : deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n          <RetryUpdatePopover\n            lastSeen={lastSeen}\n            device={deviceView}\n            position={'right'}\n            fetchDevices={fetchDeviceData}\n          >\n            <Status\n              id={'device-status'}\n              type={\n                deviceStatus === 'error'\n                  ? 'errorWithExclamationCircle'\n                  : deviceStatus\n              }\n              isLink={true}\n              isLabel={true}\n              className=\"pf-u-mt-sm cursor-pointer\"\n            />\n          </RetryUpdatePopover>\n        ) : (\n          <Status\n            id={'device-status'}\n            type={deviceStatus}\n            isLabel={true}\n            className=\"pf-u-mt-sm\"\n          />\n        )}\n      </PageHeader>\n      {hasEntityFinishedLoading && (\n        <DeviceDetailTabs\n          systemProfile={imageData}\n          imageId={imageId}\n          setUpdateModal={setUpdateModal}\n          setReload={setReload}\n        />\n      )}\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={() => setReload(true)}\n          />\n        </Suspense>\n      )}\n    </DetailWrapper>\n  ) : (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default DeviceDetail;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import React from 'react';\nimport { Skeleton } from '@patternfly/react-core';\nimport { PropTypes } from 'prop-types';\n\nconst CmpLoader = ({ numberOfRows }) => {\n  var CmpRows = [];\n\n  for (var i = 0; i < numberOfRows; i++) {\n    CmpRows.push(\n      <React.Fragment key={i}>\n        <Skeleton />\n        <br />\n      </React.Fragment>\n    );\n  }\n  return <React.Fragment>{CmpRows}</React.Fragment>;\n};\n\nexport default CmpLoader;\n\nCmpLoader.propTypes = {\n  numberOfRows: PropTypes.number,\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","_ref","title","content","React","Popover","headerContent","bodyContent","Button","variant","concat","className","OutlinedQuestionCircleIcon","propTypes","PropTypes","GreenbootStatus","status","CheckCircleIcon","color","ExclamationCircleIcon","InProgressIcon","GeneralInformation","props","AsyncComponent","_extends","appName","module","fallback","CmpLoader","numberOfRows","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","InfrastructureCardWrapper","store","useStore","Suspense","ImageInformationCardWrapper","BiosCardWrapper","OperatingSystemCardWrapper","hasKernelModules","CollectionCardWrapper","extra","value","Tooltip","SystemCardWrapper","greenbootStatus","useSelector","_systemProfileStore$s","systemProfileStore","systemProfile","greenboot_status","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","writePermissions","_ref2","permissionsReducer","ConfigurationCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","_objectSpread","loaded","activeApps","name","component","GeneralInformationTab","VulnerabilityTab","deviceData","setUpdateModal","imageId","setReload","deviceId","useParams","getRegistry","useContext","RegistryContext","_useState","useState","isOpen","cveCount","_useState2","_slicedToArray","updateCveModal","setUpdateCveModal","_useState3","_useState4","CVEs","setCVEs","_useState5","_useState6","newImageStatus","setNewImageStatus","_useState7","_useState8","activeAlert","setActiveAlert","useEffect","prevState","_asyncToGenerator","_regeneratorRuntime","_callee","_deviceData$ImageInfo","_resp$data","params","resp","_context","prev","next","abrupt","id","q","ImageInfo","Image","ImageSetID","getImageSet","sent","data","Status","stop","_CVEs$meta2","isLoading","meta","filter","_CVEs$data2","length","_CVEs$meta","_CVEs$data","_deviceData$UpdateTra","_deviceData$UpdateTra2","_deviceData$Device","UpdateTransactions","Device","UpdateAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","size","onClick","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","customIntlProvider","entity","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","UpdateImageModal","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","UpdateDeviceModal","_deviceData$data","_deviceGroups$find","_imageData$UpdateTran","_imageData$UpdateTran2","_imageData$ImageInfo","_useLoadModule","useLoadModule","scope","history","useHistory","pathname","useLocation","_useParams","groupId","setImageId","hasEntityFinishedLoading","_store$entityDetails","entityDetails","imageData","setImageData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","_useState9","_useState10","reload","_useApi","useApi","api","getInventory","query","uuid","_useApi2","fetchDeviceData","devices","deviceView","_ref4","deviceViewStatus","updateAvailable","updateStatus","DispatcherStatus","lastSeen","LastSeen","deviceGroups","DeviceGroups","groupName","find","group","ID","toString","Name","deviceStatus","getDeviceStatus","_insights$chrome","_insights$chrome$hide","insights","chrome","registerModule","hideGlobalFilter","call","appAction","_image_data$ImageInfo2","image_data","display_name","getDevice","_image_data$ImageInfo","imageSetId","DetailWrapper","hideInvLink","showTags","onLoad","_ref6","mergeWithDetail","register","inventoryId","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","paths","fleetManagement","isActive","Skeleton","SkeletonSize","xs","inventory","InventoryDetailHead","showDelete","actions","isDisabled","UpdatesAvailable","push","search","hideBack","hideInvDrawer","RetryUpdatePopover","device","position","fetchDevices","type","isLink","isLabel","Bullseye","Spinner","navigateBack","refreshTable","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","Stack","StackItem","DateFormat","date","children","isVisible","setIsVisible","dispatch","useDispatch","statusMessages","onSuccess","description","DeviceName","DescriptionListGroup","DescriptionListTermHelpText","shouldOpen","shouldClose","alertseverityvariant","style","DispatcherReason","icon","headerComponent","footerContent","apiWithToast","updateSystem","DevicesUUID","DeviceUUID","DescriptionListDescription","defaultProps","CmpRows","i","key","number","statusMapper","booting","text","Icon","iconMapper","checkCircle","colorMapper","green","labelColor","building","inProgress","blue","created","upToDate","success","passed","exclamationTriangle","yellow","updating","error","timesCircle","red","default","unknown","interrupted","unresponsive","exclamationCircle","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","_ref$isLabel","_ref$toolTipContent","toolTipContent","_ref$className","Object","prototype","hasOwnProperty","Label","Split","SplitItem","textDecoration","cursor","_statusMessages","_ref$id","_ref$tableReload","tableReload","setData","setIsLoading","hasError","setHasError","apiFunc","setAPIFunc","hasSuccess","onError","fetchData","_data","_args","arguments","undefined","addNotification","t0","finish","apply","notificationProp","_statusMessages2","_statusMessages3","hasInfo","onInfo","hasWarning","onWarning","response","err","Title"],"sourceRoot":""}