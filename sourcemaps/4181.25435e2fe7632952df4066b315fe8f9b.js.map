{"version":3,"file":"js/4181.10fcd7a290ca84d99555.js","mappings":"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","sources":["webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/edgeImageSets.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/imageSetDetail.js","webpack:///./src/store/edgeImagePackages.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js","webpack:///./src/store/deviceTable.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/api/devices/index.js","webpack:///./src/api/index.js","webpack:///./src/constants/index.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/utils/index.js"],"sourcesContent":["import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No system summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_SETS } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImageSetsPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImageSetsFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImageSetsRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_SETS}_PENDING`]: loadEdgeImageSetsPending,\n    [`${LOAD_EDGE_IMAGE_SETS}_FULFILLED`]: loadEdgeImageSetsFulfilled,\n    [`${LOAD_EDGE_IMAGE_SETS}_REJECTED`]: loadEdgeImageSetsRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_SET_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageSetDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageSetDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageSetDetailRejected = (state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_SET_DETAIL}_PENDING`]: loadImageSetDetailPending,\n    [`${LOAD_IMAGE_SET_DETAIL}_FULFILLED`]: loadImageSetDetailFulfilled,\n    [`${LOAD_IMAGE_SET_DETAIL}_REJECTED`]: loadImageSetDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGE_PACKAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagePackagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagePackagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagePackagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_PENDING`]: loadEdgeImagePackagesPending,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_FULFILLED`]: loadEdgeImagePackagesFulfilled,\n    [`${LOAD_EDGE_IMAGE_PACKAGES}_REJECTED`]: loadEdgeImagePackagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_TABLE } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceTablePending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceTableFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceTableRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_TABLE}_PENDING`]: loadDeviceTablePending,\n    [`${LOAD_DEVICE_TABLE}_FULFILLED`]: loadDeviceTableFulfilled,\n    [`${LOAD_DEVICE_TABLE}_REJECTED`]: loadDeviceTableRejected,\n  },\n  initialState\n);\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport { imageTypeMapper, releaseMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport {\n  createNewImage,\n  addImageToPoll,\n  loadImageDetail,\n  loadEdgeImageSets,\n} from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Update image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Update Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const getInventory = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}`);\n};\n\nexport const getInventoryByGroup = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/devicesview?${q}&groupUUID=${id}`);\n};\nexport const getDevice = (id) => {\n  return instance.get(`${EDGE_API}/devices/${id}`);\n};\n\nexport const getDeviceUpdates = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/devices/${id}?${q}`);\n};\n\nexport const updateSystem = async (payload) => {\n  return await instance.post(`${EDGE_API}/updates`, payload);\n};\n","export const IMAGE_BUILDER_API = '/api/image-builder/v1';\nexport const EDGE_API = '/api/edge/v1';\nexport const CONTENT_SOURCES_API = '/api/content-sources/v1';\nexport const INVENTORY_API_BASE = '/api/inventory/v1';\nexport const RHSM_API = '/api/rhsm/v2';\n\nimport instance from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\n\nexport { instance };\nexport const hosts = new HostsApi(undefined, INVENTORY_API_BASE, instance);\n\nexport const getTableParams = (q) => {\n  if (q === undefined) {\n    return '';\n  }\n  const query = Object.keys(q).reduce((acc, curr) => {\n    let value = undefined;\n    if (\n      typeof q[curr] === 'object' &&\n      typeof q[curr].length === 'number' &&\n      q[curr].length > 0\n    ) {\n      value = q[curr].reduce(\n        (multiVals, val) =>\n          multiVals === '' ? `${curr}=${val}` : `${multiVals}&${curr}=${val}`,\n        ''\n      );\n    }\n    if (['string', 'number'].includes(typeof q[curr]) && q[curr] !== '') {\n      value = `${curr}=${q[curr]}`;\n    }\n    return value === undefined\n      ? acc\n      : acc === ''\n      ? `${value}`\n      : `${acc}&${value}`;\n  }, '');\n\n  return query;\n};\n","import {\n  BellIcon,\n  CheckCircleIcon,\n  CircleNotchIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  PauseCircleIcon,\n  PlusCircleIcon,\n  UnknownIcon,\n  RepositoryIcon,\n  SearchIcon,\n  ModuleIcon,\n  CubeIcon,\n  TimesCircleIcon,\n  InProgressIcon,\n  QuestionCircleIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\nimport activeColor from '@patternfly/react-tokens/dist/esm/global_active_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const sortByDirection = (data, direction = 'asc') =>\n  data.sort((a, b) =>\n    direction === 'asc'\n      ? a.name.toLowerCase().localeCompare(b.name.toLowerCase())\n      : b.name.toLowerCase().localeCompare(a.name.toLowerCase())\n  );\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const imageDistributionMapper = {\n  'rhel-8.1': 'RHEL 8.1',\n  'rhel-8.2': 'RHEL 8.2',\n  'rhel-8.3': 'RHEL 8.3',\n};\n\nexport const composeStatus = [\n  'CREATED',\n  'BUILDING',\n  'ERROR',\n  'SUCCESS',\n  'INTERRUPTED',\n];\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n  'rhel-85': 'RHEL 8.5',\n  'rhel-86': 'RHEL 8.6',\n  'rhel-87': 'RHEL 8.7',\n  'rhel-88': 'RHEL 8.8',\n  'rhel-89': 'RHEL 8.9',\n  'rhel-90': 'RHEL 9.0',\n  'rhel-91': 'RHEL 9.1',\n  'rhel-92': 'RHEL 9.2',\n  'rhel-93': 'RHEL 9.3',\n  'rhel-94': 'RHEL 9.4',\n};\n\nexport const releaseMapper = {\n  'rhel-94': 'Red Hat Enterprise Linux (RHEL) 9.4',\n  'rhel-93': 'Red Hat Enterprise Linux (RHEL) 9.3',\n  'rhel-92': 'Red Hat Enterprise Linux (RHEL) 9.2',\n  'rhel-91': 'Red Hat Enterprise Linux (RHEL) 9.1',\n  'rhel-90': 'Red Hat Enterprise Linux (RHEL) 9.0',\n  'rhel-8.10': 'Red Hat Enterprise Linux (RHEL) 8.10',\n  'rhel-89': 'Red Hat Enterprise Linux (RHEL) 8.9',\n  'rhel-88': 'Red Hat Enterprise Linux (RHEL) 8.8',\n  'rhel-87': 'Red Hat Enterprise Linux (RHEL) 8.7',\n  'rhel-86': 'Red Hat Enterprise Linux (RHEL) 8.6',\n  'rhel-85': 'Red Hat Enterprise Linux (RHEL) 8.5',\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const supportedReleases = [\n  'rhel-84',\n  'rhel-85',\n  'rhel-86',\n  'rhel-87',\n  'rhel-88',\n  'rhel-89',\n  'rhel-8.10',\n  'rhel-90',\n  'rhel-91',\n  'rhel-92',\n  'rhel-93',\n  'rhel-94',\n];\n\nexport const temporaryReleases = ['rhel-93'];\n\nexport const DEFAULT_RELEASE = 'rhel-93';\nexport const TEMPORARY_RELEASE = 'rhel-93';\n\nexport const imageTypeMapper = {\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n};\n\nexport const iconMapper = {\n  unknown: UnknownIcon,\n  repository: RepositoryIcon,\n  search: SearchIcon,\n  module: ModuleIcon,\n  cube: CubeIcon,\n  question: QuestionCircleIcon,\n  plus: PlusCircleIcon,\n  checkCircle: CheckCircleIcon,\n  exclamationTriangle: ExclamationTriangleIcon,\n  timesCircle: TimesCircleIcon,\n  inProgress: InProgressIcon,\n  exclamationCircle: ExclamationCircleIcon,\n};\n\nexport const colorMapper = {\n  green: successColor.value,\n  yellow: warningColor.value,\n  lightBlue: infoColor.value,\n  blue: activeColor.value,\n  red: dangerColor.value,\n};\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_EDGE_IMAGE_SETS = 'LOAD_EDGE_IMAGE_SETS';\nexport const LOAD_EDGE_IMAGE_PACKAGES = 'LOAD_EDGE_IMAGE_PACKAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const LOAD_IMAGE_SET_DETAIL = 'LOAD_IMAGE_SET_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\nexport const LOAD_DEVICE_TABLE = 'LOAD_DEVICE_TABLE';\nexport const UPDATE_DISPLAY_NAME = 'UPDATE_DISPLAY_NAME';\nexport const REMOVE_ENTITY = 'REMOVE_ENTITY';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_EDGE_IMAGE_SETS,\n    LOAD_EDGE_IMAGE_PACKAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    LOAD_IMAGE_SET_DETAIL,\n    CREATE_NEW_IMAGE,\n    LOAD_DEVICE_TABLE,\n    UPDATE_DISPLAY_NAME,\n    REMOVE_ENTITY,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  ACTION_TYPES,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_EDGE_IMAGE_SETS,\n  LOAD_EDGE_IMAGE_PACKAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  LOAD_IMAGE_SET_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n  LOAD_DEVICE_TABLE,\n} from './action-types';\n\nimport {\n  fetchImageStatus,\n  getImageById,\n  fetchEdgeImages,\n  fetchEdgeImageSets,\n  getImagePackageMetadata,\n  createImage,\n  getImageSet,\n  fetchActiveImages,\n} from '../api/images';\nimport { getInventory } from '../api/devices';\nimport { hosts } from '../api';\nimport { deleteSystemsById } from '../utils';\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: () => {},\n});\n\nexport const loadDevicesInfo = () => ({\n  type: LOAD_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: () => {},\n});\n\nexport const loadGroupsDetail = () => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: () => {},\n});\n\nexport const loadGroupDevicesInfo = () => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: () => {},\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: () => {},\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Cannot show system summary data',\n          description: 'Failed receiving system summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: getImageById({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const loadEdgeImageSets = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_SETS,\n    payload: fetchEdgeImageSets(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n\nexport const loadImageSetDetail = (dispatch, urlParam, query) => {\n  dispatch({\n    type: LOAD_IMAGE_SET_DETAIL,\n    payload: getImageSet({ id: urlParam, q: query }),\n  }).catch(() => null);\n};\n\nexport const loadImagePackageMetadata = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGE_PACKAGES,\n    payload: getImagePackageMetadata(imageId),\n  }).catch(() => null);\n};\n\nexport const loadDeviceTable = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_TABLE,\n    payload: getInventory(),\n  }).catch(() => null);\n};\n\nexport const editDisplayName = (id, value, origValue) => ({\n  type: ACTION_TYPES.UPDATE_DISPLAY_NAME,\n  payload: hosts.apiHostPatchHostById([id], { display_name: value }),\n  meta: {\n    id,\n    value,\n    origValue,\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: `Display name for entity with ID ${id} has been changed to ${value}`,\n        dismissable: true,\n      },\n    },\n  },\n});\n\nexport const deleteEntity = (systems, displayName) => ({\n  type: ACTION_TYPES.REMOVE_ENTITY,\n  payload: deleteSystemsById(systems),\n  meta: {\n    notifications: {\n      fulfilled: {\n        variant: 'success',\n        title: 'Delete operation finished',\n        description: `${displayName} has been successfully removed.`,\n        dismissable: true,\n      },\n    },\n    systems,\n  },\n});\n","import validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\nimport { releaseMapper, supportedReleases } from '../constants';\nimport React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport pAll from 'p-all';\nimport { hosts } from '../api/index';\n\nexport const nameValidator = {\n  type: validatorTypes.PATTERN,\n  pattern: /^[A-Za-z0-9]+[A-Za-z0-9_\\-\\s]*$/,\n  message:\n    'Name must start with alphanumeric characters and can contain underscore and hyphen characters.',\n};\n\nexport const mapUrlToObj = (url, keys) => {\n  const splitUrl = url.split('/');\n  const obj = {};\n\n  for (let i = 1; i < splitUrl.length; i++) {\n    if (splitUrl[i]) {\n      obj[keys[i - 1]] = splitUrl[i];\n    }\n  }\n\n  obj.buildUrl = function () {\n    return Object.values(this).reduce(\n      (acc, curr) => (typeof curr !== 'function' ? `${acc}/${curr}` : acc),\n      ''\n    );\n  };\n\n  return obj;\n};\n\n// urlString is the string added to the url search param\n// state is a boolean that adds or removes the urlString from the url\nexport const stateToUrlSearch = (urlString, state, search) => {\n  var searchArray = [];\n  const currentSearchArray =\n    search.length > 0\n      ? search.includes('&')\n        ? search.split('?')[1].split('&')\n        : search.split('?').slice(1)\n      : [];\n  if (state) {\n    currentSearchArray.includes(urlString)\n      ? currentSearchArray\n      : currentSearchArray.push(urlString);\n    searchArray = currentSearchArray;\n  } else {\n    searchArray = currentSearchArray.includes(urlString)\n      ? currentSearchArray.filter((e) => e !== urlString)\n      : currentSearchArray;\n  }\n\n  return searchArray.join('&');\n};\n\nexport const emptyStateNoFilters = (isLoading, count, search) =>\n  isLoading !== true && !count > 0 && !search.includes('has_filters=true');\n\nexport const canUpdateSelectedDevices = ({ deviceData, imageData }) =>\n  deviceData?.length > 0 && imageData\n    ? deviceData?.some(\n        (device) => device.imageSetId !== deviceData[0].imageSetId\n      )\n    : true;\n\nexport const useFeatureFlags = (flag) => {\n  const { flagsReady } = useFlagsStatus();\n  const isFlagEnabled = useFlag(flag);\n\n  return flagsReady ? isFlagEnabled : false;\n};\n\nexport const truncateString = (\n  string = '',\n  start,\n  end = 0,\n  separationString = '...'\n) => {\n  if (string.length <= start) {\n    return string;\n  }\n\n  const updatedString = `${string.substring(\n    0,\n    start\n  )}${separationString}${string.substring(string.length - end, string.length)}`;\n\n  return updatedString;\n};\n\nexport const transformSort = ({ direction, name }) => {\n  return {\n    sort_by: direction === 'asc' ? name : `-${name}`,\n  };\n};\n\nexport const isAccountMissing = (data) => data && !data?.Account;\n\n// getReleases returns a list of the supported releases + the forced release\nexport const getReleases = (forcedRelease, inculdedReleases) =>\n  Object.entries(releaseMapper)\n    .filter(\n      ([release]) =>\n        (inculdedReleases ? inculdedReleases : supportedReleases).includes(\n          release\n        ) || release === forcedRelease\n    )\n    .map(([release, releaseLabel]) => ({\n      value: release,\n      label: releaseLabel,\n    }));\n\nexport const createLink = ({ pathname, linkText, target }) => {\n  return (\n    <Button\n      component=\"a\"\n      target={target}\n      variant=\"link\"\n      target-href={pathname}\n      href={pathname}\n      isInline=\"false\"\n    >\n      {linkText}\n    </Button>\n  );\n};\n\nconst resolve = async (fns, limit = 2) => {\n  const results = await pAll(fns, {\n    concurrency: limit,\n  });\n  return results;\n};\n\nexport const deleteSystemsById = (items, batchSize = 50) => {\n  let arr = [];\n  for (let i = 0; i < items.length; i += batchSize) {\n    let chunk;\n    chunk = items.slice(i, i + batchSize);\n    arr.push(chunk);\n  }\n\n  const results = resolve(\n    arr.map((itemArray) => () => {\n      return hosts.apiHostDeleteHostById(itemArray);\n    })\n  );\n  return results;\n};\n"],"names":["applyReducerHash","_defineProperty","concat","LOAD_DEVICE_SUMMARY","isLoading","hasError","data","state","_ref","payload","_objectSpread","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","_ref2","LOAD_EDGE_IMAGE_SETS","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","LOAD_IMAGE_SET_DETAIL","LOAD_EDGE_IMAGE_PACKAGES","LOAD_GROUPS","groups","results","meta","LOAD_TRESHOLD","threshold","LOAD_DEVICES_INFO","devicesInfo","LOAD_CANARIES_INFO","canariesInfo","PropTypes","statusMapper","SecureIcon","isSecure","props","_objectWithoutProperties","_excluded","Icon","LockIcon","LockOpenIcon","React","propTypes","defaultProps","LOAD_GROUP_DETAIL","name","uuid","devices","LOAD_GROUP_DEVICES_INFO","CREATE_NEW_IMAGE","error","_state","LOAD_DEVICE_TABLE","UpdateImageModal","_data$image12","_data$image13","_data$image14","_data$image15","_data$image16","_data$image17","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","useSelector","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","variant","title","image","Name","description","onClose","actions","Button","key","onClick","_data$image","_data$image2","_data$image3","_data$image4","_data$image5","_data$image6","_data$image7","_data$image8","_data$image9","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","_data$image10","_data$image11","addNotification","value","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","component","TextVariants","h3","Text","TextList","TextListVariants","dl","TextListItemVariants","dt","dd","releaseMapper","imageTypeMapper","ImageType","className","cveCount","Backdrop","Bullseye","Spinner","diameter","isRequired","getInventory","query","q","getTableParams","instance","get","EDGE_API","getInventoryByGroup","getDevice","getDeviceUpdates","_ref3","updateSystem","_ref4","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","post","abrupt","sent","stop","_x","apply","arguments","IMAGE_BUILDER_API","CONTENT_SOURCES_API","INVENTORY_API_BASE","RHSM_API","hosts","HostsApi","undefined","Object","keys","reduce","acc","curr","_typeof","length","multiVals","val","includes","sortByDirection","direction","sort","a","b","toLowerCase","localeCompare","distributionMapper","supportedReleases","temporaryReleases","DEFAULT_RELEASE","TEMPORARY_RELEASE","iconMapper","unknown","UnknownIcon","repository","RepositoryIcon","search","SearchIcon","module","ModuleIcon","cube","CubeIcon","question","QuestionCircleIcon","plus","PlusCircleIcon","checkCircle","CheckCircleIcon","exclamationTriangle","ExclamationTriangleIcon","timesCircle","TimesCircleIcon","inProgress","InProgressIcon","exclamationCircle","ExclamationCircleIcon","colorMapper","green","successColor","yellow","warningColor","lightBlue","infoColor","blue","activeColor","red","dangerColor","statusToIcon","done","icon","color","pending","PauseCircleIcon","updating","CircleNotchIcon","warning","notification","BellIcon","POLLING_IMAGES","asyncActions","flatMap","ACTION_TYPES","keyBy","k","type","getImageById","callback","createImage","then","fetchEdgeImageSets","editDisplayName","origValue","UPDATE_DISPLAY_NAME","apiHostPatchHostById","display_name","notifications","fulfilled","dismissable","deleteEntity","systems","displayName","REMOVE_ENTITY","deleteSystemsById","nameValidator","validatorTypes","PATTERN","pattern","message","mapUrlToObj","url","splitUrl","split","obj","i","buildUrl","values","this","stateToUrlSearch","urlString","searchArray","currentSearchArray","slice","push","filter","e","join","emptyStateNoFilters","count","canUpdateSelectedDevices","deviceData","imageData","some","device","imageSetId","useFeatureFlags","flag","flagsReady","useFlagsStatus","isFlagEnabled","useFlag","truncateString","string","start","end","separationString","substring","transformSort","sort_by","getReleases","forcedRelease","inculdedReleases","entries","_slicedToArray","_ref5","_ref6","label","createLink","_ref7","pathname","linkText","target","href","isInline","resolve","_ref8","fns","limit","_args","pAll","concurrency","items","batchSize","arr","chunk","itemArray","apiHostDeleteHostById"],"sourceRoot":""}