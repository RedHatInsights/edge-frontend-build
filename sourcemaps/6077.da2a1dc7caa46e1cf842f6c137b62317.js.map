{"version":3,"file":"js/6077.9bbe97d3ae0730ff1ac8.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/utils.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/hooks/useApi.js"],"sourcesContent":["import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { createLink } from '../../utils';\nimport { Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport CustomEmptyState from '../../components/Empty';\nimport { useLocation, useHistory, useNavigate } from 'react-router-dom';\nimport { emptyStateNoFilters } from '../../utils';\nimport Status from '../../components/Status';\nimport { getBaseURLFromPrefixAndName } from '../ImageManagerDetail/utils';\nimport { distributionMapper } from '../../constants';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Release',\n    type: 'distribution',\n    options: distributionMapper,\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Target',\n    type: 'outputTypes',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Created/Updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n];\nconst createRows = (data, baseURL, history, navigate) => {\n  return data.map((image_set, index) => ({\n    rowInfo: {\n      id: image_set?.ID,\n      imageStatus: image_set?.Status,\n      distribution: image_set?.Distribution,\n      outputType: image_set?.OutputTypes,\n      isoURL: image_set?.ImageBuildIsoURL || null,\n      latestImageID: image_set?.ImageID,\n    },\n    cells: [\n      {\n        title: createLink({\n          pathname: `${baseURL}/${image_set?.ID}`,\n          linkText: image_set?.Name,\n          history,\n          navigate,\n        }),\n      },\n\n      image_set?.Version,\n      {\n        title: distributionMapper[image_set?.Distribution],\n      },\n      image_set?.OutputTypes.length == 2\n        ? 'Bare Metal Installer'\n        : 'Update Only',\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <Status type={image_set?.Status.toLowerCase()} />\n          </>\n        ),\n      },\n      {\n        title: image_set?.UpdatedAt ? (\n          <DateFormat date={image_set?.UpdatedAt} />\n        ) : (\n          'Unknown'\n        ),\n      },\n    ],\n  }));\n};\n\nconst ImageTable = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  locationProp,\n  navigateProp,\n  data,\n  count,\n  isLoading,\n  docLinkProp,\n  hasError,\n  fetchImageSets,\n  openCreateWizard,\n  openUpdateWizard,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n}) => {\n  const docLink =\n    docLinkProp === undefined\n      ? 'https://access.redhat.com/documentation/en-us/edge_management/2022/html/create_rhel_for_edge_images_and_configure_automated_management/index'\n      : docLinkProp;\n  const { search } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: 'Download',\n        onClick: (_event, _rowId, rowData) => {\n          window.open(rowData.rowInfo?.isoURL);\n        },\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo?.latestImageID);\n        },\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  const baseURL = getBaseURLFromPrefixAndName(\n    `edge${paths.manageImages}`,\n    pathPrefix,\n    urlName\n  );\n  return (\n    <>\n      {emptyStateNoFilters(isLoading, count, search) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Create an OSTree image'}\n          body={[\n            'Image builder is a tool to compose customized RHEL (rpm-ostree) images optimized for Edge. ',\n            'With OSTree, you can manage the system software by referencing a central image repository. ' +\n              'Images contain a complete operating system ready to be remotely installed at scale. ' +\n              'Updates to images are tracked through commits and enable secure updates that only ' +\n              'address changes and keep the operating system unchanged. Image updates are quick, ' +\n              'and rollbacks are easy.',\n          ]}\n          secondaryActions={[\n            {\n              type: 'link',\n              title: 'Learn more about OSTree.',\n              link: 'https://ostreedev.github.io/ostree/',\n            },\n            {\n              variant: 'primary',\n              className: 'edge-stretched-button',\n              onClick: () => openCreateWizard(),\n              type: 'button',\n              title: 'Create image.',\n            },\n            {\n              type: 'link',\n              iconPosition: 'left',\n              title: 'Image builder for OSTree documentation',\n              link: docLink,\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          historyProp={historyProp}\n          locationProp={locationProp}\n          navigateProp={navigateProp}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchImageSets}\n          tableData={{ count, data, isLoading, hasError }}\n          columnNames={columnNames}\n          rows={data ? createRows(data, baseURL, history, navigate) : []}\n          actionResolver={actionResolver}\n          areActionsDisabled={areActionsDisabled}\n          defaultSort={{ index: 5, direction: 'desc' }}\n          toolbarButtons={[\n            {\n              title: 'Create new image',\n              click: () => openCreateWizard(),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\n\nImageTable.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  fetchImageSets: PropTypes.func,\n  clearFilters: PropTypes.func,\n  openCreateWizard: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n  filters: PropTypes.array,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }),\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  docLinkProp: PropTypes.string,\n};\n\nexport default ImageTable;\n","import React, { Fragment, useEffect, useState, Suspense } from 'react';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport ImageSetsTable from './ImageSetsTable';\nimport { stateToUrlSearch } from '../../utils';\nimport { getImageSets } from '../../api/images';\nimport useApi from '../../hooks/useApi';\nimport PropTypes from 'prop-types';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = ({\n  pathPrefix,\n  urlName,\n  historyProp,\n  locationProp,\n  navigateProp,\n  docLinkProp,\n  notificationProp,\n  showHeaderProp,\n}) => {\n  const chrome = useChrome();\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const { pathname, search } = locationProp ? locationProp() : useLocation();\n  const showHeader = showHeaderProp === undefined ? true : showHeaderProp;\n  const [response, fetchImageSets] = useApi({\n    api: getImageSets,\n    tableReload: true,\n  });\n\n  const { data, isLoading, hasError } = response;\n\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const createHistoryObj = {\n    pathname,\n    search: stateToUrlSearch('create_image=true', true, search),\n  };\n  const updateHistoryObj = {\n    pathname,\n    search: stateToUrlSearch('update_image=true', true, search),\n  };\n\n  const openCreateWizard = () => {\n    if (navigateProp) {\n      navigate({ ...createHistoryObj, replace: true });\n    } else {\n      history.push({ ...createHistoryObj });\n    }\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    if (navigateProp) {\n      navigate({ ...updateHistoryObj, replace: true });\n    } else {\n      history.push({ ...updateHistoryObj });\n    }\n\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  const reload = async () => {\n    await fetchImageSets();\n    setHasModalSubmitted(true);\n  };\n\n  useEffect(() => {\n    chrome?.updateDocumentTitle?.('Images - Manage Images | Edge management');\n  }, [chrome]);\n\n  return (\n    <Fragment>\n      {showHeader && (\n        <PageHeader className=\"pf-m-light\">\n          <PageHeaderTitle title=\"Images\" />\n        </PageHeader>\n      )}\n      <section className=\"edge-images pf-l-page__main-section pf-c-page__main-section\">\n        <ImageSetsTable\n          pathPrefix={pathPrefix}\n          urlName={urlName}\n          historyProp={historyProp}\n          locationProp={locationProp}\n          navigateProp={navigateProp}\n          data={data?.data || []}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          fetchImageSets={fetchImageSets}\n          docLinkProp={docLinkProp}\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      </section>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              if (navigateProp) {\n                navigate({ ...createHistoryObj, replace: true });\n              } else {\n                history.push({\n                  pathname,\n                  search: stateToUrlSearch('create_image=true', false, search),\n                });\n              }\n              setIsCreateWizardOpen(false);\n            }}\n            reload={reload}\n            notificationProp={notificationProp}\n            locationProp={locationProp}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              if (navigateProp) {\n                navigate({ ...updateHistoryObj, replace: true });\n              } else {\n                history.push({\n                  pathname,\n                  search: stateToUrlSearch('update_image=true', false, search),\n                });\n              }\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            reload={reload}\n            updateImageID={UpdateWizard.imageId}\n            notificationProp={notificationProp}\n            locationProp={locationProp}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nImages.propTypes = {\n  pathPrefix: PropTypes.string,\n  urlName: PropTypes.string,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  navigateProp: PropTypes.func,\n  notificationProp: PropTypes.object,\n  showHeaderProp: PropTypes.bool,\n  docLinkProp: PropTypes.string,\n};\nexport default Images;\n","const getBaseURLFromPrefixAndName = (defaultBaseURL, pathPrefix, urlName) => {\n  let baseURL = defaultBaseURL;\n  if (pathPrefix || urlName) {\n    let urlNames = [];\n    if (pathPrefix) {\n      urlNames.push(pathPrefix);\n    }\n    if (urlName) {\n      urlNames.push(urlName);\n    }\n    baseURL = urlNames.join('/');\n  }\n  return baseURL;\n};\n\nconst restorePrefixURL = (url, pathPrefix) => {\n  const separator = '/';\n  if (!pathPrefix || url.startsWith(pathPrefix)) {\n    return url;\n  }\n  if (pathPrefix.endsWith(separator) || url.startsWith(separator)) {\n    return [pathPrefix, url].join('');\n  }\n  return [pathPrefix, url].join(separator);\n};\n\nexport { getBaseURLFromPrefixAndName, restorePrefixURL };\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n"],"names":["TooltipSelectorRef","index","content","reference","document","getElementById","propTypes","PropTypes","defaultFilters","label","type","options","option","value","columnNames","title","sort","columnTransforms","cellWidth","distributionMapper","createRows","data","baseURL","history","navigate","map","image_set","rowInfo","id","ID","imageStatus","Status","distribution","Distribution","outputType","OutputTypes","isoURL","ImageBuildIsoURL","latestImageID","ImageID","cells","createLink","pathname","linkText","Name","Version","length","toLowerCase","UpdatedAt","date","ImageTable","pathPrefix","urlName","historyProp","locationProp","navigateProp","count","isLoading","docLinkProp","hasError","fetchImageSets","openCreateWizard","openUpdateWizard","hasModalSubmitted","setHasModalSubmitted","docLink","undefined","search","useLocation","useHistory","useNavigate","getBaseURLFromPrefixAndName","paths","emptyStateNoFilters","icon","body","secondaryActions","link","variant","className","onClick","iconPosition","apiFilterSort","isUseApi","filters","loadTableData","tableData","rows","actionResolver","rowData","actionsArray","push","_event","_rowId","window","open","areActionsDisabled","defaultSort","direction","toolbarButtons","click","clearFilters","pagination","page","perPage","CreateImageWizard","React","UpdateImageWizard","Images","notificationProp","showHeaderProp","chrome","useChrome","showHeader","useApi","api","getImageSets","tableReload","response","useState","isCreateWizardOpen","setIsCreateWizardOpen","isOpen","imageId","UpdateWizard","setUpdateWizard","createHistoryObj","stateToUrlSearch","updateHistoryObj","reload","useEffect","updateDocumentTitle","Fragment","replace","Suspense","fallback","navigateBack","prevState","updateImageID","defaultBaseURL","urlNames","join","restorePrefixURL","url","startsWith","endsWith","statusMapper","booting","text","Icon","iconMapper","color","colorMapper","labelColor","building","created","upToDate","success","passed","updateAvailable","updating","error","default","interrupted","unresponsive","errorWithExclamationCircle","getDeviceStatus","deviceStatus","isUpdateAvailable","dispatcherStatus","isLabel","toolTipContent","isLink","Object","prototype","hasOwnProperty","call","Label","Split","style","SplitItem","Tooltip","textDecoration","cursor","defaultProps","statusMessages","dispatch","useDispatch","setData","setIsLoading","setHasError","apiFunc","setAPIFunc","hasSuccess","onSuccess","description","onError","fetchData","query","addNotification"],"sourceRoot":""}