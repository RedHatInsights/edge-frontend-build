{"version":3,"file":"js/UpdateImageWizard.a63643a59d5f659b001c.js","mappings":"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","sources":["webpack:///./src/Routes/ImageManager/UpdateImageWizard.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  review,\n  packages,\n  updateDetails,\n  registration,\n  repositories,\n  imageOutput,\n  customPackages,\n  additionalCustomPackages,\n} from './steps';\nimport { Bullseye, Backdrop, Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport {\n  createNewImage,\n  addImageToPoll,\n  loadImageDetail,\n} from '../../store/actions';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { getEdgeImageStatus } from '../../api/images';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useFeatureFlags, getReleases } from '../../utils';\nimport { temporaryReleases, supportedReleases } from '../../constants';\n\nconst UpdateImage = ({ navigateBack, updateImageID, reload }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    reload && reload();\n  };\n  const temporaryReleasesFlag = useFeatureFlags(\n    'fleet-management.temporary-releases'\n  );\n\n  const imageWizardFeatureFlag = useFeatureFlags(\n    'edge-management.image_wizard_ui'\n  );\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateImageID && loadImageDetail(dispatch, updateImageID);\n    return () => registered();\n  }, [dispatch]);\n\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  return user && data ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          Id: data?.image?.ID,\n          name: data?.image?.Name,\n          version: data?.image?.Version + 1,\n          architecture: 'x86_64',\n          credentials: values.credentials\n            ? values.credentials\n            : data?.image?.Installer.SshKey,\n          username: values.username\n            ? values.username\n            : data?.image?.Installer.Username,\n        };\n\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Updating image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                  ],\n                },\n              },\n            },\n          });\n          closeAction();\n          dispatch(\n            addImageToPoll({ name: data.value.Name, id: data.value.ID })\n          );\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{\n        imageID: data?.image.ID,\n        name: data?.image?.Name,\n        isUpdate: true,\n        description: data?.image?.Description,\n        credentials: data?.image?.Installer.SshKey,\n        username: data?.image?.Installer.Username,\n        version: data?.image?.Version,\n        release: data?.image?.Distribution,\n        release_options: temporaryReleasesFlag\n          ? getReleases(data?.image?.Distribution, [\n              ...supportedReleases,\n              ...temporaryReleases,\n            ])\n          : getReleases(data?.image?.Distribution),\n        imageType: ['rhel-edge-commit'],\n        'selected-packages': data?.image?.Packages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n        'third-party-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'initial-custom-repositories': data?.image?.ThirdPartyRepositories?.map(\n          (repo) => ({\n            id: repo.ID,\n            name: repo.Name,\n            ...repo,\n          })\n        ),\n        'custom-packages': data?.image?.CustomPackages?.map((pkg) => ({\n          ...pkg,\n          name: pkg.Name,\n        })),\n      }}\n      test=\"\"\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Update image',\n            },\n            showTitles: true,\n            title: `Update image: ${data?.image?.Name}`,\n            crossroads: [\n              'target-environment',\n              'release',\n              'imageType',\n              'third-party-repositories',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              updateDetails,\n              imageOutput,\n              registration,\n              repositories(imageWizardFeatureFlag),\n              packages,\n              additionalCustomPackages,\n              review,\n              customPackages,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImage.propTypes = {\n  navigateBack: PropTypes.func,\n  updateImageID: PropTypes.number,\n  reload: PropTypes.func,\n};\nUpdateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default UpdateImage;\n"],"names":["UpdateImage","navigateBack","updateImageID","reload","useState","user","setUser","dispatch","useDispatch","closeAction","temporaryReleasesFlag","useFeatureFlags","imageWizardFeatureFlag","getRegistry","useContext","RegistryContext","data","useSelector","imageDetailReducer","shallowEqual","useEffect","registered","register","loadImageDetail","insights","chrome","auth","getUser","then","result","undefined","onClose","customComponentMapper","review","ReviewStep","onSubmit","values","setIsSaving","payload","Id","image","ID","name","Name","version","Version","architecture","credentials","Installer","SshKey","username","Username","createNewImage","resp","addNotification","variant","title","description","value","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","addImageToPoll","defaultArch","initialValues","imageID","isUpdate","Description","release","Distribution","release_options","getReleases","supportedReleases","temporaryReleases","imageType","Packages","map","pkg","ThirdPartyRepositories","repo","CustomPackages","test","schema","fields","component","componentTypes","className","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","updateDetails","imageOutput","registration","repositories","packages","additionalCustomPackages","customPackages","isSVG","diameter","propTypes","PropTypes","defaultProps"],"sourceRoot":""}