{"version":3,"file":"js/GroupsDetailPage.1660143839389.79b2830466661a0c0b14.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/CmpLoader.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/UpdateImageModal.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/Routes/Devices/AddSystemsToGroupModal.js","webpack:///./src/Routes/GroupsDetail/GroupsDetail.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React from 'react';\nimport { Skeleton } from '@patternfly/react-core';\nimport { PropTypes } from 'prop-types';\n\nconst CmpLoader = ({ numberOfRows }) => {\n  var CmpRows = [];\n\n  for (var i = 0; i < numberOfRows; i++) {\n    CmpRows.push(\n      <React.Fragment key={i}>\n        <Skeleton />\n        <br />\n      </React.Fragment>\n    );\n  }\n  return <React.Fragment>{CmpRows}</React.Fragment>;\n};\n\nexport default CmpLoader;\n\nCmpLoader.propTypes = {\n  numberOfRows: PropTypes.number,\n};\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { useLoadModule } from '@scalprum/react-core';\nimport CmpLoader from './CmpLoader';\n\nconst GeneralInformation = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./GeneralInformation\"\n    fallback={<CmpLoader numberOfRows={3} />}\n    {...props}\n  />\n);\n\nconst SystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./SystemCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst OperatingSystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./OperatingSystemCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst BiosCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./BiosCard\"\n    fallback={<CmpLoader numberOfRows={4} />}\n    {...props}\n  />\n);\n\nconst CollectionCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./CollectionCard\"\n    fallback={<CmpLoader numberOfRows={7} />}\n    {...props}\n  />\n);\n\nconst InfrastructureCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./InfrastructureCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nconst GeneralInformationTab = () => {\n  const [{ statusHelper }] = useLoadModule(\n    { appName: 'inventory', scope: 'inventory', module: './dataMapper' },\n    {}\n  );\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  const store = useStore();\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={store}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              store={store}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} store={store} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} store={store} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} store={store} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard\n              {...props}\n              hasKernelModules={true}\n              store={store}\n            />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper?.[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n              store={store}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport {\n  Modal,\n  Button,\n  Text,\n  TextContent,\n  TextListItem,\n  TextList,\n  TextVariants,\n  TextListVariants,\n  TextListItemVariants,\n  Backdrop,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport { imageTypeMapper, releaseMapper } from '../../constants';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { loadImageDetail, loadEdgeImageSets } from '../../store/actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { getEdgeImageStatus } from '../../api/images';\n\nconst UpdateImageModal = ({ updateCveModal, setUpdateCveModal, setReload }) => {\n  const dispatch = useDispatch();\n\n  const { getRegistry } = useContext(RegistryContext);\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    updateCveModal?.imageId &&\n      loadImageDetail(dispatch, updateCveModal?.imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const handleUpdateModal = () => {\n    const payload = {\n      Id: data?.image?.ID,\n      description: data?.image?.Description,\n      name: data?.image?.Name,\n      version: data?.image?.Version + 1,\n      architecture: 'x86_64',\n      credentials: data?.image?.Installer.SshKey,\n      username: data?.image?.Installer.Username,\n      imageType: data?.image?.OutputTypes,\n      'selected-packages': data?.image?.Packages?.map((pack) => ({\n        name: pack.Name,\n      })),\n      release: data?.image?.Distribution,\n    };\n    handleClose();\n    setReload(true);\n    createNewImage(dispatch, payload, (resp) => {\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Update image',\n          description: `${resp.value.Name} image was added to the queue.`,\n        }),\n        meta: {\n          polling: {\n            id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n            fetcher: () => getEdgeImageStatus(resp.value.ID),\n            condition: (resp) => {\n              switch (resp.Status) {\n                case 'BUILDING':\n                  return [true, ''];\n                case 'ERROR':\n                  return [false, 'failure'];\n                default:\n                  return [false, 'success'];\n              }\n            },\n            onEvent: {\n              failure: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'danger',\n                      title: 'Image build failed',\n                      description: `${resp.value.Name} image build is completed unsuccessfully`,\n                    })\n                  ),\n              ],\n              success: [\n                (dispatch) =>\n                  dispatch(\n                    addNotification({\n                      variant: 'success',\n                      title: 'Image is ready',\n                      description: `${resp.value.Name} image build is completed`,\n                    })\n                  ),\n                (dispatch) => loadEdgeImageSets(dispatch),\n              ],\n            },\n          },\n        },\n      });\n      loadEdgeImageSets(dispatch);\n      dispatch(\n        addImageToPoll({ name: data?.image?.Name, id: data?.image?.ID })\n      );\n    });\n  };\n\n  const handleClose = () => {\n    setUpdateCveModal((prevState) => ({ ...prevState, isOpen: false }));\n  };\n\n  return data ? (\n    <Modal\n      variant=\"medium\"\n      title={`Update image: ${data?.image?.Name}`}\n      description=\"Review the information and click Create image to start the build process\"\n      isOpen={updateCveModal.isOpen}\n      onClose={handleClose}\n      //onSubmit={handleUpdateModal}\n      actions={[\n        <Button key=\"confirm\" variant=\"primary\" onClick={handleUpdateModal}>\n          Create Image\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={handleClose}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Details</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>Name</TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Name}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Version\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Version + 1}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Description\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {data?.image?.Description}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Output</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Release\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {releaseMapper[data?.image?.Distribution]}\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dt}>\n            Output type\n          </TextListItem>\n          <TextListItem component={TextListItemVariants.dd}>\n            {imageTypeMapper[data?.image?.ImageType]}\n          </TextListItem>\n        </TextList>\n        <TextListItem component={TextVariants.h3}>\n          <Text component={'b'}>Packages</Text>\n        </TextListItem>\n        <TextList component={TextListVariants.dl}>\n          <TextListItem component={TextListItemVariants.dt}>\n            Updated\n          </TextListItem>\n          <TextListItem\n            className=\"pf-u-pl-lg\"\n            component={TextListItemVariants.dd}\n          >\n            {updateCveModal?.cveCount}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </Modal>\n  ) : (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  );\n};\n\nUpdateImageModal.propTypes = {\n  updateCveModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    imageId: PropTypes.string,\n    cveCount: PropTypes.number,\n  }).isRequired,\n  setUpdateCveModal: PropTypes.func.isRequired,\n  setReload: PropTypes.bool,\n};\n\nexport default UpdateImageModal;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/images';\n\nconst getActiveAlert = (\n  CVEs,\n  deviceData,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    deviceData?.UpdateTransactions[deviceData?.UpdateTransactions?.length - 1]\n      ?.Status === 'BUILDING' ||\n    deviceData?.UpdateTransactions[deviceData?.UpdateTransactions?.length - 1]\n      ?.Status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (deviceData?.Device?.UpdateAvailable) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  deviceData,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { params } = useRouteMatch('/inventory/:deviceId');\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!deviceData) {\n        return;\n      }\n      const id = {\n        id: deviceData?.ImageInfo?.Image?.ImageSetID,\n      };\n      const newImageData = await getImageSet(id);\n      setNewImageStatus(newImageData?.Data?.images?.[0]?.image?.Status);\n    })();\n  }, [deviceData]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, deviceData, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your device.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update device to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update Device\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Device updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <Main className=\"add-100vh\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: params.deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={[\n            'synopsis',\n            'public_date',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n            'advisory',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </Main>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.number,\n  deviceData: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n          <VulnerabilityTab\n            deviceData={systemProfile}\n            setUpdateModal={setUpdateModal}\n            imageId={imageId}\n            setReload={setReload}\n          />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.number,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport { getDeviceHasUpdate } from '../../api/devices';\nimport Status from '../../components/Status';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [imageData, setImageData] = useState();\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setImageData(image_data);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n          },\n        ],\n        imageSetId: image_data?.ImageInfo?.Image?.ImageSetID,\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/inventory'}>\n                {uuid ? 'Groups' : 'Systems'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  imageData?.UpdateTransactions?.[\n                    imageData?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  imageData?.UpdateTransactions?.[\n                    imageData?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !imageData?.ImageInfo?.UpdatesAvailable?.length > 0 ||\n                  !updateModal.imageSetId,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : imageData?.UpdateTransactions[\n              imageData?.UpdateTransactions?.length - 1\n            ]?.Status === 'BUILDING' ||\n            imageData?.UpdateTransactions[\n              imageData?.UpdateTransactions?.length - 1\n            ]?.Status === 'CREATED' ? (\n            <Status type=\"updating\" isLabel={true} className=\"pf-u-mt-sm\" />\n          ) : imageData?.Device?.UpdateAvailable ? (\n            <Status\n              type=\"updateAvailable\"\n              isLabel={true}\n              className=\"pf-u-mt-sm\"\n            />\n          ) : (\n            <Status type=\"running\" isLabel={true} className=\"pf-u-mt-sm\" />\n          )}\n        </PageHeader>\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <DeviceDetailTabs\n              systemProfile={imageData}\n              imageId={imageId}\n              setUpdateModal={setUpdateModal}\n              setReload={setReload}\n            />\n          </GridItem>\n        </Grid>\n        {updateModal.isOpen && (\n          <Suspense\n            fallback={\n              <Bullseye>\n                <Spinner />\n              </Bullseye>\n            }\n          >\n            <UpdateDeviceModal\n              navigateBack={() => {\n                history.push({ pathname: history.location.pathname });\n                setUpdateModal((prevState) => {\n                  return {\n                    ...prevState,\n                    isOpen: false,\n                  };\n                });\n              }}\n              setUpdateModal={setUpdateModal}\n              updateModal={updateModal}\n              refreshTable={() => setReload(true)}\n            />\n          </Suspense>\n        )}\n      </DetailWrapper>\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\nimport DeviceStatus from '../../components/Status';\n\nconst getDeviceStatus = (deviceStatus, isUpdateAvailable) =>\n  deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'running';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      // { option: 'Booting', value: 'booting' },\n      // { option: 'Running', value: 'running' },\n      { option: 'Update available', value: 'updateAvailable' },\n      // { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(30)],\n  },\n  {\n    title: 'Image',\n    type: 'image',\n    sort: false,\n    columnTransforms: [cellWidth(20)],\n  },\n  {\n    title: 'Groups',\n    type: 'groups',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last seen',\n    type: 'last_seen',\n    sort: true,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(25)],\n  },\n];\n\nconst createRows = (devices, hasLinks) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n    } = device;\n\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(Status, UpdateAvailable),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: hasLinks ? (\n            <Link to={`${paths['inventory']}/${DeviceUUID}`}>{DeviceName}</Link>\n          ) : (\n            DeviceName\n          ),\n        },\n        {\n          title: ImageName ? (\n            hasLinks ? (\n              <Link to={`${paths['manage-images']}/${ImageSetID}/`}>\n                {ImageName}\n              </Link>\n            ) : (\n              ImageName\n            )\n          ) : (\n            'unavailable'\n          ),\n        },\n        {\n          title:\n            DeviceGroups.length === 0\n              ? '-'\n              : DeviceGroups.length === 1\n              ? DeviceGroups[0].Name\n              : deviceGroupTooltip,\n        },\n        {\n          title: LastSeen ? <DateFormat date={LastSeen} /> : 'Unknown',\n        },\n        {\n          title: (\n            <DeviceStatus type={getDeviceStatus(Status, UpdateAvailable)} />\n          ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  hasCheckbox = false,\n  selectedItems,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  setUpdateModal,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n  isSystemsView = false,\n  isAddSystemsView = false,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup) {\n      actions.push({\n        title: 'Add to group',\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup) {\n      actions.push({\n        title: 'Remove from group',\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData)) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          setUpdateModal((prevState) => {\n            return {\n              ...prevState,\n              isOpen: true,\n              deviceData: [\n                {\n                  id: rowData.rowInfo.id,\n                  display_name: rowData.rowInfo.display_name,\n                },\n              ],\n              imageSetId: rowData.rowInfo.imageSetId,\n            };\n          });\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: 'Remove from group',\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.deviceStatus !== 'updateAvailable';\n\n  return (\n    <>\n      {isSystemsView && emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'Connect edge systems'}\n          body={\n            'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n          }\n          secondaryActions={[\n            {\n              title:\n                'Create RHEL for Edge images and configure automated management',\n              link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n              type: 'link',\n            },\n          ]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchDevices}\n          tableData={{\n            count: count,\n            isLoading: isLoading,\n            hasError: hasError,\n          }}\n          columnNames={columnNames}\n          rows={createRows(data || [], isAddSystemsView || isSystemsView)}\n          actionResolver={actionResolver}\n          defaultSort={{ index: 3, direction: 'desc' }}\n          toolbarButtons={\n            canBeAdded\n              ? [\n                  {\n                    title: 'Add systems',\n                    click: () => setIsAddModalOpen(true),\n                  },\n                ]\n              : []\n          }\n          hasCheckbox={hasCheckbox}\n          skeletonRowQuantity={skeletonRowQuantity}\n          selectedItems={selectedItems}\n          kebabItems={kebabItems}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n        />\n      )}\n    </>\n  );\n};\nDeviceTable.propTypes = {\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.func,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  setUpdateModal: PropTypes.func,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isSystemsView: PropTypes.bool,\n  isAddSystemsView: PropTypes.bool,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInput = ({ defaultOptions }) => {\n  const { change } = useFormApi();\n  const [options, setOptions] = useState(defaultOptions);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    setIsOpen(false);\n    setOptions(defaultOptions);\n  };\n\n  return (\n    <div>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {options?.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </div>\n  );\n};\n\nSelectInput.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { getGroups, addDevicesToGroup } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport {\n  Backdrop,\n  Bullseye,\n  Spinner,\n  Button,\n  Text,\n} from '@patternfly/react-core';\n\nconst CreateGroupButton = ({ openModal }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={openModal}>\n      Create Group\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  openModal: PropTypes.func,\n};\n\nconst createDescription = (deviceIds) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a group to add <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds),\n    },\n    {\n      component: 'search-input',\n      name: 'name',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n  const [response] = useApi({ api: getGroups });\n  const { data, isLoading } = response;\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add device to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(group.groupId), deviceIds),\n      statusMessages\n    );\n  };\n  return isLoading ? (\n    <Backdrop>\n      <Bullseye>\n        <Spinner isSVG diameter=\"100px\" />\n      </Bullseye>\n    </Backdrop>\n  ) : (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Add to group\"\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions: data?.data || [],\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          openModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n        },\n      }}\n      schema={createSchema(deviceIds)}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { removeDeviceFromGroupById } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'name',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceInfo[0].name} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to remove device from group',\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, deviceInfo[0].ID),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      openModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useHistory } from 'react-router-dom';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api/devices';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst Inventory = () => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const history = useHistory();\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <DeviceTable\n          isSystemsView={true}\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          kebabItems={[\n            {\n              isDisabled: !(checkedDeviceIds.length > 0),\n              title: 'Add to group',\n              onClick: () =>\n                handleAddDevicesToGroup(\n                  checkedDeviceIds.map((device) => ({\n                    ID: device.deviceID,\n                    name: device.display_name,\n                  })),\n                  false\n                ),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={() => {\n            fetchDevices();\n            setTimeout(() => setHasModalSubmitted(true), 800);\n          }}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n    </Fragment>\n  );\n};\n\nexport default Inventory;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  addDevicesToGroup,\n  validateGroupName,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  // isValid should be isNotValid\n  // who wrote that Go code :thinking_face:\n  // spoiler: it was me\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    /*\n      temp focus solution, better approach to pass a ref input and set it\n      when form inputs are mounted\n    */\n\n    setTimeout(() => {\n      const input = document.querySelector('#name');\n      if (input) input.focus();\n    }, 50);\n  }, []);\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add device to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  fetchGroups,\n}) => {\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData?.rowInfo;\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled:\n            devices.length > 0\n              ? !(rowData?.rowInfo?.hasValidUpdate && hasUpdate)\n              : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData?.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n        hasValidUpdate: rowData?.DeviceGroup?.ValidUpdate,\n      },\n      cells: [\n        {\n          title: <Link to={`${paths['fleet-management']}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={[\n          {\n            title: 'Create group',\n            click: handleCreateModal,\n          },\n        ]}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchGroups}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  openModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React, { useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/groups';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\n\nconst Groups = () => {\n  const history = useHistory();\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(isLoading, data?.count, history) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your devices more effectively.\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={fetchGroups}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={fetchGroups}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={fetchGroups}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      openModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import React, { useState } from 'react';\nimport { Button, Modal } from '@patternfly/react-core';\nimport DeviceTable from '../Devices/DeviceTable';\nimport PropTypes from 'prop-types';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { getInventory } from '../../api/devices';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst AddSystemsToGroupModal = ({\n  groupId,\n  closeModal,\n  isOpen,\n  reloadData,\n  groupName,\n}) => {\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [deviceIds, setDeviceIds] = useState([]);\n  const dispatch = useDispatch();\n\n  const handleAddDevicesToGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `Device(s) have been added to ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: `An error occurred making the request`,\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () =>\n        addDevicesToGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(async () => await reloadData(), 500);\n    closeModal();\n  };\n\n  return (\n    <Modal\n      id=\"add-systems-modal\"\n      title=\"Add systems\"\n      position=\"top\"\n      isOpen={isOpen}\n      onClose={closeModal}\n      variant=\"large\"\n      actions={[\n        <Button\n          isDisabled={deviceIds.length === 0}\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={handleAddDevicesToGroup}\n        >\n          Add systems\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={closeModal}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <DeviceTable\n        selectedItems={setDeviceIds}\n        skeletonRowQuantity={15}\n        hasCheckbox={true}\n        isLoading={isLoading}\n        hasError={hasError}\n        count={data?.count}\n        data={data?.data?.devices || []}\n        fetchDevices={fetchDevices}\n      />\n    </Modal>\n  );\n};\nAddSystemsToGroupModal.propTypes = {\n  groupId: PropTypes.string,\n  closeModal: PropTypes.func,\n  isOpen: PropTypes.bool,\n  reloadData: PropTypes.func,\n  groupName: PropTypes.string,\n};\n\nexport default AddSystemsToGroupModal;\n","import React, { useEffect, useState, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  DropdownPosition,\n  Flex,\n  FlexItem,\n  Skeleton,\n} from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport Empty from '../../components/Empty';\nimport { Link, useHistory } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport DeviceTable from '../Devices/DeviceTable';\nimport { useParams } from 'react-router-dom';\nimport {\n  getGroupById,\n  removeDeviceFromGroupById,\n  removeDevicesFromGroup,\n} from '../../api/groups';\nimport AddSystemsToGroupModal from '../Devices/AddSystemsToGroupModal';\nimport {\n  canUpdateSelectedDevices,\n  emptyStateNoFliters,\n  stateToUrlSearch,\n} from '../../utils';\nimport useApi from '../../hooks/useApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport Modal from '../../components/Modal';\nimport DeleteGroupModal from '../Groups/DeleteGroupModal';\nimport RenameGroupModal from '../Groups/RenameGroupModal';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import('../Devices/UpdateDeviceModal')\n);\n\nconst GroupsDetail = () => {\n  const dispatch = useDispatch();\n  const params = useParams();\n  const history = useHistory();\n  const { groupId } = params;\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [removeModal, setRemoveModal] = useState({\n    isOpen: false,\n    name: '',\n    deviceId: null,\n  });\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n  const [response, fetchDevices] = useApi({\n    api: getGroupById,\n    id: groupId,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const groupName = data?.DeviceGroup?.Name;\n  const [deviceIds, getDeviceIds] = useState([]);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const removeDeviceLabel = () =>\n    `Do you want to remove ${\n      deviceIds.length > 0\n        ? `${deviceIds.length} system${deviceIds.length === 1 ? '' : 's'}`\n        : `${removeModal.name}`\n    } from ${groupName}?`;\n\n  useEffect(() => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('add_system_modal=true', isAddModalOpen),\n    });\n  }, [isAddModalOpen]);\n\n  const handleSingleDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${removeModal.name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to remove device' },\n    };\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, removeModal.deviceId),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  const handleBulkDeviceRemoval = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceIds.length} systems have been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'failed to remove systems' },\n    };\n    apiWithToast(\n      dispatch,\n      () =>\n        removeDevicesFromGroup(\n          parseInt(groupId),\n          deviceIds.map((device) => ({ ID: device.deviceID }))\n        ),\n      statusMessages\n    );\n    setTimeout(() => setHasModalSubmitted(true), 800);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        {groupName ? (\n          <Breadcrumb>\n            <BreadcrumbItem>\n              <Link to={`${paths['fleet-management']}`}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>{groupName}</BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb isActive>\n            <Skeleton width=\"100px\" />\n          </Breadcrumb>\n        )}\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            {groupName ? (\n              <PageHeaderTitle title={groupName} />\n            ) : (\n              <Skeleton width=\"150px\" />\n            )}\n          </FlexItem>\n          <FlexItem>\n            <Dropdown\n              position={DropdownPosition.right}\n              toggle={\n                <DropdownToggle\n                  id=\"image-set-details-dropdown\"\n                  toggleIndicator={CaretDownIcon}\n                  onToggle={(newState) => setIsDropdownOpen(newState)}\n                  isDisabled={false}\n                >\n                  Actions\n                </DropdownToggle>\n              }\n              isOpen={isDropdownOpen}\n              dropdownItems={[\n                <DropdownItem\n                  key=\"delete-device-group\"\n                  onClick={() => handleDeleteModal(groupId, groupName)}\n                >\n                  Delete group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"rename-device-group\"\n                  onClick={() => handleRenameModal(groupId, groupName)}\n                >\n                  Rename group\n                </DropdownItem>,\n                <DropdownItem\n                  key=\"update-all-devices\"\n                  isDisabled={canUpdateSelectedDevices({\n                    deviceData: data?.DevicesView?.devices?.map((device) => ({\n                      imageSetId: device?.ImageSetID,\n                    })),\n                    imageData: data?.DevicesView?.devices?.some(\n                      (device) => device.ImageID\n                    ),\n                  })}\n                  onClick={() => {\n                    setIsDropdownOpen(false);\n                    setUpdateModal((prevState) => ({\n                      ...prevState,\n                      isOpen: true,\n                      deviceData: data?.DevicesView?.devices?.map((device) => ({\n                        id: device?.DeviceUUID,\n                        display_name:\n                          device?.DeviceName === ''\n                            ? 'localhost'\n                            : device?.DeviceName,\n                      })),\n                      imageSetId: data?.DevicesView?.devices.find(\n                        (device) => device.ImageSetID\n                      )?.ImageSetID,\n                    }));\n                  }}\n                >\n                  Update\n                </DropdownItem>,\n              ]}\n            />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFliters(\n          isLoading,\n          data?.DeviceGroup?.Devices.length,\n          history\n        ) ? (\n          <DeviceTable\n            data={data?.DevicesView?.devices || []}\n            count={data?.DevicesView?.total}\n            isLoading={isLoading}\n            hasError={hasError}\n            hasCheckbox={true}\n            handleSingleDeviceRemoval={handleSingleDeviceRemoval}\n            kebabItems={[\n              {\n                isDisabled: !(deviceIds.length > 0),\n                title: 'Remove from group',\n                onClick: () =>\n                  setRemoveModal({\n                    name: '',\n                    deviceId: null,\n                    isOpen: true,\n                  }),\n              },\n              {\n                isDisabled: canUpdateSelectedDevices({\n                  deviceData: deviceIds,\n                  imageData: deviceIds[0]?.updateImageData,\n                }),\n                title: 'Update selected',\n                onClick: () =>\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                    deviceData: [...deviceIds],\n                    imageSetId: deviceIds.find((device) => device?.imageSetId)\n                      .imageSetId,\n                  })),\n              },\n            ]}\n            selectedItems={getDeviceIds}\n            setRemoveModal={setRemoveModal}\n            setIsAddModalOpen={setIsAddModalOpen}\n            setUpdateModal={setUpdateModal}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchDevices={fetchDevices}\n            isAddSystemsView={true}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Add systems to the group\"\n              body=\"Create groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Add systems',\n                click: () => setIsAddModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n      {isAddModalOpen && (\n        <AddSystemsToGroupModal\n          groupId={groupId}\n          closeModal={() => setIsAddModalOpen(false)}\n          isOpen={isAddModalOpen}\n          reloadData={fetchDevices}\n          groupName={data?.DeviceGroup?.Name}\n        />\n      )}\n      {removeModal.isOpen && (\n        <Modal\n          isOpen={removeModal.isOpen}\n          openModal={() => setRemoveModal(false)}\n          title={'Remove from group'}\n          submitLabel={'Remove'}\n          variant=\"danger\"\n          schema={{\n            fields: [\n              {\n                component: componentTypes.PLAIN_TEXT,\n                name: 'warning-text',\n                label: removeDeviceLabel(),\n              },\n            ],\n          }}\n          onSubmit={\n            removeModal.deviceId\n              ? handleSingleDeviceRemoval\n              : handleBulkDeviceRemoval\n          }\n          reloadData={fetchDevices}\n        />\n      )}\n\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={fetchDevices}\n          />\n        </Suspense>\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={() => history.push(paths['fleet-management'])}\n          modalState={modalState}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={() => fetchDevices()}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default GroupsDetail;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport CustomEmptyState from '../../components/Empty';\nimport { useHistory } from 'react-router-dom';\nimport { emptyStateNoFliters } from '../../utils';\nimport Status from '../../components/Status';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Current version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(30)],\n  },\n];\n\nconst createRows = (data) => {\n  return data.map((image_set, index) => ({\n    rowInfo: {\n      id: image_set?.ID,\n      imageStatus: image_set?.Status,\n      isoURL: image_set?.ImageBuildIsoURL || null,\n      latestImageID: image_set?.ImageID,\n    },\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Version,\n      {\n        title: image_set?.UpdatedAt ? (\n          <DateFormat date={image_set?.UpdatedAt} />\n        ) : (\n          'Unknown'\n        ),\n      },\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <Status type={image_set?.Status.toLowerCase()} />\n          </>\n        ),\n      },\n    ],\n  }));\n};\n\nconst ImageTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  fetchImageSets,\n  openCreateWizard,\n  openUpdateWizard,\n}) => {\n  const history = useHistory();\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData.rowInfo?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.rowInfo?.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData.rowInfo?.imageStatus === 'SUCCESS' ||\n      rowData.rowInfo?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.rowInfo?.latestImageID);\n        },\n      });\n    }\n\n    if (rowData.rowInfo?.imageStatus === 'BUILDING' && rowData.rowInfo?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    rowData.rowInfo?.imageStatus === 'BUILDING';\n\n  return (\n    <>\n      {emptyStateNoFliters(isLoading, count, history) ? (\n        <CustomEmptyState\n          data-testid=\"general-table-empty-state-no-data\"\n          icon={'plus'}\n          title={'No images found'}\n          body={''}\n          primaryAction={{\n            click: openCreateWizard,\n            text: 'Create new image',\n          }}\n          secondaryActions={[]}\n        />\n      ) : (\n        <GeneralTable\n          apiFilterSort={true}\n          isUseApi={true}\n          filters={defaultFilters}\n          loadTableData={fetchImageSets}\n          tableData={{ count, data, isLoading, hasError }}\n          columnNames={columnNames}\n          rows={data ? createRows(data) : []}\n          actionResolver={actionResolver}\n          areActionsDisabled={areActionsDisabled}\n          defaultSort={{ index: 2, direction: 'desc' }}\n          toolbarButtons={[\n            {\n              title: 'Create new image',\n              click: () => openCreateWizard(),\n            },\n          ]}\n        />\n      )}\n    </>\n  );\n};\n\nImageTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  fetchImageSets: PropTypes.func,\n  clearFilters: PropTypes.func,\n  openCreateWizard: PropTypes.func,\n  openUpdateWizard: PropTypes.func,\n  filters: PropTypes.array,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }),\n};\n\nexport default ImageTable;\n","import React, { Fragment, useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport ImageSetsTable from './ImageSetsTable';\nimport { stateToUrlSearch } from '../../utils';\nimport { getImageSets } from '../../api/images';\nimport useApi from '../../hooks/useApi';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const history = useHistory();\n\n  const [response, fetchImageSets] = useApi({\n    api: getImageSets,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('create_image=true', true),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: stateToUrlSearch('update_image=true', true),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          data={data?.data || []}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          fetchImageSets={fetchImageSets}\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('create_image=true', false),\n              });\n              setIsCreateWizardOpen(false);\n            }}\n            reload={fetchImageSets}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({\n                pathname: history.location.pathname,\n                search: stateToUrlSearch('update_image=true', false),\n              });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            reload={fetchImageSets}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  openModal, // should be closeModal, update here and other places that use it\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={openModal}\n    >\n      <FormRenderer\n        schema={schema}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          openModal();\n        }}\n        onCancel={() => openModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n  const hasSuccess = statusMessages?.onSuccess;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n      return response;\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","CmpLoader","numberOfRows","CmpRows","i","push","key","GeneralInformation","props","AsyncComponent","appName","module","fallback","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","lazy","useLoadModule","scope","statusHelper","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","store","useStore","Suspense","SystemCardWrapper","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageModal","updateCveModal","setUpdateCveModal","setReload","dispatch","useDispatch","getRegistry","useContext","RegistryContext","data","imageDetailReducer","shallowEqual","useEffect","registered","register","imageId","loadImageDetail","handleClose","prevState","isOpen","Modal","image","Name","description","onClose","actions","onClick","payload","Id","ID","Description","version","Version","architecture","credentials","Installer","SshKey","username","Username","imageType","OutputTypes","Packages","map","pack","release","Distribution","createNewImage","resp","addNotification","meta","polling","id","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","addImageToPoll","TextContent","TextListItem","T","TextVariants","Text","TextList","TextListVariants","TextListItemVariants","releaseMapper","imageTypeMapper","ImageType","cveCount","Backdrop","Bullseye","Spinner","isSVG","diameter","isRequired","VulnerabilityTab","deviceData","setUpdateModal","params","useRouteMatch","useState","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","ImageInfo","Image","ImageSetID","getImageSet","newImageData","Data","images","isLoading","filter","length","UpdateTransactions","Device","UpdateAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","Main","customIntlProvider","entity","deviceId","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","AppInfo","showTags","Vulnerability","UpdateDeviceModal","React","setImageId","useParams","inventoryId","uuid","entityDetails","groupName","groupsDetailReducer","imageData","setImageData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","image_data","imageSetId","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","isDisabled","UpdatesAvailable","hideBack","hideInvDrawer","type","isLabel","Grid","gutter","GridItem","span","navigateBack","history","pathname","location","refreshTable","getDeviceStatus","deviceStatus","isUpdateAvailable","defaultFilters","label","options","option","columnNames","sort","columnTransforms","cellWidth","DeviceTable","devices","hasLinks","hasCheckbox","selectedItems","skeletonRowQuantity","count","hasError","kebabItems","setRemoveModal","setIsAddModalOpen","handleAddDevicesToGroup","handleRemoveDevicesFromGroup","hasModalSubmitted","setHasModalSubmitted","fetchDevices","isSystemsView","isAddSystemsView","canBeRemoved","canBeAdded","useHistory","emptyStateNoFliters","icon","body","secondaryActions","link","apiFilterSort","isUseApi","loadTableData","tableData","rows","device","DeviceName","DeviceGroups","DeviceID","DeviceUUID","LastSeen","ImageName","deviceGroupTooltip","group","index","rowInfo","deviceID","updateImageData","imageName","deviceGroups","noApiSortFilter","cells","paths","date","actionResolver","rowData","areActionsDisabled","_rowId","defaultSort","direction","toolbarButtons","click","urlParam","openUpdateWizard","temp","setIsModalOpen","handleSingleDeviceRemoval","SelectInput","defaultOptions","change","useFormApi","setOptions","setIsOpen","selected","setSelected","clearSelection","Select","typeAheadAriaLabel","onToggle","selection","isPlaceholder","onClear","selections","placeholderText","DeviceGroup","SelectOption","toString","groupId","CreateGroupButton","openModal","createDescription","deviceIds","systemText","createSchema","fields","componentTypes","validate","validatorTypes","AddDeviceModal","isModalOpen","setIsCreateGroupModalOpen","reloadData","useApi","api","getGroups","response","submitLabel","additionalMappers","SearchInput","schema","onSubmit","values","statusMessages","onSuccess","onError","apiWithToast","addDevicesToGroup","parseInt","removeDescription","deviceInfo","groupText","WarningIcon","warningColor","RemoveDeviceModal","titleIconVariant","hasManyGroups","removeDeviceFromGroupById","getInventory","tableReload","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","setDeviceId","checkedDeviceIds","setCheckedDeviceIds","isRowSelected","setIsRowSelected","isCreateGroupModalOpen","ids","isRow","Fragment","PageHeaderTitle","setTimeout","CreateGroupModal","asyncGroupNameValidation","validateGroupName","isValid","createGroupSchema","helperText","threshold","nameValidator","input","document","querySelector","focus","handleCreateGroup","createGroup","handleAddDevicesToNewGroup","DeleteGroupModal","modalState","deleteGroupById","columns","GroupTable","handleCreateModal","handleRenameModal","handleDeleteModal","fetchGroups","buildRows","Devices","DevicesImageInfo","systems","devicesImageInfo","hasValidUpdate","ValidUpdate","GeneralTable","hasUpdate","some","UUID","find","ImageID","emptyFilterState","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","Flex","justifyContent","default","Empty","primaryAction","text","RenameGroupModal","initialValues","updateGroupById","AddSystemsToGroupModal","closeModal","setDeviceIds","position","isDropdownOpen","setIsDropdownOpen","isAddModalOpen","removeModal","getGroupById","getDeviceIds","search","stateToUrlSearch","width","FlexItem","Dropdown","DropdownPosition","toggle","DropdownToggle","toggleIndicator","CaretDownIcon","newState","dropdownItems","DropdownItem","canUpdateSelectedDevices","DevicesView","total","removeDevicesFromGroup","TooltipSelectorRef","reference","getElementById","createRows","image_set","imageStatus","isoURL","ImageBuildIsoURL","latestImageID","UpdatedAt","DateFormat","toLowerCase","ImageTable","fetchImageSets","openCreateWizard","actionsArray","href","rel","target","clearFilters","pagination","page","perPage","CreateImageWizard","UpdateImageWizard","getImageSets","isCreateWizardOpen","setIsCreateWizardOpen","UpdateWizard","setUpdateWizard","ImageSetsTable","updateImageID","instance","EDGE_API","Type","query","q","getTableParams","RepoModal","FormTemplate","disableSubmit","buttonsProps","submit","componentMapper","onCancel","hasSuccess","fetchData"],"sourceRoot":""}