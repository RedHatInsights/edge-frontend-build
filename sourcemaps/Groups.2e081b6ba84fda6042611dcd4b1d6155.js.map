{"version":3,"file":"js/Groups.1673976998032.577f631fc7035b3e2003.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/PageHeader/PageHeaderTitle.js","webpack:///./src/Routes/Groups/CreateGroupModal.js","webpack:///./src/Routes/Groups/DeleteGroupModal.js","webpack:///./src/Routes/Groups/GroupTable.js","webpack:///./src/Routes/Groups/Groups.js","webpack:///./src/Routes/Groups/RenameGroupModal.js","webpack:///./src/api/groups/index.js","webpack:///./src/components/Modal.js","webpack:///./src/utils/apiWithToast.js","webpack:///./node_modules/lodash/_baseFlatten.js","webpack:///./node_modules/lodash/_isFlattenable.js","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport { Title } from '@patternfly/react-core';\nvar PageHeaderTitle = function (_a) {\n    var className = _a.className, title = _a.title;\n    var pageHeaderTitleClasses = classNames(className);\n    return (_jsx(Title, __assign({ headingLevel: \"h1\", size: \"2xl\", className: pageHeaderTitleClasses, \"widget-type\": \"InsightsPageHeaderTitle\" }, { children: title })));\n};\nexport default PageHeaderTitle;\n//# sourceMappingURL=PageHeaderTitle.js.map","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  addDevicesToGroup,\n  validateGroupName,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={validatorMapper}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { deleteGroupById } from '../../api/groups';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport { Text } from '@patternfly/react-core';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst description = (name) => (\n  <Text>\n    <strong>{name} </strong>and all its data will be permanently deleted.\n    Associated systems will be removed from the group but will not be deleted.\n  </Text>\n);\n\nconst schema = (name) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'warning-message',\n      label: description(name),\n    },\n    {\n      component: componentTypes.CHECKBOX,\n      name: 'confirmation',\n      label: 'I understand that this action cannot be undone.',\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n});\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst DeleteGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleDeleteGroup = () => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been removed successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to delete group' },\n    };\n    apiWithToast(dispatch, () => deleteGroupById(id), statusMessages);\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Delete group\"\n      titleIconVariant={WarningIcon}\n      variant=\"danger\"\n      submitLabel=\"Delete\"\n      schema={schema(name)}\n      onSubmit={handleDeleteGroup}\n      reloadData={reloadData}\n    />\n  );\n};\n\nDeleteGroupModal.propTypes = {\n  id: PropTypes.number,\n  name: PropTypes.string,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default DeleteGroupModal;\n","import React, { useState, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { Bullseye, Spinner, Tooltip } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst filters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  // {\n  //   label: 'Image',\n  //   type: 'text',\n  // },\n];\n\nconst columns = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Systems', type: 'name', sort: false },\n  { title: 'Image', type: 'name', sort: false },\n];\n\nconst GroupTable = ({\n  data,\n  count,\n  isLoading,\n  hasError,\n  handleCreateModal,\n  handleRenameModal,\n  handleDeleteModal,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchGroups,\n}) => {\n  const history = useHistory();\n  const { pathname } = useLocation();\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const actionResolver = (rowData) => {\n    if (!rowData?.rowInfo) return [];\n    const { id, title, devices, devicesImageInfo } = rowData.rowInfo;\n    const hasUpdate = devicesImageInfo?.some((image) => image.UpdateAvailable);\n\n    return (\n      id && [\n        {\n          title: 'Rename',\n          onClick: () => handleRenameModal(id, title),\n        },\n        {\n          title: 'Delete',\n          onClick: () => handleDeleteModal(id, title),\n        },\n        {\n          title: 'Update',\n          onClick: () =>\n            setUpdateModal((prevState) => ({\n              ...prevState,\n              deviceData: devices.map((device) => ({\n                id: device.UUID,\n                display_name: device.Name,\n              })),\n              imageId: devices.find((device) => device?.ImageID).ImageID,\n              isOpen: true,\n            })),\n          isDisabled:\n            devices.length > 0\n              ? !(rowData?.rowInfo?.hasValidUpdate && hasUpdate)\n              : true,\n        },\n      ]\n    );\n  };\n\n  const buildRows = data?.map((rowData) => {\n    const { ID, Name, Devices } = rowData.DeviceGroup;\n    let { DevicesImageInfo } = rowData;\n    if (!DevicesImageInfo) {\n      DevicesImageInfo = [];\n    }\n    const systems = Devices ?? [];\n    const image = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DevicesImageInfo.map((device, index) => (\n                <p key={index}>{device.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple images</span>\n        </Tooltip>\n      </div>\n    );\n\n    return {\n      rowInfo: {\n        id: ID,\n        title: Name,\n        image:\n          DevicesImageInfo.length === 0\n            ? '-'\n            : DevicesImageInfo.length > 1\n            ? 'Multiple images'\n            : DevicesImageInfo[0]?.Name,\n        devicesImageInfo: rowData.DevicesImageInfo,\n        devices: Devices,\n        hasValidUpdate: rowData?.DeviceGroup?.ValidUpdate,\n      },\n      cells: [\n        {\n          title: <Link to={`${paths.fleetManagement}/${ID}`}>{Name}</Link>,\n        },\n        {\n          title: systems.length,\n        },\n        {\n          title:\n            DevicesImageInfo.length === 0\n              ? '-'\n              : DevicesImageInfo.length > 1\n              ? image\n              : DevicesImageInfo[0]?.Name,\n        },\n      ],\n    };\n  });\n\n  return (\n    <>\n      <GeneralTable\n        apiFilterSort={true}\n        isUseApi={true}\n        loadTableData={fetchGroups}\n        filters={filters}\n        tableData={{\n          count,\n          data,\n          isLoading,\n          hasError,\n        }}\n        columnNames={columns}\n        rows={buildRows}\n        actionResolver={actionResolver}\n        areActionsDisabled={() => false}\n        defaultSort={{ index: 0, direction: 'asc' }}\n        emptyFilterState={{\n          title: 'No matching groups found',\n          body: 'To continue, edit your filter settings and try again',\n        }}\n        toolbarButtons={[\n          {\n            title: 'Create group',\n            click: handleCreateModal,\n          },\n        ]}\n        hasModalSubmitted={hasModalSubmitted}\n        setHasModalSubmitted={setHasModalSubmitted}\n      />\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={async () => {\n              await fetchGroups();\n              setHasModalSubmitted(true);\n            }}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nGroupTable.propTypes = {\n  data: PropTypes.array,\n  count: PropTypes.number,\n  closeModal: PropTypes.func,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleRenameModal: PropTypes.func,\n  handleDeleteModal: PropTypes.func,\n  handleCreateModal: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  fetchGroups: PropTypes.func,\n};\n\nexport default GroupTable;\n","import React, { useState } from 'react';\nimport { Flex } from '@patternfly/react-core';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport GroupTable from './GroupTable';\nimport Empty from '../../components/Empty';\nimport { getGroups } from '../../api/groups';\nimport CreateGroupModal from './CreateGroupModal';\nimport RenameGroupModal from './RenameGroupModal';\nimport DeleteGroupModal from './DeleteGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { useLocation } from 'react-router-dom';\nimport { emptyStateNoFilters } from '../../utils';\n\nconst Groups = () => {\n  const { search } = useLocation();\n  const [response, fetchGroups] = useApi({\n    api: getGroups,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n\n  const [modalState, setModalState] = useState({ id: null, name: '' });\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRenameModalOpen, setIsRenameModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n\n  const handleRenameModal = (id, name) => {\n    setModalState({ id, name });\n    setIsRenameModalOpen(true);\n  };\n\n  const handleDeleteModal = (id, name) => {\n    setModalState({ id, name });\n    setIsDeleteModalOpen(true);\n  };\n\n  const reloadData = async () => {\n    await fetchGroups();\n    setHasModalSubmitted(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Groups\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!emptyStateNoFilters(isLoading, data?.count, search) ? (\n          <GroupTable\n            data={data?.data || []}\n            count={data?.count}\n            isLoading={isLoading}\n            hasError={hasError}\n            handleRenameModal={handleRenameModal}\n            handleDeleteModal={handleDeleteModal}\n            handleCreateModal={() => setIsCreateModalOpen(true)}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n            fetchGroups={fetchGroups}\n          />\n        ) : (\n          <Flex justifyContent={{ default: 'justifyContentCenter' }}>\n            <Empty\n              icon=\"plus\"\n              title=\"Create a system group\"\n              body=\"Create system groups to help manage your systems more effectively.\"\n              primaryAction={{\n                text: 'Create group',\n                click: () => setIsCreateModalOpen(true),\n              }}\n              secondaryActions={[\n                {\n                  type: 'link',\n                  title: 'Learn more about system groups',\n                  link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/working_with_systems_in_the_edge_management_application/index',\n                },\n              ]}\n            />\n          </Flex>\n        )}\n      </Main>\n\n      {isCreateModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateModalOpen}\n          setIsModalOpen={setIsCreateModalOpen}\n          reloadData={reloadData}\n        />\n      )}\n      {isRenameModalOpen && (\n        <RenameGroupModal\n          isModalOpen={isRenameModalOpen}\n          setIsModalOpen={setIsRenameModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteGroupModal\n          isModalOpen={isDeleteModalOpen}\n          setIsModalOpen={setIsDeleteModalOpen}\n          reloadData={reloadData}\n          modalState={modalState}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Groups;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport { updateGroupById, validateGroupName } from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value) => {\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    return 'Group name already exists';\n  }\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      validate: [\n        { type: validatorTypes.REQUIRED },\n\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n        asyncGroupNameValidation,\n      ],\n    },\n  ],\n};\n\nconst RenameGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  modalState,\n}) => {\n  const { id, name } = modalState;\n  const dispatch = useDispatch();\n\n  const handleRenameModal = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${name} has been renamed to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to rename group' },\n    };\n    apiWithToast(dispatch, () => updateGroupById(id, values), statusMessages);\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Rename group\"\n      submitLabel=\"Save\"\n      schema={createGroupSchema}\n      initialValues={modalState}\n      onSubmit={handleRenameModal}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRenameGroupModal.propTypes = {\n  id: PropTypes.number,\n  modalState: PropTypes.object,\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n};\nexport default RenameGroupModal;\n","import { EDGE_API, getTableParams } from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const createGroup = (payload) => {\n  return instance.post(`${EDGE_API}/device-groups/`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const getGroups = ({ query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups?${q}`);\n};\n\nexport const getGroupById = ({ id, query }) => {\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/device-groups/${id}/view?${q}`);\n};\n\nexport const updateGroupById = (id, payload) => {\n  return instance.put(`${EDGE_API}/device-groups/${id}`, {\n    Name: payload.name,\n    Type: 'static',\n  });\n};\n\nexport const deleteGroupById = (id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${id}`);\n};\n\nexport const addDevicesToGroup = (groupId, devices) => {\n  return instance.post(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    ID: groupId,\n    Devices: devices,\n  });\n};\n\nexport const removeDevicesFromGroup = (groupId, devices) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices`, {\n    data: {\n      ID: groupId,\n      Devices: devices,\n    },\n  });\n};\n\nexport const removeDeviceFromGroupById = (groupId, id) => {\n  return instance.delete(`${EDGE_API}/device-groups/${groupId}/devices/${id}`);\n};\n\nexport const validateGroupName = (name) => {\n  return instance.get(`${EDGE_API}/device-groups/checkName/${name}`);\n};\n","import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  titleIconVariant,\n  closeModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  size,\n  onSubmit,\n  additionalMappers,\n  validatorMapper,\n}) => {\n  return (\n    <Modal\n      variant={size ?? 'small'}\n      title={title}\n      titleIconVariant={titleIconVariant ?? null}\n      isOpen={isOpen}\n      onClose={closeModal}\n    >\n      <FormRenderer\n        schema={schema}\n        validatorMapper={validatorMapper}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={\n          additionalMappers\n            ? { ...additionalMappers, ...componentMapper }\n            : componentMapper\n        }\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          setTimeout(async () => await reloadData(), 500);\n          closeModal();\n        }}\n        onCancel={() => closeModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  closeModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n  size: PropTypes.string,\n  additionalMappers: PropTypes.object,\n  titleIconVariant: PropTypes.any,\n  validatorMapper: PropTypes.object,\n};\n\nexport default RepoModal;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      hasInfo &&\n        dispatch({\n          ...addNotification({\n            variant: 'info',\n            ...statusMessages.onInfo,\n          }),\n        });\n      hasSuccess &&\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      return response;\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n          // Add error message from API, if present\n          description: err?.Title\n            ? `${statusMessages.onError.description}: ${err.Title}`\n            : statusMessages.onError.description,\n        }),\n      });\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","_a","className","title","pageHeaderTitleClasses","Title","headingLevel","size","children","asyncGroupNameValidation","value","undefined","validateGroupName","data","isValid","validatorMapper","groupName","createGroupSchema","fields","component","componentTypes","name","label","helperText","isRequired","autoFocus","validate","type","validatorTypes","threshold","nameValidator","CreateGroupModal","isModalOpen","setIsModalOpen","deviceIds","reloadData","dispatch","useDispatch","handleCreateGroup","values","statusMessages","onSuccess","description","onError","apiWithToast","createGroup","handleAddDevicesToNewGroup","ID","addDevicesToGroup","parseInt","isOpen","closeModal","submitLabel","schema","onSubmit","propTypes","PropTypes","WarningIcon","color","warningColor","DeleteGroupModal","modalState","id","titleIconVariant","variant","deleteGroupById","UpdateDeviceModal","React","filters","columns","sort","GroupTable","count","isLoading","hasError","handleCreateModal","handleRenameModal","handleDeleteModal","hasModalSubmitted","setHasModalSubmitted","fetchGroups","history","useHistory","pathname","useLocation","useState","deviceData","imageData","updateModal","setUpdateModal","buildRows","map","rowData","DeviceGroup","Name","Devices","DevicesImageInfo","systems","image","Tooltip","content","device","index","key","rowInfo","devicesImageInfo","devices","hasValidUpdate","ValidUpdate","cells","Link","to","paths","GeneralTable","apiFilterSort","isUseApi","loadTableData","tableData","columnNames","rows","actionResolver","hasUpdate","some","UpdateAvailable","onClick","prevState","UUID","display_name","imageId","find","ImageID","isDisabled","areActionsDisabled","defaultSort","direction","emptyFilterState","body","toolbarButtons","click","Suspense","fallback","Bullseye","Spinner","navigateBack","push","refreshTable","search","useApi","api","getGroups","tableReload","response","setModalState","isCreateModalOpen","setIsCreateModalOpen","isRenameModalOpen","setIsRenameModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","PageHeader","PageHeaderTitle","Main","emptyStateNoFilters","Flex","justifyContent","default","Empty","icon","primaryAction","text","secondaryActions","link","RenameGroupModal","initialValues","updateGroupById","payload","instance","EDGE_API","Type","query","q","getTableParams","getGroupById","groupId","removeDevicesFromGroup","removeDeviceFromGroupById","RepoModal","additionalMappers","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","setTimeout","onCancel","hasSuccess","hasInfo","onInfo","fetchData","addNotification","arrayPush","isFlattenable","module","exports","baseFlatten","array","depth","predicate","isStrict","result","Symbol","isArguments","isArray","spreadableSymbol","isConcatSpreadable","_objectWithoutProperties","source","excluded","target","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable"],"sourceRoot":""}