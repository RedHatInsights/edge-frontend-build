{"version":3,"file":"js/ImageInformationCard.10fcd7a290ca84d99555.js","mappings":"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","sources":["webpack:///./src/components/ImageInformationCard.js"],"sourcesContent":["import React, { Suspense, useEffect, useState } from 'react';\nimport { getImageDataOnDevice } from '../api/images';\nimport { routes as paths } from '../constants/routeMapper';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport CmpLoader from './CmpLoader';\nimport PropTypes from 'prop-types';\n\nconst LoadingCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./LoadingCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = ({ deviceIdProps }) => {\n  const deviceId =\n    deviceIdProps ??\n    useSelector(({ entityDetails }) => entityDetails?.entity?.id);\n  const [isImageInfoLoading, setIsImageInfoLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [imageData, setImageData] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const data = await getImageDataOnDevice(deviceId);\n        setImageData(data);\n      } catch (err) {\n        setHasError(true);\n      }\n      setIsImageInfoLoading(false);\n    })();\n  }, []);\n\n  const edgeImageData = [\n    {\n      title: 'Running image',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData ? (\n        <Link\n          to={`${paths.manageImages}/${imageData?.Image?.ImageSetID}/details`}\n        >\n          {imageData?.Image?.Name}\n        </Link>\n      ) : (\n        'unavailable'\n      ),\n    },\n    {\n      title: 'Running version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData ? (\n        <Link\n          to={`${paths.manageImages}/${imageData?.Image?.ImageSetID}/versions/${imageData?.Image?.ID}/details`}\n        >\n          {imageData?.Image?.Version}\n        </Link>\n      ) : (\n        'unavailable'\n      ),\n    },\n    {\n      title: 'Target version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData?.UpdatesAvailable ? (\n        <Link\n          to={`${paths.manageImages}/${imageData?.UpdatesAvailable[0]?.Image?.ImageSetID}/versions/${imageData?.UpdatesAvailable[0]?.Image?.ID}/details`}\n        >\n          {imageData?.UpdatesAvailable[0]?.Image?.Version}\n        </Link>\n      ) : hasError ? (\n        'unavailable'\n      ) : (\n        'Same as running'\n      ),\n    },\n    {\n      title: 'Rollback version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData?.RollbackImage?.ID ? (\n        <Link\n          to={`${paths.manageImages}/${imageData?.RollbackImage?.ImageSetID}/versions/${imageData?.RollbackImage?.ID}/details`}\n        >\n          {imageData?.RollbackImage?.Version}\n        </Link>\n      ) : hasError ? (\n        'unavailable'\n      ) : (\n        'None'\n      ),\n    },\n  ];\n\n  const federatedImageData = [\n    {\n      title: 'Running image',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData ? (\n        imageData?.Image?.Name\n      ) : (\n        'unavailable'\n      ),\n    },\n    {\n      title: 'Running version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData ? (\n        imageData?.Image?.Version\n      ) : (\n        'unavailable'\n      ),\n    },\n    {\n      title: 'Target version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData?.UpdatesAvailable ? (\n        imageData?.UpdatesAvailable[0]?.Image?.Version\n      ) : hasError ? (\n        'unavailable'\n      ) : (\n        'Same as running'\n      ),\n    },\n    {\n      title: 'Rollback version',\n      value: isImageInfoLoading ? (\n        <Skeleton size={SkeletonSize.sm} />\n      ) : imageData?.RollbackImage?.ID ? (\n        imageData?.RollbackImage?.Version\n      ) : hasError ? (\n        'unavailable'\n      ) : (\n        'None'\n      ),\n    },\n  ];\n\n  return (\n    <Suspense fallback=\"\">\n      <LoadingCard\n        title=\"Image information\"\n        isLoading={false}\n        items={deviceIdProps ? federatedImageData : edgeImageData}\n      />\n    </Suspense>\n  );\n};\n\nImageInformationCard.propTypes = {\n  deviceIdProps: PropTypes.string,\n};\n\nexport default ImageInformationCard;\n"],"names":["LoadingCard","props","React","AsyncComponent","_extends","appName","module","fallback","CmpLoader","numberOfRows","ImageInformationCard","_ref","_imageData$Image","_imageData$Image2","_imageData$Image3","_imageData$Image4","_imageData$Image5","_imageData$UpdatesAva","_imageData$UpdatesAva2","_imageData$UpdatesAva3","_imageData$RollbackIm","_imageData$RollbackIm2","_imageData$RollbackIm3","_imageData$RollbackIm4","_imageData$Image6","_imageData$Image7","_imageData$UpdatesAva4","_imageData$RollbackIm5","_imageData$RollbackIm6","deviceIdProps","deviceId","useSelector","_ref2","_entityDetails$entity","entityDetails","entity","id","_useState","useState","_useState2","_slicedToArray","isImageInfoLoading","setIsImageInfoLoading","_useState3","_useState4","hasError","setHasError","_useState5","_useState6","imageData","setImageData","useEffect","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","getImageDataOnDevice","sent","t0","stop","edgeImageData","title","value","Skeleton","size","SkeletonSize","sm","Link","to","concat","paths","manageImages","Image","ImageSetID","Name","ID","Version","UpdatesAvailable","RollbackImage","federatedImageData","Suspense","isLoading","items","propTypes","PropTypes"],"sourceRoot":""}