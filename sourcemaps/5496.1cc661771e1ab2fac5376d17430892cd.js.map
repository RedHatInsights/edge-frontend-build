{"version":3,"file":"js/5496.10fcd7a290ca84d99555.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/close-icon.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/action-types.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/actions/notifications.js","webpack:///./node_modules/@redhat-cloud-services/frontend-components-notifications/esm/redux/reducers/notifications.js","webpack:///./src/Routes/Devices/DeviceTable.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/api/images/index.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/constants/features.js","webpack:///./src/constants/routeMapper.js","webpack:///./src/utils/apiWithToast.js","webpack:///./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack:///./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack:///./node_modules/@babel/runtime/helpers/esm/toPrimitive.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const CloseIconConfig = {\n  name: 'CloseIcon',\n  height: 1024,\n  width: 730,\n  svgPath: 'M725.499315,767.757345 L469.242169,511.500499 L725.499315,255.243653 C729.196254,251.545719 731.096195,247.248119 731,242.4498 C731,237.653479 728.997365,233.35588 725.299427,229.558002 L647.542773,151.701495 C643.743891,147.903617 639.446287,146 634.64996,146 C629.852635,146 625.55503,147.803673 621.857092,151.500607 L365.5,407.857398 L109.241857,151.500607 C105.544917,147.803673 101.246314,145.904733 96.4499876,146 C91.6526619,146.104622 87.3550577,148.002562 83.5571748,151.701495 L5.7005771,229.457058 C1.90269428,233.255936 0,237.553535 0,242.350855 C0,247.148175 1.80175055,251.444775 5.50068853,255.143709 L261.857779,511.500499 L5.50068853,767.757345 C1.80175055,771.454279 -0.0961914123,775.752878 0,779.750645 C0.103697157,784.547965 2.00263857,788.845564 5.7005771,792.642443 L83.4572306,871.299502 C87.2541139,875.096381 91.5527176,877 96.3500433,877 C101.147369,877 105.444973,875.197325 109.142912,871.499391 L365.400058,615.241545 L621.657203,871.499391 C625.355142,875.197325 629.652746,877.095265 634.449072,877 C639.246398,877 643.545002,874.997437 647.342885,871.299502 L725.099538,793.54294 C728.896421,789.745062 730.796362,785.446463 730.796362,780.649143 C731.096195,775.752878 729.196254,771.454279 725.499315,767.757345',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CloseIcon = createIcon(CloseIconConfig);\n\nexport default CloseIcon;","var notificationsPrefix = '@@INSIGHTS-CORE/NOTIFICATIONS/';\nexport var ADD_NOTIFICATION = \"\".concat(notificationsPrefix, \"ADD_NOTIFICATION\");\nexport var REMOVE_NOTIFICATION = \"\".concat(notificationsPrefix, \"REMOVE_NOTIFICATION\");\nexport var CLEAR_NOTIFICATIONS = \"\".concat(notificationsPrefix, \"CLEAR_NOTIFICATIONS\");\nexport default {\n    ADD_NOTIFICATION: ADD_NOTIFICATION,\n    REMOVE_NOTIFICATION: REMOVE_NOTIFICATION,\n    CLEAR_NOTIFICATIONS: CLEAR_NOTIFICATIONS,\n};\n//# sourceMappingURL=action-types.js.map","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from './action-types';\nfunction generateID(type) {\n    return 'cloud-services' + type + '-' + new Date().getTime() + Math.random().toString(36).slice(2);\n}\nexport var addNotification = function (notification) { return ({\n    type: ADD_NOTIFICATION,\n    payload: __assign({ id: generateID('notification') }, notification),\n}); };\nexport var removeNotification = function (index) { return ({\n    type: REMOVE_NOTIFICATION,\n    payload: index,\n}); };\nexport var clearNotifications = function () { return ({\n    type: CLEAR_NOTIFICATIONS,\n}); };\nexport default {\n    addNotification: addNotification,\n    removeNotification: removeNotification,\n    clearNotifications: clearNotifications,\n};\n//# sourceMappingURL=notifications.js.map","var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ADD_NOTIFICATION, CLEAR_NOTIFICATIONS, REMOVE_NOTIFICATION } from '../actions/action-types';\nvar addNotification = function (notifications, _a) {\n    var payload = _a.payload;\n    return __spreadArray(__spreadArray([], notifications, true), [payload], false);\n};\nvar removeNotification = function (notifications, _a) {\n    var payload = _a.payload;\n    var index = notifications.findIndex(function (_a) {\n        var id = _a.id;\n        return id === payload;\n    });\n    return __spreadArray(__spreadArray([], notifications.slice(0, index), true), notifications.slice(index + 1), true);\n};\nvar clearNotifications = function () { return []; };\nexport var defaultState = [];\nexport var notificationsReducers = function (state, action) {\n    if (state === void 0) { state = defaultState; }\n    switch (action.type) {\n        case ADD_NOTIFICATION:\n            return addNotification(state, action);\n        case REMOVE_NOTIFICATION:\n            return removeNotification(state, action);\n        case CLEAR_NOTIFICATIONS:\n            return clearNotifications();\n        default:\n            return state;\n    }\n};\nexport var notifications = notificationsReducers;\nexport default notifications;\n//# sourceMappingURL=notifications.js.map","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { routes as paths } from '../../constants/routeMapper';\nimport { useHistory, useLocation, useNavigate } from 'react-router-dom';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { cellWidth } from '@patternfly/react-table';\nimport { Tooltip } from '@patternfly/react-core';\nimport CustomEmptyState from '../../components/Empty';\nimport { createLink, emptyStateNoFilters, useFeatureFlags } from '../../utils';\nimport DeviceStatus, { getDeviceStatus } from '../../components/Status';\nimport RetryUpdatePopover from './RetryUpdatePopover';\nimport {\n  FEATURE_HIDE_GROUP_ACTIONS,\n  FEATURE_PARITY_INVENTORY_GROUPS,\n  FEATURE_INVENTORY_WORKSPACES_RENAME,\n} from '../../constants/features';\n\nconst insightsInventoryManageEdgeUrlName = 'manage-edge-inventory';\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      // { option: 'Booting', value: 'booting' },\n      // { option: 'Running', value: 'running' },\n      { option: 'Update available', value: 'updateAvailable' },\n      // { option: 'Updating', value: 'updating' },\n    ],\n  },\n];\n\nconst GetColumnNames = (\n  inventoryGroupsEnabled,\n  isDataAvailable,\n  useWorkspacesRename\n) => {\n  return [\n    {\n      title: 'Name',\n      type: 'name',\n      sort: isDataAvailable,\n      columnTransforms: [cellWidth(25)],\n    },\n    {\n      title: 'Image',\n      type: 'image',\n      sort: false,\n      columnTransforms: [cellWidth(20)],\n    },\n    {\n      title: inventoryGroupsEnabled\n        ? useWorkspacesRename\n          ? 'Workspace'\n          : 'Group'\n        : 'Groups',\n      type: 'groups',\n      sort: false,\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: 'Last seen',\n      type: 'last_seen',\n      sort: isDataAvailable,\n      columnTransforms: [cellWidth(15)],\n    },\n    {\n      title: 'Status',\n      type: 'status',\n      sort: false,\n      columnTransforms: [cellWidth(25)],\n    },\n  ];\n};\n\nconst createRows = (\n  devices,\n  hasLinks,\n  fetchDevices,\n  deviceBaseUrl,\n  history,\n  navigate,\n  inventoryGroupsEnabled,\n  useWorkspacesRename\n) => {\n  return devices?.map((device) => {\n    let { DeviceName, DeviceGroups } = device;\n    const {\n      DeviceID,\n      DeviceUUID,\n      UpdateAvailable,\n      LastSeen,\n      ImageName,\n      ImageSetID,\n      // ImageID,\n      Status,\n      DispatcherStatus,\n      GroupName,\n      GroupUUID,\n    } = device;\n    const deviceStatus = getDeviceStatus(\n      Status,\n      UpdateAvailable,\n      DispatcherStatus\n    );\n\n    // const currentInventoryPath = history ? '/edge' : paths.inventory;\n\n    if (DeviceName === '') {\n      // needs to be fixed with proper name in sync with inv\n      DeviceName = 'localhost';\n    }\n\n    if (inventoryGroupsEnabled) {\n      if (GroupName && GroupUUID) {\n        DeviceGroups = [{ ID: GroupUUID, Name: GroupName }];\n      } else {\n        DeviceGroups = [];\n      }\n    }\n\n    if (DeviceGroups === null) {\n      DeviceGroups = [];\n    }\n\n    const deviceGroupTooltip = (\n      <div>\n        <Tooltip\n          content={\n            <div>\n              {DeviceGroups.map((group, index) => (\n                <p key={index}>{group.Name}</p>\n              ))}\n            </div>\n          }\n        >\n          <span>Multiple groups</span>\n        </Tooltip>\n      </div>\n    );\n    const pathToDevice =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.inventory}/${DeviceUUID}`\n        : `insights/inventory/${DeviceUUID}`;\n    const pathToImage =\n      deviceBaseUrl !== 'federated'\n        ? `edge${paths.manageImages}/${ImageSetID}`\n        : `insights/image-builder/manage-edge-images/${ImageSetID}`;\n\n    return {\n      rowInfo: {\n        deviceID: DeviceID,\n        id: DeviceUUID,\n        display_name: DeviceName,\n        updateImageData: UpdateAvailable,\n        deviceStatus: getDeviceStatus(\n          Status,\n          UpdateAvailable,\n          DispatcherStatus\n        ),\n        imageSetId: ImageSetID,\n        imageName: ImageName,\n        deviceGroups: DeviceGroups,\n      },\n      noApiSortFilter: [\n        DeviceName || '',\n        ImageName || '',\n        '',\n        LastSeen || '',\n        getDeviceStatus(Status, UpdateAvailable),\n      ],\n      cells: [\n        {\n          title: hasLinks\n            ? createLink({\n                pathname: pathToDevice,\n                linkText: DeviceName,\n                navigate,\n              })\n            : DeviceName,\n        },\n        {\n          title: ImageName\n            ? hasLinks\n              ? createLink({\n                  pathname: pathToImage,\n                  linkText: ImageName,\n                  navigate,\n                })\n              : ImageName\n            : 'unavailable',\n        },\n        {\n          title:\n            DeviceGroups.length === 0 ? (\n              <div className=\"pf-v5-u-disabled-color-200\">\n                No{' '}\n                {inventoryGroupsEnabled && useWorkspacesRename\n                  ? 'workspace'\n                  : 'group'}\n              </div>\n            ) : DeviceGroups.length === 1 ? (\n              DeviceGroups[0].Name\n            ) : (\n              deviceGroupTooltip\n            ),\n        },\n        {\n          title: LastSeen ? <DateFormat date={LastSeen} /> : 'Unknown',\n        },\n        {\n          title:\n            deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n              <RetryUpdatePopover\n                lastSeen={LastSeen}\n                fetchDevices={fetchDevices}\n                device={device}\n              >\n                <DeviceStatus\n                  type={\n                    deviceStatus === 'error'\n                      ? 'errorWithExclamationCircle'\n                      : deviceStatus\n                  }\n                  isLink={true}\n                />\n              </RetryUpdatePopover>\n            ) : (\n              <DeviceStatus\n                type={\n                  deviceStatus === 'error'\n                    ? 'errorWithExclamationCircle'\n                    : deviceStatus\n                }\n              />\n            ),\n        },\n      ],\n    };\n  });\n};\n\nconst DeviceTable = ({\n  navigateProp,\n  historyProp,\n  locationProp,\n  hasCheckbox = false,\n  selectedItems,\n  selectedItemsUpdateable,\n  skeletonRowQuantity,\n  data,\n  count,\n  isLoading,\n  hasError,\n  kebabItems,\n  setRemoveModal,\n  setIsAddModalOpen,\n  handleAddDevicesToGroup,\n  handleRemoveDevicesFromGroup,\n  handleEditNameSystem,\n  handleDeleteSystem,\n  handleUpdateSelected,\n  hasModalSubmitted,\n  setHasModalSubmitted,\n  fetchDevices,\n  isSystemsView = false,\n  isAddSystemsView = false,\n  urlName,\n  enforceEdgeGroups,\n}) => {\n  const canBeRemoved = setRemoveModal;\n  const canBeAdded = setIsAddModalOpen;\n  const canBeUpdated = isSystemsView;\n  const history = historyProp\n    ? historyProp()\n    : useHistory\n    ? useHistory()\n    : null;\n  const navigate = navigateProp\n    ? navigateProp()\n    : useNavigate\n    ? useNavigate()\n    : null;\n  const { pathname, search } = locationProp\n    ? locationProp()\n    : useLocation\n    ? useLocation()\n    : null;\n\n  const useInventorGroups = useFeatureFlags(FEATURE_PARITY_INVENTORY_GROUPS);\n  const inventoryGroupsEnabled = !enforceEdgeGroups && useInventorGroups;\n  const useWorkspacesRename = useFeatureFlags(\n    FEATURE_INVENTORY_WORKSPACES_RENAME\n  );\n\n  // Create base URL path for system detail link\n  const deviceBaseUrl = navigateProp\n    ? 'federated'\n    : pathname === paths.inventory\n    ? pathname\n    : pathname === '/'\n    ? ''\n    : `${pathname}/systems`;\n\n  const hideGroupsActions = useFeatureFlags(FEATURE_HIDE_GROUP_ACTIONS);\n\n  const actionResolver = (rowData) => {\n    const getUpdatePathname = (updateRowData) =>\n      navigateProp\n        ? `/insights/inventory/${updateRowData.rowInfo.id}/update`\n        : `/inventory/${updateRowData.rowInfo.id}/update`;\n    const actions = [];\n    if (isLoading) return actions;\n    if (!rowData?.rowInfo?.id) return actions;\n\n    if (handleAddDevicesToGroup && !hideGroupsActions) {\n      actions.push({\n        title: `Add to ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        isDisabled: inventoryGroupsEnabled\n          ? rowData?.rowInfo?.deviceGroups.length !== 0 // disable the action item if the system has a group assigned\n          : false,\n        onClick: () =>\n          handleAddDevicesToGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleEditNameSystem) {\n      actions.push({\n        title: 'Edit',\n        onClick: () =>\n          handleEditNameSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleDeleteSystem) {\n      actions.push({\n        title: 'Delete',\n        onClick: () =>\n          handleDeleteSystem(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                display_name: rowData.rowInfo.display_name,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (handleRemoveDevicesFromGroup && !hideGroupsActions) {\n      actions.push({\n        title: `Remove from ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        isDisabled: rowData?.rowInfo?.deviceGroups.length === 0,\n        onClick: () =>\n          handleRemoveDevicesFromGroup(\n            [\n              {\n                ID: rowData.rowInfo.deviceID,\n                name: rowData.rowInfo.display_name,\n                deviceGroups: rowData.rowInfo.deviceGroups,\n                UUID: rowData.rowInfo.id,\n              },\n            ],\n            true\n          ),\n      });\n    }\n\n    if (!areActionsDisabled(rowData) && handleUpdateSelected) {\n      actions.push({\n        title: 'Update',\n        onClick: (_event, _rowId, rowData) => {\n          if (navigateProp) {\n            const pathProp = getUpdatePathname(rowData);\n            navigate(pathProp, { replace: true });\n          } else {\n            history.push({\n              pathname: getUpdatePathname(rowData),\n              // pathname: `${deviceBaseUrl}/${rowData.rowInfo.id}/update`,\n            });\n          }\n        },\n      });\n    }\n\n    if (canBeRemoved) {\n      actions.push({\n        title: `Remove from ${\n          inventoryGroupsEnabled && useWorkspacesRename ? 'workspace' : 'group'\n        }`,\n        onClick: () =>\n          setRemoveModal({\n            name: rowData.rowInfo.display_name,\n            isOpen: true,\n            deviceId: rowData.rowInfo.deviceID,\n          }),\n      });\n    }\n\n    return actions;\n  };\n\n  const areActionsDisabled = (rowData) =>\n    !rowData.rowInfo?.UpdateAvailable &&\n    (rowData.rowInfo?.deviceStatus === 'updating' ||\n      rowData.rowInfo?.deviceStatus === 'upToDate');\n\n  // some filters and columns titles/labels have different values when shown in insights inventory\n  let tableFilters = [];\n  let tableColumnNames = [];\n  const isDataAvailable = data ? data.length > 0 : false;\n  const columnNames = GetColumnNames(\n    inventoryGroupsEnabled,\n    isDataAvailable,\n    useWorkspacesRename\n  );\n\n  if (urlName === insightsInventoryManageEdgeUrlName) {\n    for (let ind = 0; ind < defaultFilters.length; ind++) {\n      let filterElement = defaultFilters[ind];\n      if (filterElement['label'] === 'Status') {\n        filterElement['label'] = 'Image status';\n      }\n      tableFilters.push(filterElement);\n    }\n    for (let ind = 0; ind < columnNames.length; ind++) {\n      let columnElement = columnNames[ind];\n      if (columnElement['title'] === 'Status') {\n        columnElement['title'] = 'Image status';\n      }\n      tableColumnNames.push(columnElement);\n    }\n  } else {\n    tableFilters = defaultFilters;\n    tableColumnNames = columnNames;\n  }\n\n  return (\n    <div className=\"edge\">\n      <>\n        {isSystemsView &&\n        emptyStateNoFilters(isLoading, count, search) &&\n        !historyProp ? (\n          <CustomEmptyState\n            data-testid=\"general-table-empty-state-no-data\"\n            icon={'plus'}\n            title={'Connect edge systems'}\n            body={\n              'Connect and manage edge systems here after registering them via the console. To start, create a RHEL for Edge image and install it to your target system.'\n            }\n            secondaryActions={[\n              {\n                title:\n                  'Create RHEL for Edge images and configure automated management',\n                link: 'https://access.redhat.com/documentation/en-us/edge_management/2022/html-single/create_rhel_for_edge_images_and_configure_automated_management/index',\n                type: 'link',\n              },\n            ]}\n          />\n        ) : (\n          <GeneralTable\n            historyProp={historyProp}\n            navigateProp={navigateProp}\n            locationProp={locationProp}\n            apiFilterSort={true}\n            isUseApi={true}\n            filters={tableFilters}\n            filtersName={'edge-devices-table-filters'}\n            loadTableData={fetchDevices}\n            tableData={{\n              count: count,\n              isLoading: isLoading,\n              hasError: hasError,\n            }}\n            columnNames={tableColumnNames}\n            rows={createRows(\n              data || [],\n              isAddSystemsView || isSystemsView,\n              fetchDevices,\n              deviceBaseUrl,\n              history,\n              navigate,\n              inventoryGroupsEnabled,\n              useWorkspacesRename\n            )}\n            actionResolver={actionResolver}\n            defaultSort={{ index: 3, direction: 'desc' }}\n            toolbarButtons={\n              (canBeAdded\n                ? [\n                    {\n                      title: 'Add systems',\n                      click: () => setIsAddModalOpen(true),\n                    },\n                  ]\n                : [],\n              canBeUpdated\n                ? [\n                    {\n                      isDisabled: !selectedItemsUpdateable,\n                      title: 'Update',\n                      id: 'toolbar-update-button',\n                      click: () => handleUpdateSelected(),\n                    },\n                  ]\n                : [])\n            }\n            hasCheckbox={hasCheckbox}\n            selectedItems={selectedItems}\n            skeletonRowQuantity={skeletonRowQuantity}\n            kebabItems={kebabItems}\n            hasModalSubmitted={hasModalSubmitted}\n            setHasModalSubmitted={setHasModalSubmitted}\n          />\n        )}\n      </>\n    </div>\n  );\n};\n\nDeviceTable.propTypes = {\n  navigateProp: PropTypes.func,\n  historyProp: PropTypes.func,\n  locationProp: PropTypes.func,\n  imageData: PropTypes.object,\n  urlParam: PropTypes.string,\n  openUpdateWizard: PropTypes.func,\n  skeletonRowQuantity: PropTypes.number,\n  // possibly remove some of these\n  temp: PropTypes.func,\n  hasCheckbox: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  selectedItems: PropTypes.func,\n  selectedItemsUpdateable: PropTypes.bool,\n  reload: PropTypes.bool,\n  setReload: PropTypes.func,\n  data: PropTypes.array,\n  count: PropTypes.number,\n  isLoading: PropTypes.bool,\n  hasError: PropTypes.bool,\n  handleSingleDeviceRemoval: PropTypes.func,\n  kebabItems: PropTypes.array,\n  setRemoveModal: PropTypes.func,\n  setIsAddModalOpen: PropTypes.func,\n  hasModalSubmitted: PropTypes.bool,\n  setHasModalSubmitted: PropTypes.func,\n  handleAddDevicesToGroup: PropTypes.func,\n  handleRemoveDevicesFromGroup: PropTypes.func,\n  handleEditNameSystem: PropTypes.func,\n  handleDeleteSystem: PropTypes.func,\n  handleUpdateSelected: PropTypes.func,\n  fetchDevices: PropTypes.func,\n  isSystemsView: PropTypes.bool,\n  isAddSystemsView: PropTypes.bool,\n  urlName: PropTypes.string,\n  groupUUID: PropTypes.string,\n  enforceEdgeGroups: PropTypes.bool,\n};\n\nexport default DeviceTable;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import {\n  CONTENT_SOURCES_API,\n  EDGE_API,\n  IMAGE_BUILDER_API,\n  RHSM_API,\n  getTableParams,\n} from '../index';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\n\nexport const checkImageName = (name) => {\n  const payload = {\n    name,\n  };\n  return instance.post(`${EDGE_API}/images/checkImageName`, payload);\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `${IMAGE_BUILDER_API}/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchActivationKeys = ({ limit = 10, offset = 0 } = {}) => {\n  return instance.get(\n    `${RHSM_API}/activation_keys?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const createImage = ({\n  Id,\n  name,\n  version,\n  description,\n  release,\n  architecture,\n  username,\n  credentials,\n  imageType: imageTypes,\n  'selected-packages': packages,\n  'third-party-repositories': thirdPartyRepositories,\n  'custom-packages': customPackages,\n  activationKey,\n}) => {\n  let [imageType] = imageTypes || [];\n  if (imageTypes.length > 1) {\n    imageType = 'rhel-edge-installer';\n  }\n  const payload = {\n    name,\n    version,\n    description,\n    distribution: release,\n    imageType: imageType,\n    packages: packages?.map((item) => ({ name: item.name })),\n    outputTypes: imageTypes,\n    commit: {\n      arch: architecture,\n    },\n    installer: {\n      username,\n      sshkey: credentials,\n    },\n    thirdPartyRepositories: thirdPartyRepositories?.map((repo) => ({\n      ID: repo.id,\n      Name: repo.name,\n      URL: repo.URL,\n      uuid: repo.uuid,\n    })),\n    customPackages: customPackages?.map((repo) => ({ Name: repo.name })),\n    activationKey: activationKey,\n  };\n\n  let endpoint = `${EDGE_API}/images`;\n\n  if (version > 1) {\n    endpoint += `/${Id}/update`;\n  }\n\n  return instance.post(endpoint, payload);\n};\n\nexport const getImageSet = ({\n  id,\n  q = {\n    limit: 10,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets/${id}?${query}`);\n};\n\nexport const getImageSetViewVersions = ({\n  imageSetID,\n  query = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  },\n}) => {\n  const q = getTableParams(query);\n  return instance.get(\n    `${EDGE_API}/image-sets/view/${imageSetID}/versions?${q}`\n  );\n};\n\nexport const getImageSetView = ({ id }) => {\n  return instance.get(`${EDGE_API}/image-sets/view/${id}`);\n};\n\nexport const getImagePackageMetadata = (id) => {\n  try {\n    return instance.get(`${EDGE_API}/images/${id}/metadata`);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const fetchEdgeImages = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/images?${query}`);\n};\n\nexport const fetchEdgeImageSets = (\n  q = {\n    limit: 20,\n    offset: 0,\n    sort_by: '-created_at',\n  }\n) => {\n  const query = getTableParams(q);\n  return instance.get(`${EDGE_API}/image-sets?${query}`);\n};\n\nexport const getEdgeImageStatus = (id) => {\n  return instance.get(`${EDGE_API}/images/${id}/status`);\n};\n\nexport const getImageDataOnDevice = (id) => {\n  return instance.get(`${EDGE_API}/updates/device/${id}/image`);\n};\n\nexport const getPackages = async (distribution, architecture, search) => {\n  const params = new URLSearchParams({\n    distribution,\n    architecture,\n    search,\n  });\n  return instance(`${IMAGE_BUILDER_API}/packages?${params.toString()}`);\n};\n\nexport const getImageById = ({ id }) => {\n  return instance.get(`${EDGE_API}/images/${id}/details`);\n};\n\nexport const getImageSets = ({ query }) => {\n  if (query === '') {\n    query = { limit: 20, offset: 0, sort_by: '-updated_at' };\n  }\n  const q = getTableParams(query);\n  return instance.get(`${EDGE_API}/image-sets/view?${q}`);\n};\n\nexport const postRpmsNames = (urls, search) => {\n  return instance.post(`${CONTENT_SOURCES_API}/rpms/names`, {\n    urls: urls,\n    search: search,\n  });\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","export const FEATURE_PARITY_INVENTORY_GROUPS =\n  'edgeParity.inventory-groups-enabled';\n\nexport const FEATURE_HIDE_GROUP_ACTIONS = 'edge-management.hide_groups_actions';\n\nexport const FEATURE_INVENTORY_WORKSPACES_RENAME =\n  'platform.rbac.groups-to-workspaces-rename';\n","export const routes = {\n  groups: '/groups',\n  groupsDetail: '/groups/:uuid',\n  deviceDetail: '/groups/:uuid/:inventoryId',\n  canaries: '/canaries',\n  fleetManagement: '/fleet-management',\n  fleetManagementDetail: '/fleet-management/:groupId',\n  fleetManagementSystemDetail: '/fleet-management/:groupId/systems/:deviceId',\n  fleetManagementSystemDetailUpdate:\n    '/fleet-management/:groupId/systems/:deviceId/update',\n  inventory: '/inventory',\n  insightsInventory: '/insights/inventory/manage-edge-inventory',\n  inventoryDetail: '/inventory/:deviceId',\n  inventoryDetailModal: '/inventory/:deviceId/:modalId',\n  inventoryDetailUpdate: '/inventory/:deviceId/update',\n  insightsInventoryDetailUpdate: '/insights/inventory/:deviceId/update',\n  manageImages: '/manage-images',\n  manageImagesDetail: '/manage-images/:imageId',\n  manageImagesDetailVersion: '/manage-images/:imageId/versions/:imageVersionId',\n  repositories: '/repositories',\n  learningResources: '/learning-resources',\n  contentSourcesRepositories: '/preview/insights/content',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n","function _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nexport { _assertThisInitialized as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nexport { _createClass as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };"],"names":["name","height","width","svgPath","yOffset","xOffset","notificationsPrefix","ADD_NOTIFICATION","concat","REMOVE_NOTIFICATION","CLEAR_NOTIFICATIONS","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","addNotification","notification","type","payload","id","Date","getTime","Math","random","toString","slice","removeNotification","index","clearNotifications","__spreadArray","to","from","pack","ar","l","Array","defaultState","state","action","notifications","_a","findIndex","defaultFilters","label","options","option","value","createRows","devices","hasLinks","fetchDevices","deviceBaseUrl","history","navigate","inventoryGroupsEnabled","useWorkspacesRename","map","device","DeviceName","DeviceGroups","DeviceID","DeviceUUID","UpdateAvailable","LastSeen","ImageName","ImageSetID","Status","DispatcherStatus","GroupName","GroupUUID","deviceStatus","getDeviceStatus","ID","Name","deviceGroupTooltip","React","Tooltip","content","group","key","pathToDevice","paths","inventory","pathToImage","manageImages","rowInfo","deviceID","display_name","updateImageData","imageSetId","imageName","deviceGroups","noApiSortFilter","cells","title","createLink","pathname","linkText","className","DateFormat","date","RetryUpdatePopover","lastSeen","DeviceStatus","isLink","DeviceTable","_ref","navigateProp","historyProp","locationProp","_ref$hasCheckbox","hasCheckbox","selectedItems","selectedItemsUpdateable","skeletonRowQuantity","data","count","isLoading","hasError","kebabItems","setRemoveModal","handleAddDevicesToGroup","setIsAddModalOpen","handleRemoveDevicesFromGroup","handleEditNameSystem","handleDeleteSystem","handleUpdateSelected","hasModalSubmitted","setHasModalSubmitted","_ref$isSystemsView","isSystemsView","_ref$isAddSystemsView","isAddSystemsView","urlName","enforceEdgeGroups","canBeRemoved","canBeUpdated","useHistory","useNavigate","_ref2","useLocation","search","useInventorGroups","useFeatureFlags","FEATURE_PARITY_INVENTORY_GROUPS","FEATURE_INVENTORY_WORKSPACES_RENAME","hideGroupsActions","FEATURE_HIDE_GROUP_ACTIONS","tableFilters","tableColumnNames","isDataAvailable","columnNames","sort","columnTransforms","cellWidth","GetColumnNames","ind","filterElement","push","columnElement","emptyStateNoFilters","CustomEmptyState","icon","body","secondaryActions","link","GeneralTable","apiFilterSort","isUseApi","filters","filtersName","loadTableData","tableData","rows","actionResolver","rowData","_rowData$rowInfo","_rowData$rowInfo2","_rowData$rowInfo3","getUpdatePathname","updateRowData","actions","isDisabled","onClick","UUID","_rowData$rowInfo4","_rowData$rowInfo5","_rowData$rowInfo6","areActionsDisabled","_event","_rowId","pathProp","replace","isOpen","deviceId","defaultSort","direction","toolbarButtons","click","propTypes","PropTypes","imageData","urlParam","openUpdateWizard","temp","setIsModalOpen","reload","setReload","handleSingleDeviceRemoval","groupUUID","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","status","Stack","StackItem","position","children","_useState","useState","_useState2","_slicedToArray","isVisible","setIsVisible","dispatch","useDispatch","statusMessages","onSuccess","variant","description","DescriptionListGroup","DescriptionListTermHelpText","Popover","shouldOpen","shouldClose","alertseverityvariant","headerContent","style","color","ExclamationCircleIcon","size","DispatcherReason","headerComponent","bodyContent","footerContent","Button","isInline","apiWithToast","_asyncToGenerator","_regeneratorRuntime","_callee","_context","prev","next","updateSystem","DevicesUUID","stop","DescriptionListDescription","defaultProps","checkImageName","instance","post","EDGE_API","fetchActivationKeys","_ref3","undefined","_ref3$limit","limit","_ref3$offset","offset","get","RHSM_API","createImage","_ref4","Id","version","release","architecture","username","credentials","imageTypes","imageType","packages","thirdPartyRepositories","customPackages","activationKey","_ref5","distribution","item","outputTypes","commit","arch","installer","sshkey","repo","URL","uuid","endpoint","getImageSet","_ref7","_ref7$q","q","sort_by","query","getTableParams","getImageSetViewVersions","_ref8","imageSetID","_ref8$query","getImageSetView","_ref9","fetchEdgeImageSets","getEdgeImageStatus","getImageDataOnDevice","getPackages","_ref10","params","URLSearchParams","abrupt","IMAGE_BUILDER_API","_x","_x2","_x3","getImageById","_ref11","getImageSets","_ref12","postRpmsNames","urls","CONTENT_SOURCES_API","statusMapper","booting","text","Icon","iconMapper","checkCircle","colorMapper","green","labelColor","building","inProgress","blue","created","upToDate","success","passed","updateAvailable","exclamationTriangle","yellow","updating","error","timesCircle","red","default","unknown","interrupted","unresponsive","exclamationCircle","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","_ref$isLabel","isLabel","_ref$toolTipContent","toolTipContent","_ref$className","Label","Split","SplitItem","textDecoration","cursor","routes","groups","groupsDetail","deviceDetail","canaries","fleetManagement","fleetManagementDetail","fleetManagementSystemDetail","fleetManagementSystemDetailUpdate","insightsInventory","inventoryDetail","inventoryDetailModal","inventoryDetailUpdate","insightsInventoryDetailUpdate","manageImagesDetail","manageImagesDetailVersion","repositories","learningResources","contentSourcesRepositories","api","notificationProp","_statusMessages","_statusMessages2","_statusMessages3","hasSuccess","hasInfo","onInfo","hasWarning","onWarning","onError","fetchData","response","sent","_objectSpread","t0","err","Title","_assertThisInitialized","e","ReferenceError","_defineProperties","r","o","enumerable","configurable","writable","defineProperty","_createClass","_defineProperty","toPropertyKey","Symbol","toPrimitive","TypeError","String"],"sourceRoot":""}