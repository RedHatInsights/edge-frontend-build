{"version":3,"file":"js/CreateImageWizard.1651012307196.d06c189468a14f5c17ef.js","mappings":"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","sources":["webpack:///./src/components/BuildModalReview.js","webpack:///./src/Routes/Devices/UpdateDeviceModal.js","webpack:///./src/Routes/ImageManager/CreateImageWizard.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport {\n  Title,\n  Text,\n  TextContent,\n  TextListItemVariants,\n  TextListVariants,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst BuildModalReview = ({ reviewObject, key }) => {\n  return (\n    <TextContent>\n      <Title headingLevel=\"h3\">\n        <Text component={'b'}>{reviewObject.title}</Text>\n      </Title>\n      <TextList component={TextListVariants.dl}>\n        {reviewObject.rows.map((row) => (\n          <Fragment key={row.title + key}>\n            <TextListItem component={TextListItemVariants.dt}>\n              {row.title}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {row.value}\n            </TextListItem>\n          </Fragment>\n        ))}\n      </TextList>\n    </TextContent>\n  );\n};\n\nBuildModalReview.propTypes = {\n  reviewObject: PropTypes.object,\n  key: PropTypes.string,\n};\n\nexport default BuildModalReview;\n","import React from 'react';\nimport { TextContent, Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\nimport { updateDeviceLatestImage } from '../../api/index';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport Modal from '../../components/Modal';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport BuildModalReview from '../../components/BuildModalReview';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper } from '../ImageManagerDetail/constants';\n\nconst UpdateDeviceModal = ({ updateModal, setUpdateModal, refreshTable }) => {\n  const dispatch = useDispatch();\n  const imageData = updateModal?.imageData;\n  const isMultiple = updateModal.deviceData.length > 1;\n  const deviceId = updateModal.deviceData.map((device) => device.id);\n  const deviceName = isMultiple\n    ? updateModal.deviceData.map((device) => device.display_name)\n    : updateModal?.deviceData[0]?.display_name;\n\n  const handleUpdateModal = async () => {\n    try {\n      await updateDeviceLatestImage({\n        DevicesUUID: deviceId,\n        CommitId: imageData?.Image?.CommitID,\n      });\n      dispatch({\n        ...addNotification({\n          variant: 'info',\n          title: 'Updating device',\n          description: isMultiple\n            ? ` ${deviceName.length} systems were added to the queue.`\n            : ` ${deviceName} was added to the queue.`,\n        }),\n      });\n    } catch (err) {\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          title: 'Updating a device was unsuccessful',\n          description: `Response: ${err.statusText}`,\n        }),\n      });\n    }\n\n    handleClose();\n    refreshTable ? refreshTable() : null;\n  };\n\n  const handleClose = () => {\n    setUpdateModal((prevState) => {\n      return {\n        ...prevState,\n        isOpen: false,\n      };\n    });\n  };\n\n  const WarningText = () => (\n    <TextContent className=\"pf-u-pt-md\">\n      <Text\n        style={{ color: 'var(--pf-global--palette--gold-500)' }}\n        component=\"small\"\n      >\n        <ExclamationTriangleIcon /> After the update is installed, the device\n        will apply the changes.\n      </Text>\n    </TextContent>\n  );\n\n  const Description = () => (\n    <TextContent>\n      <Text>\n        Update{' '}\n        <span className=\"pf-u-font-weight-bold pf-u-font-size-md\">\n          {isMultiple ? `${deviceName.length} systems` : deviceName}\n        </span>{' '}\n        to latest version of the image linked to it.\n      </Text>\n    </TextContent>\n  );\n\n  const updateToDetails = {\n    title: `Update to version ${imageData?.Image.Version}`,\n    rows: [\n      { title: 'Image Name', value: imageData?.Image.Name },\n      { title: 'Version', value: imageData?.Image.Version },\n      {\n        title: 'Created',\n        value: <DateFormat date={imageData?.Image.CreatedAt} />,\n      },\n      {\n        title: 'Release',\n        value: distributionMapper[imageData?.Image.Distribution],\n      },\n    ],\n  };\n\n  const packageDetails = {\n    title: `Changes from version ${imageData?.Image.Version - 1}`,\n    rows: [\n      { title: 'Added', value: imageData?.PackageDiff?.Added?.length || 0 },\n      { title: 'Removed', value: imageData?.PackageDiff?.Removed?.length || 0 },\n      { title: 'Updated', value: imageData?.PackageDiff?.Updated?.length || 0 },\n    ],\n  };\n\n  const updateSchema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: Description(),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'update-details',\n        label: BuildModalReview({\n          reviewObject: updateToDetails,\n          key: 'update-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'package-details',\n        label: BuildModalReview({\n          reviewObject: packageDetails,\n          key: 'package-details',\n        }),\n      },\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'warning-text',\n        label: WarningText(),\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      size=\"medium\"\n      title={`Update system${isMultiple ? 's' : ''} to latest image version`}\n      isOpen={updateModal.isOpen}\n      openModal={() =>\n        setUpdateModal((prevState) => ({ ...prevState, isOpen: false }))\n      }\n      submitLabel=\"Update Device\"\n      schema={updateSchema}\n      onSubmit={handleUpdateModal}\n      reloadData={refreshTable}\n    />\n  );\n};\n\nUpdateDeviceModal.propTypes = {\n  refreshTable: PropTypes.func,\n  updateModal: PropTypes.shape({\n    isOpen: PropTypes.bool.isRequired,\n    deviceData: PropTypes.array.isRequired,\n    imageData: PropTypes.object,\n  }).isRequired,\n  setUpdateModal: PropTypes.func.isRequired,\n};\n\nexport default UpdateDeviceModal;\n","import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  registration,\n  review,\n  packages,\n  repositories,\n  imageSetDetails,\n  imageOutput,\n  customPackages,\n} from './steps';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage, loadEdgeImageSets } from '../../store/actions';\nimport { CREATE_NEW_IMAGE_RESET } from '../../store/action-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { getEdgeImageStatus } from '../../api';\nimport { useFeatureFlags } from '../../constants';\n\nconst CreateImage = ({ navigateBack }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const customRepoFlag = useFeatureFlags('fleet-management.custom-repos');\n\n  const closeAction = () => {\n    navigateBack();\n    dispatch({ type: CREATE_NEW_IMAGE_RESET });\n  };\n  useEffect(() => {\n    (async () => {\n      insights?.chrome?.auth\n        ?.getUser()\n        .then((result) => setUser(result != undefined ? result : {}));\n    })();\n  }, []);\n\n  return user ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={({ values, setIsSaving }) => {\n        setIsSaving(() => true);\n        const payload = {\n          ...values,\n          architecture: 'x86_64',\n        };\n        createNewImage(dispatch, payload, (resp) => {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              title: 'Created image',\n              description: `${resp.value.Name} image was added to the queue.`,\n            }),\n            meta: {\n              polling: {\n                id: `FETCH_IMAGE_${resp.value.ID}_BUILD_STATUS`,\n                fetcher: () => getEdgeImageStatus(resp.value.ID),\n                condition: (resp) => {\n                  switch (resp.Status) {\n                    case 'BUILDING':\n                      return [true, ''];\n                    case 'ERROR':\n                      return [false, 'failure'];\n                    default:\n                      return [false, 'success'];\n                  }\n                },\n                onEvent: {\n                  failure: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'danger',\n                          title: 'Image build failed',\n                          description: `${resp.value.Name} image build is completed unsuccessfully`,\n                        })\n                      ),\n                  ],\n                  success: [\n                    (dispatch) =>\n                      dispatch(\n                        addNotification({\n                          variant: 'success',\n                          title: 'Image is ready',\n                          description: `${resp.value.Name} image build is completed`,\n                        })\n                      ),\n                    (dispatch) => loadEdgeImageSets(dispatch),\n                  ],\n                },\n              },\n            },\n          });\n          loadEdgeImageSets(dispatch);\n          closeAction();\n        });\n      }}\n      defaultArch=\"x86_64\"\n      initialValues={{ version: 0, includesCustomRepos: customRepoFlag }}\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Create image',\n            },\n            showTitles: true,\n            title: 'Create image',\n            crossroads: [\n              'target-environment',\n              'release',\n              'imageType',\n              'third-party-repositories',\n              'imageOutput',\n              'imageSetDetails',\n              'includesCustomRepos',\n            ],\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              imageSetDetails,\n              imageOutput,\n              registration,\n              repositories,\n              packages,\n              review,\n              customPackages,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImage.propTypes = {\n  navigateBack: PropTypes.func,\n};\nCreateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default CreateImage;\n"],"names":["BuildModalReview","reviewObject","key","TextContent","Title","headingLevel","Text","component","title","TextList","TextListVariants","rows","map","row","Fragment","TextListItem","T","TextListItemVariants","value","propTypes","PropTypes","UpdateDeviceModal","updateModal","setUpdateModal","refreshTable","dispatch","useDispatch","imageData","isMultiple","deviceData","length","deviceId","device","id","deviceName","display_name","handleUpdateModal","updateDeviceLatestImage","DevicesUUID","CommitId","Image","CommitID","addNotification","variant","description","statusText","handleClose","prevState","isOpen","updateToDetails","Version","Name","DateFormat","date","CreatedAt","distributionMapper","Distribution","packageDetails","PackageDiff","Added","Removed","Updated","updateSchema","fields","componentTypes","name","label","className","style","color","Modal","size","openModal","submitLabel","schema","onSubmit","reloadData","isRequired","CreateImage","navigateBack","useState","user","setUser","customRepoFlag","useFeatureFlags","closeAction","type","CREATE_NEW_IMAGE_RESET","useEffect","insights","chrome","auth","getUser","then","result","undefined","onClose","customComponentMapper","review","ReviewStep","values","setIsSaving","payload","architecture","createNewImage","resp","meta","polling","ID","fetcher","getEdgeImageStatus","condition","Status","onEvent","failure","success","loadEdgeImageSets","defaultArch","initialValues","version","includesCustomRepos","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","imageSetDetails","imageOutput","registration","repositories","packages","customPackages","defaultProps"],"sourceRoot":""}