{"version":3,"file":"js/GroupsDetailPage.4588fb587eda637aee03.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/DeviceStatus.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/constants.js","webpack:///./src/components/GeneralTable.js","webpack:///./src/Routes/ImageManager/ImageTable.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailActions.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTab.js","webpack:///./src/Routes/ImageManagerDetail/ImagePackagesTab.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetailTabs.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/constants.js","webpack:///./src/store/action-types.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/edgeImages.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/imageDetail.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js","webpack:///./src/store/createImage.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\n\nconst DeviceDetailTabs = () => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md pf-u-mb-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { getDeviceHasUpdate } from '../../api/index';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: {\n          display_name: entity.display_name,\n          id: entity.id,\n          system_profile: {\n            image_data,\n            status:\n              image_data?.UpdateTransactions?.[\n                image_data.UpdateTransactions.length - 1\n              ]?.Status,\n          },\n        },\n      }));\n    })();\n  }, [entity]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/fleet-management'}>\n                {uuid ? 'Groups' : 'Fleet management'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n                    ?.UpdatesAvailable?.length > 0,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : updateModal?.deviceData?.system_profile?.status === 'BUILDING' ||\n            updateModal?.deviceData?.system_profile?.status === 'CREATED' ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"blue\"\n              icon={<InProgressIcon />}\n            >\n              Updating\n            </Label>\n          ) : updateModal?.deviceData?.system_profile?.image_data?.ImageInfo\n              ?.UpdatesAvailable?.length > 0 ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"orange\"\n              icon={<ExclamationTriangleIcon />}\n            >\n              Update Available\n            </Label>\n          ) : (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"green\"\n              icon={<CheckCircleIcon color=\"green\" />}\n            >\n              Running\n            </Label>\n          )}\n        </PageHeader>\n        <Main className=\"edge-c-device--detail\">\n          <Grid gutter=\"md\">\n            <GridItem span={12}>\n              <DeviceDetailTabs />\n            </GridItem>\n          </Grid>\n        </Main>\n      </DetailWrapper>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary</CardTitle>\n    <CardBody>\n      <Grid>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {active}\n              </Button>{' '}\n              Active\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {orphaned}\n              </Button>{' '}\n              Orphaned\n            </StackItem>\n          </Stack>\n        </GridItem>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {noReports}\n              </Button>\n              Stale\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {neverReported}\n              </Button>\n              Registered but never reported\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_active_color_300';\nimport PropTypes from 'prop-types';\n\nconst DeviceStatus = ({ imageData, rpm_ostree_deployments }) => {\n  const { UpdateTransactions, ImageInfo } = imageData || {};\n  if (rpm_ostree_deployments?.length === undefined) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <QuestionCircleIcon color=\"grey\" />\n        </SplitItem>\n        <SplitItem>Unspecified</SplitItem>\n      </Split>\n    );\n  }\n  const current_deployment = rpm_ostree_deployments[0];\n  if (!current_deployment.booted) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color=\"blue\" />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    );\n  }\n\n  if (\n    UpdateTransactions?.[UpdateTransactions.length - 1]?.Status ===\n      'BUILDING' ||\n    UpdateTransactions?.[UpdateTransactions.length - 1]?.Status === 'CREATED'\n  ) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color={infoColor.value} />\n        </SplitItem>\n        <SplitItem>Updating</SplitItem>\n      </Split>\n    );\n  }\n\n  if (ImageInfo?.UpdatesAvailable?.length > 0) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon color={warningColor.value} />\n        </SplitItem>\n        <SplitItem className=\"pf-u-warning-color-200\">\n          Update Available\n        </SplitItem>\n      </Split>\n    );\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">\n        <CheckCircleIcon color=\"green\" />\n      </SplitItem>\n      <SplitItem>Running</SplitItem>\n    </Split>\n  );\n};\n\nDeviceStatus.propTypes = {\n  id: PropTypes.string,\n  updateTransactions: PropTypes.array,\n  rpm_ostree_deployments: PropTypes.array,\n  imageData: PropTypes.object,\n};\n\nexport default DeviceStatus;\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  //onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport DeviceStatus from './DeviceStatus';\nimport { getDeviceHasUpdate } from '../../api';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [activeFilters] = useState(defaultFilters);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('update_device') === 'true') {\n      setUpdateModal((prevState) => {\n        return {\n          ...prevState,\n          isOpen: true,\n        };\n      });\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n            variant: 'compact',\n            actionResolver: (rowData) => {\n              return rowData?.system_profile?.image_data\n                ? [\n                    {\n                      title: 'Update',\n                      onClick: (_event, _index, rowData) => {\n                        setUpdateModal((prevState) => {\n                          return {\n                            ...prevState,\n                            isOpen: true,\n                            deviceData: rowData,\n                          };\n                        });\n                      },\n                    },\n                  ]\n                : rowData?.system_profile\n                ? [\n                    {\n                      title: 'No Action',\n                    },\n                  ]\n                : null;\n            },\n            areActionsDisabled: (rowData) => {\n              const updateTransactions =\n                rowData?.system_profile?.image_data?.UpdateTransactions || [];\n\n              return (\n                updateTransactions[updateTransactions.length - 1]?.Status ===\n                  'BUILDING' ||\n                updateTransactions[updateTransactions.length - 1]?.Status ===\n                  'CREATED' ||\n                !rowData?.system_profile?.image_data?.ImageInfo\n                  ?.UpdatesAvailable?.length > 0\n              );\n            },\n          }}\n          columns={(defaultColumns) => {\n            const newColumns = defaultColumns.filter((column) =>\n              ['display_name', 'updated'].includes(column.key)\n            );\n            newColumns.filter((col) => col.key === 'updated')[0].props = {\n              width: 20,\n            };\n\n            return [\n              ...newColumns,\n              {\n                key: 'system_profile',\n                title: 'Device status',\n                // eslint-disable-next-line react/display-name\n                renderFunc: (sysProf) => (\n                  <DeviceStatus\n                    rpm_ostree_deployments={sysProf.rpm_ostree_deployments}\n                    imageData={sysProf.image_data}\n                  />\n                ),\n                props: { width: 20, isStatic: true },\n              },\n            ];\n          }}\n          getEntities={async (\n            _items,\n            config,\n            _showTags,\n            defaultGetEntities\n          ) => {\n            const defaultData = await defaultGetEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                  'operating_system',\n                  'greenboot_status',\n                  'greenboot_fallback_detected',\n                  'rpm_ostree_deployments',\n                ],\n              },\n            });\n\n            const promises = defaultData.results.map(async (device) => {\n              const getImageInfo = await getDeviceHasUpdate(device.id);\n              const imageInfo =\n                !getImageInfo || getImageInfo === 404\n                  ? { data: null }\n                  : getImageInfo;\n              return {\n                ...device,\n                system_profile: {\n                  ...device.system_profile,\n                  image_data: Object.prototype.hasOwnProperty.call(\n                    imageInfo,\n                    'data'\n                  )\n                    ? null\n                    : imageInfo,\n                },\n              };\n            });\n            const rows = await Promise.all(promises);\n            return { ...defaultData, results: rows };\n          }}\n          hideFilters={{ registeredWith: true }}\n          // NOTE: add back in when device status is sent with inventory data\n          //filterConfig={{\n          //  items: [\n          //    {\n          //      label: activeFilters?.deviceStatus?.label,\n          //      type: 'checkbox',\n          //      filterValues: {\n          //        onChange: (event, value) => {\n          //          setActiveFilters(() => ({\n          //            ...(activeFilters || {}),\n          //            deviceStatus: {\n          //              ...(activeFilters?.deviceStatus || {}),\n          //              value,\n          //            },\n          //          }));\n          //          inventory.current.onRefreshData();\n          //        },\n          //        items: deviceStatusMapper,\n          //        value: activeFilters?.deviceStatus?.value || [],\n          //      },\n          //    },\n          //  ],\n          //}}\n          hasCheckbox={false}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            // NOTE: Adding custom onDelete function overrides default inventory deletion behavior\n            //onDelete: (event, itemsToRemove, isAll) => {\n            //  if (isAll) {\n            //    setActiveFilters(defaultFilters);\n            //  } else {\n            //    setActiveFilters(() =>\n            //      onDeleteFilter(activeFilters, itemsToRemove)\n            //    );\n            //  }\n            //  inventory.current.onRefreshData();\n            //},\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities }) => {\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={inventory.current.onRefreshData}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","export const transformPaginationParams = ({ perPage, page }) => ({\n  limit: perPage,\n  offset: (page - 1) * perPage,\n});\n\nexport const transformFilters = (filters) => {\n  const f = filters.reduce((acc, filter) => {\n    if (!filter.chipKey || filter.chips.length === 0) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [filter.chipKey]: filter.chips.map((chip) => chip.value),\n    };\n  }, {});\n  return f;\n};\n\nexport const transformSort = ({ direction, name }) => {\n  return {\n    sort_by: direction === 'asc' ? name : `-${name}`,\n  };\n};\n\nexport const getFilterDep = (filter = undefined) => {\n  return filter?.chips?.map((chip) => chip.value).join('.') || undefined;\n};\n","import React, { Fragment, useEffect, useState } from 'react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n} from '@patternfly/react-table';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateSecondaryActions,\n  Title,\n  Button,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../constants';\nimport { useDispatch } from 'react-redux';\nimport { PlusCircleIcon, SearchIcon } from '@patternfly/react-icons';\nimport {\n  transformFilters,\n  transformPaginationParams,\n  transformSort,\n} from '../Routes/ImageManager/constants';\nimport PropTypes from 'prop-types';\n\nconst GeneralTable = ({\n  tableData,\n  columnNames,\n  createRows,\n  emptyStateMessage,\n  emptyStateActionMessage,\n  emptyStateAction,\n  defaultSort,\n  loadTableData,\n  filters,\n  filterDep,\n  clearFilters,\n  actionResolver,\n  areActionsDisabled,\n  filterConfig,\n  activeFilters,\n  dispatchActiveFilters,\n  defaultFilters,\n  perPage,\n}) => {\n  const [sortBy, setSortBy] = useState(defaultSort);\n  const [pagination, setPagination] = useState({ page: 1, perPage });\n  const dispatch = useDispatch();\n\n  const columns = columnNames.map((columnName) => ({\n    title: columnName.title,\n    type: columnName.type,\n    transforms: toShowSort ? [] : columnName.sort ? [sortable] : [],\n  }));\n\n  const { count, data, isLoading, hasError } = tableData;\n\n  const toShowSort = isLoading || hasError || (!count?.length && hasFilters);\n  useEffect(() => {\n    loadTableData(dispatch, {\n      ...transformFilters(filters),\n      ...transformPaginationParams(pagination),\n      ...transformSort({\n        direction: sortBy.direction,\n        name: columns[sortBy.index].type,\n      }),\n    });\n  }, [\n    pagination.perPage,\n    pagination.page,\n    sortBy.index,\n    sortBy.direction,\n    ...filterDep,\n  ]);\n\n  const hasFilters = Object.keys(filters).some((filterKey) => filterKey);\n\n  let rows = [\n    {\n      heightAuto: true,\n      cells: [\n        {\n          props: { colSpan: 8 },\n          title: (\n            <Bullseye>\n              <EmptyState variant=\"small\">\n                <EmptyStateIcon icon={Spinner} />\n              </EmptyState>\n            </Bullseye>\n          ),\n        },\n      ],\n    },\n  ];\n\n  if (isLoading === false && hasError === false) {\n    if (!count?.length && !hasFilters) {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant=\"small\">\n                    <EmptyStateIcon icon={PlusCircleIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      {emptyStateMessage}\n                    </Title>\n                    {emptyStateActionMessage ? (\n                      <Button\n                        onClick={emptyStateAction}\n                        isDisabled={isLoading !== false}\n                      >\n                        {emptyStateActionMessage}\n                      </Button>\n                    ) : null}\n                  </EmptyState>\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    }\n    if (!count?.length && hasFilters) {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <EmptyState variant=\"small\">\n                    <EmptyStateIcon icon={SearchIcon} />\n                    <Title headingLevel=\"h2\" size=\"lg\">\n                      No match found\n                    </Title>\n                    <EmptyStateSecondaryActions>\n                      <Button onClick={clearFilters} variant=\"link\">\n                        Clear all filters\n                      </Button>\n                    </EmptyStateSecondaryActions>\n                  </EmptyState>\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    }\n\n    if (data?.length) {\n      rows = createRows(data);\n    }\n  }\n\n  const handleSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  return (\n    <Fragment>\n      <PrimaryToolbar\n        filterConfig={filterConfig}\n        pagination={{\n          itemCount: count,\n          ...pagination,\n          onSetPage: (_evt, newPage) =>\n            setPagination({ ...pagination, page: newPage }),\n          onPerPageSelect: (_evt, newPerPage) =>\n            setPagination({ page: 1, perPage: newPerPage }),\n        }}\n        activeFiltersConfig={{\n          filters: isEmptyFilters(activeFilters)\n            ? constructActiveFilters(activeFilters)\n            : [],\n          onDelete: (_event, itemsToRemove, isAll) => {\n            if (isAll) {\n              dispatchActiveFilters({\n                type: 'DELETE_FILTER',\n                payload: defaultFilters,\n              });\n            } else {\n              dispatchActiveFilters({\n                type: 'DELETE_FILTER',\n                payload: onDeleteFilter(activeFilters, itemsToRemove),\n              });\n            }\n          },\n        }}\n        dedicatedAction={\n          <Button onClick={emptyStateAction} isDisabled={isLoading !== false}>\n            {emptyStateActionMessage}\n          </Button>\n        }\n      />\n      <Table\n        variant=\"compact\"\n        aria-label=\"Manage Images table\"\n        sortBy={sortBy}\n        onSort={handleSort}\n        actionResolver={actionResolver}\n        areActionsDisabled={areActionsDisabled}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Fragment>\n  );\n};\n\nGeneralTable.propTypes = {\n  tableData: PropTypes.object.isRequired,\n  columnNames: PropTypes.array.isRequired,\n  createRows: PropTypes.func.isRequired,\n  emptyStateMessage: PropTypes.string.isRequired,\n  emptyStateActionMessage: PropTypes.string,\n  emptyStateAction: PropTypes.func,\n  defaultSort: PropTypes.object.isRequired,\n  clearFilters: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  loadTableData: PropTypes.func.isRequired,\n  filterDep: PropTypes.array.isRequired,\n  actionResolver: PropTypes.func.isRequired,\n  areActionsDisabled: PropTypes.func.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n  setPagination: PropTypes.func.isRequired,\n  filterConfig: PropTypes.shape({ items: PropTypes.array }),\n  defaultFilters: PropTypes.shape({\n    name: PropTypes.object,\n    distribution: PropTypes.object,\n    status: PropTypes.object,\n  }),\n  activeFilters: PropTypes.shape({\n    name: PropTypes.object,\n    distribution: PropTypes.object,\n    status: PropTypes.object,\n  }),\n  dispatchActiveFilters: PropTypes.func.isRequired,\n  perPage: PropTypes.number,\n};\n\nexport default GeneralTable;\n","import React, { useReducer } from 'react';\nimport GeneralTable from '../../components/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { Text } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport {\n  imageTypeMapper,\n  composeStatus,\n  distributionMapper,\n} from '../ImageManagerDetail/constants';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { isEmptyFilters, constructActiveFilters } from '../../constants';\nimport { loadEdgeImages } from '../../store/actions';\n\nconst defaultFilters = {\n  name: {\n    label: 'Name',\n    key: 'name',\n    value: '',\n  },\n  distribution: {\n    label: 'Distribution',\n    key: 'distribution',\n    value: [],\n  },\n  status: {\n    label: 'Status',\n    key: 'status',\n    value: [],\n  },\n};\n\nconst columnNames = [\n  { title: 'Name', type: 'name', sort: true },\n  { title: 'Version', type: 'version', sort: false },\n  { title: 'Distribution', type: 'distribution', sort: true },\n  { title: 'Type', type: 'image_type', sort: false },\n  { title: 'Created', type: 'created_at', sort: true },\n  { title: 'Status', type: 'status', sort: true },\n];\n\nconst createRows = (data) => {\n  return data.map((image) => ({\n    id: image.ID,\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image.ID}`}>{image.Name}</Link>\n        ),\n      },\n      image?.Version,\n      {\n        title: distributionMapper[image?.Distribution],\n      },\n      {\n        title: imageTypeMapper[image?.ImageType],\n      },\n      {\n        title: <DateFormat date={image?.CreatedAt} />,\n      },\n      {\n        title: <StatusLabel status={image?.Status} />,\n      },\n    ],\n    imageStatus: image?.Status,\n    isoURL: image?.Installer?.ImageBuildISOURL,\n  }));\n};\n\nconst updateFilter = (state, action) => ({\n  ...state,\n  [action.property]: {\n    ...(state[action.property] || {}),\n    value: action.value,\n  },\n});\n\nconst deleteFilter = (_state, action) => action.payload;\n\nconst activeFilterMapper = {\n  UPDATE_FILTER: updateFilter,\n  DELETE_FILTER: deleteFilter,\n};\n\nconst activeFilterReducer = applyReducerHash(\n  activeFilterMapper,\n  defaultFilters\n);\n\nconst ImageTable = ({ openCreateWizard, openUpdateWizard }) => {\n  const [activeFilters, dispatchActiveFilters] = useReducer(\n    activeFilterReducer,\n    defaultFilters\n  );\n  const { count, data, isLoading, hasError } = useSelector(\n    ({ edgeImagesReducer }) => ({\n      count: edgeImagesReducer?.data?.count || 0,\n      data: edgeImagesReducer?.data?.data || null,\n      isLoading:\n        edgeImagesReducer?.isLoading === undefined\n          ? true\n          : edgeImagesReducer.isLoading,\n      hasError: edgeImagesReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (rowData?.imageStatus === 'SUCCESS') {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.id);\n        },\n      });\n    }\n\n    if (rowData?.imageStatus !== 'SUCCESS' && rowData?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) => rowData?.imageStatus !== 'SUCCESS';\n\n  const filterConfig = {\n    items: [\n      {\n        label: defaultFilters.name.label,\n        type: 'text',\n        filterValues: {\n          key: 'name-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'name',\n              value,\n            }),\n          value: activeFilters?.name?.value || '',\n          placeholder: 'Filter by name',\n        },\n      },\n      {\n        label: defaultFilters.distribution.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'distribution-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'distribution',\n              value,\n            }),\n          items: Object.entries(distributionMapper).map(([value, label]) => ({\n            label,\n            value,\n          })),\n          value: activeFilters?.distribution?.value || '',\n        },\n      },\n      {\n        label: defaultFilters.status.label,\n        type: 'checkbox',\n        filterValues: {\n          key: 'status-filter',\n          onChange: (_event, value) =>\n            dispatchActiveFilters({\n              type: 'UPDATE_FILTER',\n              property: 'status',\n              value,\n            }),\n          items: composeStatus.map((item) => ({\n            label: item,\n            value: item,\n          })),\n          value: activeFilters?.status?.value || [],\n        },\n      },\n    ],\n  };\n\n  return (\n    <GeneralTable\n      clearFilters={() =>\n        dispatchActiveFilters({\n          type: 'DELETE_FILTER',\n          payload: defaultFilters,\n        })\n      }\n      tableData={{ count, data, isLoading, hasError }}\n      columnNames={columnNames}\n      createRows={createRows}\n      emptyStateMessage=\"No images found\"\n      emptyStateActionMessage=\"Create new image\"\n      emptyStateAction={openCreateWizard}\n      defaultSort={{ index: 4, direction: 'desc' }}\n      loadTableData={loadEdgeImages}\n      filters={\n        isEmptyFilters(activeFilters)\n          ? constructActiveFilters(activeFilters)\n          : []\n      }\n      filterDep={Object.values(activeFilters)}\n      actionResolver={actionResolver}\n      areActionsDisabled={areActionsDisabled}\n      filterConfig={filterConfig}\n      activeFilters={activeFilters}\n      dispatchActiveFilters={dispatchActiveFilters}\n      defaultFilters={defaultFilters}\n      perPage={100}\n    />\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  openUpdateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageTable;\n","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport { edgeImagesReducer } from '../../store/reducers';\nimport ImageTable from './ImageTable';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        create_image: true,\n      }).toString(),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImagesReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageTable\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Text,\n  Button,\n  SplitItem,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n} from '@patternfly/react-core';\n\nconst ImageActions = ({ imageData, openUpdateWizard }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const dropdownItems = [\n    <DropdownItem href={imageData?.Installer?.ImageBuildISOURL} key=\"link\">\n      <Text className=\"force-text-black\">Download</Text>\n    </DropdownItem>,\n  ];\n\n  const handleToggle = (isOpen) => setIsOpen(isOpen);\n\n  const handleSelect = () => {\n    setIsOpen((prevState) => !prevState);\n  };\n\n  const handleUpdate = () => {\n    openUpdateWizard(imageData.ID);\n  };\n\n  return (\n    <>\n      <SplitItem>\n        <Button onClick={handleUpdate} variant=\"secondary\">\n          Update\n        </Button>\n        {imageData?.Installer?.ImageBuildISOURL ? (\n          <Dropdown\n            position=\"right\"\n            onSelect={handleSelect}\n            toggle={\n              <KebabToggle onToggle={handleToggle} id=\"image-detail-kebab\" />\n            }\n            isOpen={isOpen}\n            isPlain\n            dropdownItems={dropdownItems}\n          />\n        ) : null}\n      </SplitItem>\n    </>\n  );\n};\n\nImageActions.propTypes = {\n  openUpdateWizard: PropTypes.func,\n  imageData: PropTypes.shape({\n    ID: PropTypes.number,\n    Name: PropTypes.string,\n    Status: PropTypes.string,\n    Installer: PropTypes.shape({\n      ImageBuildISOURL: PropTypes.string,\n    }),\n  }),\n};\n\nexport default ImageActions;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport {\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n  Breadcrumb,\n  BreadcrumbItem,\n  Split,\n  SplitItem,\n} from '@patternfly/react-core';\nimport StatusLabel from './StatusLabel';\nimport ImageDetailActions from './ImageDetailActions';\nimport { routes as paths } from '../../../package.json';\n\nconst DetailsHead = ({ imageData, openUpdateWizard }) => {\n  return (\n    <>\n      <Breadcrumb>\n        <BreadcrumbItem>\n          <Link to={paths['manage-images']}>Manage Images</Link>\n        </BreadcrumbItem>\n        <BreadcrumbItem isActive>{imageData?.Name}</BreadcrumbItem>\n      </Breadcrumb>\n\n      <TextContent>\n        <Split>\n          <SplitItem>\n            <TextList component=\"dl\">\n              <TextListItem component=\"h1\" className=\"grid-align-center\">\n                {imageData?.Name}\n              </TextListItem>\n              <TextListItem component=\"dd\">\n                {imageData?.Status ? (\n                  <StatusLabel status={imageData?.Status} />\n                ) : (\n                  <Skeleton />\n                )}\n              </TextListItem>\n            </TextList>\n          </SplitItem>\n          <SplitItem isFilled></SplitItem>\n          {imageData?.Status === 'SUCCESS' ? (\n            <ImageDetailActions\n              imageData={imageData}\n              openUpdateWizard={openUpdateWizard}\n            />\n          ) : null}\n        </Split>\n      </TextContent>\n    </>\n  );\n};\n\nDetailsHead.propTypes = {\n  openUpdateWizard: PropTypes.func,\n  imageData: PropTypes.shape({\n    ID: PropTypes.number,\n    Name: PropTypes.string,\n    Status: PropTypes.string,\n  }),\n};\n\nexport default DetailsHead;\n","import React from 'react';\nimport {\n  TextContent,\n  TextList,\n  TextListItem,\n  TextListItemVariants,\n  TextListVariants,\n} from '@patternfly/react-core';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { distributionMapper, imageTypeMapper } from './constants';\n\nconst ImageDetailTab = () => {\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  const dateFormat = () => <DateFormat date={data['CreatedAt']} />;\n  const labelsToValueMapper = {\n    'Image name': 'Name',\n    Version: 'Version',\n    Created: () => dateFormat(),\n    Release: () => distributionMapper[data['Distribution']],\n    'Output type': () => imageTypeMapper[data['ImageType']],\n    'Added packages': () => data.Packages.length,\n  };\n\n  if (data?.Installer?.Checksum) {\n    labelsToValueMapper['SHA-256 Checksum'] = () => data?.Installer?.Checksum;\n  }\n\n  return (\n    <TextContent className=\"pf-u-ml-lg pf-u-mt-md\">\n      <TextList component={TextListVariants.dl}>\n        {data\n          ? Object.entries(labelsToValueMapper).map(([label, value]) => {\n              return (\n                <>\n                  <TextListItem component={TextListItemVariants.dt}>\n                    {label}\n                  </TextListItem>\n                  <TextListItem component={TextListItemVariants.dd}>\n                    {typeof value === 'function' ? value() : data[value]}\n                  </TextListItem>\n                </>\n              );\n            })\n          : null}\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport default ImageDetailTab;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport {\n  EmptyState,\n  Title,\n  Bullseye,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  sortable,\n  SortByDirection,\n} from '@patternfly/react-table';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport flatten from 'lodash/flatten';\n\nconst ImagePackagesTab = () => {\n  const [perPage, setPerPage] = useState(10);\n  const [page, setPage] = useState(1);\n  const [sortBy, setSortBy] = useState({});\n  const [rows, setRows] = useState([]);\n  const { data, imageName } = useSelector(\n    ({ imageDetailReducer }) => ({\n      data: imageDetailReducer?.data?.Packages || null,\n      imageName: imageDetailReducer?.data?.Name || null,\n    }),\n    shallowEqual\n  );\n\n  const columns = [\n    {\n      title: 'Name',\n      type: 'name',\n      transforms: [sortable],\n    },\n  ];\n\n  const parserRows = (rows) => {\n    return rows.map((pack) => [\n      {\n        id: pack?.ID,\n        rowArray: [pack.Name],\n        cells: [\n          {\n            title: (\n              <TextContent>\n                <Text component={TextVariants.p}>{pack?.Name}</Text>\n              </TextContent>\n            ),\n          },\n        ],\n      },\n    ]);\n  };\n\n  const handleSetPage = (_evt, newPage, perPage, startIdx, endIdx) => {\n    setPage(newPage);\n    setRows(flatten(parserRows(data.slice(startIdx, endIdx))));\n  };\n\n  const handlePerPage = (_evt, newPerPage, newPage, startIdx, endIdx) => {\n    setPerPage(newPerPage);\n    setPage(newPage);\n    setRows(flatten(parserRows(data.slice(startIdx, endIdx))));\n  };\n\n  useEffect(() => {\n    setRows(\n      data !== null && data.length > 0\n        ? flatten(parserRows(data.slice(0, perPage)))\n        : [\n            {\n              heightAuto: true,\n              cells: [\n                {\n                  props: { colSpan: 8 },\n                  title: (\n                    <Bullseye>\n                      <EmptyState variant=\"small\">\n                        <Title headingLevel=\"h2\" size=\"lg\">\n                          {imageName} has no packages\n                        </Title>\n                      </EmptyState>\n                    </Bullseye>\n                  ),\n                },\n              ],\n            },\n          ]\n    );\n  }, [data]);\n\n  const handleSort = (_event, index, direction) => {\n    const sortedRows = data.sort((a, b) =>\n      a.Name < b.Name ? -1 : a.Name > b.Name ? 1 : 0\n    );\n    setSortBy({\n      index,\n      direction,\n    });\n    setRows(\n      flatten(\n        parserRows(\n          direction === SortByDirection.asc ? sortedRows : sortedRows.reverse()\n        ).slice(0, perPage)\n      )\n    );\n    setPage(0);\n  };\n\n  return (\n    <Fragment>\n      {data ? (\n        <PrimaryToolbar\n          pagination={{\n            itemCount: data?.length || 0,\n            page,\n            perPage,\n            onSetPage: handleSetPage,\n            onPerPageSelect: handlePerPage,\n            isCompact: true,\n          }}\n        />\n      ) : null}\n      <Table\n        aria-label=\"Image packages table\"\n        ariaLabel=\"packages table\"\n        variant=\"compact\"\n        sortBy={sortBy}\n        onSort={handleSort}\n        cells={columns}\n        rows={rows}\n      >\n        <TableHeader />\n        <TableBody />\n      </Table>\n    </Fragment>\n  );\n};\n\nexport default ImagePackagesTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\n\nimport ImageDetailTab from './ImageDetailTab';\nimport ImagePackagesTab from './ImagePackagesTab';\n\nconst ImageDetailTabs = () => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <ImageDetailTab />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Packages</TabTitleText>}>\n          <ImagePackagesTab />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default ImageDetailTabs;\n","import React, {\n  Fragment,\n  useContext,\n  useEffect,\n  useState,\n  Suspense,\n} from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useParams } from 'react-router-dom';\nimport {\n  Stack,\n  StackItem,\n  Text,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { loadImageDetail } from '../../store/actions';\nimport { imageDetailReducer } from '../../store/reducers';\nimport { useHistory } from 'react-router-dom';\nimport DetailsHead from './DetailsHeader';\nimport ImageDetailTabs from './ImageDetailTabs';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst ImageDetail = () => {\n  const { imageId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [isUpdateWizardOpen, setIsUpdateWizardOpen] = useState(false);\n  const [imageData, setImageData] = useState({});\n\n  const { data } = useSelector(\n    ({ imageDetailReducer }) => ({ data: imageDetailReducer?.data || null }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    setImageData(data);\n  }, [data]);\n\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageDetailReducer,\n    });\n    loadImageDetail(dispatch, imageId);\n    return () => registered();\n  }, [dispatch]);\n\n  const openUpdateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setIsUpdateWizardOpen(true);\n  };\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Stack hasGutter>\n          <StackItem>\n            <DetailsHead\n              imageData={imageData}\n              openUpdateWizard={openUpdateWizard}\n            />\n          </StackItem>\n        </Stack>\n        <StackItem>\n          <Text>{data?.Description}</Text>\n        </StackItem>\n      </PageHeader>\n      <ImageDetailTabs />\n      {isUpdateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsUpdateWizardOpen(false);\n            }}\n            updateImageID={data?.ID}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport {\n  composeStatus,\n  statusIcons,\n  statusColors,\n  imageStatusMapper,\n} from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = imageStatusMapper[status];\n    text = text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">{icon(color)}</SplitItem>\n      <SplitItem>{text}</SplitItem>\n    </Split>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = ['CREATED', 'BUILDING', 'ERROR', 'SUCCESS'];\n\nexport const DEFAULT_RELEASE = 'rhel-84';\n\n//For this object, it's need to sisable lint once this is not a react component\nexport const statusIcons = {\n  // eslint-disable-next-line react/display-name\n  unknown: (color) => <QuestionCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  CREATED: (color) => <CheckCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  BUILDING: (color) => <InProgressIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  ERROR: (color) => <TimesCircleIcon color={color} />,\n  // eslint-disable-next-line react/display-name\n  SUCCESS: (color) => <CheckCircleIcon color={color} />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  CREATED: 'green',\n  BUILDING: 'blue',\n  ERROR: 'red',\n  SUCCESS: 'green',\n};\n\nexport const imageStatusMapper = {\n  CREATED: 'CREATED',\n  BUILDING: 'Image build in progress',\n  ERROR: 'ERROR',\n  SUCCESS: 'SUCCESS',\n};\n\nexport const distributionMapper = {\n  'rhel-84': 'RHEL 8.4',\n};\n\nexport const releaseMapper = {\n  'rhel-84': 'Red Hat Enterprise Linux (RHEL) 8.4',\n};\n\nexport const imageTypeMapper = {\n  'rhel-edge-commit': 'RHEL for Edge Commit (.tar)',\n  'rhel-edge-installer': 'RHEL for Edge Installer (.iso)',\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_EDGE_IMAGES = 'LOAD_EDGE_IMAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\nexport const LOAD_IMAGE_DETAIL = 'LOAD_IMAGE_DETAIL';\nexport const CREATE_NEW_IMAGE = 'CREATE_NEW_IMAGE';\nexport const CREATE_NEW_IMAGE_RESET = `${CREATE_NEW_IMAGE}_RESET`;\nexport const POLLING_IMAGES = 'POLLING_IMAGES';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_EDGE_IMAGES,\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n    LOAD_IMAGE_DETAIL,\n    CREATE_NEW_IMAGE,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_EDGE_IMAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n  LOAD_IMAGE_DETAIL,\n  CREATE_NEW_IMAGE,\n  POLLING_IMAGES,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n  fetchImage,\n  fetchEdgeImages,\n  createImage,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const loadImageDetail = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_DETAIL,\n    payload: fetchImage({ id: imageId }),\n  }).catch(() => null);\n};\n\nexport const createNewImage = (dispatch, payload, callback) => {\n  dispatch({\n    type: CREATE_NEW_IMAGE,\n    payload: createImage(payload),\n  })\n    .then(callback)\n    .catch(() => null);\n};\n\nexport const loadEdgeImages = (dispatch, query) => {\n  dispatch({\n    type: LOAD_EDGE_IMAGES,\n    payload: fetchEdgeImages(query),\n  }).catch(() => null);\n};\n\nexport const setPolling = (toStart, interval) => {\n  const subAction = toStart ? 'START' : 'END';\n  const payload = toStart ? { interval } : {};\n  return {\n    type: `${POLLING_IMAGES}_${subAction}`,\n    ...payload,\n  };\n};\n\nexport const addImageToPoll = ({ id, name }) => {\n  return {\n    type: `${POLLING_IMAGES}_ADD`,\n    payload: {\n      name,\n      id,\n    },\n  };\n};\n\nexport const removeImagesToPoll = (ids) => {\n  return {\n    type: `${POLLING_IMAGES}_REMOVE`,\n    ids,\n  };\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_EDGE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadEdgeImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadEdgeImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadEdgeImagesRejected = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  hasError: true,\n  data: payload,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_EDGE_IMAGES}_PENDING`]: loadEdgeImagesPending,\n    [`${LOAD_EDGE_IMAGES}_FULFILLED`]: loadEdgeImagesFulfilled,\n    [`${LOAD_EDGE_IMAGES}_REJECTED`]: loadEdgeImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_DETAIL } from './action-types';\n\nconst initialState = {};\n\nconst loadImageDetailPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageDetailFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageDetailRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image detail to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_DETAIL}_PENDING`]: loadImageDetailPending,\n    [`${LOAD_IMAGE_DETAIL}_FULFILLED`]: loadImageDetailFulfilled,\n    [`${LOAD_IMAGE_DETAIL}_REJECTED`]: loadImageDetailRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { CREATE_NEW_IMAGE } from './action-types';\n\nconst initialState = {};\n\nconst createNewImagePending = () => ({\n  isLoading: true,\n  hasError: false,\n  error: null,\n});\n\nconst createNewImageFulfilled = () => {\n  return {\n    isLoading: false,\n    hasError: false,\n    error: null,\n  };\n};\n\nconst createNewImageRejected = (_state, { payload }) => ({\n  isLoading: false,\n  hasError: true,\n  error: payload,\n});\n\nconst createNewImageReset = () => ({\n  isLoading: false,\n  hasError: false,\n  error: null,\n});\n\nexport default applyReducerHash(\n  {\n    [`${CREATE_NEW_IMAGE}_PENDING`]: createNewImagePending,\n    [`${CREATE_NEW_IMAGE}_FULFILLED`]: createNewImageFulfilled,\n    [`${CREATE_NEW_IMAGE}_REJECTED`]: createNewImageRejected,\n    [`${CREATE_NEW_IMAGE}_RESET`]: createNewImageReset,\n  },\n  initialState\n);\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","useState","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","T","AppInfo","showTags","UpdateDeviceModal","React","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","entity","entityDetails","groupName","groupsDetailReducer","deviceId","id","isOpen","deviceData","updateModal","setUpdateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","useEffect","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","image_data","prevState","system_profile","UpdateTransactions","length","Status","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","actions","isDisabled","ImageInfo","UpdatesAvailable","onClick","hideBack","hideInvDrawer","Label","icon","Main","Grid","gutter","GridItem","span","Bullseye","Spinner","navigateBack","history","push","pathname","location","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Card","CardTitle","CardBody","Stack","hasGutter","StackItem","isInline","deviceSummaryReducer","isLoading","undefined","hasError","data","shallowEqual","Tiles","dispatch","useDispatch","registered","imagesReducer","loadImages","loadDeviceSummary","Flex","FlexItem","onNewImageClick","DeviceStatus","imageData","rpm_ostree_deployments","Split","SplitItem","booted","infoColor","warningColor","updateTransactions","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","activeFilters","inventory","useRef","useHistory","URLSearchParams","search","get","cleanEntities","Fragment","PageHeaderTitle","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","actionResolver","rowData","_index","areActionsDisabled","columns","defaultColumns","newColumns","filter","column","includes","key","col","width","renderFunc","sysProf","isStatic","getEntities","_items","config","_showTags","defaultGetEntities","host_type","fields","defaultData","promises","results","map","device","getImageInfo","imageInfo","Object","prototype","hasOwnProperty","call","Promise","all","rows","hideFilters","registeredWith","hasCheckbox","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onRowClick","_e","mergeWithEntities","refreshTable","GeneralTable","tableData","columnNames","createRows","emptyStateMessage","emptyStateActionMessage","emptyStateAction","defaultSort","loadTableData","filterDep","clearFilters","filterConfig","dispatchActiveFilters","perPage","sortBy","setSortBy","page","pagination","setPagination","columnName","type","transforms","toShowSort","sort","sortable","count","hasFilters","reduce","acc","chipKey","chips","chip","transformFilters","limit","offset","transformPaginationParams","direction","index","sort_by","keys","some","filterKey","heightAuto","cells","colSpan","EmptyState","EmptyStateIcon","PlusCircleIcon","Title","headingLevel","SearchIcon","EmptyStateSecondaryActions","PrimaryToolbar","itemCount","onSetPage","_evt","newPage","onPerPageSelect","newPerPage","onDelete","itemsToRemove","isAll","payload","onDeleteFilter","dedicatedAction","Table","onSort","TableHeader","TableBody","isRequired","items","distribution","image","ID","paths","Name","Version","distributionMapper","Distribution","imageTypeMapper","ImageType","DateFormat","date","CreatedAt","StatusLabel","imageStatus","isoURL","Installer","ImageBuildISOURL","activeFilterMapper","UPDATE_FILTER","action","property","DELETE_FILTER","_state","activeFilterReducer","ImageTable","openCreateWizard","openUpdateWizard","useReducer","edgeImagesReducer","filterValues","onChange","placeholder","entries","composeStatus","loadEdgeImages","values","actionsArray","Text","href","rel","target","_rowId","CreateImageWizard","UpdateImageWizard","isCreateWizardOpen","setIsCreateWizardOpen","imageId","UpdateWizard","setUpdateWizard","create_image","toString","update_image","updateImageID","ImageActions","setIsOpen","dropdownItems","DropdownItem","Dropdown","position","toggle","KebabToggle","onToggle","isPlain","DetailsHead","TextContent","TextList","TextListItem","isFilled","ImageDetailActions","imageDetailReducer","labelsToValueMapper","Created","Release","Packages","Checksum","TextListVariants","TextListItemVariants","setPerPage","setPage","setRows","imageName","parserRows","pack","rowArray","TextVariants","flatten","slice","startIdx","endIdx","isCompact","ariaLabel","sortedRows","a","b","SortByDirection","reverse","isUpdateWizardOpen","setIsUpdateWizardOpen","setImageData","loadImageDetail","Description","statusIcons","statusColors","text","imageStatusMapper","charAt","toLowerCase","DEFAULT_RELEASE","unknown","CREATED","BUILDING","ERROR","SUCCESS","releaseMapper","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_EDGE_IMAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","LOAD_IMAGE_DETAIL","CREATE_NEW_IMAGE","CREATE_NEW_IMAGE_RESET","POLLING_IMAGES","asyncActions","flatMap","CLEAN_ENTITIES","keyBy","k","fetchActiveImages","meta","notifications","rejected","description","fetchDeviceSummary","fetchImage","createNewImage","createImage","then","query","fetchEdgeImages","addImageToPoll","groups","threshold","devicesInfo","canariesInfo","statusMapper","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","defaultProps","devices","error"],"sourceRoot":""}