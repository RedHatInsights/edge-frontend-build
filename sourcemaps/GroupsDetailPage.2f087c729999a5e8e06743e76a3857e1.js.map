{"version":3,"file":"js/GroupsDetailPage.47f687204d2c5d4533b3.js","mappings":"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","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/DeviceStatus.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/ImageSetsTable.js","webpack:///./src/Routes/ImageManager/Images.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst BiosCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/BiosCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nconst InfrastructureCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/InfrastructureCard'\n  )\n);\nconst ImageInformationCard = lazy(() => import('./ImageInformationCard'));\n\nimport { statusHelper } from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const { greenbootStatus, rhcHealth } = useSelector(\n    ({ systemProfileStore }) => ({\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n      rhcHealth: null,\n    })\n  );\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard\n              {...props}\n              hasCPUs={false}\n              hasSockets={false}\n              hasCores={false}\n              hasCPUFlags={false}\n              hasRAM={false}\n              hasSAP={false}\n              extra={[\n                {\n                  title: (\n                    <TitleWithPopover\n                      title=\"GreenBoot Status\"\n                      content=\"This is a description about greenboot status\"\n                    />\n                  ),\n                  value: <GreenbootStatus status={greenbootStatus} />,\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <InfrastructureCard {...props} />\n          </Suspense>\n        )}\n        BiosCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            {' '}\n            <ImageInformationCard {...props} />\n          </Suspense>\n        )}\n        InfrastructureCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <BiosCard {...props} />\n          </Suspense>\n        )}\n        ConfigurationCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard {...props} hasKernelModules={true} />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useContext, useState, Suspense } from 'react';\nimport { useRouteMatch } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport { Button, Bullseye, Spinner } from '@patternfly/react-core';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst UpdateImageWizard = React.lazy(() =>\n  import('../ImageManager/UpdateImageWizard')\n);\n\nconst VulnerabilityTab = ({ imageId }) => {\n  const [isUpdateWizardOpen, setIsUpdateWizardOpen] = useState(false);\n  const { params } = useRouteMatch('/fleet-management/:inventoryId');\n  const { getRegistry } = useContext(RegistryContext);\n  const history = useHistory();\n\n  const openUpdateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setIsUpdateWizardOpen(true);\n  };\n\n  return (\n    <>\n      <AsyncComponent\n        appName=\"vulnerability\"\n        module=\"./SystemDetail\"\n        getRegistry={getRegistry}\n        customIntlProvider\n        entity={{ id: params.inventoryId }}\n        canSelect={false}\n        canEditStatus={false}\n        canManageColumns={false}\n        linkToCustomerPortal\n        defaultColumns={[\n          'synopsis',\n          'public_date',\n          'impact',\n          'cvss_score',\n          'advisory',\n        ]}\n        filters={[\n          'filter',\n          'security_rule',\n          'known_exploit',\n          'impact',\n          'cvss_score',\n          'advisory',\n        ]}\n        customAction={(cve) => (\n          <Button\n            onClick={openUpdateWizard}\n            variant=\"primary\"\n            isDisabled={!imageId || !cve?.meta?.cvesCount > 0}\n          >\n            Update image\n          </Button>\n        )}\n      />\n      {isUpdateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsUpdateWizardOpen(false);\n            }}\n            updateImageID={imageId}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.string,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport { AppInfo } from '@redhat-cloud-services/frontend-components/Inventory';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({ imageId }) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n  return (\n    <div className=\"edge-c-device--detail add-100vh\">\n      <Tabs\n        className=\"pf-u-ml-md pf-u-mb-md\"\n        activeKey={activeTabKey}\n        onSelect={handleTabClick}\n      >\n        <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n          <AppInfo showTags fallback=\"\" />\n        </Tab>\n        <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n          <VulnerabilityTab imageId={imageId} />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.string,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Label,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { getDeviceHasUpdate } from '../../api/index';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n  const deviceId = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.id\n  );\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDeviceHasUpdate(deviceId);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: {\n          display_name: entity.display_name,\n          id: entity.id,\n          system_profile: {\n            image_data,\n            status:\n              image_data?.UpdateTransactions?.[\n                image_data.UpdateTransactions.length - 1\n              ]?.Status,\n          },\n        },\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity]);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <>\n      <DetailWrapper\n        hideInvLink\n        showTags\n        onLoad={({ mergeWithDetail }) => {\n          getRegistry().register({\n            systemProfileStore,\n            ...mergeWithDetail(deviceDetail),\n          });\n        }}\n      >\n        <PageHeader>\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={uuid ? `/groups` : '/fleet-management'}>\n                {uuid ? 'Groups' : 'Fleet management'}\n              </Link>\n            </BreadcrumbItem>\n            {uuid && (\n              <BreadcrumbItem>\n                {groupName ? (\n                  <Link to={`/groups/${uuid}`}>{groupName}</Link>\n                ) : (\n                  <Skeleton size={SkeletonSize.xs} />\n                )}\n              </BreadcrumbItem>\n            )}\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n          <InventoryDetailHead\n            fallback=\"\"\n            actions={[\n              {\n                title: 'Update',\n                isDisabled:\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'BUILDING' ||\n                  updateModal.deviceData?.system_profile?.image_data\n                    ?.UpdateTransactions?.[\n                    updateModal.deviceData?.system_profile?.image_data\n                      ?.UpdateTransactions.length - 1\n                  ]?.Status === 'CREATED' ||\n                  !updateModal.deviceData?.system_profile?.image_data?.ImageInfo\n                    ?.UpdatesAvailable?.length > 0,\n                onClick: () => {\n                  setUpdateModal((prevState) => ({\n                    ...prevState,\n                    isOpen: true,\n                  }));\n                },\n              },\n            ]}\n            hideBack\n            hideInvDrawer\n          />\n\n          {isDeviceStatusLoading ? (\n            <Skeleton size={SkeletonSize.xs} />\n          ) : updateModal?.deviceData?.system_profile?.status === 'BUILDING' ||\n            updateModal?.deviceData?.system_profile?.status === 'CREATED' ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"blue\"\n              icon={<InProgressIcon />}\n            >\n              Updating\n            </Label>\n          ) : updateModal?.deviceData?.system_profile?.image_data?.ImageInfo\n              ?.UpdatesAvailable?.length > 0 ? (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"orange\"\n              icon={<ExclamationTriangleIcon />}\n            >\n              Update Available\n            </Label>\n          ) : (\n            <Label\n              className=\"pf-u-mt-sm\"\n              color=\"green\"\n              icon={<CheckCircleIcon color=\"green\" />}\n            >\n              Running\n            </Label>\n          )}\n        </PageHeader>\n        <Main className=\"edge-c-device--detail\">\n          <Grid gutter=\"md\">\n            <GridItem span={12}>\n              <DeviceDetailTabs imageId={imageId} />\n            </GridItem>\n          </Grid>\n        </Main>\n      </DetailWrapper>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n          />\n        </Suspense>\n      )}\n    </>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary</CardTitle>\n    <CardBody>\n      <Grid>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {active}\n              </Button>{' '}\n              Active\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {orphaned}\n              </Button>{' '}\n              Orphaned\n            </StackItem>\n          </Stack>\n        </GridItem>\n        <GridItem span={6}>\n          <Stack hasGutter>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {noReports}\n              </Button>\n              Stale\n            </StackItem>\n            <StackItem>\n              <Button isDisabled isInline className=\"pf-u-pr-md\" variant=\"link\">\n                {neverReported}\n              </Button>\n              Registered but never reported\n            </StackItem>\n          </Stack>\n        </GridItem>\n      </Grid>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\nimport PropTypes from 'prop-types';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n\nTiles.propTypes = {\n  onNewImageClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Split, SplitItem } from '@patternfly/react-core';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_active_color_300';\nimport PropTypes from 'prop-types';\n\nconst DeviceStatus = ({ imageData, rpm_ostree_deployments }) => {\n  const { UpdateTransactions, ImageInfo } = imageData || {};\n  if (rpm_ostree_deployments?.length === undefined) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <QuestionCircleIcon color=\"grey\" />\n        </SplitItem>\n        <SplitItem>Unspecified</SplitItem>\n      </Split>\n    );\n  }\n  const current_deployment = rpm_ostree_deployments[0];\n  if (!current_deployment.booted) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color=\"blue\" />\n        </SplitItem>\n        <SplitItem>Booting</SplitItem>\n      </Split>\n    );\n  }\n\n  if (\n    UpdateTransactions?.[UpdateTransactions.length - 1]?.Status ===\n      'BUILDING' ||\n    UpdateTransactions?.[UpdateTransactions.length - 1]?.Status === 'CREATED'\n  ) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <InProgressIcon color={infoColor.value} />\n        </SplitItem>\n        <SplitItem>Updating</SplitItem>\n      </Split>\n    );\n  }\n\n  if (ImageInfo?.UpdatesAvailable?.length > 0) {\n    return (\n      <Split>\n        <SplitItem className=\"pf-u-mr-sm\">\n          <ExclamationTriangleIcon color={warningColor.value} />\n        </SplitItem>\n        <SplitItem className=\"pf-u-warning-color-200\">\n          Update Available\n        </SplitItem>\n      </Split>\n    );\n  }\n  return (\n    <Split>\n      <SplitItem className=\"pf-u-mr-sm\">\n        <CheckCircleIcon color=\"green\" />\n      </SplitItem>\n      <SplitItem>Running</SplitItem>\n    </Split>\n  );\n};\n\nDeviceStatus.propTypes = {\n  id: PropTypes.string,\n  updateTransactions: PropTypes.array,\n  rpm_ostree_deployments: PropTypes.array,\n  imageData: PropTypes.object,\n};\n\nexport default DeviceStatus;\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n  Suspense,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  //onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport DeviceStatus from './DeviceStatus';\nimport { getDeviceHasUpdate } from '../../api';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"CreateImageWizard\" */ './UpdateDeviceModal')\n);\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [activeFilters] = useState(defaultFilters);\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    const searchParams = new URLSearchParams(history.location.search);\n    if (searchParams.get('update_device') === 'true') {\n      setUpdateModal((prevState) => {\n        return {\n          ...prevState,\n          isOpen: true,\n        };\n      });\n    }\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n            variant: 'compact',\n            actionResolver: (rowData) => {\n              return rowData?.system_profile?.image_data\n                ? [\n                    {\n                      title: 'Update',\n                      onClick: (_event, _index, rowData) => {\n                        setUpdateModal((prevState) => {\n                          return {\n                            ...prevState,\n                            isOpen: true,\n                            deviceData: rowData,\n                          };\n                        });\n                      },\n                    },\n                  ]\n                : rowData?.system_profile\n                ? [\n                    {\n                      title: 'No Action',\n                    },\n                  ]\n                : null;\n            },\n            areActionsDisabled: (rowData) => {\n              const updateTransactions =\n                rowData?.system_profile?.image_data?.UpdateTransactions || [];\n\n              return (\n                updateTransactions[updateTransactions.length - 1]?.Status ===\n                  'BUILDING' ||\n                updateTransactions[updateTransactions.length - 1]?.Status ===\n                  'CREATED' ||\n                !rowData?.system_profile?.image_data?.ImageInfo\n                  ?.UpdatesAvailable?.length > 0\n              );\n            },\n          }}\n          columns={(defaultColumns) => {\n            const newColumns = defaultColumns.filter((column) =>\n              ['display_name', 'updated'].includes(column.key)\n            );\n            newColumns.filter((col) => col.key === 'updated')[0].props = {\n              width: 20,\n            };\n\n            return [\n              ...newColumns,\n              {\n                key: 'system_profile',\n                title: 'Device status',\n                // eslint-disable-next-line react/display-name\n                renderFunc: (sysProf) => (\n                  <DeviceStatus\n                    rpm_ostree_deployments={sysProf.rpm_ostree_deployments}\n                    imageData={sysProf.image_data}\n                  />\n                ),\n                props: { width: 20, isStatic: true },\n              },\n            ];\n          }}\n          getEntities={async (\n            _items,\n            config,\n            _showTags,\n            defaultGetEntities\n          ) => {\n            const defaultData = await defaultGetEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n              },\n              fields: {\n                ...config?.fields,\n                system_profile: [\n                  ...(config?.fields?.system_profile || []),\n                  'host_type',\n                  'operating_system',\n                  'greenboot_status',\n                  'greenboot_fallback_detected',\n                  'rpm_ostree_deployments',\n                ],\n              },\n            });\n\n            const promises = defaultData.results.map(async (device) => {\n              const getImageInfo = await getDeviceHasUpdate(device.id);\n              const imageInfo =\n                !getImageInfo || getImageInfo === 404\n                  ? { data: null }\n                  : getImageInfo;\n              return {\n                ...device,\n                system_profile: {\n                  ...device.system_profile,\n                  image_data: Object.prototype.hasOwnProperty.call(\n                    imageInfo,\n                    'data'\n                  )\n                    ? null\n                    : imageInfo,\n                },\n              };\n            });\n            const rows = await Promise.all(promises);\n            return { ...defaultData, results: rows };\n          }}\n          hideFilters={{ registeredWith: true }}\n          // NOTE: add back in when device status is sent with inventory data\n          //filterConfig={{\n          //  items: [\n          //    {\n          //      label: activeFilters?.deviceStatus?.label,\n          //      type: 'checkbox',\n          //      filterValues: {\n          //        onChange: (event, value) => {\n          //          setActiveFilters(() => ({\n          //            ...(activeFilters || {}),\n          //            deviceStatus: {\n          //              ...(activeFilters?.deviceStatus || {}),\n          //              value,\n          //            },\n          //          }));\n          //          inventory.current.onRefreshData();\n          //        },\n          //        items: deviceStatusMapper,\n          //        value: activeFilters?.deviceStatus?.value || [],\n          //      },\n          //    },\n          //  ],\n          //}}\n          hasCheckbox={false}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            // NOTE: Adding custom onDelete function overrides default inventory deletion behavior\n            //onDelete: (event, itemsToRemove, isAll) => {\n            //  if (isAll) {\n            //    setActiveFilters(defaultFilters);\n            //  } else {\n            //    setActiveFilters(() =>\n            //      onDeleteFilter(activeFilters, itemsToRemove)\n            //    );\n            //  }\n            //  inventory.current.onRefreshData();\n            //},\n          }}\n          onRowClick={(_e, id) => history.push(`/fleet-management/${id}`)}\n          onLoad={({ mergeWithEntities }) => {\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={inventory.current.onRefreshData}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport PropTypes from 'prop-types';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { routes as paths } from '../../../package.json';\nimport { Link } from 'react-router-dom';\nimport { Text, Tooltip } from '@patternfly/react-core';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport StatusLabel from '../ImageManagerDetail/StatusLabel';\nimport { loadEdgeImageSets } from '../../store/actions';\nimport { cellWidth } from '@patternfly/react-table';\n\nconst TooltipSelectorRef = ({ index }) => (\n  <div>\n    <Tooltip\n      content={<div>More options</div>}\n      reference={() =>\n        document.getElementById(`pf-dropdown-toggle-id-${index}`)\n      }\n    />\n  </div>\n);\n\nTooltipSelectorRef.propTypes = {\n  index: PropTypes.number,\n};\n\nconst defaultFilters = [\n  {\n    label: 'Name',\n    type: 'text',\n  },\n  {\n    label: 'Status',\n    type: 'checkbox',\n    options: [\n      { option: 'Building', value: 'BUILDING' },\n      { option: 'Created', value: 'CREATED' },\n      { option: 'Error', value: 'ERROR' },\n      { option: 'Ready', value: 'SUCCESS' },\n    ],\n  },\n];\n\nconst columnNames = [\n  {\n    title: 'Name',\n    type: 'name',\n    sort: true,\n    columnTransforms: [cellWidth(35)],\n  },\n  {\n    title: 'Current Version',\n    type: 'version',\n    sort: false,\n    columnTransforms: [cellWidth(15)],\n  },\n  {\n    title: 'Last Updated',\n    type: 'updated_at',\n    sort: true,\n    columnTransforms: [cellWidth(25)],\n  },\n  {\n    title: 'Status',\n    type: 'status',\n    sort: false,\n    columnTransforms: [cellWidth(30)],\n  },\n];\n\nconst createRows = (data) => {\n  return data.map(({ image_set, image_build_iso_url }, index) => ({\n    id: image_set?.ID,\n    cells: [\n      {\n        title: (\n          <Link to={`${paths['manage-images']}/${image_set?.ID}`}>\n            {image_set?.Name}\n          </Link>\n        ),\n      },\n      image_set?.Images[0].Version, // remove when image_set.Version is accurate\n      {\n        title: <DateFormat date={image_set?.UpdatedAt} />,\n      },\n      {\n        title: (\n          <>\n            {/* workaround for tooltip on kebab*/}\n            <TooltipSelectorRef index={index} />\n            <StatusLabel status={image_set?.Images[0].Status} />\n          </>\n        ),\n      },\n    ],\n    imageStatus: image_set?.Images[0].Status,\n    isoURL: image_build_iso_url || null,\n    latestImageID: image_set?.Images[0].ID,\n  }));\n};\n\nconst ImageTable = ({ openCreateWizard, openUpdateWizard }) => {\n  const { count, data, isLoading, hasError } = useSelector(\n    ({ edgeImageSetsReducer }) => ({\n      count: edgeImageSetsReducer?.data?.Count || 0,\n      data: edgeImageSetsReducer?.data?.Data || null,\n      isLoading:\n        edgeImageSetsReducer?.isLoading === undefined\n          ? true\n          : edgeImageSetsReducer.isLoading,\n      hasError: edgeImageSetsReducer?.hasError,\n    }),\n    shallowEqual\n  );\n\n  const actionResolver = (rowData) => {\n    const actionsArray = [];\n    if (rowData?.isoURL) {\n      actionsArray.push({\n        title: (\n          <Text\n            className=\"force-text-black remove-underline\"\n            component=\"a\"\n            href={rowData.isoURL}\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            Download\n          </Text>\n        ),\n      });\n    }\n\n    if (\n      rowData?.imageStatus === 'SUCCESS' ||\n      rowData?.imageStatus === 'ERROR'\n    ) {\n      actionsArray.push({\n        title: 'Update Image',\n        onClick: (_event, _rowId, rowData) => {\n          openUpdateWizard(rowData.latestImageID);\n        },\n      });\n    }\n\n    if (rowData?.imageStatus === 'BUILDING' && rowData?.id) {\n      actionsArray.push({\n        title: '',\n      });\n    }\n\n    return actionsArray;\n  };\n\n  const areActionsDisabled = (rowData) => rowData?.imageStatus === 'BUILDING';\n\n  return (\n    <GeneralTable\n      apiFilterSort={true}\n      filters={defaultFilters}\n      loadTableData={loadEdgeImageSets}\n      tableData={{ count, data, isLoading, hasError }}\n      columnNames={columnNames}\n      rows={data ? createRows(data) : []}\n      emptyStateMessage=\"No images found\"\n      emptyStateActionMessage=\"Create new image\"\n      emptyStateAction={openCreateWizard}\n      actionResolver={actionResolver}\n      areActionsDisabled={areActionsDisabled}\n      defaultSort={{ index: 2, direction: 'desc' }}\n      toolbarButtons={[\n        {\n          title: 'Create new image',\n          click: () => openCreateWizard(),\n        },\n      ]}\n    />\n  );\n};\n\nImageTable.propTypes = {\n  clearFilters: PropTypes.func.isRequired,\n  openCreateWizard: PropTypes.func.isRequired,\n  openUpdateWizard: PropTypes.func.isRequired,\n  filters: PropTypes.array.isRequired,\n  pagination: PropTypes.shape({\n    page: PropTypes.number,\n    perPage: PropTypes.number,\n  }).isRequired,\n};\n\nexport default ImageTable;\n","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useContext,\n  Suspense,\n} from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Spinner, Bullseye } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport { edgeImageSetsReducer } from '../../store/reducers';\nimport ImageSetsTable from './ImageSetsTable';\n\nconst CreateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"CreateImageWizard\" */ '../ImageManager/CreateImageWizard'\n  )\n);\n\nconst UpdateImageWizard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateImageWizard\" */ '../ImageManager/UpdateImageWizard'\n  )\n);\n\nconst Images = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const [isCreateWizardOpen, setIsCreateWizardOpen] = useState(false);\n  const [UpdateWizard, setUpdateWizard] = useState({\n    isOpen: false,\n    imageId: null,\n  });\n  const history = useHistory();\n\n  const openCreateWizard = () => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        create_image: true,\n      }).toString(),\n    });\n    setIsCreateWizardOpen(true);\n  };\n\n  const openUpdateWizard = (id) => {\n    history.push({\n      pathname: history.location.pathname,\n      search: new URLSearchParams({\n        update_image: true,\n      }).toString(),\n    });\n    setUpdateWizard({\n      isOpen: true,\n      imageId: id,\n    });\n  };\n  useEffect(() => {\n    const registered = getRegistry().register({ edgeImageSetsReducer });\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <ImageSetsTable\n          openCreateWizard={openCreateWizard}\n          openUpdateWizard={openUpdateWizard}\n        />\n      </Main>\n      {isCreateWizardOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <CreateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setIsCreateWizardOpen(false);\n            }}\n          />\n        </Suspense>\n      )}\n      {UpdateWizard.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateImageWizard\n            navigateBack={() => {\n              history.push({ pathname: history.location.pathname });\n              setUpdateWizard((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            updateImageID={UpdateWizard.imageId}\n          />\n        </Suspense>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Images;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","lazy","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","greenbootStatus","systemProfile","greenboot_status","rhcHealth","Suspense","fallback","store","useStore","SystemCardWrapper","props","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","extra","value","OperatingSystemCardWrapper","BiosCardWrapper","InfrastructureCardWrapper","ConfigurationCardWrapper","hasKernelModules","CollectionCardWrapper","statusHelper","toUpperCase","Tooltip","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","UpdateImageWizard","React","VulnerabilityTab","imageId","useState","isUpdateWizardOpen","setIsUpdateWizardOpen","params","useRouteMatch","getRegistry","useContext","RegistryContext","history","useHistory","openUpdateWizard","push","pathname","location","search","URLSearchParams","update_image","toString","AsyncComponent","appName","module","customIntlProvider","entity","id","inventoryId","canSelect","canEditStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","onClick","isDisabled","meta","cvesCount","Bullseye","Spinner","navigateBack","updateImageID","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","T","AppInfo","showTags","Vulnerability","UpdateDeviceModal","setImageId","useParams","uuid","entityDetails","groupName","groupsDetailReducer","deviceId","isOpen","deviceData","updateModal","setUpdateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","useEffect","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDeviceHasUpdate","image_data","prevState","system_profile","UpdateTransactions","length","Status","ImageInfo","Image","ID","appObjectId","DetailWrapper","hideInvLink","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","actions","UpdatesAvailable","hideBack","hideInvDrawer","Label","icon","Main","Grid","gutter","GridItem","span","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Card","CardTitle","CardBody","Stack","hasGutter","StackItem","isInline","deviceSummaryReducer","isLoading","undefined","hasError","data","shallowEqual","Tiles","dispatch","useDispatch","registered","imagesReducer","loadImages","loadDeviceSummary","Flex","FlexItem","onNewImageClick","DeviceStatus","imageData","rpm_ostree_deployments","Split","SplitItem","booted","infoColor","warningColor","updateTransactions","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","activeFilters","inventory","useRef","get","cleanEntities","Fragment","PageHeaderTitle","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","actionResolver","rowData","_index","areActionsDisabled","columns","newColumns","filter","column","includes","key","col","width","renderFunc","sysProf","isStatic","getEntities","_items","config","_showTags","defaultGetEntities","host_type","fields","defaultData","promises","results","map","device","getImageInfo","imageInfo","Object","prototype","hasOwnProperty","call","Promise","all","rows","hideFilters","registeredWith","hasCheckbox","activeFiltersConfig","isEmptyFilters","constructActiveFilters","find","item","onRowClick","_e","mergeWithEntities","refreshTable","TooltipSelectorRef","index","reference","document","getElementById","type","option","columnNames","sort","columnTransforms","cellWidth","createRows","image_set","image_build_iso_url","cells","paths","Name","Images","Version","DateFormat","date","UpdatedAt","StatusLabel","imageStatus","isoURL","latestImageID","ImageTable","openCreateWizard","edgeImageSetsReducer","count","Count","Data","GeneralTable","apiFilterSort","loadTableData","loadEdgeImageSets","tableData","emptyStateMessage","emptyStateActionMessage","emptyStateAction","actionsArray","Text","href","rel","target","_rowId","defaultSort","direction","toolbarButtons","click","clearFilters","pagination","page","perPage","isRequired","CreateImageWizard","isCreateWizardOpen","setIsCreateWizardOpen","UpdateWizard","setUpdateWizard","ImageSetsTable","create_image"],"sourceRoot":""}