{"version":3,"file":"js/907.01d525feb2387897a4a8.js","mappings":"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","sources":["webpack:///./src/Routes/Repositories/modals/Modal.js","webpack:///./src/Routes/Repositories/modals/AddModal.js","webpack:///./src/Routes/Repositories/modals/EditModal.js","webpack:///./src/Routes/Repositories/modals/RemoveModal.js","webpack:///./src/Routes/Repositories/TableHeader.js","webpack:///./src/Routes/Repositories/RepositoryTable.js","webpack:///./src/Routes/Repositories/RepositoryHeader.js","webpack:///./src/Routes/Repositories/Repositories.js"],"sourcesContent":["import React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport PropTypes from 'prop-types';\n\nconst RepoModal = ({\n  isOpen,\n  title,\n  openModal,\n  submitLabel,\n  schema,\n  initialValues,\n  variant,\n  reloadData,\n  onSubmit,\n}) => {\n  return (\n    <Modal variant=\"small\" title={title} isOpen={isOpen} onClose={openModal}>\n      <FormRenderer\n        schema={schema}\n        FormTemplate={(props) => (\n          <FormTemplate\n            {...props}\n            submitLabel={submitLabel}\n            disableSubmit={['invalid']}\n            buttonsProps={{\n              submit: { variant },\n            }}\n          />\n        )}\n        initialValues={initialValues}\n        componentMapper={componentMapper}\n        onSubmit={async (values) => {\n          await onSubmit(values);\n          openModal();\n          reloadData();\n        }}\n        onCancel={() => openModal()}\n      />\n    </Modal>\n  );\n};\n\nRepoModal.propTypes = {\n  isOpen: PropTypes.bool,\n  title: PropTypes.string,\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  submitLabel: PropTypes.string,\n  schema: PropTypes.object,\n  initialValues: PropTypes.object,\n  variant: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n\nexport default RepoModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { createCustomRepository } from '../../../api/index';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nconst AddModal = ({ isOpen, openModal, reloadData }) => {\n  const addSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'title',\n        label:\n          'Link to a custom repository to add packages to RHEL for Edge images.',\n      },\n      {\n        component: 'text-field',\n        name: 'name',\n        label: 'Name',\n        placeholder: 'Repository name',\n        helperText:\n          'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n      {\n        component: 'textarea',\n        name: 'baseURL',\n        label: 'BaseURL',\n        placeholder: 'https://',\n        helperText: 'Enter the baseURL for the custom repository.',\n        isRequired: true,\n        validate: [\n          { type: validatorTypes.REQUIRED },\n          { type: validatorTypes.URL, message: 'Must be a valid url' },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title=\"Add Repository\"\n      isOpen={isOpen}\n      openModal={() => openModal({ type: 'add' })}\n      submitLabel=\"Add\"\n      schema={addSchema}\n      onSubmit={(values) => createCustomRepository(values)}\n      reloadData={reloadData}\n    />\n  );\n};\n\nAddModal.propTypes = {\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n};\n\nexport default AddModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { HelperText, HelperTextItem } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport { editCustomRepository } from '../../../api/index';\n\nconst EditModal = ({ openModal, isOpen, id, name, baseURL, reloadData }) => {\n  const editSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'title',\n        label: 'Update information about this custom repository.',\n      },\n      {\n        component: 'text-field',\n        name: 'name',\n        label: 'Name',\n        placeholder: 'Repository name',\n        helperText:\n          'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n        isRequired: true,\n        validate: [{ type: validatorTypes.REQUIRED }],\n      },\n      {\n        component: 'textarea',\n        name: 'baseURL',\n        label: 'BaseURL',\n        placeholder: 'https://',\n        helperText: (\n          <HelperText hasIcon>\n            <HelperTextItem className=\"pf-u-pb-md\" variant=\"warning\" hasIcon>\n              If you change the repo URL, you may not have access to the\n              packages that were used to build images that reference this\n              repository.\n            </HelperTextItem>\n          </HelperText>\n        ),\n\n        isRequired: true,\n        validate: [\n          { type: validatorTypes.REQUIRED },\n          { type: validatorTypes.URL, message: 'Must be a valid url' },\n        ],\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title=\"Edit Repository\"\n      isOpen={isOpen}\n      openModal={() => openModal({ type: 'edit' })}\n      submitLabel=\"Update\"\n      schema={editSchema}\n      initialValues={{ id, name, baseURL }}\n      onSubmit={(values) => editCustomRepository(values)}\n      reloadData={reloadData}\n    />\n  );\n};\n\nEditModal.propTypes = {\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  baseURL: PropTypes.string,\n  setData: PropTypes.func,\n};\nexport default EditModal;\n","import React from 'react';\nimport Modal from './Modal';\nimport { TextContent, Text } from '@patternfly/react-core';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-triangle-icon';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport PropTypes from 'prop-types';\nimport { removeCustomRepository } from '../../../api/index';\n\nconst LabelWithText = ({ label, text }) => {\n  return (\n    <TextContent>\n      <Text component={'b'}>{label}</Text>\n      <Text>{text}</Text>\n    </TextContent>\n  );\n};\n\nLabelWithText.propTypes = {\n  label: PropTypes.string,\n  text: PropTypes.string,\n};\n\nconst RemoveModal = ({ openModal, id, isOpen, name, baseURL, reloadData }) => {\n  const addSchema = {\n    fields: [\n      {\n        component: 'plain-text',\n        name: 'description',\n        label:\n          'Removing a repository could affect your ability to update images.',\n      },\n      {\n        component: 'plain-text',\n        name: 'name',\n        label: <LabelWithText label=\"Name\" text={name} />,\n      },\n      {\n        component: 'plain-text',\n        name: 'baseURL',\n        label: <LabelWithText label=\"baseURL\" text={baseURL} />,\n      },\n    ],\n  };\n\n  return (\n    <Modal\n      title={\n        <>\n          <ExclamationTriangleIcon\n            color={warningColor.value}\n            className=\"pf-u-mr-md\"\n          />\n          Remove Repository\n        </>\n      }\n      isOpen={isOpen}\n      openModal={() => openModal({ type: 'remove' })}\n      submitLabel=\"Remove\"\n      schema={addSchema}\n      initialValues={{ id }}\n      variant=\"danger\"\n      onSubmit={({ id }) => removeCustomRepository(id)}\n      reloadData={reloadData}\n    />\n  );\n};\n\nRemoveModal.propTypes = {\n  openModal: PropTypes.func,\n  reloadData: PropTypes.func,\n  isOpen: PropTypes.boo,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  baseURL: PropTypes.string,\n  setData: PropTypes.func,\n};\nexport default RemoveModal;\n","import React from 'react';\nimport { TextContent, Text, TextVariants } from '@patternfly/react-core';\n//import { ExternalLinkAltIcon } from \"@patternfly/react-icons\";\n\nconst Header = () => {\n  return (\n    <TextContent style={{ padding: '15px', backgroundColor: 'white' }}>\n      <Text component={TextVariants.h1}>Custom repositories</Text>\n      <Text component={TextVariants.p}>\n        Add custom repositories to build RHEL for Edge images with additional\n        packages.{' '}\n        {/*<Text\n          style={{ display: 'inline' }}\n          component={TextVariants.small}\n          href=\"#\"\n        >\n          <Text component={TextVariants.a} href=\"#\">\n            Learn more\n            <ExternalLinkAltIcon size=\"sm\" className=\"pf-u-ml-sm\" />\n          </Text>\n        </Text>*/}\n      </Text>\n    </TextContent>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport GeneralTable from '../../components/general-table/GeneralTable';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst filters = [{ label: 'Name', type: 'text' }];\n\nconst RepositoryTable = ({ data, openModal }) => {\n  const actionResolver = (rowData) => {\n    return [\n      {\n        title: 'Edit',\n        onClick: () =>\n          openModal({\n            type: 'edit',\n            id: rowData.id,\n            name: rowData.rowName,\n            baseURL: rowData.baseURL,\n          }),\n      },\n      {\n        title: 'Remove',\n        onClick: () =>\n          openModal({\n            type: 'remove',\n            id: rowData.id,\n            name: rowData.rowName,\n            baseURL: rowData.baseURL,\n          }),\n      },\n    ];\n  };\n\n  const buildRows = data.map(({ id, name, baseURL }) => {\n    return {\n      id: id,\n      rowName: name,\n      baseURL: baseURL,\n      cells: [\n        {\n          title: (\n            <>\n              <Text classname=\"pf-u-mb-xs\" component={TextVariants.p}>\n                {name}\n              </Text>\n              <Text component={TextVariants.a}>\n                <a href={baseURL} target=\"_blank\" rel=\"noopener noreferrer\">\n                  {baseURL} <ExternalLinkAltIcon classname=\"pf-u-ml-sm\" />\n                </a>\n              </Text>\n            </>\n          ),\n        },\n      ],\n    };\n  });\n\n  return (\n    <GeneralTable\n      apiFilterSort={false}\n      filters={filters}\n      tableData={{\n        count: data.length,\n        data,\n        isLoading: false,\n        hasError: false,\n      }}\n      columnNames={[{ title: 'Name', type: 'name', sort: true }]}\n      rows={buildRows}\n      actionResolver={actionResolver}\n      areActionsDisabled={() => false}\n      defaultSort={{ index: 0, direction: 'desc' }}\n      toolbarButtons={[\n        {\n          title: 'Add repository',\n          click: () => openModal({ type: 'add' }),\n        },\n      ]}\n    />\n  );\n};\nRepositoryTable.propTypes = {\n  data: PropTypes.array,\n  openModal: PropTypes.func,\n};\n\nexport default RepositoryTable;\n","import React from 'react';\nimport PageHeader, {\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Popover } from '@patternfly/react-core';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/outlined-question-circle-icon';\n//import { ExternalLinkAltIcon } from \"@patternfly/react-icons\";\n\nconst RepositoryHeader = () => {\n  return (\n    <PageHeader>\n      <>\n        <PageHeaderTitle title=\"Applications settings\" />\n        <p className=\"pf-u-mt-sm\">\n          Settings for Fleet Management\n          <Popover\n            aria-label=\"Basic popover\"\n            headerContent={<div>About Fleet Management</div>}\n            bodyContent={\n              <div>\n                Fleet Management is a service that allows you to provision,\n                update and maintain edge systems.\n              </div>\n            }\n            //footerContent={\n            //  <Button variant=\"link\" style={{ 'padding-left': 0 }}>\n            //    <a href=\"#\">Documentation</a>\n            //    <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            //  </Button>\n            //}\n          >\n            <QuestionCircleIcon\n              style={{ cursor: 'pointer' }}\n              className=\"pf-u-ml-xs\"\n            />\n          </Popover>\n        </p>\n      </>\n    </PageHeader>\n  );\n};\n\nexport default RepositoryHeader;\n","import React, { useEffect, useState } from 'react';\nimport EmptyState from '../../components/Empty';\nimport AddModal from './modals/AddModal';\nimport EditModal from './modals/EditModal';\nimport RemoveModal from './modals/RemoveModal';\nimport TableHeader from './TableHeader';\nimport RepositoryTable from './RepositoryTable';\nimport Main from '@redhat-cloud-services/frontend-components/Main';\nimport RepositoryHeader from './RepositoryHeader';\nimport { getCustomRepositories } from '../../api/index';\nimport { Skeleton } from '@patternfly/react-core';\n\nconst Repository = () => {\n  const [data, setData] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [modalDetails, setModalDetails] = useState({\n    isOpen: {\n      add: false,\n      edit: false,\n      remove: false,\n    },\n    id: null,\n    name: '',\n    baseURL: '',\n  });\n\n  const openModal = ({ type, id = null, name = '', baseURL = '' }) => {\n    setModalDetails((prevState) => ({\n      ...prevState,\n      id,\n      name,\n      baseURL,\n      isOpen: {\n        ...prevState.isOpen,\n        [type]: !prevState.isOpen[type],\n      },\n    }));\n  };\n\n  const reloadData = async () => {\n    const repos = await getCustomRepositories();\n    setData(\n      repos.data.map((repo) => ({\n        id: repo.ID,\n        name: repo.Name,\n        baseURL: repo.URL,\n        ...repo,\n      }))\n    );\n    setLoaded(true);\n  };\n\n  useEffect(() => reloadData(), []);\n\n  return (\n    <>\n      <RepositoryHeader />\n      <Main>\n        {loaded ? (\n          data.length > 0 ? (\n            <>\n              <TableHeader />\n              <RepositoryTable data={data} openModal={openModal} />\n            </>\n          ) : (\n            <EmptyState\n              icon=\"repository\"\n              title=\"Add a custom repository\"\n              body=\"Add custom repositories to build RHEL for Edge images with additional packages.\"\n              primaryAction={{\n                text: 'Add Repository',\n                click: () => openModal({ type: 'add' }),\n              }}\n              secondaryActions={\n                [\n                  //{\n                  //  title: 'Learn more about custom repositories',\n                  //  type: 'link',\n                  //  link: '#',\n                  //},\n                ]\n              }\n            />\n          )\n        ) : (\n          <Skeleton />\n        )}\n        <AddModal\n          isOpen={modalDetails.isOpen.add}\n          openModal={openModal}\n          reloadData={reloadData}\n        />\n        <EditModal\n          isOpen={modalDetails.isOpen.edit}\n          id={modalDetails.id}\n          name={modalDetails.name}\n          baseURL={modalDetails.baseURL}\n          openModal={openModal}\n          reloadData={reloadData}\n        />\n        <RemoveModal\n          isOpen={modalDetails.isOpen.remove}\n          id={modalDetails.id}\n          name={modalDetails.name}\n          baseURL={modalDetails.baseURL}\n          openModal={openModal}\n          reloadData={reloadData}\n        />\n      </Main>\n    </>\n  );\n};\n\nexport default Repository;\n"],"names":["RepoModal","isOpen","title","openModal","submitLabel","schema","initialValues","variant","reloadData","onSubmit","Modal","onClose","FormTemplate","props","disableSubmit","buttonsProps","submit","componentMapper","values","onCancel","propTypes","PropTypes","AddModal","addSchema","fields","component","name","label","placeholder","helperText","isRequired","validate","type","validatorTypes","message","createCustomRepository","EditModal","id","baseURL","editSchema","HelperText","hasIcon","HelperTextItem","className","editCustomRepository","setData","LabelWithText","text","TextContent","Text","RemoveModal","color","warningColor","removeCustomRepository","style","padding","backgroundColor","TextVariants","filters","RepositoryTable","data","buildRows","map","rowName","cells","classname","href","target","rel","GeneralTable","apiFilterSort","tableData","count","length","isLoading","hasError","columnNames","sort","rows","actionResolver","rowData","onClick","areActionsDisabled","defaultSort","index","direction","toolbarButtons","click","PageHeader","PageHeaderTitle","Popover","headerContent","bodyContent","cursor","useState","loaded","setLoaded","add","edit","remove","modalDetails","setModalDetails","prevState","getCustomRepositories","repos","repo","ID","Name","URL","useEffect","Main","TableHeader","Empty","icon","body","primaryAction","secondaryActions","Skeleton"],"sourceRoot":""}