{"version":3,"sources":["webpack:///./src/components/ReviewSection.js","webpack:///./src/components/form/ReviewStep.js","webpack:///./src/components/form/Packages.js","webpack:///./src/components/form/RegistrationCreds.js","webpack:///./src/components/form/ImageOutputCheckbox.js","webpack:///./src/components/form/SSHInputField.js","webpack:///./src/components/ImageCreator.js","webpack:///./src/Routes/ImageManager/steps/review.js","webpack:///./src/Routes/ImageManager/steps/packages.js","webpack:///./src/Routes/ImageManager/steps/imageOutput.js","webpack:///./src/Routes/ImageManager/steps/imageSetDetails.js","webpack:///./src/Routes/ImageManager/steps/registration.js","webpack:///./src/Routes/ImageManager/CreateImageWizard.js"],"names":["ReviewSection","title","data","testid","Grid","className","data-testid","hasGutter","GridItem","span","Text","component","TextVariants","map","name","value","TextListItem","T","TextListItemVariants","propTypes","PropTypes","getState","useFormApi","getRegistry","useContext","RegistryContext","useSelector","createImageReducer","isLoading","undefined","hasError","error","shallowEqual","useEffect","registered","register","Bullseye","details","values","description","output","releaseMapper","release","imageType","type","imageTypeMapper","join","registration","credentials","packages","length","Fragment","Alert","variant","TextContent","mapPackagesToComponent","pack","key","summary","mapComponentToPackage","props","children","Packages","defaultArch","change","input","useFieldApi","packagesSearchName","useRef","useState","packagesAvailable","setPackagesAvailable","packagesSelected","setPackagesSelected","filterSelected","setFilterSelected","packageListChange","newAvailablePackages","newChosenPackages","chosenPkgs","handlePackagesSearch","getPackages","architecture","current","DualListSelector","isSearchable","availableOptionsActions","Button","aria-label","onClick","availableOptions","availableOptionsTitle","chosenOptions","filter","item","includes","chosenOptionsTitle","addSelected","removeSelected","addAll","removeAll","onAvailableOptionsSearchInputChanged","val","onChosenOptionsSearchInputChanged","filterOption","id","registrationCredsValidator","state","checkbox","errs","password","sshKey","meta","toggleCheckbox","useCallback","checked","event","onChange","currentTarget","passwordInput","sshKeyInput","FormGroup","label","isHelperTextBeforeField","hasNoPaddingTop","isRequired","isStack","Checkbox","isChecked","helperTextInvalid","dirty","TextInput","TextArea","ImageOutputCheckbox","options","index","validated","touched","helperText","target","href","isVisitedLink","placeholder","CreateImageWizard","schema","onSubmit","onClose","customComponentMapper","subscription","FormTemplate","showFormControls","formValues","componentMapper","RegistrationCreds","SSHInputField","review","Review","validatorMapper","validatorTypes","onCancel","fields","PackagesLabel","releaseName","nextStep","componentTypes","initialValue","clearedValue","Object","entries","DEFAULT_RELEASE","validate","isDisabled","pattern","threshold","resizeOrientation","CreateImage","navigateBack","user","setUser","dispatch","useDispatch","closeAction","CREATE_NEW_IMAGE_RESET","insights","chrome","auth","getUser","userData","ImageCreator","ReviewStep","payload","createNewImage","addImageToPoll","Name","ID","isDynamic","inModal","buttonLabels","submit","showTitles","crossroads","imageSetDetails","imageOutput","defaultProps"],"mappings":"2eAWMA,EAAgB,SAAC,GAA4B,IAA1BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACpC,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,aAAaC,cAAaH,EAAQI,WAAS,GACzD,kBAACC,EAAA,EAAD,CAAUC,KAAM,GAAIF,WAAS,GAC3B,kBAACG,EAAA,EAAD,CAAMC,UAAWC,QAAkBX,IAEpCC,EAAKW,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACR,oCACE,kBAACP,EAAA,EAAD,CAAUC,KAAM,EAAGF,WAAS,GAC1B,kBAACS,EAAAC,EAAD,CAAcN,UAAWO,QACtBJ,IAGL,kBAACN,EAAA,EAAD,CAAUC,KAAM,EAAGF,WAAS,GAC1B,kBAACS,EAAAC,EAAD,CAAcN,UAAWO,QACtBH,UASff,EAAcmB,UAAY,CACxBlB,MAAOmB,WACPlB,KAAMkB,YACJA,UAAgB,CACdN,KAAMM,WACNL,MAAOK,cAGXjB,OAAQiB,YAGV,UC+DA,EAhGmB,WAAM,IACfC,GAAaC,eAAbD,SACAE,GAAgBC,gBAAWC,KAA3BF,YAFe,GAGSG,kBAC9B,gBAAGC,EAAH,EAAGA,mBAAH,MAA6B,CAC3BC,eACoCC,KAAlCF,aAAA,EAAAA,EAAoBC,aAChBD,aADJ,EACIA,EAAoBC,WAE1BE,UAAUH,aAAA,EAAAA,EAAoBG,YAAY,EAC1CC,OAAOJ,aAAA,EAAAA,EAAoBI,QAAS,QAEtCC,gBATMJ,EAHe,EAGfA,UAAWE,EAHI,EAGJA,SAgBnB,IALAG,gBAAU,WACR,IAAMC,EAAaX,IAAcY,SAAS,CAAER,0BAC5C,OAAO,kBAAMO,OACZ,IAECN,EACF,OACE,kBAACQ,EAAA,EAAD,KACE,kBAAC,IAAD,OAKN,IAAMC,EAAU,CACd,CAAEvB,KAAM,OAAQC,MAAOM,IAAWiB,OAAOxB,MACzC,CAAEA,KAAM,UAAWC,MAAO,KAC1B,CAAED,KAAM,cAAeC,MAAOM,IAAWiB,OAAOC,cAG5CC,EAAS,CACb,CAAE1B,KAAM,UAAWC,MAAO0B,KAAcpB,IAAWiB,OAAOI,UAC1D,CACE5B,KAAM,OACNC,MAAOM,IACJiB,OAAOK,UAAU9B,KAAI,SAAC+B,GAAD,gBAAaC,KAAgBD,OAClDE,KAAK,QAINC,EAAe,CACnB,CAAEjC,KAAM,WAAYC,MAAOM,IAAWiB,OAAX,UAC3B,CAAExB,KAAM,UAAWC,MAAOM,IAAWiB,OAAOU,cAGxCC,EAAW,CACf,CACEnC,KAAM,iBACNC,WAC6Cc,IAA3CR,IAAWiB,OAAO,qBACd,IACAjB,IAAWiB,OAAO,qBAAqBY,SAIjD,OACE,kBAAC,EAAAC,SAAD,KACGrB,GACC,kBAACsB,EAAA,EAAD,CACEC,QAAQ,SACRpD,MAAM,0DAGV,kBAACqD,EAAA,EAAD,KACE,kBAAC5C,EAAA,EAAD,wCACmC,IACjC,kBAACA,EAAA,EAAD,CAAMC,UAAW,KAAjB,gBAFF,0BAIA,kBAAC,EAAD,CACEV,MAAO,UACPC,KAAMmC,EACNlC,OAAQ,yBAEV,kBAAC,EAAD,CACEF,MAAO,SACPC,KAAMsC,EACNrC,OAAQ,wBAEV,kBAAC,EAAD,CACEF,MAAO,eACPC,KAAM6C,EACN5C,OAAQ,8BAEV,kBAAC,EAAD,CACEF,MAAO,WACPC,KAAM+C,EACN9C,OAAQ,6B,mEC/FZoD,EAAyB,SAACN,GAAD,OAC7BA,EAASpC,KAAI,SAAC2C,EAAMC,GAAP,OACX,kBAACH,EAAA,EAAD,CAAaG,IAAG,UAAKD,EAAK1C,KAAV,YAAkB2C,IAChC,0BAAMpD,UAAU,sCAAsCmD,EAAK1C,MAC3D,+BAAQ0C,EAAKE,cAIbC,EAAwB,SAAChD,GAAD,MAAgB,CAC5CG,KAAMH,EAAUiD,MAAMC,SAAS,GAAGD,MAAMC,SACxCH,QAAS/C,EAAUiD,MAAMC,SAAS,GAAGD,MAAMC,WAGvCC,EAAW,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,YAAgBH,EAAY,0BACjBtC,eAArB0C,EADsC,EACtCA,OAAQ3C,EAD8B,EAC9BA,SACR4C,GAAUC,OAAYN,GAAtBK,MACFE,GAAqBC,cAHmB,GAIIC,cAAS,IAJb,WAIvCC,EAJuC,KAIpBC,EAJoB,QAKEF,cAAS,IALX,WAKvCG,EALuC,KAKrBC,EALqB,QAMFJ,cAAS,IANP,WAMvCK,EANuC,KAMvBC,EANuB,MAQ9C1C,gBAAU,WAAM,QACdwC,EACElB,GAA+B,QAAR,EAAAlC,WAAA,mBAAYiB,cAAZ,eAAqB2B,EAAMnD,QAAS,OAE5D,IAEH,IAAM8D,EAAoB,SAACC,EAAsBC,GAC/C,IAAMC,EAAaD,EAAkBjE,IAAI8C,GACzCY,EAAqBM,GACrBJ,EAAoBK,GACpBd,EAAOC,EAAMnD,KAAMiE,IAGfC,EAAoB,+BAAG,+GACJC,SACb,QAAR,EAAA5D,WAAA,mBAAYiB,cAAZ,eAAoBI,UAAW,UACvB,QAAR,EAAArB,WAAA,mBAAYiB,cAAZ,eAAoB4C,eAAgBnB,EACpCI,EAAmBgB,SAJM,gBACnBjF,EADmB,EACnBA,KAKRqE,EAAqBhB,EAAuBrD,GAAQ,KANzB,2CAAH,qDAS1B,OACE,kBAACkF,EAAA,EAAD,CACE/E,UAAU,aACVgF,cAAY,EACZC,wBAAyB,CACvB,kBAACC,EAAA,GAAD,CACEC,aAAW,uCACX/B,IAAI,wBACJnD,cAAY,qBACZmF,QAAST,GAJX,WASFU,iBAAkBpB,EAClBqB,sBAAsB,qBACtBC,cAAepB,EAAiBqB,QAAO,SAACC,GAAD,yBACrCnC,EAAsBmC,UADe,iBACrC,EAA6BhF,YADQ,aACrC,EAAmCiF,SAASrB,MAE9CsB,mBAAmB,kBACnBC,YAAarB,EACbsB,eAAgBtB,EAChBuB,OAAQvB,EACRwB,UAAW,SAACvB,GAAD,OACTD,EACEC,EACAL,EAAiBqB,QACf,SAACC,GAAD,gBACE,UAACnC,EAAsBmC,UAAvB,iBAAC,EAA6BhF,YAA9B,aAAC,EAAmCiF,SAASrB,SAIrD2B,qCAAsC,SAACC,GACrCnC,EAAmBgB,QAAUmB,GAE/BC,kCAAmC,SAACD,GAAD,OAAS3B,EAAkB2B,IAC9DE,aAAc,kBAAM,GACpBC,GAAG,6BAKT3C,EAAS3C,UAAY,CACnB4C,YAAa3C,YAGf,U,moBCvFO,IAAMsF,GAA6B,kBAAM,SAAC3F,EAAO4F,GACtD,GAAqB,IAAjB5F,EAAMmC,OACR,MAAO,CAAE0D,SAAU,yCAErB,IAAIC,EAAO,GAaX,OAXE9F,EAAMgF,SAAS,kBACQlE,IAAtB8E,EAAK,UAAoD,KAAtBA,EAAK,WAEzCE,EAAO,EAAH,KAAQA,GAAR,IAAcC,SAAU,eAG5B/F,EAAMgF,SAAS,gBACMlE,IAApB8E,EAAK,QAAgD,KAApBA,EAAK,SAEvCE,EAAO,EAAH,KAAQA,GAAR,IAAcE,OAAQ,cAErBF,IAiET,SA9D0B,SAACjD,GAAU,OACXM,OAAYN,GAA5BK,EAD2B,EAC3BA,MAAO+C,EADoB,EACpBA,KACTC,GAAiBC,kBACrB,SAACC,EAASC,GACRnD,EAAMoD,SACJF,EAAO,cACClD,EAAMlD,OADP,CACcqG,EAAME,cAAcb,KACrCxC,EAAMlD,MAAM8E,QAAO,SAACC,GAAD,OAAUA,IAASsB,EAAME,cAAcb,SAGlE,CAACxC,EAAMoD,WAGME,GAAkBrD,OAAY,CAAEpD,KAAM,aAA7CmD,MACOuD,GAAgBtD,OAAY,CAAEpD,KAAM,WAA3CmD,MAER,OACE,kBAACwD,EAAA,EAAD,CACEC,MAAM,8CACNC,yBAAuB,EACvBC,iBAAe,EACfC,YAAU,EACVC,SAAO,GAEP,kBAACC,EAAA,EAAD,CACEL,MAAM,WACNjB,GAAG,WACHuB,UAAW/D,EAAMlD,MAAMgF,SAAS,YAChCsB,SAAUJ,IAEXhD,EAAMlD,MAAMgF,SAAS,YACpB,kBAAC0B,EAAA,EAAD,CACEQ,kBACEjB,EAAKkB,YAAoCrG,IAA3BmF,EAAKjF,MAAL,SACViF,EAAKjF,MAAL,cACAF,GAGN,kBAACsG,EAAA,GAAD,KAAWvF,KAAK,YAAe2E,KAE/B,KACJ,kBAACQ,EAAA,EAAD,CACEL,MAAM,MACNjB,GAAG,SACHuB,UAAW/D,EAAMlD,MAAMgF,SAAS,UAChCsB,SAAUJ,IAEXhD,EAAMlD,MAAMgF,SAAS,UACpB,kBAAC0B,EAAA,EAAD,CACEQ,kBACEjB,EAAKkB,YAAkCrG,IAAzBmF,EAAKjF,MAAL,OACViF,EAAKjF,MAAL,YACAF,GAGN,kBAACuG,EAAA,GAAaZ,IAEd,OCjFV,IAAMa,GAAsB,SAACzE,GAAU,IAC7BK,GAAUC,OAAYN,GAAtBK,MACFgD,GAAiBC,kBACrB,SAACC,EAASC,GACRnD,EAAMoD,SACJF,EAAO,cACClD,EAAMlD,OADP,CACcqG,EAAME,cAAcb,KACrCxC,EAAMlD,MAAM8E,QAAO,SAACC,GAAD,OAAUA,IAASsB,EAAME,cAAcb,SAGlE,CAACxC,EAAMoD,WAGT,OACE,kBAACI,EAAA,EAAD,CACEC,MAAM,cACNC,yBAAuB,EACvBC,iBAAe,EACfC,YAAU,EACVC,SAAO,GAENlE,EAAM0E,QAAQzH,KAAI,WAAmB0H,GAAnB,IAAGxH,EAAH,EAAGA,MAAO2G,EAAV,EAAUA,MAAV,OACjB,kBAACK,EAAA,EAAD,CACEtE,IAAK8E,EACLb,MAAOA,EACPjB,GAAI1F,EACJiH,UAAW/D,EAAMlD,MAAMgF,SAAShF,GAChCsG,SAAUJ,SAOpBoB,GAAoBlH,UAAY,CAC9B8C,MAAO7C,UACPkH,QAASlH,YACPA,UAAgB,CACdL,MAAOK,WACPsG,MAAOtG,eAKb,Y,+OCFA,SArCsB,SAACwC,GAAU,OACMM,O,mWAAY,EAC/CpD,KAAM,eACH8C,IAFU4D,EADgB,EACvBvD,MAAoB+C,EADG,EACHA,KAI5B,OACE,kBAACS,EAAA,EAAD,CACEC,MAAM,UACNO,kBAAmBjB,EAAKjF,MACxByG,UAAWxB,EAAKjF,OAASiF,EAAKyB,QAAU,QAAU,UAClDZ,YAAU,EACVa,WACE,kBAAC,EAAAvF,SAAD,KACE,kBAACzC,EAAA,EAAD,CAAMC,UAAWC,WACf,kBAACF,EAAA,EAAD,CACEiI,OAAO,SACPC,KAAK,sDACLC,eAAa,EACblI,UAAWC,OAJb,4BAOE,kBAAC,MAAD,CAAqBP,UAAU,mBAMvC,kBAAC+H,EAAA,GAAD,KACE/H,UAAU,cACVoG,GAAG,cACHqC,YAAY,6BACRtB,M,qlBCrBL,IAUDuB,GAAoB,SAAC,GAMrB,IALJC,EAKI,EALJA,OACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,sBACApF,EACI,EADJA,YAEA,OAAOiF,EACL,kBAAC,IAAD,CACEA,OAAQA,EACR3I,UAAU,gBACV+I,aAAc,CAAE9G,QAAQ,GACxB+G,aAAc,SAACzF,GAAD,OACZ,kBAAC,KAAD,OAAqBA,EAArB,CAA4B0F,kBAAkB,MAEhDL,SAAU,SAACM,GAAD,OAAgBN,EAASM,IACnCC,gBAAe,SACVA,MADU,IAGb,qBAAsB,CACpB7I,UAAW8I,IAEb,wBAAyB,CACvB9I,UAAW0H,IAEb,kBAAmB,CACjB1H,UAAW+I,IAEbC,OAAQC,EACR,mBAAoB,CAClBjJ,UAAWmD,EACXC,gBAECoF,GAELU,gBAAe,SACVC,MADU,IAEbpD,gCAEFqD,SAAUb,IAGZ,kBAAC,IAAD,OAIJH,GAAkB5H,UAAY,CAC5B6H,OAAQ5H,WACR6H,SAAU7H,oBACV8H,QAAS9H,oBACT+H,sBAAuB/H,UAAA,OACpBA,WAAmBA,cAAoB,CACtCA,SACAA,UAAgB,CACdT,UAAWS,eAIjB2C,YAAa3C,YAGf,Y,gBC3FA,UACEN,KAAM,SACNb,MAAO,SACP+J,OAAQ,CACN,CACElJ,KAAM,SACNH,UAAW,YCAjB,IAAMsJ,GAAgB,WAAM,QAEpBvH,EAAO,WAAGrB,GADKC,eAAbD,mBACK,iBAAG,EAAYiB,cAAf,aAAG,EAAoBI,QAC9BwH,OAA0BrI,IAAZa,EAAwBD,KAAcC,GAAW,GACrE,OACE,kBAACY,EAAA,EAAD,KACE,kBAAC5C,EAAA,EAAD,6BACuB,kBAACA,EAAA,EAAD,CAAMC,UAAU,KAAKuJ,GAD5C,aAON,UACEjK,MAAO,sBACPa,KAAM,WACNqJ,SAAU,SACVH,OAAQ,CACN,CACErJ,UAAWyJ,gBACXtJ,KAAM,8BACN4G,MAAO,kBAACuC,GAAD,OAET,CACEtJ,UAAW,mBACXG,KAAM,oBACN4G,MAAO,oBACP2C,aAAc,GACdC,aAAc,MCxBpB,IACErK,MAAO,eACPa,KAAM,cACNqJ,SAAU,eACVH,OAAQ,CACN,CACErJ,UAAWyJ,gBACXtJ,KAAM,cACN4G,MAAO,kBAAChH,EAAA,EAAD,sDAET,CACEC,UAAWyJ,YACXtJ,KAAM,UACN4G,MAAO,UACPY,QAASiC,OAAOC,QAAQ/H,MAAe5B,KAAI,iCAA8B,CACvEE,MADyC,KAEzC2G,MAFyC,SAI3C2C,aAAcI,KACdC,SAAU,CAAC,CAAE9H,KAAMkH,gBACnBjC,YAAY,EACZ8C,YAAY,GAEd,CACEhK,UAAW,wBACXG,KAAM,YACNwH,QAASiC,OAAOC,QAAQ3H,MAAiBhC,KACvC,iCAAkC,CAChCE,MADF,KAEE2G,MAFF,SAKF2C,aAAc,CAAC,uBACfC,aAAc,GACdI,SAAU,CAAC,CAAE9H,KAAMkH,mBCvCzB,IACE7J,MAAO,gBACPa,KAAM,kBACNqJ,SAAU,cACVH,OAAQ,CACN,CACErJ,UAAWyJ,gBACXtJ,KAAM,cACN4G,MACE,kBAAChH,EAAA,EAAD,2EAKJ,CACEC,UAAWyJ,gBACXtJ,KAAM,OACN4G,MAAO,aACPoB,YAAa,aACb4B,SAAU,CACR,CAAE9H,KAAMkH,eACR,CACElH,KAAMkH,aACNc,QAAS,kCAEX,CAAEhI,KAAMkH,gBAA2Be,UAAW,KAEhDhD,YAAY,GAEd,CACElH,UAAWyJ,cACXtJ,KAAM,cACN4G,MAAO,cACPoB,YAAa,kBACbgC,kBAAmB,WACnBJ,SAAU,CAAC,CAAE9H,KAAMkH,gBAA2Be,UAAW,SCnC/D,IACE5K,MAAO,sBACPa,KAAM,eACNqJ,SAAU,WACVH,OAAQ,CACN,CACErJ,UAAWyJ,gBACXtJ,KAAM,cACN4G,MAAO,kBAAChH,EAAA,EAAD,8DAET,CACEC,UAAWyJ,gBACX1C,MAAO,WACPoB,YAAa,iBACbhI,KAAM,WACN4J,SAAU,CACR,CAAE9H,KAAMkH,eACR,CACElH,KAAMkH,aACNc,QAAS,gCAEX,CAAEhI,KAAMkH,gBAA2Be,UAAW,KAEhDhD,YAAY,GAEd,CACElH,UAAW,kBACXG,KAAM,cACN4J,SAAU,CACR,CAAE9H,KAAMkH,eACR,CACElH,KAAMkH,aACNc,QAAS,uDAGb/C,YAAY,K,imBCvBlB,IAAMkD,GAAc,SAAC,GAAqB,IAAnBC,EAAmB,EAAnBA,aAAmB,GAChB3G,gBADgB,WACjC4G,EADiC,KAC3BC,EAD2B,KAElCC,GAAWC,mBACXC,EAAc,WAClBL,IACAG,EAAS,CAAEvI,KAAM0I,QASnB,OAPArJ,gBAAU,WACR,cAAC,oHACyBsJ,gBADzB,iBACyB,EAAUC,cADnC,iBACyB,EAAkBC,YAD3C,aACyB,EAAwBC,UADjD,gDAC+D,GAD/D,OACOC,EADP,KAECT,GAAQ,kBAAMS,KAFf,0CAAD,KAIC,IAEIV,EACL,kBAACW,GAAD,CACE1C,QAASmC,EACTlC,sBAAuB,CACrBQ,OAAQkC,GAEV5C,SAAU,SAAC3G,GACT,IAAMwJ,EAAU,SACXxJ,GADQ,IAEX4C,aAAc,YAEhB6G,SAAeZ,EAAUW,GAAS,SAAC5L,GACjCmL,IACAF,GACEa,SAAe,CAAElL,KAAMZ,EAAKa,MAAMkL,KAAMxF,GAAIvG,EAAKa,MAAMmL,UAI7DnI,YAAY,SACZiF,OAAQ,CACNgB,OAAQ,CACN,CACErJ,UAAWyJ,YACXtJ,KAAM,uBACNT,UAAW,gBACX8L,WAAW,EACXC,SAAS,EACTC,aAAc,CACZC,OAAQ,gBAEVC,YAAY,EACZtM,MAAO,eACPuM,WAAY,CAAC,qBAAsB,WACnCjK,YAAa,6BAGbyH,OAAQ,CACNyC,GACAC,GACA3J,GACAE,GACA0G,SAOV,kBAAC,IAAD,OAIJoB,GAAY5J,UAAY,CACtB6J,aAAc5J,UAEhB2J,GAAY4B,aAAe,CACzB3B,aAAc,cAGhB","file":"js/CreateImageWizard.f9e3c177b675e074238f.js","sourcesContent":["import React from 'react';\nimport {\n  Text,\n  Grid,\n  GridItem,\n  TextListItem,\n  TextVariants,\n  TextListItemVariants,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\n\nconst ReviewSection = ({ title, data, testid }) => {\n  return (\n    <Grid className=\"pf-u-pb-md\" data-testid={testid} hasGutter>\n      <GridItem span={12} hasGutter>\n        <Text component={TextVariants.h1}>{title}</Text>\n      </GridItem>\n      {data.map(({ name, value }) => (\n        <>\n          <GridItem span={3} hasGutter>\n            <TextListItem component={TextListItemVariants.dt}>\n              {name}\n            </TextListItem>\n          </GridItem>\n          <GridItem span={9} hasGutter>\n            <TextListItem component={TextListItemVariants.dd}>\n              {value}\n            </TextListItem>\n          </GridItem>\n        </>\n      ))}\n    </Grid>\n  );\n};\n\nReviewSection.propTypes = {\n  title: PropTypes.string,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      value: PropTypes.string,\n    })\n  ),\n  testid: PropTypes.string,\n};\n\nexport default ReviewSection;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { TextContent, Text } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  imageTypeMapper,\n  releaseMapper,\n} from '../../Routes/ImageManagerDetail/constants';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { createImageReducer } from '../../store/reducers';\nimport { Bullseye, Spinner, Alert } from '@patternfly/react-core';\nimport ReviewSection from '../ReviewSection';\n\nconst ReviewStep = () => {\n  const { getState } = useFormApi();\n  const { getRegistry } = useContext(RegistryContext);\n  const { isLoading, hasError } = useSelector(\n    ({ createImageReducer }) => ({\n      isLoading:\n        createImageReducer?.isLoading !== undefined\n          ? createImageReducer?.isLoading\n          : false,\n      hasError: createImageReducer?.hasError || false,\n      error: createImageReducer?.error || null,\n    }),\n    shallowEqual\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({ createImageReducer });\n    return () => registered();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  const details = [\n    { name: 'Name', value: getState().values.name },\n    { name: 'Version', value: '1' },\n    { name: 'Description', value: getState().values.description },\n  ];\n\n  const output = [\n    { name: 'Release', value: releaseMapper[getState().values.release] },\n    {\n      name: 'Type',\n      value: getState()\n        .values.imageType.map((type) => `${imageTypeMapper[type]}`)\n        .join(', '),\n    },\n  ];\n\n  const registration = [\n    { name: 'Username', value: getState().values['username'] },\n    { name: 'ssh-key', value: getState().values.credentials },\n  ];\n\n  const packages = [\n    {\n      name: 'Added packages',\n      value:\n        getState().values['selected-packages'] === undefined\n          ? '0'\n          : getState().values['selected-packages'].length,\n    },\n  ];\n\n  return (\n    <Fragment>\n      {hasError && (\n        <Alert\n          variant=\"danger\"\n          title=\"Failed sending the request: Edge API is not available\"\n        />\n      )}\n      <TextContent>\n        <Text>\n          Review the information and click{' '}\n          <Text component={'b'}>Create image</Text> to create your image.\n        </Text>\n        <ReviewSection\n          title={'Details'}\n          data={details}\n          testid={'review-image-details'}\n        />\n        <ReviewSection\n          title={'Output'}\n          data={output}\n          testid={'review-image-output'}\n        />\n        <ReviewSection\n          title={'Registration'}\n          data={registration}\n          testid={'review-image-registration'}\n        />\n        <ReviewSection\n          title={'Packages'}\n          data={packages}\n          testid={'review-image-packages'}\n        />\n      </TextContent>\n    </Fragment>\n  );\n};\n\nexport default ReviewStep;\n","import React, { useState, useRef, useEffect } from 'react';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { DualListSelector, Button, TextContent } from '@patternfly/react-core';\nimport { getPackages } from '../../api';\nimport PropTypes from 'prop-types';\n\nconst mapPackagesToComponent = (packages) =>\n  packages.map((pack, key) => (\n    <TextContent key={`${pack.name}-${key}`}>\n      <span className=\"pf-c-dual-list-selector__item-text\">{pack.name}</span>\n      <small>{pack.summary}</small>\n    </TextContent>\n  ));\n\nconst mapComponentToPackage = (component) => ({\n  name: component.props.children[0].props.children,\n  summary: component.props.children[1].props.children,\n});\n\nconst Packages = ({ defaultArch, ...props }) => {\n  const { change, getState } = useFormApi();\n  const { input } = useFieldApi(props);\n  const packagesSearchName = useRef();\n  const [packagesAvailable, setPackagesAvailable] = useState([]);\n  const [packagesSelected, setPackagesSelected] = useState([]);\n  const [filterSelected, setFilterSelected] = useState('');\n\n  useEffect(() => {\n    setPackagesSelected(\n      mapPackagesToComponent(getState()?.values?.[input.name] || [])\n    );\n  }, []);\n\n  const packageListChange = (newAvailablePackages, newChosenPackages) => {\n    const chosenPkgs = newChosenPackages.map(mapComponentToPackage);\n    setPackagesAvailable(newAvailablePackages);\n    setPackagesSelected(newChosenPackages);\n    change(input.name, chosenPkgs);\n  };\n\n  const handlePackagesSearch = async () => {\n    const { data } = await getPackages(\n      getState()?.values?.release || 'rhel-8',\n      getState()?.values?.architecture || defaultArch,\n      packagesSearchName.current\n    );\n    setPackagesAvailable(mapPackagesToComponent(data || []));\n  };\n\n  return (\n    <DualListSelector\n      className=\"pf-u-mt-sm\"\n      isSearchable\n      availableOptionsActions={[\n        <Button\n          aria-label=\"Search button for available packages\"\n          key=\"availableSearchButton\"\n          data-testid=\"search-pkgs-button\"\n          onClick={handlePackagesSearch}\n        >\n          Search\n        </Button>,\n      ]}\n      availableOptions={packagesAvailable}\n      availableOptionsTitle=\"Available packages\"\n      chosenOptions={packagesSelected.filter((item) =>\n        mapComponentToPackage(item)?.name?.includes(filterSelected)\n      )}\n      chosenOptionsTitle=\"Chosen packages\"\n      addSelected={packageListChange}\n      removeSelected={packageListChange}\n      addAll={packageListChange}\n      removeAll={(newAvailablePackages) =>\n        packageListChange(\n          newAvailablePackages,\n          packagesSelected.filter(\n            (item) =>\n              !mapComponentToPackage(item)?.name?.includes(filterSelected)\n          )\n        )\n      }\n      onAvailableOptionsSearchInputChanged={(val) => {\n        packagesSearchName.current = val;\n      }}\n      onChosenOptionsSearchInputChanged={(val) => setFilterSelected(val)}\n      filterOption={() => true}\n      id=\"basicSelectorWithSearch\"\n    />\n  );\n};\n\nPackages.propTypes = {\n  defaultArch: PropTypes.string,\n};\n\nexport default Packages;\n","import React, { useCallback } from 'react';\nimport {\n  FormGroup,\n  Checkbox,\n  TextInput,\n  TextArea,\n} from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\n\nexport const registrationCredsValidator = () => (value, state) => {\n  if (value.length === 0) {\n    return { checkbox: 'select at least one validation method' };\n  }\n  let errs = {};\n  if (\n    value.includes('password') &&\n    (state['password'] === undefined || state['password'] === '')\n  ) {\n    errs = { ...errs, password: 'Required' };\n  }\n  if (\n    value.includes('sshKey') &&\n    (state['sshKey'] === undefined || state['sshKey'] === '')\n  ) {\n    errs = { ...errs, sshKey: 'Required' };\n  }\n  return errs;\n};\n\nconst RegistrationCreds = (props) => {\n  const { input, meta } = useFieldApi(props);\n  const toggleCheckbox = useCallback(\n    (checked, event) => {\n      input.onChange(\n        checked\n          ? [...input.value, event.currentTarget.id]\n          : input.value.filter((item) => item !== event.currentTarget.id)\n      );\n    },\n    [input.onChange]\n  );\n\n  const { input: passwordInput } = useFieldApi({ name: 'password' });\n  const { input: sshKeyInput } = useFieldApi({ name: 'sshKey' });\n\n  return (\n    <FormGroup\n      label=\"Select at least one to validate credentials\"\n      isHelperTextBeforeField\n      hasNoPaddingTop\n      isRequired\n      isStack\n    >\n      <Checkbox\n        label=\"Password\"\n        id=\"password\"\n        isChecked={input.value.includes('password')}\n        onChange={toggleCheckbox}\n      />\n      {input.value.includes('password') ? (\n        <FormGroup\n          helperTextInvalid={\n            meta.dirty && meta.error['password'] !== undefined\n              ? meta.error['password']\n              : undefined\n          }\n        >\n          <TextInput type=\"password\" {...passwordInput} />\n        </FormGroup>\n      ) : null}\n      <Checkbox\n        label=\"SSH\"\n        id=\"sshKey\"\n        isChecked={input.value.includes('sshKey')}\n        onChange={toggleCheckbox}\n      />\n      {input.value.includes('sshKey') ? (\n        <FormGroup\n          helperTextInvalid={\n            meta.dirty && meta.error['sshKey'] !== undefined\n              ? meta.error['sshKey']\n              : undefined\n          }\n        >\n          <TextArea {...sshKeyInput} />\n        </FormGroup>\n      ) : null}\n    </FormGroup>\n  );\n};\n\nexport default RegistrationCreds;\n","import React, { useCallback } from 'react';\nimport { FormGroup, Checkbox } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport PropTypes from 'prop-types';\n\nconst ImageOutputCheckbox = (props) => {\n  const { input } = useFieldApi(props);\n  const toggleCheckbox = useCallback(\n    (checked, event) => {\n      input.onChange(\n        checked\n          ? [...input.value, event.currentTarget.id]\n          : input.value.filter((item) => item !== event.currentTarget.id)\n      );\n    },\n    [input.onChange]\n  );\n\n  return (\n    <FormGroup\n      label=\"Output type\"\n      isHelperTextBeforeField\n      hasNoPaddingTop\n      isRequired\n      isStack\n    >\n      {props.options.map(({ value, label }, index) => (\n        <Checkbox\n          key={index}\n          label={label}\n          id={value}\n          isChecked={input.value.includes(value)}\n          onChange={toggleCheckbox}\n        />\n      ))}\n    </FormGroup>\n  );\n};\n\nImageOutputCheckbox.propTypes = {\n  input: PropTypes.array,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ),\n};\n\nexport default ImageOutputCheckbox;\n","import React, { Fragment } from 'react';\nimport {\n  FormGroup,\n  TextArea,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst SSHInputField = (props) => {\n  const { input: sshKeyInput, meta } = useFieldApi({\n    name: 'credentials',\n    ...props,\n  });\n  return (\n    <FormGroup\n      label=\"SSH key\"\n      helperTextInvalid={meta.error}\n      validated={meta.error && meta.touched ? 'error' : 'default'}\n      isRequired\n      helperText={\n        <Fragment>\n          <Text component={TextVariants.small}>\n            <Text\n              target=\"_blank\"\n              href=\"https://en.wikipedia.org/wiki/Secure_Shell_Protocol\"\n              isVisitedLink\n              component={TextVariants.a}\n            >\n              Learn more about SSH keys\n              <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            </Text>\n          </Text>\n        </Fragment>\n      }\n    >\n      <TextArea\n        className=\"pf-u-h-25vh\"\n        id=\"credentials\"\n        placeholder=\"Paste your public SSH key\"\n        {...sshKeyInput}\n      />\n    </FormGroup>\n  );\n};\n\nexport default SSHInputField;\n","/* eslint-disable react/display-name */\nimport React from 'react';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport { componentMapper } from '@data-driven-forms/pf4-component-mapper';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport Review from './form/ReviewStep';\nimport Packages from './form/Packages';\nimport RegistrationCreds from './form/RegistrationCreds';\nimport ImageOutputCheckbox from './form/ImageOutputCheckbox';\nimport SSHInputField from './form/SSHInputField';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { registrationCredsValidator } from './form/RegistrationCreds';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\n/**\n * Use this instead of CreateImageWizard once this PR is merged https://github.com/RedHatInsights/image-builder-frontend/pull/230\n * @returns Async component\n */\nexport const AsyncCreateImageWizard = (props) => (\n  <AsyncComponent\n    appName=\"image-builder\"\n    scope=\"image_builder\"\n    module=\"./ImageCreator\"\n    fallback={<Spinner />}\n    {...props}\n  />\n);\n\nconst CreateImageWizard = ({\n  schema,\n  onSubmit,\n  onClose,\n  customComponentMapper,\n  defaultArch,\n}) => {\n  return schema ? (\n    <FormRenderer\n      schema={schema}\n      className=\"image-builder\"\n      subscription={{ values: true }}\n      FormTemplate={(props) => (\n        <Pf4FormTemplate {...props} showFormControls={false} />\n      )}\n      onSubmit={(formValues) => onSubmit(formValues)}\n      componentMapper={{\n        ...componentMapper,\n        // wizard: WrappedWizard,\n        'registration-creds': {\n          component: RegistrationCreds,\n        },\n        'image-output-checkbox': {\n          component: ImageOutputCheckbox,\n        },\n        'ssh-input-field': {\n          component: SSHInputField,\n        },\n        review: Review,\n        'package-selector': {\n          component: Packages,\n          defaultArch,\n        },\n        ...customComponentMapper,\n      }}\n      validatorMapper={{\n        ...validatorTypes,\n        registrationCredsValidator,\n      }}\n      onCancel={onClose}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImageWizard.propTypes = {\n  schema: PropTypes.object,\n  onSubmit: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n  customComponentMapper: PropTypes.shape({\n    [PropTypes.string]: PropTypes.oneOfType([\n      PropTypes.node,\n      PropTypes.shape({\n        component: PropTypes.node,\n      }),\n    ]),\n  }),\n  defaultArch: PropTypes.string,\n};\n\nexport default CreateImageWizard;\n","export default {\n  name: 'review',\n  title: 'Review',\n  fields: [\n    {\n      name: 'review',\n      component: 'review',\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { releaseMapper } from '../../ImageManagerDetail/constants';\n\nconst PackagesLabel = () => {\n  const { getState } = useFormApi();\n  const release = getState()?.values?.release;\n  const releaseName = release !== undefined ? releaseMapper[release] : '';\n  return (\n    <TextContent>\n      <Text>\n        Add packages to your <Text component=\"b\">{releaseName}</Text> image.\n      </Text>\n    </TextContent>\n  );\n};\n\nexport default {\n  title: 'Additional packages',\n  name: 'packages',\n  nextStep: 'review',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'google-cloud-text-component',\n      label: <PackagesLabel />,\n    },\n    {\n      component: 'package-selector',\n      name: 'selected-packages',\n      label: 'Available options',\n      initialValue: [],\n      clearedValue: [],\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport {\n  imageTypeMapper,\n  releaseMapper,\n  DEFAULT_RELEASE,\n} from '../../ImageManagerDetail/constants';\n\nexport default {\n  title: 'Image output',\n  name: 'imageOutput',\n  nextStep: 'registration',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: <Text>Enter some basic information for your image.</Text>,\n    },\n    {\n      component: componentTypes.SELECT,\n      name: 'release',\n      label: 'Release',\n      options: Object.entries(releaseMapper).map(([release, releaseLabel]) => ({\n        value: release,\n        label: releaseLabel,\n      })),\n      initialValue: DEFAULT_RELEASE,\n      validate: [{ type: validatorTypes.REQUIRED }],\n      isRequired: true,\n      isDisabled: true,\n    },\n    {\n      component: 'image-output-checkbox',\n      name: 'imageType',\n      options: Object.entries(imageTypeMapper).map(\n        ([imageType, imageTypeLabel]) => ({\n          value: imageType,\n          label: imageTypeLabel,\n        })\n      ),\n      initialValue: ['rhel-edge-installer'],\n      clearedValue: [],\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport default {\n  title: 'Image details',\n  name: 'imageSetDetails',\n  nextStep: 'imageOutput',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: (\n        <Text>\n          Enter a name and description to easily identify your image later.\n        </Text>\n      ),\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Image name',\n      placeholder: 'Image name',\n      validate: [\n        { type: validatorTypes.REQUIRED },\n        {\n          type: validatorTypes.PATTERN,\n          pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-\\s]*$/,\n        },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n      ],\n      isRequired: true,\n    },\n    {\n      component: componentTypes.TEXTAREA,\n      name: 'description',\n      label: 'Description',\n      placeholder: 'Add description',\n      resizeOrientation: 'vertical',\n      validate: [{ type: validatorTypes.MAX_LENGTH, threshold: 250 }],\n    },\n  ],\n};\n","import React from 'react';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport { Text } from '@patternfly/react-core';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\n\nexport default {\n  title: 'Device registration',\n  name: 'registration',\n  nextStep: 'packages',\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: <Text>Use this to connect your device to Fleet Management.</Text>,\n    },\n    {\n      component: componentTypes.TEXT_FIELD,\n      label: 'Username',\n      placeholder: 'Enter username',\n      name: 'username',\n      validate: [\n        { type: validatorTypes.REQUIRED },\n        {\n          type: validatorTypes.PATTERN,\n          pattern: /^[A-Za-z0-9]+[A-Za-z0-9_-]*$/,\n        },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n      ],\n      isRequired: true,\n    },\n    {\n      component: 'ssh-input-field',\n      name: 'credentials',\n      validate: [\n        { type: validatorTypes.REQUIRED },\n        {\n          type: validatorTypes.PATTERN,\n          pattern: /^(ssh-(rsa|dss)|ecdsa-sha2-nistp(256|384|521)) \\S+/,\n        },\n      ],\n      isRequired: true,\n    },\n  ],\n};\n","import React, { useState, useEffect } from 'react';\nimport ImageCreator from '../../components/ImageCreator';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport {\n  registration,\n  review,\n  packages,\n  imageSetDetails,\n  imageOutput,\n} from './steps';\nimport { Spinner } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport ReviewStep from '../../components/form/ReviewStep';\nimport { createNewImage, addImageToPoll } from '../../store/actions';\nimport { CREATE_NEW_IMAGE_RESET } from '../../store/action-types';\nimport { useDispatch } from 'react-redux';\n\nconst CreateImage = ({ navigateBack }) => {\n  const [user, setUser] = useState();\n  const dispatch = useDispatch();\n  const closeAction = () => {\n    navigateBack();\n    dispatch({ type: CREATE_NEW_IMAGE_RESET });\n  };\n  useEffect(() => {\n    (async () => {\n      const userData = (await insights?.chrome?.auth?.getUser()) || {};\n      setUser(() => userData);\n    })();\n  }, []);\n\n  return user ? (\n    <ImageCreator\n      onClose={closeAction}\n      customComponentMapper={{\n        review: ReviewStep,\n      }}\n      onSubmit={(values) => {\n        const payload = {\n          ...values,\n          architecture: 'x86_64',\n        };\n        createNewImage(dispatch, payload, (data) => {\n          closeAction();\n          dispatch(\n            addImageToPoll({ name: data.value.Name, id: data.value.ID })\n          );\n        });\n      }}\n      defaultArch=\"x86_64\"\n      schema={{\n        fields: [\n          {\n            component: componentTypes.WIZARD,\n            name: 'image-builder-wizard',\n            className: 'image-builder',\n            isDynamic: true,\n            inModal: true,\n            buttonLabels: {\n              submit: 'Create image',\n            },\n            showTitles: true,\n            title: 'Create image',\n            crossroads: ['target-environment', 'release'],\n            description: 'Create RHEL for Edge image',\n            // order in this array does not reflect order in wizard nav, this order is managed inside\n            // of each step by `nextStep` property!\n            fields: [\n              imageSetDetails,\n              imageOutput,\n              registration,\n              packages,\n              review,\n            ],\n          },\n        ],\n      }}\n    />\n  ) : (\n    <Spinner />\n  );\n};\n\nCreateImage.propTypes = {\n  navigateBack: PropTypes.func,\n};\nCreateImage.defaultProps = {\n  navigateBack: () => undefined,\n};\n\nexport default CreateImage;\n"],"sourceRoot":""}