{"version":3,"file":"js/Inventory.6cda9dc6396fcece0a42.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperTextItem.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js","webpack:///./node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.mjs","webpack:///./src/components/SearchInputApi.js","webpack:///./src/Routes/Devices/AddDeviceModal.js","webpack:///./src/components/SearchInput.js","webpack:///./src/Routes/Devices/RemoveDeviceModal.js","webpack:///./src/Routes/Devices/Inventory.js","webpack:///./src/Routes/Groups/CreateGroupModal.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nexport const HelperText = (_a) => {\n    var { children, className, component = 'div', id, isLiveRegion = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"id\", \"isLiveRegion\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ id: id, className: css(styles.helperText, className) }, (isLiveRegion && { 'aria-live': 'polite' }), props), children));\n};\nHelperText.displayName = 'HelperText';\n//# sourceMappingURL=HelperText.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/HelperText/helper-text';\nimport { css } from '@patternfly/react-styles';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/esm/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nconst variantStyle = {\n    default: '',\n    indeterminate: styles.modifiers.indeterminate,\n    warning: styles.modifiers.warning,\n    success: styles.modifiers.success,\n    error: styles.modifiers.error\n};\nexport const HelperTextItem = (_a) => {\n    var { children, className, component = 'div', variant = 'default', icon, isDynamic = false, hasIcon = isDynamic, id, screenReaderText = `${variant} status` } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"variant\", \"icon\", \"isDynamic\", \"hasIcon\", \"id\", \"screenReaderText\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.helperTextItem, variantStyle[variant], isDynamic && styles.modifiers.dynamic, className), id: id }, props),\n        icon && (React.createElement(\"span\", { className: css(styles.helperTextItemIcon), \"aria-hidden\": true }, icon)),\n        hasIcon && !icon && (React.createElement(\"span\", { className: css(styles.helperTextItemIcon), \"aria-hidden\": true },\n            (variant === 'default' || variant === 'indeterminate') && React.createElement(MinusIcon, null),\n            variant === 'warning' && React.createElement(ExclamationTriangleIcon, null),\n            variant === 'success' && React.createElement(CheckCircleIcon, null),\n            variant === 'error' && React.createElement(ExclamationCircleIcon, null))),\n        React.createElement(\"span\", { className: css(styles.helperTextItemText) },\n            children,\n            isDynamic && React.createElement(\"span\", { className: \"pf-u-screen-reader\" },\n                \": \",\n                screenReaderText,\n                \";\"))));\n};\nHelperTextItem.displayName = 'HelperTextItem';\n//# sourceMappingURL=HelperTextItem.js.map","import { createIcon } from '../createIcon';\n\nexport const MinusIconConfig = {\n  name: 'MinusIcon',\n  height: 512,\n  width: 448,\n  svgPath: 'M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const MinusIcon = createIcon(MinusIconConfig);\n\nexport default MinusIcon;","import './helper-text.css';\nexport default {\n  \"helperText\": \"pf-c-helper-text\",\n  \"helperTextItem\": \"pf-c-helper-text__item\",\n  \"helperTextItemIcon\": \"pf-c-helper-text__item-icon\",\n  \"helperTextItemText\": \"pf-c-helper-text__item-text\",\n  \"modifiers\": {\n    \"indeterminate\": \"pf-m-indeterminate\",\n    \"warning\": \"pf-m-warning\",\n    \"success\": \"pf-m-success\",\n    \"error\": \"pf-m-error\",\n    \"dynamic\": \"pf-m-dynamic\"\n  },\n  \"themeDark\": \"pf-theme-dark\"\n};","import React, { useState } from 'react';\nimport {\n  HelperText,\n  HelperTextItem,\n  Select,\n  SelectOption,\n} from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport useApi from '../hooks/useApi';\nimport { getGroups } from '../api/groups';\nimport { debounce } from 'lodash';\n\nconst SelectInput = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n  const [{ data, isLoading }, fetchGroups] = useApi({ api: getGroups });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const onToggle = (isOpen) => {\n    setIsOpen(isOpen);\n  };\n\n  const updateSelection = (value) => {\n    // Update state when an option has been selected.\n    setSelected(value);\n    setIsOpen(false);\n    change('group', value);\n  };\n\n  const onSelect = (_event, selection) => {\n    if (_event) updateSelection(selection);\n  };\n\n  const clearSelection = () => {\n    setSearchTerm('');\n    fetchGroups();\n    updateSelection(null);\n  };\n\n  const onFilter = (_event, value) => {\n    /* This handler is called on input changes as well as when children change.\n       _event is null when the children change. Only update searchTerm state\n       and fetch results from the API only if there was an actual input change.\n    */\n    if (_event && value != searchTerm) {\n      setSearchTerm(value);\n      fetchGroups({ name: encodeURIComponent(value) });\n    }\n  };\n\n  const options = data?.data || [];\n  const totalCount = data?.count || 0;\n\n  return (\n    <>\n      <HelperText>\n        {!isLoading && !selected && isOpen && totalCount > options.length ? (\n          <HelperTextItem variant=\"warning\" className=\"pf-u-font-weight-bold\">\n            Over {options.length} results found. Refine your search.\n          </HelperTextItem>\n        ) : (\n          <HelperTextItem className=\"pf-u-font-weight-bold\">\n            Select a group\n          </HelperTextItem>\n        )}\n      </HelperText>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a group\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected ? selected : searchTerm}\n        isOpen={isOpen}\n        onFilter={debounce(onFilter, 300)}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click to select a group\"\n        noResultsFoundText={isLoading ? 'Loading...' : 'No results found'}\n        isInputValuePersisted={true}\n        maxHeight={'180px'}\n      >\n        {isLoading\n          ? []\n          : options?.map(({ DeviceGroup }) => (\n              <SelectOption\n                key={DeviceGroup.ID}\n                value={{\n                  toString: () => DeviceGroup.Name,\n                  groupId: DeviceGroup.ID,\n                }}\n                {...(DeviceGroup.description && {\n                  description: DeviceGroup.description,\n                })}\n              />\n            ))}\n      </Select>\n    </>\n  );\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInputApi from '../../components/SearchInputApi';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { addDevicesToGroup } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Button, Text } from '@patternfly/react-core';\n\nconst CreateGroupButton = ({ closeModal }) => (\n  <>\n    <Text>Or</Text>\n    <Button variant=\"secondary\" className=\"pf-u-w-50\" onClick={closeModal}>\n      Create Group\n    </Button>\n  </>\n);\n\nCreateGroupButton.propTypes = {\n  closeModal: PropTypes.func,\n};\n\nconst createDescription = (deviceIds) => {\n  const systemText =\n    deviceIds.length > 1 ? `${deviceIds.length} systems` : deviceIds[0].name;\n  return (\n    <Text>\n      Select a group to add <strong>{systemText} </strong> or create a new one.\n    </Text>\n  );\n};\n\nconst createSchema = (deviceIds) => ({\n  fields: [\n    {\n      component: componentTypes.PLAIN_TEXT,\n      name: 'description',\n      label: createDescription(deviceIds),\n    },\n    {\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    },\n    { component: 'create-group-btn', name: 'create-group-btn' },\n  ],\n});\n\nconst AddDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  setIsCreateGroupModalOpen,\n  reloadData,\n  deviceIds,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleAddDevices = (values) => {\n    const { group } = values;\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${group.toString()} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(group.groupId), deviceIds),\n      statusMessages\n    );\n  };\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Add to group\"\n      submitLabel=\"Add\"\n      additionalMappers={{\n        'search-input': {\n          component: SearchInputApi,\n        },\n        'create-group-btn': {\n          component: CreateGroupButton,\n          closeModal: () => {\n            setIsCreateGroupModalOpen(true);\n            setIsModalOpen(false);\n          },\n        },\n      }}\n      schema={createSchema(deviceIds)}\n      onSubmit={handleAddDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default AddDeviceModal;\n\nAddDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  setIsCreateGroupModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SelectInputApi = (props) => {\n  useFieldApi(props);\n  const { change } = useFormApi();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState(null);\n\n  const onToggle = (isOpen) => setIsOpen(isOpen);\n\n  const onSelect = (_event, selection, isPlaceholder) => {\n    if (isPlaceholder) clearSelection();\n    else {\n      setSelected(selection);\n      setIsOpen(false);\n    }\n    change('group', selection);\n  };\n\n  const clearSelection = () => {\n    setSelected(null);\n    change('group', null);\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <Select\n        variant=\"typeahead\"\n        typeAheadAriaLabel=\"Select a state\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        onClear={clearSelection}\n        selections={selected}\n        isOpen={isOpen}\n        aria-labelledby=\"typeahead-select-id-1\"\n        placeholderText=\"Type or click select group\"\n      >\n        {props.defaultOptions.map(({ DeviceGroup }, index) => (\n          <SelectOption\n            key={index}\n            value={{\n              toString: () => DeviceGroup.Name,\n              groupId: DeviceGroup.ID,\n            }}\n            {...(DeviceGroup.description && {\n              description: DeviceGroup.description,\n            })}\n          />\n        ))}\n      </Select>\n    </>\n  );\n};\n\nSelectInputApi.propTypes = {\n  defaultOptions: PropTypes.array,\n};\n\nexport default SelectInputApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport SearchInput from '../../components/SearchInput';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { removeDeviceFromGroupById } from '../../api/groups';\nimport { useDispatch } from 'react-redux';\nimport { Text } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\n\nconst removeDescription = (deviceInfo) => {\n  const { deviceGroups } = deviceInfo[0];\n\n  const systemText =\n    deviceInfo.length > 1 ? `${deviceInfo.length} systems` : deviceInfo[0].name;\n  const groupText =\n    deviceGroups.length === 1\n      ? deviceGroups[0].Name\n      : `${deviceGroups.length} groups`;\n  if (deviceGroups.length > 1) {\n    return (\n      <Text>\n        Select the group you want to remove <strong>{systemText}</strong> from.\n      </Text>\n    );\n  }\n\n  return (\n    <Text>\n      Do you want to remove <strong>{systemText} </strong> from{' '}\n      <strong>{groupText}</strong>?\n    </Text>\n  );\n};\n\nconst WarningIcon = () => (\n  <ExclamationTriangleIcon color={warningColor.value} />\n);\n\nconst createSchema = (deviceInfo) => {\n  const schema = {\n    fields: [\n      {\n        component: componentTypes.PLAIN_TEXT,\n        name: 'description',\n        label: removeDescription(deviceInfo),\n      },\n    ],\n  };\n\n  if (deviceInfo[0].deviceGroups.length > 1) {\n    schema.fields.push({\n      component: 'search-input',\n      name: 'group',\n      label: 'Select a group',\n      isRequired: true,\n      validate: [{ type: validatorTypes.REQUIRED }],\n    });\n  }\n\n  return schema;\n};\n\nconst RemoveDeviceModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  reloadData,\n  deviceInfo,\n}) => {\n  const dispatch = useDispatch();\n  const { deviceGroups } = deviceInfo[0];\n\n  const handleRemoveDevices = (values) => {\n    const hasManyGroups = deviceGroups.length > 1;\n    const groupName = hasManyGroups\n      ? values.group.toString()\n      : deviceGroups[0].Name;\n    const groupId = hasManyGroups ? values.group.groupId : deviceGroups[0].ID;\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${deviceInfo[0].name} has been removed from ${groupName} successfully`,\n      },\n      onError: {\n        title: 'Error',\n        description: 'Failed to remove system from group',\n      },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => removeDeviceFromGroupById(groupId, deviceInfo[0].ID),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      variant=\"danger\"\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Remove from group\"\n      submitLabel=\"Remove\"\n      titleIconVariant={WarningIcon}\n      additionalMappers={{\n        'search-input': {\n          component: SearchInput,\n          defaultOptions:\n            deviceGroups.map((group) => ({\n              DeviceGroup: group,\n            })) || [],\n        },\n      }}\n      schema={createSchema(deviceInfo)}\n      onSubmit={handleRemoveDevices}\n      reloadData={reloadData}\n    />\n  );\n};\n\nexport default RemoveDeviceModal;\n\nRemoveDeviceModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceInfo: PropTypes.array,\n};\n","import React, { useState, Suspense } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport DeviceTable from './DeviceTable';\nimport AddDeviceModal from './AddDeviceModal';\nimport RemoveDeviceModal from './RemoveDeviceModal';\nimport CreateGroupModal from '../Groups/CreateGroupModal';\nimport useApi from '../../hooks/useApi';\nimport { getInventory } from '../../api/devices';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(/* webpackChunkName: \"UpdateDeviceModal\" */ './UpdateDeviceModal')\n);\n\nconst Inventory = () => {\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const [response, fetchDevices] = useApi({\n    api: getInventory,\n    tableReload: true,\n  });\n  const { data, isLoading, hasError } = response;\n  const [isAddDeviceModalOpen, setIsAddDeviceModalOpen] = useState(false);\n  const [isRemoveDeviceModalOpen, setIsRemoveDeviceModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState([]);\n  const [checkedDeviceIds, setCheckedDeviceIds] = useState([]);\n  const [isRowSelected, setIsRowSelected] = useState(false);\n  const [hasModalSubmitted, setHasModalSubmitted] = useState(false);\n  const [isCreateGroupModalOpen, setIsCreateGroupModalOpen] = useState(false);\n\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n    imageData: null,\n  });\n\n  const handleAddDevicesToGroup = (ids, isRow) => {\n    setIsAddDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const handleRemoveDevicesFromGroup = (ids, isRow) => {\n    setIsRemoveDeviceModalOpen(true);\n    isRow ? setDeviceId(ids) : setCheckedDeviceIds(ids);\n    setIsRowSelected(isRow);\n  };\n\n  const canBeUpdated = () => {\n    let canBeUpdated = false;\n    if (checkedDeviceIds.length > 0) {\n      let initialImage = checkedDeviceIds[0].imageSetId;\n      for (let device of checkedDeviceIds) {\n        if (device.imageSetId !== initialImage) {\n          canBeUpdated = false;\n          break;\n        }\n        if (\n          (!canBeUpdated &&\n            device.updateImageData &&\n            device.deviceStatus === 'updateAvailable') ||\n          device.deviceStatus === 'unresponsive' ||\n          device.deviceStatus === 'error'\n        ) {\n          canBeUpdated = true;\n        }\n      }\n    }\n    return canBeUpdated;\n  };\n\n  const handleUpdateSelected = () => {\n    setUpdateModal((prevState) => ({\n      ...prevState,\n      deviceData: checkedDeviceIds.map((device) => ({\n        id: device.id,\n        display_name: device.display_name,\n        deviceStatus: device.deviceStatus,\n      })),\n      imageData: { imageName: checkedDeviceIds[0].imageName },\n      imageSetId: checkedDeviceIds[0].imageSetId,\n      isOpen: true,\n    }));\n  };\n\n  const reloadData = async () => {\n    await fetchDevices();\n    setHasModalSubmitted(true);\n  };\n\n  return (\n    <>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Systems\" />\n      </PageHeader>\n      <section className=\"edge-devices pf-l-page__main-section pf-c-page__main-section\">\n        <DeviceTable\n          isSystemsView={true}\n          data={data?.data?.devices}\n          count={data?.count}\n          isLoading={isLoading}\n          hasError={hasError}\n          setUpdateModal={setUpdateModal}\n          updateModal={updateModal}\n          handleAddDevicesToGroup={handleAddDevicesToGroup}\n          handleRemoveDevicesFromGroup={handleRemoveDevicesFromGroup}\n          handleUpdateSelected={handleUpdateSelected}\n          hasCheckbox={true}\n          selectedItems={setCheckedDeviceIds}\n          selectedItemsUpdateable={canBeUpdated()}\n          kebabItems={[\n            {\n              isDisabled: !(checkedDeviceIds.length > 0),\n              title: 'Add to group',\n              onClick: () =>\n                handleAddDevicesToGroup(\n                  checkedDeviceIds.map((device) => ({\n                    ID: device.deviceID,\n                    name: device.display_name,\n                  })),\n                  false\n                ),\n            },\n          ]}\n          hasModalSubmitted={hasModalSubmitted}\n          setHasModalSubmitted={setHasModalSubmitted}\n          fetchDevices={fetchDevices}\n        />\n      </section>\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={reloadData}\n          />\n        </Suspense>\n      )}\n      {isAddDeviceModalOpen && (\n        <AddDeviceModal\n          isModalOpen={isAddDeviceModalOpen}\n          setIsModalOpen={setIsAddDeviceModalOpen}\n          setIsCreateGroupModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isCreateGroupModalOpen && (\n        <CreateGroupModal\n          isModalOpen={isCreateGroupModalOpen}\n          setIsModalOpen={setIsCreateGroupModalOpen}\n          reloadData={reloadData}\n          deviceIds={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n      {isRemoveDeviceModalOpen && (\n        <RemoveDeviceModal\n          isModalOpen={isRemoveDeviceModalOpen}\n          setIsModalOpen={setIsRemoveDeviceModalOpen}\n          reloadData={reloadData}\n          deviceInfo={isRowSelected ? deviceId : checkedDeviceIds}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Inventory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport Modal from '../../components/Modal';\nimport {\n  createGroup,\n  addDevicesToGroup,\n  validateGroupName,\n} from '../../api/groups';\nimport { nameValidator } from '../../utils';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { useDispatch } from 'react-redux';\n\nconst asyncGroupNameValidation = async (value = '') => {\n  // do not fire validation request for empty name\n  if (value.length === 0) {\n    return undefined;\n  }\n  const resp = await validateGroupName(value);\n  if (resp.data.isValid) {\n    // async validator has to throw error, not return it\n    throw 'Group name already exists';\n  }\n};\n\nconst validatorMapper = {\n  groupName: () => asyncGroupNameValidation,\n};\n\nconst createGroupSchema = {\n  fields: [\n    {\n      component: componentTypes.TEXT_FIELD,\n      name: 'name',\n      label: 'Group name',\n      helperText:\n        'Can only contain letters, numbers, spaces, hyphens ( - ), and underscores( _ ).',\n      isRequired: true,\n      autoFocus: true,\n      validate: [\n        // async validator has to be first in the list\n        { type: 'groupName' },\n        { type: validatorTypes.REQUIRED },\n        { type: validatorTypes.MAX_LENGTH, threshold: 50 },\n        nameValidator,\n      ],\n    },\n  ],\n};\n\nconst CreateGroupModal = ({\n  isModalOpen,\n  setIsModalOpen,\n  deviceIds,\n  reloadData,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleCreateGroup = (values) => {\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `${values.name} has been created successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to create group' },\n    };\n    return apiWithToast(dispatch, () => createGroup(values), statusMessages);\n  };\n\n  const handleAddDevicesToNewGroup = async (values) => {\n    const { ID } = await handleCreateGroup(values);\n\n    const statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: `System(s) have been added to ${values.name} successfully`,\n      },\n      onError: { title: 'Error', description: 'Failed to add system to group' },\n    };\n\n    apiWithToast(\n      dispatch,\n      () => addDevicesToGroup(parseInt(ID), deviceIds),\n      statusMessages\n    );\n  };\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      closeModal={() => setIsModalOpen(false)}\n      title=\"Create group\"\n      submitLabel=\"Create\"\n      schema={createGroupSchema}\n      onSubmit={deviceIds ? handleAddDevicesToNewGroup : handleCreateGroup}\n      reloadData={reloadData}\n      validatorMapper={validatorMapper}\n    />\n  );\n};\n\nexport default CreateGroupModal;\n\nCreateGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  setIsModalOpen: PropTypes.func,\n  reloadData: PropTypes.func,\n  deviceIds: PropTypes.array,\n};\n"],"names":["HelperText","_a","children","className","component","id","isLiveRegion","props","__rest","Component","Object","assign","displayName","variantStyle","default","indeterminate","warning","success","error","HelperTextItem","variant","icon","isDynamic","hasIcon","screenReaderText","MinusIconConfig","name","height","width","svgPath","yOffset","xOffset","MinusIcon","useFieldApi","change","useFormApi","useState","isOpen","setIsOpen","selected","setSelected","useApi","api","getGroups","data","isLoading","fetchGroups","searchTerm","setSearchTerm","updateSelection","value","options","totalCount","count","length","Select","typeAheadAriaLabel","onToggle","onSelect","_event","selection","onClear","selections","onFilter","encodeURIComponent","placeholderText","noResultsFoundText","isInputValuePersisted","maxHeight","map","DeviceGroup","SelectOption","key","ID","toString","Name","groupId","description","CreateGroupButton","closeModal","Text","Button","onClick","propTypes","PropTypes","createDescription","deviceIds","systemText","createSchema","fields","componentTypes","label","isRequired","validate","type","validatorTypes","AddDeviceModal","isModalOpen","setIsModalOpen","setIsCreateGroupModalOpen","reloadData","dispatch","useDispatch","Modal","title","submitLabel","additionalMappers","SearchInputApi","schema","onSubmit","values","group","statusMessages","onSuccess","onError","apiWithToast","addDevicesToGroup","parseInt","SelectInputApi","clearSelection","isPlaceholder","defaultOptions","index","removeDescription","deviceInfo","deviceGroups","groupText","WarningIcon","color","warningColor","push","RemoveDeviceModal","titleIconVariant","SearchInput","hasManyGroups","groupName","removeDeviceFromGroupById","UpdateDeviceModal","React","history","useHistory","pathname","useLocation","getInventory","tableReload","response","fetchDevices","hasError","isAddDeviceModalOpen","setIsAddDeviceModalOpen","isRemoveDeviceModalOpen","setIsRemoveDeviceModalOpen","deviceId","setDeviceId","checkedDeviceIds","setCheckedDeviceIds","isRowSelected","setIsRowSelected","hasModalSubmitted","setHasModalSubmitted","isCreateGroupModalOpen","deviceData","imageData","updateModal","setUpdateModal","handleAddDevicesToGroup","ids","isRow","PageHeader","PageHeaderTitle","DeviceTable","isSystemsView","devices","handleRemoveDevicesFromGroup","handleUpdateSelected","prevState","device","display_name","deviceStatus","imageName","imageSetId","hasCheckbox","selectedItems","selectedItemsUpdateable","canBeUpdated","initialImage","updateImageData","kebabItems","isDisabled","deviceID","Suspense","fallback","Bullseye","Spinner","navigateBack","refreshTable","CreateGroupModal","asyncGroupNameValidation","undefined","validateGroupName","isValid","validatorMapper","createGroupSchema","helperText","autoFocus","threshold","nameValidator","handleCreateGroup","createGroup","handleAddDevicesToNewGroup"],"sourceRoot":""}