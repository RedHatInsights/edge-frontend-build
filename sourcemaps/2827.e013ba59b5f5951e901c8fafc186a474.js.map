{"version":3,"file":"js/2827.e29a52c4cd29ce191b81.js","mappings":"6ZAKMA,EAAmB,SAAH,OAAMC,EAAK,EAALA,MAAOC,EAAO,EAAPA,QAAO,OACxC,oCACE,8BAAOD,GACP,kBAACE,EAAA,EAAO,CACNC,cAAe,6BAAMH,GACrBI,YAAa,6BAAMH,IAEnB,kBAACI,EAAA,GAAM,CACLC,QAAQ,QACR,kCAA0BN,GAC1BO,UAAU,gDAEV,kBAAC,KAA0B,QAG9B,EAGLR,EAAiBS,UAAY,CAC3BR,MAAOS,IAAAA,OACPR,QAASQ,IAAAA,QAGX,U,qCCtBMC,EAAkB,SAAH,GAAmB,IAAbC,EAAM,EAANA,OACzB,MAAe,UAAXA,EAEA,oCACE,kBAAC,KAAe,CAACC,MAAM,QAAQL,UAAU,eACzC,0BAAMA,UAAU,0BAAyB,WAKhC,QAAXI,EAEA,oCACE,kBAAC,KAAqB,CAACC,MAAM,MAAML,UAAU,eAC7C,0BAAMA,UAAU,yBAAwB,wBAK5C,oCACE,kBAAC,KAAc,CAACA,UAAU,eAC1B,8BAAM,sBAGZ,EAEAG,EAAgBF,UAAY,CAC1BG,OAAQF,IAAAA,QAGV,U,0BC3BMI,EAAqB,SAACC,GAAK,OAC/B,kBAACC,EAAA,GAAc,QACbC,QAAQ,YACRC,OAAO,uBACPC,SAAU,kBAACC,EAAA,EAAS,CAACC,aAAc,KAC/BN,GACJ,EAGEO,EAAa,SAACP,GAAK,OACvB,kBAACC,EAAA,GAAc,QACbC,QAAQ,YACRC,OAAO,eACPC,SAAU,kBAACC,EAAA,EAAS,CAACC,aAAc,KAC/BN,GACJ,EAGEQ,EAAsB,SAACR,GAAK,OAChC,kBAACC,EAAA,GAAc,QACbC,QAAQ,YACRC,OAAO,wBACPC,SAAU,kBAACC,EAAA,EAAS,CAACC,aAAc,KAC/BN,GACJ,EAGES,EAAW,SAACT,GAAK,OACrB,kBAACC,EAAA,GAAc,QACbC,QAAQ,YACRC,OAAO,aACPC,SAAU,kBAACC,EAAA,EAAS,CAACC,aAAc,KAC/BN,GACJ,EAGEU,EAAiB,SAACV,GAAK,OAC3B,kBAACC,EAAA,GAAc,QACbC,QAAQ,YACRC,OAAO,mBACPC,SAAU,kBAACC,EAAA,EAAS,CAACC,aAAc,KAC/BN,GACJ,EAGEW,EAAqB,SAACX,GAAK,OAC/B,kBAACC,EAAA,GAAc,QACbC,QAAQ,YACRC,OAAO,uBACPC,SAAU,kBAACC,EAAA,EAAS,CAACC,aAAc,KAC/BN,GACJ,EAGEY,EAAuBC,IAAAA,MAAW,kBACtC,+BAEC,IAGGC,EAA4B,SAACd,GACjC,IAAMe,GAAQC,EAAAA,EAAAA,YACd,OACE,kBAAC,EAAAC,SAAQ,CAACb,SAAS,IAChB,IACD,kBAACO,GAAkB,UAAKX,EAAK,CAAEe,MAAOA,KAG5C,EAEMG,EAA8B,SAAClB,GACnC,IAAMe,GAAQC,EAAAA,EAAAA,YACd,OACE,kBAAC,EAAAC,SAAQ,CAACb,SAAS,IAChB,IACD,kBAACQ,GAAoB,UAAKZ,EAAK,CAAEe,MAAOA,KAG9C,EAEMI,EAAkB,SAACnB,GACvB,IAAMe,GAAQC,EAAAA,EAAAA,YACd,OACE,kBAAC,EAAAC,SAAQ,CAACb,SAAS,IACjB,kBAACK,GAAQ,UAAKT,EAAK,CAAEe,MAAOA,KAGlC,EAEMK,EAA6B,SAACpB,GAClC,IAAMe,GAAQC,EAAAA,EAAAA,YACd,OACE,kBAAC,EAAAC,SAAQ,CAACb,SAAS,IACjB,kBAACI,GAAmB,UAAKR,EAAK,CAAEqB,kBAAkB,EAAMN,MAAOA,KAGrE,EAEMO,EAAwB,SAACtB,GAC7B,IAAMe,GAAQC,EAAAA,EAAAA,YAGd,OACE,kBAAC,EAAAC,SAAQ,CAACb,SAAS,IACjB,kBAACM,GAAc,UACTV,EAAK,CACTuB,MAAO,CACL,CACErC,MAAO,kCACPsC,MACE,kBAACC,EAAA,EAAO,CAACtC,QAAQ,0BACf,kBAAC,KAA0B,CAACM,UAAU,wCAK9CsB,MAAOA,KAIf,EAEMW,EAAoB,SAAC1B,GACzB,IAAMe,GAAQC,EAAAA,EAAAA,YACNW,GAAoBC,EAAAA,EAAAA,cAAY,YAA4B,MAAzBC,EAAkB,EAAlBA,mBACzC,MAAO,CACLF,gBAAiBE,SAAiC,QAAf,EAAlBA,EAAoBC,qBAAa,WAAf,EAAlB,EAAmCC,iBAExD,IAJQJ,gBAMR,OACE,kBAAC,EAAAV,SAAQ,CAACb,SAAS,IACjB,kBAACG,GAAU,UACLP,EAAK,CACTe,MAAOA,EACPiB,SAAS,EACTC,YAAY,EACZC,UAAU,EACVC,aAAa,EACbC,QAAQ,EACRC,QAAQ,EACRd,MAAO,CACL,CACErC,MACE,kBAAC,EAAgB,CACfA,MAAM,mBACNC,QAAQ,iDAGZqC,MAAO,kBAAC,EAAe,CAAC3B,OAAQ8B,SAM5C,EAyBA,QAvB8B,WAC5B,IAAMW,GAAmBV,EAAAA,EAAAA,cACvB,gBAAGW,EAAkB,EAAlBA,mBAAkB,OAAOA,aAAkB,EAAlBA,EAAoBD,gBAAgB,IAG5DvB,GAAQC,EAAAA,EAAAA,YAEd,OACE,kBAAC,EAAAC,SAAQ,CAACb,SAAS,IACjB,kBAACL,EAAkB,CACjBgB,MAAOA,EACPuB,iBAAkBA,EAClBZ,kBAAmBA,EACnBN,2BAA4BN,EAC5BK,gBAAiBD,EACjBJ,0BAA2BK,EAC3BqB,yBAA0BpB,EAC1BE,sBAAuBA,IAI/B,E,qkBCxLA,IAcamB,GAAeC,E,QAAAA,IAAiB,CAC3CC,sBAfmB,SAACC,GACpB,OAAO,EAAP,KACKA,GAAK,IACRC,QAAQ,EACRC,WAAY,CACV,CACE5D,MAAO,sBACP6D,KAAM,sBACNC,UAAWC,KAInB,I,yqBCLA,IA4BMC,GAAmB,SAAH,GAKhB,IAJJC,EAAU,EAAVA,WACAC,EAAc,EAAdA,eACAC,EAAO,EAAPA,QACAC,EAAS,EAATA,UAEQC,GAAaC,EAAAA,EAAAA,MAAbD,SACAE,GAAgBC,EAAAA,EAAAA,YAAWC,GAAAA,GAA3BF,YACR,GAA4CG,EAAAA,EAAAA,UAAS,CACnDC,QAAQ,EACRR,QAAS,KACTS,SAAU,IACV,eAJKC,EAAc,KAAEC,EAAiB,KAKxC,GAAwBJ,EAAAA,EAAAA,UAAS,MAAK,eAA/BK,EAAI,KAAEC,EAAO,KACpB,GAA4CN,EAAAA,EAAAA,UAAS,MAAK,eAAnDO,EAAc,KAAEC,EAAiB,KACxC,GAAsCR,EAAAA,EAAAA,UAAS,WAAU,eAAlDS,EAAW,KAAEC,EAAc,MAElCC,EAAAA,EAAAA,YAAU,WACRP,GAAkB,SAACQ,GAAS,gBAAWA,GAAS,IAAEnB,QAASA,GAAO,GACpE,GAAG,CAACA,KAEJkB,EAAAA,EAAAA,YAAU,YACR,iBAAC,iGACMpB,EAAY,CAAF,gDAOd,OAHKsB,EAAS,CACbC,GAAI,OACJC,EAAG,CAAED,GAAIvB,SAAqB,QAAX,EAAVA,EAAYyB,iBAAS,OAAO,QAAP,EAArB,EAAuBC,aAAK,WAAlB,EAAV,EAA8BC,aACxC,UACkBC,EAAAA,GAAAA,IAAYN,GAAO,OAAhCO,EAAO,EAAH,KACVZ,EAAkBY,SAAU,QAAN,EAAJA,EAAMC,YAAI,OAAK,QAAL,EAAV,EAAa,UAAE,WAAX,EAAJ,EAAiBC,QAAQ,0CAV7C,EAYF,GAAG,CAAC/B,KAEJoB,EAAAA,EAAAA,YAAU,WAAM,OACbN,UAAAA,EAAMkB,aACJlB,SAAU,QAAN,EAAJA,EAAMmB,YAAI,QAAV,EAAYC,SACbrB,GAAkB,SAACQ,GAAS,sBACvBA,GAAS,IACZV,SAAUG,SAAU,QAAN,EAAJA,EAAMgB,YAAI,WAAN,EAAJ,EAAYK,QAAM,IAGhChB,GAAe,SAACE,GAAS,OAxEN,SACrBP,EACAd,EACAgB,EACAd,EACAmB,GACG,cACH,OAAIP,SAAAA,EAAMkB,WAAalB,SAAU,QAAN,EAAJA,EAAMmB,YAAI,OAAV,EAAYC,SAAWlC,EACrCqB,IAEJP,SAAU,QAAN,EAAJA,EAAMgB,YAAI,OAAV,EAAYK,QAAS,IAAMjC,EACvB,UAGuC,cAA9CF,SAAiC,QAAvB,EAAVA,EAAYoC,mBAAmB,UAAE,WAAvB,EAAV,EAAmCL,SACW,aAA9C/B,SAAiC,QAAvB,EAAVA,EAAYoC,mBAAmB,UAAE,WAAvB,EAAV,EAAmCL,QAE5B,iBAEL/B,SAAkB,QAAR,EAAVA,EAAYqC,cAAM,OAAlB,EAAoBC,gBACf,eAEc,aAAnBtB,GAAoD,YAAnBA,EAC5B,gBAEF,aACT,CA+CMuB,CAAezB,EAAMd,EAAYgB,EAAgBd,EAASmB,EAAU,GAExE,GAAG,CAACP,EAAMd,EAAYgB,EAAgBd,IAEtC,IAcMsC,EAAS,CACbC,YACE,kBAACC,GAAA,EAAK,CACJpG,UAAU,aACVD,QAAQ,OACRsG,UAAQ,EACR5G,MAAM,uCACN6G,YACE,kBAACxG,EAAA,GAAM,CACLE,UAAU,aACVuG,SAAO,EACPC,QAzBsB,WAC9BjC,GAAkB,SAACkC,GAAQ,gBACtBA,GAAQ,IACXrC,QAAQ,GAAI,GAEhB,GAqBS,kBAMPsC,cACE,kBAACN,GAAA,EAAK,CACJpG,UAAU,aACV2G,WAAY,kBAAC,MAAc,MAC3B5G,QAAQ,OACRsG,UAAQ,EACR5G,MAAM,gFAGVmH,aACE,kBAACR,GAAA,EAAK,CACJpG,UAAU,aACVD,QAAQ,UACRsG,UAAQ,EACR5G,MAAM,uFACN6G,YACE,kBAACxG,EAAA,GAAM,CACLE,UAAU,aACVuG,SAAO,EACPC,QA5CuB,WAC/B7C,GAAe,SAAC8C,GAAQ,gBACnBA,GAAQ,IACXrC,QAAQ,GAAI,GAEhB,GAwCS,mBAMPyC,eACE,kBAACT,GAAA,EAAK,CACJpG,UAAU,aACV2G,WAAY,kBAAC,MAAc,MAC3B5G,QAAQ,OACRsG,UAAQ,EACR5G,MAAM,qDAGVqH,QAAS,sCAGX,OACE,oCACE,6BAAS9G,UAAU,6DAChBkG,EAAOtB,GACR,kBAACpE,EAAA,EAAc,CACbC,QAAQ,gBACRC,OAAO,iBACPsD,YAAaA,EACb+C,oBAAkB,EAClBC,OAAQ,CAAE/B,GAAInB,GACdmD,WAAW,EACXC,mBAAmB,EACnBC,kBAAkB,EAClBC,sBAAoB,EACpBC,eAAgB,CAAC,WAAY,cAAe,SAAU,cACtDC,QAAS,CACP,SACA,gBACA,gBACA,SACA,cAEFC,aAAc,SAACC,GACb/C,EAAQ+C,EACV,KAGHlD,EAAeF,QACd,kBAACqD,GAAA,QAAgB,CACfnD,eAAgBA,EAChBC,kBAAmBA,EACnBV,UAAWA,IAKrB,EAEAJ,GAAiBxD,UAAY,CAC3B2D,QAAS1D,IAAAA,OACTwD,WAAYxD,IAAAA,OACZyD,eAAgBzD,IAAAA,KAChB2D,UAAW3D,IAAAA,MAGb,YCpMA,IAAMwH,GAAmB,SAAH,GAKhB,IAJJrF,EAAa,EAAbA,cACAuB,EAAO,EAAPA,QACAD,EAAc,EAAdA,eACAE,EAAS,EAATA,UAEA,GAAwCM,EAAAA,EAAAA,UAAS,GAAE,eAA5CwD,EAAY,KAAEC,EAAe,KAGpC,OACE,kBAACC,GAAA,EAAI,CACH7H,UAAU,aACV8H,UAAWH,EACXI,SANmB,SAACC,EAAQC,GAAQ,OAAKL,EAAgBK,EAAS,GAQlE,kBAACC,GAAA,EAAG,CAACC,SAAU,EAAG1I,MAAO,kBAAC2I,GAAAC,EAAY,KAAC,YACrC,6BAASrI,UAAU,mDACjB,kBAAC,EAAqB,QAG1B,kBAACkI,GAAA,EAAG,CAACC,SAAU,EAAG1I,MAAO,kBAAC2I,GAAAC,EAAY,KAAC,kBACrC,kBAACC,GAAgB,CACf5E,WAAYrB,EACZsB,eAAgBA,EAChBC,QAASA,EACTC,UAAWA,KAKrB,EAEA6D,GAAiBzH,UAAY,CAC3B2D,QAAS1D,IAAAA,OACTmC,cAAenC,IAAAA,OACfyD,eAAgBzD,IAAAA,KAChB2D,UAAW3D,IAAAA,MAGb,Y,mpBCjBA,IAAMqI,GAAoBnH,IAAAA,MAAW,kBACnC,0GAEC,IA6NH,SA1NqB,WAAM,sBACzB,GAA0CoH,EAAAA,GAAAA,eACxC,CACE/H,QAAS,YACTgI,MAAO,YACP/H,OAAQ,wBAEV,CAAC,GANe0B,GAOjB,YAPmC,WAQ9BsG,GAAUC,EAAAA,EAAAA,MACRC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA8B7E,EAAAA,EAAAA,MAAtBD,EAAQ,EAARA,SAAUgF,EAAO,EAAPA,QAClB,GAA8B3E,EAAAA,EAAAA,UAAS,MAAK,eAArCP,EAAO,KAAEmF,EAAU,KAClB/E,GAAgBC,EAAAA,EAAAA,YAAWC,GAAAA,GAA3BF,YACFgF,GAA2B7G,EAAAA,EAAAA,cAC/B,SAACb,GAAK,aAAKA,SAAoB,QAAf,EAALA,EAAO2H,qBAAa,WAAf,EAAL,EAAsB7F,MAAM,IAEnC4D,GAAS7E,EAAAA,EAAAA,cAAY,gBAAG8G,EAAa,EAAbA,cAAa,OAAOA,aAAa,EAAbA,EAAejC,MAAM,IAEvE,GAAkC7C,EAAAA,EAAAA,YAAU,eAArC+E,EAAS,KAAEC,EAAY,KAC9B,GAAsChF,EAAAA,EAAAA,UAAS,CAC7CC,QAAQ,EACRV,WAAY,OACZ,eAHK0F,EAAW,KAAEzF,EAAc,KAIlC,GAA0DQ,EAAAA,EAAAA,WAAS,GAAK,eAAjEkF,EAAqB,KAAEC,EAAwB,KACtD,GAA4BnF,EAAAA,EAAAA,WAAS,GAAM,eAApCoF,GAAM,KAAE1F,GAAS,KAExB,IAAsC2F,EAAAA,GAAAA,GAAO,CAC3CC,IAAK,kBACHC,EAAAA,GAAAA,IAAa,CACXC,MAAO,CACLC,KAAM9F,IAER,IACJ,iBAPKJ,GAAU,MAAEmG,GAAe,MASlC,IAAoC,QAAf,EAAAnG,GAAW8B,YAAI,OAAM,QAAN,EAAf,EAAiBA,YAAI,WAAN,EAAf,EAAuBsE,UAAW,GAAhDC,IAAkD,aAAxC,GACjB,GAMIA,IAAc,CAAC,EALTC,GAAgB,GAAxBvE,OACiBwE,GAAe,GAAhCjE,gBACkBkE,GAAY,GAA9BC,iBACUC,GAAQ,GAAlBC,SACcC,GAAY,GAA1BC,aAGIC,GAAY1B,EACdwB,UAA8D,QAAlD,EAAZA,GAAcG,MAAK,SAACC,GAAK,OAAKA,EAAMC,GAAGC,aAAe9B,CAAO,WAAC,WAAlD,EAAZ,EAAgE+B,KAChE,KAEEC,IAAeC,EAAAA,GAAAA,GACnBf,GACAC,GACAC,IAgCF,OA7BApF,EAAAA,EAAAA,YAAU,WAAM,QACdkG,SAASC,OAAOC,eAAe,aAChB,QAAf,EAAAF,SAASC,cAAM,OAAkB,QAAlB,EAAf,EAAiBE,wBAAgB,OAAjC,UAAoC,GACpCH,SAASC,OAAOG,UAAU,gBAC5B,GAAG,KAEHtG,EAAAA,EAAAA,YAAU,YACR,iBAAC,2FACMkC,SAAAA,EAAQqE,aAAc,CAAF,iEAGAC,EAAAA,GAAAA,IAAUxH,GAAS,OAAtCyH,EAAa,EAAH,KAChBpC,EAAaoC,GACbjC,GAAyB,GACzB3F,GAAe,SAACoB,GAAS,wBACpBA,GAAS,IACZrB,WAAY,CACV,CACE2H,aAAcrE,EAAOqE,aACrBpG,GAAI+B,EAAO/B,GACX6F,aAAcA,KAGlBU,WAAYD,SAAqB,QAAX,EAAVA,EAAYpG,iBAAS,OAAO,QAAP,EAArB,EAAuBC,aAAK,WAAlB,EAAV,EAA8BC,YAAU,IAEtD0D,EAAWwC,SAAqB,QAAX,EAAVA,EAAYpG,iBAAS,OAAO,QAAP,EAArB,EAAuBC,aAAK,WAAlB,EAAV,EAA8BuF,IAAI,0CAlB/C,EAoBF,GAAG,CAAC3D,EAAQuC,KAELnH,EACL,kBAACqJ,EAAA,EAAa,CACZC,aAAW,EACXC,UAAQ,EACRC,OAAQ,YAAyB,IAAtBC,EAAe,EAAfA,gBACT7H,IAAc8H,SAAS,IACrB1J,mBAAAA,GACGyJ,EAAgB7I,IAEvB,EACA+I,YAAajI,GAEb,kBAACkI,EAAA,EAAU,KACPxB,GAYA,kBAACyB,EAAA,EAAU,CAACC,OAAO,eACjB,kBAACC,EAAA,EAAc,KACb,kBAAC,KAAI,CAACC,GAAIC,GAAAA,EAAAA,iBAAuB,WAEnC,kBAACF,EAAA,EAAc,KACb,kBAAC,KAAI,CAACC,GAAE,UAAKC,GAAAA,EAAAA,gBAAqB,YAAIvD,IACnC0B,KAGL,kBAAC2B,EAAA,EAAc,CAACG,UAAQ,GACtB,yBAAKtM,UAAU,6CACZgH,aAAM,EAANA,EAAQqE,eAAgB,kBAACkB,EAAA,EAAQ,CAACC,KAAMC,EAAAA,EAAAA,QAtB/C,kBAACR,EAAA,EAAU,CAACC,OAAO,gBACjB,kBAACC,EAAA,EAAc,KACb,kBAAC,KAAI,CAACC,GAAIC,GAAAA,EAAAA,WAAiB,YAE7B,kBAACF,EAAA,EAAc,CAACG,UAAQ,GACtB,yBAAKtM,UAAU,6CACZgH,aAAM,EAANA,EAAQqE,eAAgB,kBAACkB,EAAA,EAAQ,CAACC,KAAMC,EAAAA,EAAAA,QAqBjD,kBAACC,EAAA,EAAmB,CAClB/L,SAAS,GACTgM,YAAY,EACZC,QAAS,CACP,CACEnN,MAAO,SACPoN,WACiD,cAA/C3D,SAA6B,QAApB,EAATA,EAAWpD,0BAAkB,OAAK,QAAL,EAA7B,EAAgC,UAAE,WAAzB,EAAT,EAAoCL,SACW,aAA/CyD,SAA6B,QAApB,EAATA,EAAWpD,0BAAkB,OAAK,QAAL,EAA7B,EAAgC,UAAE,WAAzB,EAAT,EAAoCL,WACnCyD,SAAoB,QAAX,EAATA,EAAW/D,iBAAS,OAAkB,QAAlB,EAApB,EAAsB2H,wBAAgB,OAAtC,EAAwCjH,QAAS,EACpDW,QAAS,WACPkC,EAAQqE,KAAK,CACXnE,SAAU,GAAF,OAAKA,EAAQ,WACrBoE,OAAQ,sBAEZ,IAGJC,UAAQ,EACRC,eAAa,EACbnB,YAAajI,IAGduF,EACC,kBAACkD,EAAA,EAAQ,CAACC,KAAMC,EAAAA,EAAAA,KACG,UAAjB3B,IAA6C,iBAAjBA,GAC9B,kBAACqC,GAAA,EAAkB,CACjB/C,SAAUA,GACVgD,OAAQrD,GACRsD,SAAU,QACVC,aAAczD,IAEd,kBAACpE,GAAA,EAAM,CACLR,GAAI,gBACJsI,KACmB,UAAjBzC,GACI,6BACAA,GAEN0C,QAAQ,EACRC,SAAS,EACTzN,UAAU,+BAId,kBAACyF,GAAA,EAAM,CACLR,GAAI,gBACJsI,KAAMzC,GACN2C,SAAS,EACTzN,UAAU,gBAIfgJ,GACC,kBAAC,GAAgB,CACf3G,cAAe6G,EACftF,QAASA,EACTD,eAAgBA,EAChBE,UAAWA,KAGduF,EAAYhF,QACX,kBAAC,EAAA5C,SAAQ,CACPb,SACE,kBAAC+M,EAAA,EAAQ,KACP,kBAACC,EAAA,EAAO,QAIZ,kBAACpF,GAAiB,CAChBqF,aAAc,WACZlF,EAAQqE,KAAK,CAAEnE,SAAAA,IACfjF,GAAe,SAACoB,GACd,OAAO,SACFA,GAAS,IACZX,QAAQ,GAEZ,GACF,EACAT,eAAgBA,EAChByF,YAAaA,EACbyE,aAAc,kBAAMhK,IAAU,EAAK,MAM3C,kBAAC6J,EAAA,EAAQ,KACP,kBAACC,EAAA,EAAO,MAGd,C,wQCzOMG,EAAU,8BACVC,EAAU,gDACVC,EAAe,eAEfC,EAAqB,SAACC,EAAQ9N,EAAQgK,GAAQ,OAClD,6BACG8D,IAAWJ,EACR,2EACAI,IAAWH,EACX,6FACA3N,IAAW4N,EACX,2KACA,UACJ,kBAAC,IAAK,CAAChO,UAAU,cACf,kBAAC,IAAS,CAACA,UAAU,yBAAwB,aAC7C,kBAAC,IAAS,KAAC,IAAE,kBAAC,IAAU,CAACmO,KAAM/D,MAE7B,EAeF+C,EAAqB,SAAH,GAOlB,IAnBgBe,EAAQ9N,EAa5B6E,EAAE,EAAFA,GACAmI,EAAM,EAANA,OACAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAlD,EAAQ,EAARA,SACAgE,EAAQ,EAARA,SAEA,GAAkCjK,EAAAA,EAAAA,WAAS,GAAM,eAA1CkK,EAAS,KAAEC,EAAY,KACxBC,GAAWC,EAAAA,EAAAA,eAEXC,EAAiB,CACrBC,UAAW,CACT3O,QAAS,OACTN,MAAO,kBACPkP,YAAa,GAAF,OAAKvB,EAAOwB,WAAU,8BAIrC,OACE,kBAAC,IAAoB,KACnB,kBAAC,IAA2B,KAC1B,kBAAC,IAAO,CACN3J,GAAIA,EACJoJ,UAAWA,EACXQ,WAAY,kBAAMP,GAAa,EAAK,EACpCQ,YAAa,kBAAMR,GAAa,EAAM,EACtC,aAAW,gBACXS,qBAAqB,SACrBnP,cACE,yBAAKoP,MAAO,CAAE3O,MAAO,YAClB,IACD,kBAAC,KAAqB,CAACmM,KAAK,QA5CpB0B,EA6CMd,EAAO6B,iBA7CL7O,EA6CuBgN,EAAOjD,iBA5C1D,0BAAMnK,UAAU,cACbkO,IAAWJ,EACR,iBACAI,IAAWH,EACX,oBACA3N,IAAW4N,EACX,eACA,aAwCEkB,KAAK,OACLnP,QAAQ,OACRM,MAAM,MACNgN,SAAUA,EACV8B,gBAAgB,KAChBtP,YAAaoO,EACXb,EAAO6B,iBACP7B,EAAOjD,iBACPC,GAEFgF,cACEhC,EAAOjD,mBAAqB6D,EAC1B,kBAAC,KAAM,CACLjO,QAAQ,OACRsG,UAAQ,EACRG,QAAS,YACP6I,EAAAA,EAAAA,GACEd,GAAQ,iBACR,+FACQe,EAAAA,EAAAA,IAAa,CACjBC,YAAa,CAACnC,EAAOoC,cACrB,OACFlB,GAAa,GACbhB,IAAe,2CAEjBmB,EAEJ,GAEC,IAAI,QACC,KAGR,IAIHL,IAGL,kBAAC,IAA0B,KAAC,KAGlC,EAEAjB,EAAmBlN,UAAY,CAC7BgF,GAAI/E,IAAAA,OACJkK,SAAUlK,IAAAA,OACVkO,SAAUlO,IAAAA,QACVkN,OAAQlN,IAAAA,OACRmN,SAAUnN,IAAAA,OACVoN,aAAcpN,IAAAA,MAGhBiN,EAAmBsC,aAAe,CAChCpC,SAAU,OACVpI,GAAI,gBAGN,S,8FC5IMrE,EAAY,SAAH,GAGb,IAHsC,IAAnBC,EAAY,EAAZA,aACf6O,EAAU,GAELC,EAAI,EAAGA,EAAI9O,EAAc8O,IAChCD,EAAQ3C,KACN,kBAAC,aAAc,CAAC6C,IAAKD,GACnB,kBAAC,IAAQ,MACT,+BAIN,OAAO,kBAAC,aAAc,KAAED,EAC1B,EAEA,UAEA9O,EAAUX,UAAY,CACpBY,aAAcX,EAAAA,UAAAA,O,2JCnBH2P,EAAe,CAC1BC,QAAS,CACPC,KAAM,UACNC,KAAMC,EAAAA,GAAAA,YACN5P,MAAO6P,EAAAA,GAAAA,MACPC,WAAY,SAEdC,SAAU,CACRL,KAAM,0BACNC,KAAMC,EAAAA,GAAAA,WACN5P,MAAO6P,EAAAA,GAAAA,KACPC,WAAY,QAEdE,QAAS,CACPN,KAAM,0BACNC,KAAMC,EAAAA,GAAAA,WACN5P,MAAO6P,EAAAA,GAAAA,KACPC,WAAY,QAEdG,SAAU,CACRP,KAAM,aACNC,KAAMC,EAAAA,GAAAA,YACN5P,MAAO6P,EAAAA,GAAAA,MACPC,WAAY,SAEdI,QAAS,CACPR,KAAM,QACNC,KAAMC,EAAAA,GAAAA,YACN5P,MAAO6P,EAAAA,GAAAA,MACPC,WAAY,SAEdK,OAAQ,CACNT,KAAM,SACNC,KAAMC,EAAAA,GAAAA,YACN5P,MAAO6P,EAAAA,GAAAA,MACPC,WAAY,SAEdlG,gBAAiB,CACf8F,KAAM,mBACNC,KAAMC,EAAAA,GAAAA,oBACN5P,MAAO6P,EAAAA,GAAAA,OACPC,WAAY,UAEdM,SAAU,CACRV,KAAM,WACNC,KAAMC,EAAAA,GAAAA,WACN5P,MAAO6P,EAAAA,GAAAA,KACPC,WAAY,QAEdO,MAAO,CACLX,KAAM,QACNC,KAAMC,EAAAA,GAAAA,YACN5P,MAAO6P,EAAAA,GAAAA,IACPC,WAAY,OAEdQ,QAAS,CACPZ,KAAM,UACNC,KAAMC,EAAAA,GAAAA,SAERW,YAAa,CACXb,KAAM,0BACNC,KAAMC,EAAAA,GAAAA,WACN5P,MAAO6P,EAAAA,GAAAA,KACPC,WAAY,QAEdU,aAAc,CACZd,KAAM,eACNC,KAAMC,EAAAA,GAAAA,kBACN5P,MAAO6P,EAAAA,GAAAA,IACPC,WAAY,OAEdW,2BAA4B,CAC1Bf,KAAM,QACNC,KAAMC,EAAAA,GAAAA,kBACN5P,MAAO6P,EAAAA,GAAAA,IACPC,WAAY,QCxEHpF,EAAkB,SAC7BD,EACAiG,EACAC,GAAgB,MAEK,UAArBA,EACI,QACqB,iBAArBA,EACA,eACiB,aAAjBlG,EACA,WACAiG,EACA,kBACA,UAAU,EAEVtL,EAAS,SAAH,GAON,IANJR,EAAE,EAAFA,GACAsI,EAAI,EAAJA,KAAI,IACJE,QAAAA,OAAO,IAAG,GAAK,MACfwD,eAAAA,OAAc,IAAG,KAAE,MACnBjR,UAAAA,OAAS,IAAG,KAAE,EACdwN,EAAM,EAANA,OAEA,EACE0D,OAAOC,UAAUC,eAAeC,KAAKxB,EAActC,GAC/CsC,EAAatC,GACbsC,EAAAA,QAHEE,EAAI,EAAJA,KAAMC,EAAI,EAAJA,KAAM3P,EAAK,EAALA,MAAO8P,EAAU,EAAVA,WAK3B,OACE,oCACG1C,EACC,kBAAC6D,EAAA,EAAK,CAACrM,GAAIA,EAAI5E,MAAO8P,EAAYjB,KAAM,kBAACc,EAAI,MAAKhQ,UAAWA,GAC1D+P,GAGH,kBAACwB,EAAA,EAAK,CAACtM,GAAIA,EAAI+J,MAAO,CAAE3O,MAAAA,GAASL,UAAWA,GAC1C,kBAACwR,EAAA,EAAS,CAACxR,UAAU,cAClBiR,EACC,kBAACjP,EAAA,EAAO,CAACtC,QAAQ,UACf,kBAACsQ,EAAI,OAGP,kBAACA,EAAI,OAGT,kBAACwB,EAAA,EAAS,KACR,uBACExC,MACExB,EACI,CACEiE,eAAgB,yBAChBC,OAAQ,WAEV,CAAC,GAGN3B,KAOf,EAEA,UAEAtK,EAAOxF,UAAY,CACjBgF,GAAI/E,IAAAA,OACJqN,KAAMrN,IAAAA,OACNuN,QAASvN,IAAAA,KACT+Q,eAAgB/Q,IAAAA,OAChBF,UAAWE,IAAAA,OACXsN,OAAQtN,IAAAA,MAGVuF,EAAOgK,aAAe,CACpBxK,GAAI,S,8sBCpBN,QA1De,SAAH,GAAgE,MAA1DwE,EAAG,EAAHA,IAAG,IAAExE,GAAAA,OAAE,IAAG,OAAI,EAAEwJ,EAAc,EAAdA,eAAc,IAAEkD,YAAAA,OAAW,IAAG,GAAK,EAC7DpD,GAAWC,EAAAA,EAAAA,eACjB,GAAwBrK,EAAAA,EAAAA,UAAS,IAAG,eAA7BqB,EAAI,KAAEoM,EAAO,KACpB,GAAkCzN,EAAAA,EAAAA,WAAS,GAAK,eAAzCuB,EAAS,KAAEmM,EAAY,KAC9B,GAAgC1N,EAAAA,EAAAA,WAAS,GAAM,eAAxC2N,EAAQ,KAAEC,EAAW,KAC5B,GAA8B5N,EAAAA,EAAAA,WAAS,kBAAMsF,CAAG,IAAC,eAA1CuI,EAAO,KAAEC,EAAU,KAEpBC,EAA2B,QAAjB,EAAGzD,SAAc,aAAd,EAAgBC,UAC9BD,IACHA,EAAiB,CACfC,UAAW,CACTjP,MAAO,UACPkP,YAAa,0CAEfwD,QAAS,CACP1S,MAAO,QACPkP,YAAa,0CAKnB,IAAMyD,EAAS,mCAAG,kGACG,OADIzI,EAAQ,EAAH,6BAAG,GAC/BkI,GAAa,GAAM,kBAEEG,EAAQ,CAAE/M,GAAAA,EAAI0E,MAAAA,IAAQ,OAAnCnE,EAAO,EAAH,KACVoM,EAAQpM,GAEJ0M,GACF3D,EAAS,EAAD,IACH8D,EAAAA,EAAAA,IAAgB,EAAD,CAChBtS,QAAS,WACN0O,EAAeC,cAGvB,kDAEDqD,GAAY,GAEZxD,EAAS,EAAD,IACH8D,EAAAA,EAAAA,IAAgB,EAAD,CAChBtS,QAAS,UACN0O,EAAe0D,YAEnB,QAEiB,OAFjB,UAEHN,GAAa,GAAO,6EAEvB,kBA1Bc,mCAkCf,OANA/M,EAAAA,EAAAA,YAAU,WACH6M,GACHS,GAEJ,GAAG,IAEI,CAAC,CAAE5M,KAAAA,EAAME,UAAAA,EAAWoM,SAAAA,GAAYM,EAAWJ,EAASC,EAC7D,C,6qBCsBA,QAhFqB,SAAC1D,EAAU9E,EAAKgF,EAAgB6D,GAAqB,UAClEJ,EAA2B,QAAjB,EAAGzD,SAAc,aAAd,EAAgBC,UAC7B6D,EAAwB,QAAjB,EAAG9D,SAAc,aAAd,EAAgB+D,OAC1BC,EAA2B,QAAjB,EAAGhE,SAAc,aAAd,EAAgBiE,UAE9BjE,IACHA,EAAiB,CACfC,UAAW,CACTjP,MAAO,UACPkP,YAAa,0CAEfwD,QAAS,CACP1S,MAAO,QACPkP,YAAa,0CAKnB,IAAMyD,EAAS,mCAAG,6GAES3I,IAAK,OAoC3B,OApCKkJ,EAAW,EAAH,KACVJ,IACED,EACFA,EAAiBC,QAAQ9D,EAAe+D,QAExCjE,EAAS,EAAD,IACH8D,EAAAA,EAAAA,IAAgB,EAAD,CAChBtS,QAAS,QACN0O,EAAe+D,YAKtBN,IACEI,EACFA,EAAiBJ,WAAWzD,EAAeC,WAE3CH,EAAS,EAAD,IACH8D,EAAAA,EAAAA,IAAgB,EAAD,CAChBtS,QAAS,WACN0O,EAAeC,eAKtB+D,IACEH,EACFA,EAAiBG,WAAWhE,EAAeiE,WAE3CnE,EAAS,EAAD,IACH8D,EAAAA,EAAAA,IAAgB,EAAD,CAChBtS,QAAS,WACN0O,EAAeiE,eAIzB,kBACMC,GAAQ,QAed,OAfc,0BAEXL,EACFA,EAAiBM,IAAInE,EAAe0D,QAAS,EAAF,IAE3C5D,EAAS,EAAD,IACH8D,EAAAA,EAAAA,IAAgB,EAAD,GAChBtS,QAAS,UACN0O,EAAe0D,SAAO,IAEzBxD,YAAa,iCAAKkE,MAAK,UAChBpE,EAAe0D,QAAQxD,YAAW,aAAK,KAAIkE,OAC9CpE,EAAe0D,QAAQxD,iBAGhC,kFAGJ,kBAzDc,mCA2Df,OAAOyD,GACT,C","sources":["webpack:///./src/components/TitleWithPopover.js","webpack:///./src/components/GreenbootStatus.js","webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/Vulnerability.js","webpack:///./src/Routes/DeviceDetail/DeviceDetailTabs.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/Routes/Devices/RetryUpdatePopover.js","webpack:///./src/components/CmpLoader.js","webpack:///./src/constants/status.js","webpack:///./src/components/Status.js","webpack:///./src/hooks/useApi.js","webpack:///./src/utils/apiWithToast.js"],"sourcesContent":["import React from 'react';\nimport { Popover, Button } from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst TitleWithPopover = ({ title, content }) => (\n  <>\n    <span>{title}</span>\n    <Popover\n      headerContent={<div>{title}</div>}\n      bodyContent={<div>{content}</div>}\n    >\n      <Button\n        variant=\"plain\"\n        aria-label={`Action for ${title}`}\n        className=\"ins-active-general_information__popover-icon\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Button>\n    </Popover>\n  </>\n);\n\nTitleWithPopover.propTypes = {\n  title: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default TitleWithPopover;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/js/icons/exclamation-circle-icon';\nimport InProgressIcon from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport PropTypes from 'prop-types';\n\nconst GreenbootStatus = ({ status }) => {\n  if (status === 'green') {\n    return (\n      <>\n        <CheckCircleIcon color=\"green\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-success-color-200\">Passed</span>\n      </>\n    );\n  }\n\n  if (status === 'red') {\n    return (\n      <>\n        <ExclamationCircleIcon color=\"red\" className=\"pf-u-mr-sm\" />\n        <span className=\"pf-u-danger-color-200\">Failed and reverted</span>\n      </>\n    );\n  }\n  return (\n    <>\n      <InProgressIcon className=\"pf-u-mr-sm\" />\n      <span>Waiting for update</span>\n    </>\n  );\n};\n\nGreenbootStatus.propTypes = {\n  status: PropTypes.string,\n};\n\nexport default GreenbootStatus;\n","import React, { Suspense } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\nimport TitleWithPopover from './TitleWithPopover';\nimport GreenbootStatus from './GreenbootStatus';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport CmpLoader from './CmpLoader';\n\nconst GeneralInformation = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./GeneralInformation\"\n    fallback={<CmpLoader numberOfRows={3} />}\n    {...props}\n  />\n);\n\nconst SystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./SystemCard\"\n    fallback={<CmpLoader numberOfRows={5} />}\n    {...props}\n  />\n);\n\nconst OperatingSystemCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./OperatingSystemCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst BiosCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./BiosCard\"\n    fallback={<CmpLoader numberOfRows={4} />}\n    {...props}\n  />\n);\n\nconst CollectionCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./CollectionCard\"\n    fallback={<CmpLoader numberOfRows={7} />}\n    {...props}\n  />\n);\n\nconst InfrastructureCard = (props) => (\n  <AsyncComponent\n    appName=\"inventory\"\n    module=\"./InfrastructureCard\"\n    fallback={<CmpLoader numberOfRows={6} />}\n    {...props}\n  />\n);\n\nconst ImageInformationCard = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"ImageInformationCard\" */ './ImageInformationCard'\n  )\n);\n\nconst InfrastructureCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      {' '}\n      <InfrastructureCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst ImageInformationCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      {' '}\n      <ImageInformationCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst BiosCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      <BiosCard {...props} store={store} />\n    </Suspense>\n  );\n};\n\nconst OperatingSystemCardWrapper = (props) => {\n  const store = useStore();\n  return (\n    <Suspense fallback=\"\">\n      <OperatingSystemCard {...props} hasKernelModules={true} store={store} />\n    </Suspense>\n  );\n};\n\nconst CollectionCardWrapper = (props) => {\n  const store = useStore();\n  // TODO: fix rhcHealth display\n  const rhcHealth = null;\n  return (\n    <Suspense fallback=\"\">\n      <CollectionCard\n        {...props}\n        extra={[\n          {\n            title: 'RHC Health (broker functioning)',\n            value: rhcHealth || (\n              <Tooltip content=\"Unknown service status\">\n                <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n              </Tooltip>\n            ),\n          },\n        ]}\n        store={store}\n      />\n    </Suspense>\n  );\n};\n\nconst SystemCardWrapper = (props) => {\n  const store = useStore();\n  const { greenbootStatus } = useSelector(({ systemProfileStore }) => {\n    return {\n      greenbootStatus: systemProfileStore?.systemProfile?.greenboot_status,\n    };\n  });\n\n  return (\n    <Suspense fallback=\"\">\n      <SystemCard\n        {...props}\n        store={store}\n        hasCPUs={false}\n        hasSockets={false}\n        hasCores={false}\n        hasCPUFlags={false}\n        hasRAM={false}\n        hasSAP={false}\n        extra={[\n          {\n            title: (\n              <TitleWithPopover\n                title=\"GreenBoot Status\"\n                content=\"This is a description about greenboot status\"\n              />\n            ),\n            value: <GreenbootStatus status={greenbootStatus} />,\n          },\n        ]}\n      />\n    </Suspense>\n  );\n};\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const store = useStore();\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={store}\n        writePermissions={writePermissions}\n        SystemCardWrapper={SystemCardWrapper}\n        OperatingSystemCardWrapper={InfrastructureCardWrapper}\n        BiosCardWrapper={ImageInformationCardWrapper}\n        InfrastructureCardWrapper={BiosCardWrapper}\n        ConfigurationCardWrapper={OperatingSystemCardWrapper}\n        CollectionCardWrapper={CollectionCardWrapper}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RegistryContext } from '../../store';\nimport AsyncComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport { Alert, Button } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport UpdateImageModal from './UpdateImageModal';\nimport { getImageSet } from '../../api/images';\n\nconst getActiveAlert = (\n  CVEs,\n  deviceData,\n  newImageStatus,\n  imageId,\n  prevState\n) => {\n  if (CVEs?.isLoading || CVEs?.meta?.filter || !deviceData) {\n    return prevState;\n  }\n  if (!CVEs?.data?.length > 0 || !imageId) {\n    return 'noAlert';\n  }\n  if (\n    deviceData?.UpdateTransactions[0]?.Status === 'BUILDING' ||\n    deviceData?.UpdateTransactions[0]?.Status === 'CREATED'\n  ) {\n    return 'systemUpdating';\n  }\n  if (deviceData?.Device?.UpdateAvailable) {\n    return 'updateDevice';\n  }\n  if (newImageStatus === 'BUILDING' || newImageStatus === 'CREATED') {\n    return 'imageBuilding';\n  }\n  return 'updateImage';\n};\n\nconst VulnerabilityTab = ({\n  deviceData,\n  setUpdateModal,\n  imageId,\n  setReload,\n}) => {\n  const { deviceId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const [updateCveModal, setUpdateCveModal] = useState({\n    isOpen: false,\n    imageId: null,\n    cveCount: 0,\n  });\n  const [CVEs, setCVEs] = useState(null);\n  const [newImageStatus, setNewImageStatus] = useState(null);\n  const [activeAlert, setActiveAlert] = useState('noAlert');\n\n  useEffect(() => {\n    setUpdateCveModal((prevState) => ({ ...prevState, imageId: imageId }));\n  }, [imageId]);\n\n  useEffect(() => {\n    (async () => {\n      if (!deviceData) {\n        return;\n      }\n      // Use view API to get current image set status\n      const params = {\n        id: 'view',\n        q: { id: deviceData?.ImageInfo?.Image?.ImageSetID },\n      };\n      const resp = await getImageSet(params);\n      setNewImageStatus(resp?.data?.[0]?.Status);\n    })();\n  }, [deviceData]);\n\n  useEffect(() => {\n    !CVEs?.isLoading &&\n      !CVEs?.meta?.filter &&\n      setUpdateCveModal((prevState) => ({\n        ...prevState,\n        cveCount: CVEs?.data?.length,\n      }));\n\n    setActiveAlert((prevState) =>\n      getActiveAlert(CVEs, deviceData, newImageStatus, imageId, prevState)\n    );\n  }, [CVEs, deviceData, newImageStatus, imageId]);\n\n  const handleUpdateImageButton = () => {\n    setUpdateCveModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const handleUpdateDeviceButton = () => {\n    setUpdateModal((preState) => ({\n      ...preState,\n      isOpen: true,\n    }));\n  };\n\n  const alerts = {\n    updateImage: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"info\"\n        isInline\n        title=\"To remediate CVEs, update the image.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateImageButton}\n          >\n            Update Image\n          </Button>\n        }\n      />\n    ),\n    imageBuilding: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"Image build in progress. Once completed, you'll need to update your system.\"\n      />\n    ),\n    updateDevice: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        variant=\"warning\"\n        isInline\n        title=\" Image build completed. Update system to the newest image version to remediate CVEs.\"\n        actionLinks={\n          <Button\n            className=\"pf-u-mt-sm\"\n            isSmall\n            onClick={handleUpdateDeviceButton}\n          >\n            Update system\n          </Button>\n        }\n      />\n    ),\n    systemUpdating: (\n      <Alert\n        className=\"pf-u-mb-md\"\n        customIcon={<InProgressIcon />}\n        variant=\"info\"\n        isInline\n        title=\"System updating. No additional actions required.\"\n      />\n    ),\n    noAlert: <></>,\n  };\n\n  return (\n    <>\n      <section className=\"add-100vh pf-l-page__main-section pf-c-page__main-section\">\n        {alerts[activeAlert]}\n        <AsyncComponent\n          appName=\"vulnerability\"\n          module=\"./SystemDetail\"\n          getRegistry={getRegistry}\n          customIntlProvider\n          entity={{ id: deviceId }}\n          canSelect={false}\n          canEditPairStatus={false}\n          canManageColumns={false}\n          linkToCustomerPortal\n          defaultColumns={['synopsis', 'public_date', 'impact', 'cvss_score']}\n          filters={[\n            'filter',\n            'security_rule',\n            'known_exploit',\n            'impact',\n            'cvss_score',\n          ]}\n          customAction={(cve) => {\n            setCVEs(cve);\n          }}\n        />\n      </section>\n      {updateCveModal.isOpen && (\n        <UpdateImageModal\n          updateCveModal={updateCveModal}\n          setUpdateCveModal={setUpdateCveModal}\n          setReload={setReload}\n        />\n      )}\n    </>\n  );\n};\n\nVulnerabilityTab.propTypes = {\n  imageId: PropTypes.number,\n  deviceData: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default VulnerabilityTab;\n","import React, { useState } from 'react';\nimport { Tabs, Tab, TabTitleText } from '@patternfly/react-core';\nimport GeneralInformationTab from '../../components/DeviceDetail';\nimport VulnerabilityTab from './Vulnerability';\nimport PropTypes from 'prop-types';\n\nconst DeviceDetailTabs = ({\n  systemProfile,\n  imageId,\n  setUpdateModal,\n  setReload,\n}) => {\n  const [activeTabKey, setActiveTabkey] = useState(0);\n  const handleTabClick = (_event, tabIndex) => setActiveTabkey(tabIndex);\n\n  return (\n    <Tabs\n      className=\"pf-u-ml-md\"\n      activeKey={activeTabKey}\n      onSelect={handleTabClick}\n    >\n      <Tab eventKey={0} title={<TabTitleText>Details</TabTitleText>}>\n        <section className=\"pf-l-page__main-section pf-c-page__main-section\">\n          <GeneralInformationTab />\n        </section>\n      </Tab>\n      <Tab eventKey={1} title={<TabTitleText>Vulnerability</TabTitleText>}>\n        <VulnerabilityTab\n          deviceData={systemProfile}\n          setUpdateModal={setUpdateModal}\n          imageId={imageId}\n          setReload={setReload}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n\nDeviceDetailTabs.propTypes = {\n  imageId: PropTypes.number,\n  systemProfile: PropTypes.object,\n  setUpdateModal: PropTypes.func,\n  setReload: PropTypes.func,\n};\n\nexport default DeviceDetailTabs;\n","import React, { useState, useEffect, useContext, Suspense } from 'react';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  InventoryDetailHead,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useHistory, useLocation, useParams, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport DeviceDetailTabs from './DeviceDetailTabs';\nimport { getDevice, getInventory } from '../../api/devices';\nimport Status, { getDeviceStatus } from '../../components/Status';\nimport useApi from '../../hooks/useApi';\nimport RetryUpdatePopover from '../Devices/RetryUpdatePopover';\nimport { useLoadModule } from '@scalprum/react-core';\nimport { routes as paths } from '../../constants/routeMapper';\n\nconst UpdateDeviceModal = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"UpdateDeviceModal\" */ '../Devices/UpdateDeviceModal'\n  )\n);\n\nconst DeviceDetail = () => {\n  const [{ default: systemProfileStore }] = useLoadModule(\n    {\n      appName: 'inventory',\n      scope: 'inventory',\n      module: './systemProfileStore',\n    },\n    {}\n  );\n  const history = useHistory();\n  const { pathname } = useLocation();\n  const { deviceId, groupId } = useParams();\n  const [imageId, setImageId] = useState(null);\n  const { getRegistry } = useContext(RegistryContext);\n  const hasEntityFinishedLoading = useSelector(\n    (store) => store?.entityDetails?.loaded\n  );\n  const entity = useSelector(({ entityDetails }) => entityDetails?.entity);\n\n  const [imageData, setImageData] = useState();\n  const [updateModal, setUpdateModal] = useState({\n    isOpen: false,\n    deviceData: null,\n  });\n  const [isDeviceStatusLoading, setIsDeviceStatusLoading] = useState(true);\n  const [reload, setReload] = useState(false);\n\n  const [deviceData, fetchDeviceData] = useApi({\n    api: () =>\n      getInventory({\n        query: {\n          uuid: deviceId,\n        },\n      }),\n  });\n\n  const [deviceView] = deviceData.data?.data?.devices || [];\n  const {\n    Status: deviceViewStatus,\n    UpdateAvailable: updateAvailable,\n    DispatcherStatus: updateStatus,\n    LastSeen: lastSeen,\n    DeviceGroups: deviceGroups,\n  } = deviceView || {};\n\n  const groupName = groupId\n    ? deviceGroups?.find((group) => group.ID.toString() === groupId)?.Name\n    : null;\n\n  const deviceStatus = getDeviceStatus(\n    deviceViewStatus,\n    updateAvailable,\n    updateStatus\n  );\n\n  useEffect(() => {\n    insights.chrome.registerModule('inventory');\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (!entity?.display_name) {\n        return;\n      }\n      const image_data = await getDevice(deviceId);\n      setImageData(image_data);\n      setIsDeviceStatusLoading(false);\n      setUpdateModal((prevState) => ({\n        ...prevState,\n        deviceData: [\n          {\n            display_name: entity.display_name,\n            id: entity.id,\n            deviceStatus: deviceStatus,\n          },\n        ],\n        imageSetId: image_data?.ImageInfo?.Image?.ImageSetID,\n      }));\n      setImageId(image_data?.ImageInfo?.Image?.ID);\n    })();\n  }, [entity, reload]);\n\n  return systemProfileStore ? (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n      inventoryId={deviceId}\n    >\n      <PageHeader>\n        {!groupName ? (\n          <Breadcrumb ouiaId=\"systems-list\">\n            <BreadcrumbItem>\n              <Link to={paths.inventory}>Systems</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        ) : (\n          <Breadcrumb ouiaId=\"groups-list\">\n            <BreadcrumbItem>\n              <Link to={paths.fleetManagement}>Groups</Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem>\n              <Link to={`${paths.fleetManagement}/${groupId}`}>\n                {groupName}\n              </Link>\n            </BreadcrumbItem>\n            <BreadcrumbItem isActive>\n              <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                {entity?.display_name || <Skeleton size={SkeletonSize.xs} />}\n              </div>\n            </BreadcrumbItem>\n          </Breadcrumb>\n        )}\n        <InventoryDetailHead\n          fallback=\"\"\n          showDelete={true}\n          actions={[\n            {\n              title: 'Update',\n              isDisabled:\n                imageData?.UpdateTransactions?.[0]?.Status === 'BUILDING' ||\n                imageData?.UpdateTransactions?.[0]?.Status === 'CREATED' ||\n                !imageData?.ImageInfo?.UpdatesAvailable?.length > 0,\n              onClick: () => {\n                history.push({\n                  pathname: `${pathname}/update`,\n                  search: '?from_details=true',\n                });\n              },\n            },\n          ]}\n          hideBack\n          hideInvDrawer\n          inventoryId={deviceId}\n        />\n\n        {isDeviceStatusLoading ? (\n          <Skeleton size={SkeletonSize.xs} />\n        ) : deviceStatus === 'error' || deviceStatus === 'unresponsive' ? (\n          <RetryUpdatePopover\n            lastSeen={lastSeen}\n            device={deviceView}\n            position={'right'}\n            fetchDevices={fetchDeviceData}\n          >\n            <Status\n              id={'device-status'}\n              type={\n                deviceStatus === 'error'\n                  ? 'errorWithExclamationCircle'\n                  : deviceStatus\n              }\n              isLink={true}\n              isLabel={true}\n              className=\"pf-u-mt-sm cursor-pointer\"\n            />\n          </RetryUpdatePopover>\n        ) : (\n          <Status\n            id={'device-status'}\n            type={deviceStatus}\n            isLabel={true}\n            className=\"pf-u-mt-sm\"\n          />\n        )}\n      </PageHeader>\n      {hasEntityFinishedLoading && (\n        <DeviceDetailTabs\n          systemProfile={imageData}\n          imageId={imageId}\n          setUpdateModal={setUpdateModal}\n          setReload={setReload}\n        />\n      )}\n      {updateModal.isOpen && (\n        <Suspense\n          fallback={\n            <Bullseye>\n              <Spinner />\n            </Bullseye>\n          }\n        >\n          <UpdateDeviceModal\n            navigateBack={() => {\n              history.push({ pathname });\n              setUpdateModal((prevState) => {\n                return {\n                  ...prevState,\n                  isOpen: false,\n                };\n              });\n            }}\n            setUpdateModal={setUpdateModal}\n            updateModal={updateModal}\n            refreshTable={() => setReload(true)}\n          />\n        </Suspense>\n      )}\n    </DetailWrapper>\n  ) : (\n    <Bullseye>\n      <Spinner />\n    </Bullseye>\n  );\n};\n\nexport default DeviceDetail;\n","import React, { useState } from 'react';\nimport {\n  Popover,\n  Button,\n  DescriptionListGroup,\n  DescriptionListDescription,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { DescriptionListTermHelpText } from '@patternfly/react-core';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components/DateFormat';\nimport apiWithToast from '../../utils/apiWithToast';\nimport { updateSystem } from '../../api/devices';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nconst FAILURE = 'The playbook failed to run.';\nconst TIMEOUT = 'The service timed out during the last update.';\nconst UNRESPONSIVE = 'UNRESPONSIVE';\n\nconst popoverDescription = (reason, status, lastSeen) => (\n  <div>\n    {reason === FAILURE\n      ? 'The playbook failed to run. You can retry the update or build a new one.'\n      : reason === TIMEOUT\n      ? 'The service timed out during the last update. You can retry the update or build a new one.'\n      : status === UNRESPONSIVE\n      ? 'The service could not be reached via RHC. The system may communicate at a later time if this is a network issue or could be an indication of a more significant problem.'\n      : 'Unknown'}\n    <Stack className=\"pf-u-mt-sm\">\n      <StackItem className=\"pf-u-font-weight-bold\">Last seen</StackItem>\n      <StackItem> {<DateFormat date={lastSeen} />}</StackItem>\n    </Stack>\n  </div>\n);\n\nconst popoverTitle = (reason, status) => (\n  <span className=\"pf-u-ml-xs\">\n    {reason === FAILURE\n      ? 'Playbook error'\n      : reason === TIMEOUT\n      ? 'Service timed out'\n      : status === UNRESPONSIVE\n      ? 'Unresponsive'\n      : 'Unknown'}\n  </span>\n);\n\nconst RetryUpdatePopover = ({\n  id,\n  device,\n  position,\n  fetchDevices,\n  lastSeen,\n  children,\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const dispatch = useDispatch();\n\n  const statusMessages = {\n    onSuccess: {\n      variant: 'info',\n      title: 'Updating system',\n      description: `${device.DeviceName} was added to the queue.`,\n    },\n  };\n\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTermHelpText>\n        <Popover\n          id={id}\n          isVisible={isVisible}\n          shouldOpen={() => setIsVisible(true)}\n          shouldClose={() => setIsVisible(false)}\n          aria-label=\"Alert popover\"\n          alertseverityvariant=\"danger\"\n          headerContent={\n            <div style={{ color: '#c9190b' }}>\n              {' '}\n              <ExclamationCircleIcon size=\"sm\" />\n              {popoverTitle(device.DispatcherReason, device.DispatcherStatus)}\n            </div>\n          }\n          icon=\"true\"\n          variant=\"icon\"\n          color=\"red\"\n          position={position}\n          headerComponent=\"h6\"\n          bodyContent={popoverDescription(\n            device.DispatcherReason,\n            device.DispatcherStatus,\n            lastSeen\n          )}\n          footerContent={\n            device.DispatcherStatus !== UNRESPONSIVE ? (\n              <Button\n                variant=\"link\"\n                isInline\n                onClick={() => {\n                  apiWithToast(\n                    dispatch,\n                    async () => {\n                      await updateSystem({\n                        DevicesUUID: [device.DeviceUUID],\n                      });\n                      setIsVisible(false);\n                      fetchDevices();\n                    },\n                    statusMessages\n                  );\n                }}\n              >\n                {' '}\n                Retry{' '}\n              </Button>\n            ) : (\n              ''\n            )\n          }\n        >\n          {children}\n        </Popover>\n      </DescriptionListTermHelpText>\n      <DescriptionListDescription> </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n};\n\nRetryUpdatePopover.propTypes = {\n  id: PropTypes.string,\n  lastSeen: PropTypes.string,\n  children: PropTypes.element,\n  device: PropTypes.object,\n  position: PropTypes.string,\n  fetchDevices: PropTypes.func,\n};\n\nRetryUpdatePopover.defaultProps = {\n  position: 'left',\n  id: 'retry-update',\n};\n\nexport default RetryUpdatePopover;\n","import React from 'react';\nimport { Skeleton } from '@patternfly/react-core';\nimport { PropTypes } from 'prop-types';\n\nconst CmpLoader = ({ numberOfRows }) => {\n  var CmpRows = [];\n\n  for (var i = 0; i < numberOfRows; i++) {\n    CmpRows.push(\n      <React.Fragment key={i}>\n        <Skeleton />\n        <br />\n      </React.Fragment>\n    );\n  }\n  return <React.Fragment>{CmpRows}</React.Fragment>;\n};\n\nexport default CmpLoader;\n\nCmpLoader.propTypes = {\n  numberOfRows: PropTypes.number,\n};\n","import { iconMapper, colorMapper } from './index';\n\nexport const statusMapper = {\n  booting: {\n    text: 'Booting',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  building: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  created: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  upToDate: {\n    text: 'Up to date',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  success: {\n    text: 'Ready',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  passed: {\n    text: 'Passed',\n    Icon: iconMapper.checkCircle,\n    color: colorMapper.green,\n    labelColor: 'green',\n  },\n  updateAvailable: {\n    text: 'Update available',\n    Icon: iconMapper.exclamationTriangle,\n    color: colorMapper.yellow,\n    labelColor: 'orange',\n  },\n  updating: {\n    text: 'Updating',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  error: {\n    text: 'Error',\n    Icon: iconMapper.timesCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  default: {\n    text: 'Unknown',\n    Icon: iconMapper.unknown,\n  },\n  interrupted: {\n    text: 'Image build in progress',\n    Icon: iconMapper.inProgress,\n    color: colorMapper.blue,\n    labelColor: 'blue',\n  },\n  unresponsive: {\n    text: 'Unresponsive',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n  errorWithExclamationCircle: {\n    text: 'Error',\n    Icon: iconMapper.exclamationCircle,\n    color: colorMapper.red,\n    labelColor: 'red',\n  },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Label, Tooltip, Split, SplitItem } from '@patternfly/react-core';\nimport { statusMapper } from '../constants/status';\n\nexport const getDeviceStatus = (\n  deviceStatus,\n  isUpdateAvailable,\n  dispatcherStatus\n) =>\n  dispatcherStatus === 'ERROR'\n    ? 'error'\n    : dispatcherStatus === 'UNRESPONSIVE'\n    ? 'unresponsive'\n    : deviceStatus === 'UPDATING'\n    ? 'updating'\n    : isUpdateAvailable\n    ? 'updateAvailable'\n    : 'upToDate';\n\nconst Status = ({\n  id,\n  type,\n  isLabel = false,\n  toolTipContent = '',\n  className = '',\n  isLink,\n}) => {\n  const { text, Icon, color, labelColor } =\n    Object.prototype.hasOwnProperty.call(statusMapper, type)\n      ? statusMapper[type]\n      : statusMapper['default'];\n\n  return (\n    <>\n      {isLabel ? (\n        <Label id={id} color={labelColor} icon={<Icon />} className={className}>\n          {text}\n        </Label>\n      ) : (\n        <Split id={id} style={{ color }} className={className}>\n          <SplitItem className=\"pf-u-mr-sm\">\n            {toolTipContent ? (\n              <Tooltip content=\"blargh\">\n                <Icon />\n              </Tooltip>\n            ) : (\n              <Icon />\n            )}\n          </SplitItem>\n          <SplitItem>\n            <p\n              style={\n                isLink\n                  ? {\n                      textDecoration: ' grey dotted underline',\n                      cursor: 'pointer',\n                    }\n                  : {}\n              }\n            >\n              {text}\n            </p>\n          </SplitItem>\n        </Split>\n      )}\n    </>\n  );\n};\n\nexport default Status;\n\nStatus.propTypes = {\n  id: PropTypes.string,\n  type: PropTypes.string,\n  isLabel: PropTypes.bool,\n  toolTipContent: PropTypes.string,\n  className: PropTypes.string,\n  isLink: PropTypes.bool,\n};\n\nStatus.defaultProps = {\n  id: 'status',\n};\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst useApi = ({ api, id = null, statusMessages, tableReload = false }) => {\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [apiFunc, setAPIFunc] = useState(() => api);\n\n  const hasSuccess = statusMessages?.onSuccess;\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async (query = '') => {\n    setIsLoading(true);\n    try {\n      const data = await apiFunc({ id, query });\n      setData(data);\n\n      if (hasSuccess) {\n        dispatch({\n          ...addNotification({\n            variant: 'success',\n            ...statusMessages.onSuccess,\n          }),\n        });\n      }\n    } catch (err) {\n      setHasError(true);\n\n      dispatch({\n        ...addNotification({\n          variant: 'danger',\n          ...statusMessages.onError,\n        }),\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!tableReload) {\n      fetchData();\n    }\n  }, []);\n\n  return [{ data, isLoading, hasError }, fetchData, apiFunc, setAPIFunc];\n};\n\nexport default useApi;\n","import { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst apiWithToast = (dispatch, api, statusMessages, notificationProp) => {\n  const hasSuccess = statusMessages?.onSuccess;\n  const hasInfo = statusMessages?.onInfo;\n  const hasWarning = statusMessages?.onWarning;\n\n  if (!statusMessages) {\n    statusMessages = {\n      onSuccess: {\n        title: 'Success',\n        description: 'The request has been made successfully',\n      },\n      onError: {\n        title: 'Error',\n        description: 'An error occurred making the request',\n      },\n    };\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await api();\n      if (hasInfo) {\n        if (notificationProp) {\n          notificationProp.hasInfo(statusMessages.onInfo);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'info',\n              ...statusMessages.onInfo,\n            }),\n          });\n        }\n      }\n      if (hasSuccess) {\n        if (notificationProp) {\n          notificationProp.hasSuccess(statusMessages.onSuccess);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'success',\n              ...statusMessages.onSuccess,\n            }),\n          });\n        }\n      }\n      if (hasWarning) {\n        if (notificationProp) {\n          notificationProp.hasWarning(statusMessages.onWarning);\n        } else {\n          dispatch({\n            ...addNotification({\n              variant: 'warning',\n              ...statusMessages.onWarning,\n            }),\n          });\n        }\n      }\n      return response;\n    } catch (err) {\n      if (notificationProp) {\n        notificationProp.err(statusMessages.onError, err);\n      } else {\n        dispatch({\n          ...addNotification({\n            variant: 'danger',\n            ...statusMessages.onError,\n            // Add error message from API, if present\n            description: err?.Title\n              ? `${statusMessages.onError.description}: ${err.Title}`\n              : statusMessages.onError.description,\n          }),\n        });\n      }\n      return err;\n    }\n  };\n\n  return fetchData();\n};\n\nexport default apiWithToast;\n"],"names":["TitleWithPopover","title","content","Popover","headerContent","bodyContent","Button","variant","className","propTypes","PropTypes","GreenbootStatus","status","color","GeneralInformation","props","AsyncComponent","appName","module","fallback","CmpLoader","numberOfRows","SystemCard","OperatingSystemCard","BiosCard","CollectionCard","InfrastructureCard","ImageInformationCard","React","InfrastructureCardWrapper","store","useStore","Suspense","ImageInformationCardWrapper","BiosCardWrapper","OperatingSystemCardWrapper","hasKernelModules","CollectionCardWrapper","extra","value","Tooltip","SystemCardWrapper","greenbootStatus","useSelector","systemProfileStore","systemProfile","greenboot_status","hasCPUs","hasSockets","hasCores","hasCPUFlags","hasRAM","hasSAP","writePermissions","permissionsReducer","ConfigurationCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","VulnerabilityTab","deviceData","setUpdateModal","imageId","setReload","deviceId","useParams","getRegistry","useContext","RegistryContext","useState","isOpen","cveCount","updateCveModal","setUpdateCveModal","CVEs","setCVEs","newImageStatus","setNewImageStatus","activeAlert","setActiveAlert","useEffect","prevState","params","id","q","ImageInfo","Image","ImageSetID","getImageSet","resp","data","Status","isLoading","meta","filter","length","UpdateTransactions","Device","UpdateAvailable","getActiveAlert","alerts","updateImage","Alert","isInline","actionLinks","isSmall","onClick","preState","imageBuilding","customIcon","updateDevice","systemUpdating","noAlert","customIntlProvider","entity","canSelect","canEditPairStatus","canManageColumns","linkToCustomerPortal","defaultColumns","filters","customAction","cve","UpdateImageModal","DeviceDetailTabs","activeTabKey","setActiveTabkey","Tabs","activeKey","onSelect","_event","tabIndex","Tab","eventKey","TabTitleText","T","Vulnerability","UpdateDeviceModal","useLoadModule","scope","history","useHistory","pathname","useLocation","groupId","setImageId","hasEntityFinishedLoading","entityDetails","imageData","setImageData","updateModal","isDeviceStatusLoading","setIsDeviceStatusLoading","reload","useApi","api","getInventory","query","uuid","fetchDeviceData","devices","deviceView","deviceViewStatus","updateAvailable","updateStatus","DispatcherStatus","lastSeen","LastSeen","deviceGroups","DeviceGroups","groupName","find","group","ID","toString","Name","deviceStatus","getDeviceStatus","insights","chrome","registerModule","hideGlobalFilter","appAction","display_name","getDevice","image_data","imageSetId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","register","inventoryId","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","to","paths","isActive","Skeleton","size","SkeletonSize","InventoryDetailHead","showDelete","actions","isDisabled","UpdatesAvailable","push","search","hideBack","hideInvDrawer","RetryUpdatePopover","device","position","fetchDevices","type","isLink","isLabel","Bullseye","Spinner","navigateBack","refreshTable","FAILURE","TIMEOUT","UNRESPONSIVE","popoverDescription","reason","date","children","isVisible","setIsVisible","dispatch","useDispatch","statusMessages","onSuccess","description","DeviceName","shouldOpen","shouldClose","alertseverityvariant","style","DispatcherReason","icon","headerComponent","footerContent","apiWithToast","updateSystem","DevicesUUID","DeviceUUID","defaultProps","CmpRows","i","key","statusMapper","booting","text","Icon","iconMapper","colorMapper","labelColor","building","created","upToDate","success","passed","updating","error","default","interrupted","unresponsive","errorWithExclamationCircle","isUpdateAvailable","dispatcherStatus","toolTipContent","Object","prototype","hasOwnProperty","call","Label","Split","SplitItem","textDecoration","cursor","tableReload","setData","setIsLoading","hasError","setHasError","apiFunc","setAPIFunc","hasSuccess","onError","fetchData","addNotification","notificationProp","hasInfo","onInfo","hasWarning","onWarning","response","err","Title"],"sourceRoot":""}