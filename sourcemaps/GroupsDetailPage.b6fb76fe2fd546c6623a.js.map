{"version":3,"sources":["webpack:///./src/components/DeviceDetail.js","webpack:///./src/store/deviceDetail.js","webpack:///./src/Routes/DeviceDetail/DeviceDetail.js","webpack:///./src/components/AvailableImagesTile.js","webpack:///./src/components/DeviceSummaryTile.js","webpack:///./src/components/Tiles.js","webpack:///./src/Routes/Devices/Devices.js","webpack:///./src/Routes/ImageManager/Images.js","webpack:///./src/Routes/ImageManagerDetail/constants.js","webpack:///./src/Routes/ImageManagerDetail/StatusLabel.js","webpack:///./src/Routes/ImageManagerDetail/DetailsHeader.js","webpack:///./src/Routes/ImageManagerDetail/ImageDetail.js","webpack:///./src/constants.js","webpack:///./src/store/action-types.js","webpack:///./src/api/index.js","webpack:///./src/store/actions.js","webpack:///./src/store/deviceSummary.js","webpack:///./src/store/images.js","webpack:///./src/store/imageStatus.js","webpack:///./src/store/groups.js","webpack:///./src/store/threshold.js","webpack:///./src/store/devicesInfo.js","webpack:///./src/store/canariesInfo.js","webpack:///./src/components/StatusIcon.js","webpack:///./src/components/SecureIcon.js","webpack:///./src/store/groupsDetail.js","webpack:///./src/store/groupDevicesInfo.js"],"names":["GeneralInformation","lazy","SystemCard","OperatingSystemCard","CollectionCard","writePermissions","useSelector","permissionsReducer","systemProfileStore","runningVersion","systemProfile","running_rpm_os_tree_version","stagedVersion","staged_rpm_os_tree_version","nonActiveVersion","non_active_rpm_os_tree_version","heathCheck","health_check","rhcHealth","rhc_health","Suspense","fallback","store","useStore","ConfigurationCardWrapper","SystemCardWrapper","props","hasSAP","OperatingSystemCardWrapper","hasKernelModules","extra","title","value","length","plural","singular","onClick","_e","handleClick","generalMapper","statusHelper","toUpperCase","Tooltip","content","className","CollectionCardWrapper","deviceDetail","applyReducerHash","LOAD_ENTITY_FULFILLED","state","loaded","activeApps","name","component","GeneralInformationTab","getRegistry","useContext","RegistryContext","useParams","inventoryId","uuid","displayName","entityDetails","entity","display_name","groupName","groupsDetailReducer","useEffect","insights","chrome","hideGlobalFilter","appAction","appObjectId","DetailWrapper","hideInvLink","showTags","onLoad","mergeWithDetail","register","PageHeader","Breadcrumb","ouiaId","BreadcrumbItem","Link","to","Skeleton","size","SkeletonSize","isActive","InventoryDetailHead","hideBack","hideInvDrawer","Main","Grid","gutter","GridItem","span","AppInfo","AvailableImageTileBase","children","Card","CardTitle","propTypes","PropTypes","imagesReducer","isLoading","undefined","hasError","data","shallowEqual","CardBody","Bullseye","Spinner","CardFooter","Button","isDisabled","variant","style","paddingLeft","meta","count","DeviceSummaryTileBase","orphaned","active","noReports","neverReported","Stack","StackItem","deviceSummaryReducer","Tiles","dispatch","useDispatch","registered","notifications","notificationsReducer","loadImages","loadDeviceSummary","Flex","FlexItem","AvailableImagesTile","defaultFilters","deviceStatus","label","titles","deviceStatusMapper","useState","getEntities","setGetEntities","activeFilters","setActiveFilters","inventory","useRef","history","useHistory","cleanEntities","Fragment","PageHeaderTitle","InventoryTable","ref","onRefresh","options","callback","current","onRefreshData","tableProps","canSelectAll","_i","config","filter","system_profile","host_type","fields","hideFilters","registeredWith","filterConfig","items","type","filterValues","onChange","event","activeFiltersConfig","isEmptyFilters","filters","constructActiveFilters","find","item","onDelete","itemsToRemove","isAll","onDeleteFilter","onRowClick","id","push","mergeWithEntities","api","columns","cellTransforms","cellWidth","compoundExpand","opened","setOpened","icon","DisconnectedIcon","headingLevel","Table","aria-label","onExpand","_rowIndex","_colIndex","isExpanded","rowData","imageId","ariaLabel","cells","rows","flatten","map","index","packagesNumber","request","customizations","packages","isOpen","some","oneOpen","paths","DateFormat","date","Date","created_at","distribution","image_requests","architecture","parent","compoundParent","packageName","key","colSpan","TableHeader","TableBody","composeStatus","statusIcons","unknown","success","failure","pending","building","uploading","registering","statusColors","StatusLabel","status","color","text","includes","charAt","slice","Label","imageStatusReducer","TextContent","TextList","TextListItem","T","loadImageStatus","hasGutter","Title","statusMapper","statusToIcon","done","CheckCircleIcon","successColor","error","ExclamationCircleIcon","dangerColor","PauseCircleIcon","updating","CircleNotchIcon","UnknownIcon","warning","ExclamationTriangleIcon","warningColor","notification","BellIcon","infoColor","Object","values","getLabel","entries","category","chipKey","chips","Array","isArray","currItem","deviceSummaryMapper","inventoryFields","LOAD_DEVICE_SUMMARY","LOAD_ACTIVE_IMAGES","LOAD_GROUPS","LOAD_GROUP_DETAIL","LOAD_TRESHOLD","LOAD_DEVICES_INFO","LOAD_CANARIES_INFO","LOAD_GROUP_DEVICES_INFO","LOAD_IMAGE_STATUS","asyncActions","flatMap","a","CLEAN_ENTITIES","keyBy","k","fetchActiveImages","limit","offset","instance","fetchDeviceSummary","client","HostsApi","Promise","all","apiHostGetHostList","query","generateFilter","then","resp","reduce","acc","curr","total","pagination","payload","rejected","description","groups","results","threshold","devicesInfo","canariesInfo","SecureIcon","isSecure","Icon","LockIcon","LockOpenIcon","defaultProps","devices"],"mappings":"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","file":"js/GroupsDetailPage.7d0ac0d301454759f96b.js","sourcesContent":["import React, { Suspense, lazy } from 'react';\nimport { useStore, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst GeneralInformation = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/GeneralInformation'\n  )\n);\n\nconst SystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/SystemCard'\n  )\n);\nconst OperatingSystemCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/OperatingSystemCard'\n  )\n);\n\nconst CollectionCard = lazy(() =>\n  import(\n    '@redhat-cloud-services/frontend-components-inventory-general-info/CollectionCard'\n  )\n);\n\nimport {\n  generalMapper,\n  statusHelper,\n} from '@redhat-cloud-services/frontend-components-inventory-general-info/dataMapper';\n\nconst GeneralInformationTab = () => {\n  const writePermissions = useSelector(\n    ({ permissionsReducer }) => permissionsReducer?.writePermissions\n  );\n\n  const {\n    runningVersion,\n    stagedVersion,\n    nonActiveVersion,\n    heathCheck,\n    rhcHealth,\n  } = useSelector(({ systemProfileStore }) => ({\n    runningVersion:\n      systemProfileStore?.systemProfile?.running_rpm_os_tree_version,\n    stagedVersion:\n      systemProfileStore?.systemProfile?.staged_rpm_os_tree_version,\n    nonActiveVersion:\n      systemProfileStore?.systemProfile?.non_active_rpm_os_tree_version || [],\n    heathCheck: systemProfileStore?.systemProfile?.health_check,\n    rhcHealth: systemProfileStore?.systemProfile?.rhc_health,\n  }));\n\n  return (\n    <Suspense fallback=\"\">\n      <GeneralInformation\n        store={useStore()}\n        writePermissions={writePermissions}\n        ConfigurationCardWrapper={false}\n        SystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <SystemCard {...props} hasSAP={false} />\n          </Suspense>\n        )}\n        OperatingSystemCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <OperatingSystemCard\n              {...props}\n              hasKernelModules={false}\n              extra={[\n                { title: 'Running rpm-ostree version', value: runningVersion },\n                {\n                  title: 'Staged rpm-ostree version',\n                  value: stagedVersion,\n                },\n                {\n                  title: 'Non-active (available rollback version(s))',\n                  value: nonActiveVersion?.length,\n                  plural: 'versions',\n                  singular: 'version',\n                  onClick: (_e, handleClick) =>\n                    handleClick(\n                      'Non-active (available rollback version(s))',\n                      generalMapper(nonActiveVersion || [], 'Version'),\n                      'small'\n                    ),\n                },\n                {\n                  title: 'Health check status',\n                  value: statusHelper[heathCheck?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n        CollectionCardWrapper={(props) => (\n          <Suspense fallback=\"\">\n            <CollectionCard\n              {...props}\n              extra={[\n                {\n                  title: 'RHC Health (broker functioning)',\n                  value: statusHelper[rhcHealth?.toUpperCase()] || (\n                    <Tooltip content=\"Unknown service status\">\n                      <OutlinedQuestionCircleIcon className=\"ins-c-inventory__detail--unknown\" />\n                    </Tooltip>\n                  ),\n                },\n              ]}\n            />\n          </Suspense>\n        )}\n      />\n    </Suspense>\n  );\n};\n\nexport default GeneralInformationTab;\n","import GeneralInformationTab from '../components/DeviceDetail';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst entityLoaded = (state) => {\n  return {\n    ...state,\n    loaded: true,\n    activeApps: [\n      {\n        title: 'General information',\n        name: 'general_information',\n        component: GeneralInformationTab,\n      },\n    ],\n  };\n};\n\nexport const deviceDetail = applyReducerHash({\n  LOAD_ENTITY_FULFILLED: entityLoaded,\n});\n","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport {\n  Skeleton,\n  SkeletonSize,\n} from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  InventoryDetailHead,\n  AppInfo,\n  DetailWrapper,\n} from '@redhat-cloud-services/frontend-components/Inventory';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { deviceDetail } from '../../store/deviceDetail';\nimport { RegistryContext } from '../../store';\nimport systemProfileStore from '@redhat-cloud-services/frontend-components-inventory-general-info/redux';\n\nconst DeviceDetail = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const { inventoryId, uuid } = useParams();\n  const displayName = useSelector(\n    ({ entityDetails }) => entityDetails?.entity?.display_name\n  );\n  const groupName = useSelector(\n    ({ groupsDetailReducer }) => groupsDetailReducer?.name\n  );\n\n  useEffect(() => {\n    insights.chrome?.hideGlobalFilter?.(true);\n    insights.chrome.appAction('system-detail');\n  }, []);\n\n  useEffect(() => {\n    insights?.chrome?.appObjectId?.(inventoryId);\n  }, [inventoryId]);\n\n  return (\n    <DetailWrapper\n      hideInvLink\n      showTags\n      onLoad={({ mergeWithDetail }) => {\n        getRegistry().register({\n          systemProfileStore,\n          ...mergeWithDetail(deviceDetail),\n        });\n      }}\n    >\n      <PageHeader>\n        <Breadcrumb ouiaId=\"systems-list\">\n          <BreadcrumbItem>\n            <Link to={uuid ? `/groups` : '/fleet-management'}>\n              {uuid ? 'Groups' : 'Fleet management'}\n            </Link>\n          </BreadcrumbItem>\n          {uuid && (\n            <BreadcrumbItem>\n              {groupName ? (\n                <Link to={`/groups/${uuid}`}>{groupName}</Link>\n              ) : (\n                <Skeleton size={SkeletonSize.xs} />\n              )}\n            </BreadcrumbItem>\n          )}\n          <BreadcrumbItem isActive>\n            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n              {displayName || <Skeleton size={SkeletonSize.xs} />}\n            </div>\n          </BreadcrumbItem>\n        </Breadcrumb>\n        <InventoryDetailHead fallback=\"\" hideBack showTags hideInvDrawer />\n      </PageHeader>\n      <Main className=\"edge-c-device--detail\">\n        <Grid gutter=\"md\">\n          <GridItem span={12}>\n            <AppInfo showTags fallback=\"\" />\n          </GridItem>\n        </Grid>\n      </Main>\n    </DetailWrapper>\n  );\n};\n\nexport default DeviceDetail;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  CardFooter,\n  Button,\n  Spinner,\n  Bullseye,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst AvailableImageTileBase = ({ children }) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Available images</CardTitle>\n    {children}\n  </Card>\n);\n\nAvailableImageTileBase.propTypes = {\n  children: PropTypes.children,\n};\n\nconst AvailableImageTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ imagesReducer }) => ({\n      isLoading:\n        imagesReducer?.isLoading !== undefined\n          ? imagesReducer?.isLoading\n          : true,\n      hasError: imagesReducer?.hasError || false,\n      data: imagesReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <AvailableImageTileBase>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </AvailableImageTileBase>\n    );\n  }\n  if (hasError) {\n    return (\n      <AvailableImageTileBase>\n        <CardBody>{data}</CardBody>\n        <CardFooter>\n          <Button isDisabled variant=\"primary\">\n            Create new image\n          </Button>\n        </CardFooter>\n      </AvailableImageTileBase>\n    );\n  }\n\n  return (\n    <AvailableImageTileBase>\n      <CardBody>\n        <Button variant=\"link\" style={{ paddingLeft: 0 }}>\n          {data.meta.count} images\n        </Button>\n      </CardBody>\n      <CardFooter>\n        <Button variant=\"primary\">Create new image</Button>\n      </CardFooter>\n    </AvailableImageTileBase>\n  );\n};\n\nexport default AvailableImageTile;\n","import React from 'react';\nimport {\n  Card,\n  CardTitle,\n  CardBody,\n  Button,\n  Bullseye,\n  Spinner,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DeviceSummaryTileBase = ({\n  orphaned,\n  active,\n  noReports,\n  neverReported,\n}) => (\n  <Card className=\"tiles-card\">\n    <CardTitle>Device summary information</CardTitle>\n    <CardBody>\n      <Stack>\n        <StackItem>\n          <Button variant=\"link\">{orphaned}</Button> orphaned devices\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{active}</Button> active devices\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{noReports}</Button> devices has not reported\n          in the last 6 months\n        </StackItem>\n        <StackItem>\n          <Button variant=\"link\">{neverReported}</Button> devices were\n          registered but never reported\n        </StackItem>\n      </Stack>\n    </CardBody>\n  </Card>\n);\n\nDeviceSummaryTileBase.propTypes = {\n  orphaned: PropTypes.number,\n  active: PropTypes.number,\n  noReports: PropTypes.number,\n  neverReported: PropTypes.number,\n};\n\nconst DeviceSummaryTile = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ deviceSummaryReducer }) => ({\n      isLoading:\n        deviceSummaryReducer?.isLoading !== undefined\n          ? deviceSummaryReducer?.isLoading\n          : true,\n      hasError: deviceSummaryReducer?.hasError || false,\n      data: deviceSummaryReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        </CardBody>\n      </Card>\n    );\n  }\n  if (hasError) {\n    return (\n      <Card className=\"tiles-card\">\n        <CardTitle>Device summary information</CardTitle>\n        <CardBody>{data}</CardBody>\n      </Card>\n    );\n  }\n  return (\n    <DeviceSummaryTileBase\n      orphaned={data['orphaned']}\n      active={data['active']}\n      noReports={data['noReports']}\n      neverReported={data['neverReported']}\n    />\n  );\n};\n\nexport default DeviceSummaryTile;\n","import React, { useEffect, useContext } from 'react';\nimport { Flex, FlexItem } from '@patternfly/react-core';\nimport AvailableImagesTile from './AvailableImagesTile';\nimport DeviceSummaryTile from './DeviceSummaryTile';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { imagesReducer, deviceSummaryReducer } from '../store/reducers';\nimport { useDispatch } from 'react-redux';\nimport { loadImages, loadDeviceSummary } from '../store/actions';\nimport { RegistryContext } from '../store';\n\nexport const Tiles = () => {\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n      deviceSummaryReducer,\n      notifications: notificationsReducer,\n    });\n    loadImages(dispatch);\n    loadDeviceSummary(dispatch);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Flex className=\"tiles\">\n      <FlexItem>\n        <AvailableImagesTile />\n      </FlexItem>\n      <FlexItem>\n        <DeviceSummaryTile />\n      </FlexItem>\n    </Flex>\n  );\n};\n","import React, {\n  Fragment,\n  useRef,\n  useEffect,\n  useContext,\n  useState,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { useHistory } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { cleanEntities } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport {\n  isEmptyFilters,\n  constructActiveFilters,\n  onDeleteFilter,\n} from '../../constants';\nimport { Tiles } from '../../components/Tiles';\n\nconst defaultFilters = {\n  deviceStatus: {\n    label: 'Device status',\n    value: [],\n    titles: [],\n  },\n};\n\nconst deviceStatusMapper = [\n  {\n    value: 'approval',\n    label: 'Required approval',\n  },\n  {\n    value: 'ophaned',\n    label: 'Orphaned',\n  },\n  {\n    value: 'delivering',\n    label: 'On the way',\n  },\n];\n\nconst Devices = () => {\n  const [getEntities, setGetEntities] = useState();\n  const [activeFilters, setActiveFilters] = useState(defaultFilters);\n  const { getRegistry } = useContext(RegistryContext);\n  const inventory = useRef(null);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const onRefresh = (options, callback) => {\n    if (!callback && inventory && inventory.current) {\n      inventory.current.onRefreshData(options);\n    } else if (callback) {\n      callback(options);\n    }\n  };\n\n  useEffect(() => {\n    return () => dispatch(cleanEntities());\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Fleet management\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        <Tiles />\n        <InventoryTable\n          ref={inventory}\n          onRefresh={onRefresh}\n          tableProps={{\n            canSelectAll: false,\n          }}\n          getEntities={async (_i, config) => {\n            const data = await getEntities(undefined, {\n              ...config,\n              filter: {\n                ...config.filter,\n                system_profile: {\n                  ...config.filter?.system_profile,\n                  host_type: 'edge',\n                },\n                fields: {\n                  ...config?.fields,\n                  system_profile: [\n                    ...(config?.fields?.system_profile || []),\n                    'host_type',\n                  ],\n                },\n              },\n            });\n            return data;\n          }}\n          hideFilters={{ registeredWith: true }}\n          filterConfig={{\n            items: [\n              {\n                label: activeFilters?.deviceStatus?.label,\n                type: 'checkbox',\n                filterValues: {\n                  onChange: (event, value) => {\n                    setActiveFilters(() => ({\n                      ...(activeFilters || {}),\n                      deviceStatus: {\n                        ...(activeFilters?.deviceStatus || {}),\n                        value,\n                      },\n                    }));\n                    inventory.current.onRefreshData();\n                  },\n                  items: deviceStatusMapper,\n                  value: activeFilters?.deviceStatus?.value || [],\n                },\n              },\n            ],\n          }}\n          activeFiltersConfig={{\n            ...(isEmptyFilters(activeFilters) && {\n              filters: constructActiveFilters(\n                activeFilters,\n                (value) =>\n                  deviceStatusMapper.find((item) => item.value === value)?.label\n              ),\n            }),\n            onDelete: (event, itemsToRemove, isAll) => {\n              if (isAll) {\n                setActiveFilters(defaultFilters);\n              } else {\n                setActiveFilters(() =>\n                  onDeleteFilter(activeFilters, itemsToRemove)\n                );\n              }\n              inventory.current.onRefreshData();\n            },\n          }}\n          onRowClick={(_e, id) => history.push(`/devices/${id}`)}\n          onLoad={({ mergeWithEntities, api }) => {\n            setGetEntities(() => api?.getEntities);\n            getRegistry()?.register?.({\n              ...mergeWithEntities(),\n            });\n          }}\n        />\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default Devices;\n","import React, { Fragment, useContext, useEffect, useState } from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { loadImages } from '../../store/actions';\nimport { RegistryContext } from '../../store';\nimport { imagesReducer } from '../../store/reducers';\nimport { DateFormat } from '@redhat-cloud-services/frontend-components';\nimport {\n  Bullseye,\n  Spinner,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n  LabelGroup,\n  Label,\n} from '@patternfly/react-core';\nimport { DisconnectedIcon } from '@patternfly/react-icons';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  compoundExpand,\n  cellWidth,\n} from '@patternfly/react-table';\nimport flatten from 'lodash/flatten';\nimport { Link } from 'react-router-dom';\nimport { routes as paths } from '../../../package.json';\n\nconst columns = [\n  {\n    title: 'UUID',\n    cellTransforms: [cellWidth(25)],\n  },\n  'Created',\n  {\n    title: 'Packages',\n    cellTransforms: [compoundExpand],\n  },\n  'Distrubution',\n  'Architecture',\n];\n\nconst Images = () => {\n  const [opened, setOpened] = useState([]);\n  const dispatch = useDispatch();\n  const { getRegistry } = useContext(RegistryContext);\n  const { isLoading, hasError, data } = useSelector(\n    ({ imagesReducer }) => ({\n      isLoading:\n        imagesReducer?.isLoading !== undefined\n          ? imagesReducer?.isLoading\n          : true,\n      hasError: imagesReducer?.hasError || false,\n      data: imagesReducer?.data || null,\n    }),\n    shallowEqual\n  );\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imagesReducer,\n    });\n    loadImages(dispatch);\n    return () => registered();\n  }, []);\n\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <PageHeaderTitle title=\"Manage images\" />\n      </PageHeader>\n      <Main className=\"edge-devices\">\n        {!isLoading ? (\n          hasError ? (\n            <EmptyState>\n              <EmptyStateIcon icon={DisconnectedIcon} />\n              <Title headingLevel=\"h4\" size=\"lg\">\n                Error!\n              </Title>\n              <EmptyStateBody>\n                There was an error while loading images list!\n              </EmptyStateBody>\n            </EmptyState>\n          ) : (\n            <Table\n              aria-label=\"Manage Images table\"\n              onExpand={(_e, _rowIndex, _colIndex, isExpanded, rowData) => {\n                const imageId = rowData.id;\n                setOpened(\n                  isExpanded\n                    ? opened.filter((item) => item !== imageId)\n                    : [...opened, imageId]\n                );\n              }}\n              ariaLabel=\"Images table\"\n              cells={columns}\n              rows={flatten(\n                data.data.map((item, index) => {\n                  const packagesNumber =\n                    item?.request?.customizations?.packages?.length || 0;\n                  // if there are no packages - disable the option to expand row.\n                  const isOpen =\n                    packagesNumber > 0\n                      ? opened.some((oneOpen) => oneOpen === item.id)\n                      : undefined;\n                  return [\n                    {\n                      id: item.id,\n                      isOpen,\n                      cells: [\n                        {\n                          title: (\n                            <Link to={`${paths['manage-images']}/${item.id}`}>\n                              {item.id}\n                            </Link>\n                          ),\n                        },\n                        {\n                          title: (\n                            <DateFormat date={new Date(item.created_at)} />\n                          ),\n                        },\n                        {\n                          title: packagesNumber,\n                          props: {\n                            isOpen,\n                            // to align text with other rows that are expandable use this class\n                            className:\n                              packagesNumber === 0 ? 'force-padding-left' : '',\n                          },\n                        },\n                        item?.request?.distribution,\n                        item?.request?.image_requests?.[0]?.architecture,\n                      ],\n                    },\n                    {\n                      parent: 2 * index,\n                      compoundParent: 2,\n                      cells: [\n                        {\n                          title:\n                            packagesNumber > 0 ? (\n                              <LabelGroup>\n                                {item.request.customizations.packages.map(\n                                  (packageName) => (\n                                    <Label key={packageName}>\n                                      {packageName}\n                                    </Label>\n                                  )\n                                )}\n                              </LabelGroup>\n                            ) : undefined,\n                          props: {\n                            colSpan: 6,\n                            className: 'packages-compound-expand',\n                          },\n                        },\n                      ],\n                    },\n                  ];\n                })\n              )}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n          )\n        ) : (\n          <Bullseye>\n            <Spinner />\n          </Bullseye>\n        )}\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default Images;\n","import React from 'react';\nimport CheckCircleIcon from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport PendingIcon from '@patternfly/react-icons/dist/js/icons/pending-icon';\nimport TimesCircleIcon from '@patternfly/react-icons/dist/js/icons/times-circle-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/js/icons/question-circle-icon';\n\nexport const composeStatus = [\n  'success',\n  'failure',\n  'pending',\n  'building',\n  'uploading',\n  'registering',\n];\n\nexport const statusIcons = {\n  unknown: <QuestionCircleIcon />,\n  success: <CheckCircleIcon />,\n  failure: <TimesCircleIcon />,\n  pending: <PendingIcon />,\n  building: <PendingIcon />,\n  uploading: <PendingIcon />,\n  registering: <PendingIcon />,\n};\n\nexport const statusColors = {\n  unknown: 'grey',\n  success: 'green',\n  failure: 'red',\n  pending: 'cyan',\n  building: 'cyan',\n  uploading: 'cyan',\n  registering: 'cyan',\n};\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport PropTypes from 'prop-types';\nimport { composeStatus, statusIcons, statusColors } from './constants';\n\nconst StatusLabel = ({ status }) => {\n  let icon = statusIcons['unknown'];\n  let color = statusColors['unknown'];\n  let text = 'Unknown';\n  if (composeStatus.includes(status)) {\n    icon = statusIcons[status];\n    color = statusColors[status];\n    text = status.charAt(0).toUpperCase() + status.slice(1);\n  }\n  return (\n    <Label color={color} icon={icon}>\n      {text}\n    </Label>\n  );\n};\n\nStatusLabel.propTypes = {\n  status: PropTypes.oneOf(composeStatus),\n};\n\nexport default StatusLabel;\n","import React from 'react';\nimport {\n  TextList,\n  TextListItem,\n  TextContent,\n  Skeleton,\n} from '@patternfly/react-core';\nimport StatusLabel from './StatusLabel';\nimport { useSelector, shallowEqual } from 'react-redux';\n\nconst DetailsHead = () => {\n  const { isLoading, hasError, data } = useSelector(\n    ({ imageStatusReducer }) => ({\n      isLoading:\n        imageStatusReducer?.isLoading !== undefined\n          ? imageStatusReducer?.isLoading\n          : true,\n      hasError: imageStatusReducer?.hasError || false,\n      data: imageStatusReducer?.data || null,\n    }),\n    shallowEqual\n  );\n\n  const status = !isLoading && !hasError ? data.status : null;\n\n  return (\n    <TextContent>\n      <TextList component=\"dl\">\n        <TextListItem component=\"dt\" className=\"grid-align-center\">\n          Status\n        </TextListItem>\n        <TextListItem component=\"dd\">\n          {isLoading ? <Skeleton /> : <StatusLabel status={status} />}\n        </TextListItem>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport default DetailsHead;\n","import React, { Fragment, useContext, useEffect } from 'react';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Link, useParams } from 'react-router-dom';\nimport {\n  Stack,\n  StackItem,\n  Breadcrumb,\n  BreadcrumbItem,\n  Title,\n} from '@patternfly/react-core';\nimport { routes as paths } from '../../../package.json';\nimport { useDispatch } from 'react-redux';\nimport { RegistryContext } from '../../store';\nimport { loadImageStatus } from '../../store/actions';\nimport { imageStatusReducer, imagesReducer } from '../../store/reducers';\nimport DetailsHead from './DetailsHeader';\n\nconst ImageDetail = () => {\n  const { imageId } = useParams();\n  const { getRegistry } = useContext(RegistryContext);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const registered = getRegistry().register({\n      imageStatusReducer,\n      imagesReducer,\n    });\n    loadImageStatus(dispatch, imageId);\n    return () => registered();\n  }, [dispatch]);\n  return (\n    <Fragment>\n      <PageHeader className=\"pf-m-light\">\n        <Breadcrumb>\n          <BreadcrumbItem>\n            <Link to={paths['manage-images']}>Manged images</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem isActive>{imageId}</BreadcrumbItem>\n        </Breadcrumb>\n        <Stack hasGutter>\n          <StackItem>\n            <Title headingLevel=\"h1\" size=\"2xl\">\n              {imageId}\n            </Title>\n          </StackItem>\n          <StackItem>\n            <DetailsHead />\n          </StackItem>\n        </Stack>\n      </PageHeader>\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n","import {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  ExclamationTriangleIcon,\n  BellIcon,\n  PauseCircleIcon,\n  CircleNotchIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\n\nimport dangerColor from '@patternfly/react-tokens/dist/esm/global_danger_color_100';\nimport warningColor from '@patternfly/react-tokens/dist/esm/global_warning_color_100';\nimport successColor from '@patternfly/react-tokens/dist/esm/global_success_color_100';\nimport infoColor from '@patternfly/react-tokens/dist/esm/global_info_color_100';\n\nexport const statusMapper = [\n  'done',\n  'error',\n  'pending',\n  'unknown',\n  'updating',\n  'warning',\n  'notification',\n];\n\nexport const statusToIcon = {\n  done: {\n    icon: CheckCircleIcon,\n    color: successColor.value,\n    title: 'Fully adopted',\n  },\n  error: {\n    icon: ExclamationCircleIcon,\n    color: dangerColor.value,\n    title: 'Error while adopting',\n  },\n  pending: { icon: PauseCircleIcon, title: 'Pending adoption' },\n  updating: { icon: CircleNotchIcon, title: 'Updating' },\n  unknown: { icon: UnknownIcon, title: 'Unknown state' },\n  warning: {\n    icon: ExclamationTriangleIcon,\n    color: warningColor.value,\n    title: 'Warning while adopting',\n  },\n  notification: {\n    icon: BellIcon,\n    color: infoColor.value,\n    title: 'Delivering',\n  },\n};\n\nexport const isEmptyFilters = (activeFilters) =>\n  Object.values(activeFilters).find(\n    (item) => item?.value?.length > 0 || item?.length > 0\n  );\n\nexport const constructActiveFilters = (activeFilters, getLabel) =>\n  Object.entries(activeFilters).map(([key, { label, value } = {}]) => ({\n    category: label,\n    chipKey: key,\n    chips:\n      value?.length > 0\n        ? Array.isArray(value)\n          ? value.map((item) => ({\n              name: getLabel?.(item) || item,\n              value: item,\n            }))\n          : [\n              {\n                name: getLabel?.(value) || value,\n                value,\n              },\n            ]\n        : [],\n  }));\n\nexport const onDeleteFilter = (activeFilters, itemsToRemove) => {\n  const currItem = itemsToRemove[0];\n  return {\n    ...activeFilters,\n    [currItem?.chipKey]: {\n      ...(activeFilters[currItem?.chipKey] || {}),\n      value: Array.isArray(activeFilters[currItem?.chipKey]?.value)\n        ? activeFilters[currItem?.chipKey]?.value?.filter(\n            (item) => !currItem?.chips?.find(({ value }) => value === item)\n          )\n        : '',\n    },\n  };\n};\n\nexport const deviceSummaryMapper = [\n  'active',\n  'noReports',\n  'neverReported',\n  'orphaned',\n];\n\nexport const inventoryFields = {\n  system_profile: { host_type: 'edge' },\n};\n","import keyBy from 'lodash/keyBy';\nimport flatMap from 'lodash/flatMap';\n\nexport const LOAD_DEVICE_SUMMARY = 'LOAD_DEVICE_SUMMARY';\nexport const LOAD_ACTIVE_IMAGES = 'LOAD_ACTIVE_IMAGES';\nexport const LOAD_GROUPS = 'LOAD_GROUPS';\nexport const LOAD_GROUP_DETAIL = 'LOAD_GROUP_DETAIL';\nexport const LOAD_TRESHOLD = 'LOAD_TRESHOLD';\nexport const LOAD_DEVICES_INFO = 'LOAD_DEVICES_INFO';\nexport const LOAD_CANARIES_INFO = 'LOAD_CANARIES_INFO';\nexport const LOAD_GROUP_DEVICES_INFO = 'LOAD_GROUP_DEVICES_INFO';\nexport const LOAD_IMAGE_STATUS = 'LOAD_IMAGE_STATUS';\n\nconst asyncActions = flatMap(\n  [\n    LOAD_ACTIVE_IMAGES,\n    LOAD_GROUPS,\n    LOAD_GROUP_DETAIL,\n    LOAD_TRESHOLD,\n    LOAD_DEVICES_INFO,\n    LOAD_CANARIES_INFO,\n    LOAD_GROUP_DEVICES_INFO,\n    LOAD_IMAGE_STATUS,\n  ],\n  (a) => [a, `${a}_PENDING`, `${a}_FULFILLED`, `${a}_REJECTED`]\n);\nexport const ACTION_TYPES = keyBy(asyncActions, (k) => k);\n\nexport const SELECT_ENTITY = 'SELECT_ENTITY';\nexport const PRE_SELECT_ENTITY = 'PRE_SELECT_ENTITY';\nexport const CLEAN_ENTITIES = 'CLEAN_ENTITIES';\n","import {\n  statusMapper,\n  deviceSummaryMapper,\n  inventoryFields,\n} from '../constants';\nimport { instance } from '@redhat-cloud-services/frontend-components-utilities/interceptors/interceptors';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { generateFilter } from '@redhat-cloud-services/frontend-components-utilities/helpers';\n\nconst randomNumber = (min, max) =>\n  Math.round(Math.random() * (max - min) + min);\nconst randomString = () => Math.random().toString(36).substr(2, 10);\n// const randomBool = () => Boolean(Math.round(Math.random() * 10) % 2);\nconst randomDate = (offset = 10000000000) =>\n  new Date(+new Date() - Math.floor(Math.random() * offset));\n\nconst randomUUID = () =>\n  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n\nconst randomStatus = () =>\n  statusMapper[randomNumber(0, statusMapper.length - 1)];\n\nconst rowGroupCreator = (uuid, name, sensors, isSecure, lastSeen) => ({\n  uuid,\n  name,\n  sensors,\n  is_secure: isSecure,\n  last_seen: lastSeen,\n  status: randomStatus(),\n});\n\nconst rowGroupDetailCreator = (uuid, version, status) => {\n  return {\n    uuid,\n    version,\n    status,\n  };\n};\n\nconst groups = [];\n\nexport const fetchGroups = ({ perPage, page }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  return insights.chrome.auth.getUser().then(() => ({\n    results: groups,\n    meta: {\n      count: groups.length,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  }));\n};\n\nexport const threshold = () => {\n  const sections = randomNumber(2, 5);\n  let rest = 100;\n  return Promise.resolve({\n    results: [...new Array(sections)].map(() => {\n      const currPercent = randomNumber(0, rest);\n      rest = rest - currPercent;\n      return {\n        [randomString()]: currPercent,\n      };\n    }),\n  });\n};\n\nexport const devicesInfo = (devicesCount) => {\n  return Promise.resolve({\n    results: {\n      requiredApproval: devicesCount || 0,\n      orphaned: 0,\n      delivering: 0,\n    },\n  });\n};\n\nexport const canariesInfo = () => {\n  const canaries = randomNumber(0, 100);\n  return Promise.resolve({\n    results: [...new Array(canaries)].map(() => ({\n      group: {\n        name: randomString(),\n        uuid: randomUUID(),\n      },\n      date: randomDate(),\n      status: randomStatus(),\n    })),\n  });\n};\n\nexport const groupsDetail = (uuid, { page, perPage }) => {\n  const currPage = page || 1;\n  const currPerPage = perPage || 20;\n  const status = randomStatus();\n  const group = groups.find(({ uuid: groupUUID }) => uuid === groupUUID);\n  return Promise.resolve({\n    uuid,\n    name: group?.name || randomString(),\n    results: group?.sensors?.map((uuid) =>\n      rowGroupDetailCreator(\n        uuid,\n        `${randomNumber(0, 10)}.${randomNumber(0, 10)}`,\n        status\n      )\n    ),\n    meta: {\n      count: group?.sensors?.length || 0,\n      limit: currPerPage * currPage,\n      offset: currPerPage * (currPage - 1),\n    },\n  });\n};\n\nexport const groupDevicesInfo = (uuid) => {\n  return Promise.resolve({\n    uuid,\n    total: 200,\n    newDevices: randomNumber(0, 50),\n    offlineDevices: randomNumber(0, 50),\n    deliveringDevices: randomNumber(0, 50),\n  });\n};\n\nexport const createNewGroup = ({ groupName, isSecure, systemIDs }) => {\n  groups.push(\n    rowGroupCreator(randomUUID(), groupName, systemIDs, isSecure, new Date())\n  );\n  return Promise.resolve();\n};\n\nexport const updateGroup = ({ uuid, systemIDs, groupName }) => {\n  const group = groups.find(({ uuid: groupUUID }) => groupUUID === uuid);\n  if (group) {\n    group.sensors = systemIDs;\n  } else {\n    groups.push(rowGroupCreator(uuid, groupName, systemIDs, false, new Date()));\n  }\n  return Promise.resolve();\n};\n\nexport const fetchActiveImages = ({ limit = 100, offset = 0 } = {}) => {\n  return instance.get(\n    `/api/image-builder/v1/composes?limit=${limit}&offset=${offset}`\n  );\n};\n\nexport const fetchImageStatus = ({ id }) => {\n  return instance.get(`/api/image-builder/v1/composes/${id}`);\n};\n\nexport const fetchDeviceSummary = async () => {\n  const client = new HostsApi(undefined, '/api/inventory/v1/', instance);\n  return await Promise.all([\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['fresh'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['stale_warning'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n    client.apiHostGetHostList(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      ['unknown'],\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      {\n        query: {\n          ...generateFilter(inventoryFields),\n          ...generateFilter({ system_profile: ['host_type'] }, 'fields'),\n        },\n      }\n    ),\n  ]).then((resp) => {\n    return resp.reduce((acc, curr, index) => {\n      return { ...acc, [deviceSummaryMapper[index]]: curr.total };\n    }, {});\n  });\n};\n","import {\n  LOAD_GROUPS,\n  LOAD_TRESHOLD,\n  LOAD_DEVICES_INFO,\n  LOAD_CANARIES_INFO,\n  LOAD_GROUP_DETAIL,\n  LOAD_GROUP_DEVICES_INFO,\n  SELECT_ENTITY,\n  PRE_SELECT_ENTITY,\n  CLEAN_ENTITIES,\n  LOAD_ACTIVE_IMAGES,\n  LOAD_DEVICE_SUMMARY,\n  LOAD_IMAGE_STATUS,\n} from './action-types';\nimport {\n  fetchGroups,\n  threshold,\n  devicesInfo,\n  canariesInfo,\n  groupsDetail,\n  groupDevicesInfo,\n  fetchActiveImages,\n  fetchDeviceSummary,\n  fetchImageStatus,\n} from '../api';\n\nexport const loadGroups = (perPage = 50, page = 1) => ({\n  type: LOAD_GROUPS,\n  payload: fetchGroups({ perPage, page }),\n});\n\nexport const loadThreshold = () => ({\n  type: LOAD_TRESHOLD,\n  payload: threshold(),\n});\n\nexport const loadDevicesInfo = (systemsCount) => ({\n  type: LOAD_DEVICES_INFO,\n  payload: devicesInfo(systemsCount),\n});\n\nexport const loadCanariesInfo = () => ({\n  type: LOAD_CANARIES_INFO,\n  payload: canariesInfo(),\n});\n\nexport const loadGroupsDetail = (uuid, page, perPage) => ({\n  type: LOAD_GROUP_DETAIL,\n  payload: groupsDetail(uuid, { page, perPage }),\n});\n\nexport const loadGroupDevicesInfo = (uuid) => ({\n  type: LOAD_GROUP_DEVICES_INFO,\n  payload: groupDevicesInfo(uuid),\n});\n\nexport const selectEntity = (id, selected) => ({\n  type: SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const preSelectEntity = (id, selected) => ({\n  type: PRE_SELECT_ENTITY,\n  payload: {\n    id,\n    selected,\n  },\n});\n\nexport const cleanEntities = () => ({\n  type: CLEAN_ENTITIES,\n});\n\nexport const loadImages = (dispatch, pagination) => {\n  dispatch({\n    type: LOAD_ACTIVE_IMAGES,\n    payload: fetchActiveImages(pagination),\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show images data',\n          description: 'Failed receiving images from image-builder',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadDeviceSummary = (dispatch) => {\n  dispatch({\n    type: LOAD_DEVICE_SUMMARY,\n    payload: fetchDeviceSummary,\n    meta: {\n      notifications: {\n        rejected: {\n          variant: 'danger',\n          title: 'Can not show device summary data',\n          description: 'Failed receiving device summary data from inventory',\n        },\n      },\n    },\n    // the '.catch' part is necessary because redux-promise-middleware throws the error on REJECTED\n    // and to avoid the app exploding I need to catch it here.\n    // THANK you redux-promise-middleware for not allowing to customize this behavior. 😠\n  }).catch(() => null);\n};\n\nexport const loadImageStatus = (dispatch, imageId) => {\n  dispatch({\n    type: LOAD_IMAGE_STATUS,\n    payload: fetchImageStatus(imageId),\n  }).catch(() => null);\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICE_SUMMARY } from './action-types';\n\nconst initialState = {};\n\nconst loadDeviceSummaryPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadDeviceSummaryFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadDeviceSummaryRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No device summary data to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICE_SUMMARY}_PENDING`]: loadDeviceSummaryPending,\n    [`${LOAD_DEVICE_SUMMARY}_FULFILLED`]: loadDeviceSummaryFulfilled,\n    [`${LOAD_DEVICE_SUMMARY}_REJECTED`]: loadDeviceSummaryRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_ACTIVE_IMAGES } from './action-types';\n\nconst initialState = {};\n\nconst loadActiveImagesPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadActiveImagesFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadActiveImagesRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No images to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_ACTIVE_IMAGES}_PENDING`]: loadActiveImagesPending,\n    [`${LOAD_ACTIVE_IMAGES}_FULFILLED`]: loadActiveImagesFulfilled,\n    [`${LOAD_ACTIVE_IMAGES}_REJECTED`]: loadActiveImagesRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_IMAGE_STATUS } from './action-types';\n\nconst initialState = {};\n\nconst loadImageStatusPending = () => ({\n  isLoading: true,\n  hasError: false,\n  data: null,\n});\n\nconst loadImageStatusFulfilled = (state, { payload }) => {\n  return {\n    ...state,\n    isLoading: false,\n    hasError: false,\n    data: payload,\n  };\n};\n\nconst loadImageStatusRejected = () => ({\n  isLoading: false,\n  hasError: true,\n  data: 'No image status to view',\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_IMAGE_STATUS}_PENDING`]: loadImageStatusPending,\n    [`${LOAD_IMAGE_STATUS}_FULFILLED`]: loadImageStatusFulfilled,\n    [`${LOAD_IMAGE_STATUS}_REJECTED`]: loadImageStatusRejected,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUPS } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  groups: [],\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  groups: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUPS}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUPS}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_TRESHOLD } from './action-types';\n\nconst initialState = {};\n\nconst loadThresholdPending = (state) => ({\n  ...state,\n  threshold: {},\n  isLoading: true,\n});\nconst loadThresholdFulfilled = (state, { payload }) => ({\n  ...state,\n  threshold: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_TRESHOLD}_PENDING`]: loadThresholdPending,\n    [`${LOAD_TRESHOLD}_FULFILLED`]: loadThresholdFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload?.results || {},\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_DEVICES_INFO}_PENDING`]: loadDevicesInfoPending,\n    [`${LOAD_DEVICES_INFO}_FULFILLED`]: loadDevicesInfoFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_CANARIES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadCanariesInfoPending = (state) => ({\n  ...state,\n  canariesInfo: [],\n  isLoading: true,\n});\nconst loadCanariesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  canariesInfo: payload?.results || [],\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_CANARIES_INFO}_PENDING`]: loadCanariesInfoPending,\n    [`${LOAD_CANARIES_INFO}_FULFILLED`]: loadCanariesInfoFulfilled,\n  },\n  initialState\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { statusToIcon, statusMapper } from '../constants';\nimport { UnknownIcon } from '@patternfly/react-icons';\nimport { Tooltip } from '@patternfly/react-core';\n\nconst StatusIcon = ({ status, ...props }) => {\n  const Icon = statusToIcon?.[status]?.icon || UnknownIcon;\n  return (\n    <Tooltip content={statusToIcon?.[status]?.title}>\n      <Icon {...props} color={statusToIcon?.[status]?.color} />\n    </Tooltip>\n  );\n};\n\nStatusIcon.propTypes = {\n  status: PropTypes.oneOf(statusMapper),\n};\n\nexport default StatusIcon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LockIcon, LockOpenIcon } from '@patternfly/react-icons';\n\nconst SecureIcon = ({ isSecure, ...props }) => {\n  const Icon = isSecure ? LockIcon : LockOpenIcon;\n  return <Icon {...props} />;\n};\n\nSecureIcon.propTypes = {\n  isSecure: PropTypes.bool,\n};\n\nSecureIcon.defaultProps = {\n  isSecure: false,\n};\n\nexport default SecureIcon;\n","import React from 'react';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DETAIL, CLEAN_ENTITIES } from './action-types';\nimport { StatusIcon } from '../components';\n\nconst initialState = {};\n\nconst loadGroupsPending = (state) => ({\n  ...state,\n  isLoading: true,\n});\nconst loadGroupsFulfilled = (state, { payload }) => ({\n  ...state,\n  isLoading: false,\n  name: payload?.name || '',\n  uuid: payload?.uuid || '',\n  devices: payload?.results || [],\n  meta: payload?.meta || {},\n});\n\nconst onEntitiesLoaded = (state) => {\n  const [name, updated] =\n    state?.columns?.filter(\n      ({ key }) => key === 'display_name' || key === 'updated'\n    ) || [];\n  return {\n    ...state,\n    columns: [\n      name,\n      { key: 'version', title: 'Version' },\n      updated,\n      {\n        key: 'status',\n        title: 'Status',\n        // eslint-disable-next-line react/display-name\n        renderFunc: (status) => <StatusIcon status={status} />,\n      },\n    ].filter(Boolean),\n    loaded: true,\n  };\n};\n\nexport const systemsList = ({ LOAD_ENTITIES_FULFILLED }) =>\n  applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: onEntitiesLoaded,\n    [CLEAN_ENTITIES]: () => ({ loaded: false }),\n  });\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DETAIL}_PENDING`]: loadGroupsPending,\n    [`${LOAD_GROUP_DETAIL}_FULFILLED`]: loadGroupsFulfilled,\n  },\n  initialState\n);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { LOAD_GROUP_DEVICES_INFO } from './action-types';\n\nconst initialState = {};\n\nconst loadGroupDevicesInfoPending = (state) => ({\n  ...state,\n  devicesInfo: {},\n  isLoading: true,\n});\nconst loadGroupDevicesInfoFulfilled = (state, { payload }) => ({\n  ...state,\n  devicesInfo: payload,\n  isLoading: false,\n});\n\nexport default applyReducerHash(\n  {\n    [`${LOAD_GROUP_DEVICES_INFO}_PENDING`]: loadGroupDevicesInfoPending,\n    [`${LOAD_GROUP_DEVICES_INFO}_FULFILLED`]: loadGroupDevicesInfoFulfilled,\n  },\n  initialState\n);\n"],"sourceRoot":""}